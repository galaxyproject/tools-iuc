<tool_dependency>
    <package name="atlas" version="3.11.11">
        <install version="1.0">
            <actions>
                <!-- first action is always downloading -->
                <action type="download_by_url" target_filename="ATLAS.tar.bz2">https://downloads.sourceforge.net/project/math-atlas/Developer%20%28unstable%29/3.11.11/atlas3.11.11.tar.bz2</action>

                <action type="download_file">http://www.netlib.org/lapack/lapack-3.4.2.tgz</action>

                <action type="shell_command">
                # try to disable cpu throttling
                if hash cpufreq-selector 2>/dev/null; then
                    cpufreq-selector -g performance
                elif hash cpupower 2>/dev/null; then
                    cpupower frequency-set -g performance
                else
                    echo 'Please deactivate CPU throttling by your own, or install cpufreq-selector'
                    exit
                fi
                </action>
                <action type="shell_command">
                    mkdir build &amp;&amp;
                    cd build &amp;&amp;
                    mkdir $INSTALL_DIR/atlas/ &amp;&amp;
                    ../configure -Fa alg -fPIC --prefix=$INSTALL_DIR/atlas/ --with-netlib-lapack-tarfile=../lapack-3.4.2.tgz
                </action>
                <action type="shell_command">cd ./build &amp;&amp; make </action>
                <action type="shell_command">cd ./build &amp;&amp; make install</action>

                <action type="set_environment">
                    <environment_variable name="ATLAS_LIB_DIR" action="set_to">$INSTALL_DIR/atlas/lib</environment_variable>
                    <environment_variable name="ATLAS_INCLUDE_DIR" action="set_to">$INSTALL_DIR/atlas/include</environment_variable>
                </action>
            </actions>
        </install>
        <readme>ATLAS_LIB_DIR and ATLAS_INCLUDE_DIR (including libatlas.a) will be exported for later use.
        During ATLAS library compilation, ATLAS performs code efficiency checks. These checks can only provide optimal results, if "frequency scaling" is disabled on the CPU, and no other load-intense processes are running.
        Ideally, you should compile on an empty cluster node with CPU frequency scaling disabled (see "cpufreq-selector" or "cpufreq-set").
        </readme>
    </package>
</tool_dependency>
