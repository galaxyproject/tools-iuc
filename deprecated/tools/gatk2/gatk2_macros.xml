<macros>
  <xml name="requirements">
    <requirements>
      <requirement type="package">gatk2</requirement>
      <requirement type="package" version="0.1.19">samtools</requirement>
      <requirement type="package" version="1.56.0">picard</requirement>
      <requirement type="set_environment">GATK2_PATH</requirement>
      <requirement type="set_environment">GATK2_SITE_OPTIONS</requirement>
      <yield />
    </requirements>
  </xml>
  <xml name="version_command">
    <version_command>java -jar "$GATK2_PATH/GenomeAnalysisTK.jar" --help|grep '^The Genome'</version_command>
  </xml>
  <token name="@THREADS@">
    --num_threads \${GALAXY_SLOTS:-4}
  </token>
  <token name="@VERSION@">2.8</token>
  <token name="@JAR_PATH@">
    java -jar "\$GATK2_PATH/GenomeAnalysisTK.jar"
  </token>
  <token name="@DBSNP_OPTIONS@">
    #if $dbsnp_rod_bind_type.dbsnp_rod_bind_type_selector == 'set_dbsnp'
        -d "--dbsnp:${dbsnp_rod_bind_type.dbsnp_rod_name},%(file_type)s" "${dbsnp_rod_bind_type.dbsnp_input_rod}" "${dbsnp_rod_bind_type.dbsnp_input_rod.ext}" "input_dbsnp_${dbsnp_rod_bind_type.dbsnp_rod_name}"
    #end if
  </token>
  <token name="@BAM_INPUTS@">
   #for $i, $input_bam in enumerate( $reference_source.input_bams ):
       -d "-I" "${input_bam}" "${input_bam.ext}" "gatk_input_${i}"
       #if str( $input_bam.metadata.bam_index ) != "None":
           -d "" "${input_bam.metadata.bam_index}" "bam_index" "gatk_input_${i}" ##hardcode galaxy ext type as bam_index
       #end if
   #end for
  </token>
  <xml name="input_variants" token_help="-input,--input &amp;lt;input&amp;gt;">
    <param name="input_variants" type="data" format="vcf" label="Variant file to annotate" multiple="True" min="1" help="@HELP@"/>
  </xml>
  <xml name="input_bams_history">
    <param name="input_bams" type="data" format="bam" label="BAM file" multiple="True" min="1" help="-I,--input_file &amp;lt;input_file&amp;gt;"/>
  </xml>
  <xml name="input_bams_cached">
    <param name="input_bams" type="data" format="bam" label="BAM file" multiple="True" min="1" help="-I,--input_file &amp;lt;input_file&amp;gt;">
      <validator type="unspecified_build" />
      <validator type="dataset_metadata_in_data_table" table_name="gatk2_picard_indexes" metadata_name="dbkey" metadata_column="dbkey" message="Sequences are not currently available for the specified build." /> <!-- fixme!!! this needs to be a select -->
    </param>
  </xml>
  <template name="standard_gatk_options">
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == "advanced":
        #for $pedigree in $gatk_param_type.pedigree_files:
            -p '--pedigree "${pedigree}"'
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString "${pedigree_string.pedigree_string}"'
        #end for
        -p '--pedigreeValidationType "${gatk_param_type.pedigree_validation_type}"'
        #set default_read_filters = ['MalformedRead']
        #for $read_filter in $gatk_param_type.read_filter:
            -p '
            #if $read_filter.read_filter_type.read_filter_type_selector not in $default_read_filters:
                --read_filter "${read_filter.read_filter_type.read_filter_type_selector}"
            #end if
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ "__current_case__", "read_filter_type_selector" ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        ${param}
                    #else:
                        --${name} "${param}"
                    #end if
                #end if
            #end for
            '
        #end for
        #for $interval_count, $input_interval in enumerate( $gatk_param_type.input_intervals ):
            -d "--intervals" "${input_interval}" "${input_interval.ext}" "input_intervals_${interval_count}"
        #end for

        #for $interval_count, $input_interval in enumerate( $gatk_param_type.input_exclude_intervals ):
            -d "--excludeIntervals" "${input_interval}" "${input_interval.ext}" "input_exlude_intervals_${interval_count}"
        #end for

        -p '--interval_set_rule "${gatk_param_type.interval_set_rule}"'
        -p '--interval_padding "${gatk_param_type.interval_padding}"'
        -p '--downsampling_type "${gatk_param_type.downsampling_type.downsampling_type_selector}"'
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != "NONE":
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} "${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}"'
        #end if
        -p '
        --baq "${gatk_param_type.baq}"
        --baqGapOpenPenalty "${gatk_param_type.baq_gap_open_penalty}"
        ${gatk_param_type.use_original_qualities}
        --defaultBaseQualities "${gatk_param_type.default_base_qualities}"
        --validation_strictness "${gatk_param_type.validation_strictness}"
        --interval_merging "${gatk_param_type.interval_merging}"
        ${gatk_param_type.disable_experimental_low_memory_sharding}
        ${gatk_param_type.fix_misencoded_quality_scores}
        ${gatk_param_type.non_deterministic_random_seed}
        '
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == "file":
                -d "--read_group_black_list" "${rg_black_list.read_group_black_list_type.read_group_black_list}" "txt" "input_read_group_black_list_${rg_black_list_count}"
            #else
                -p '--read_group_black_list "${rg_black_list.read_group_black_list_type.read_group_black_list}"'
            #end if
        #end for
    #end if

    #if str( $reference_source.reference_source_selector ) == "history":
        -d "-R" "${reference_source.ref_file}" "${reference_source.ref_file.ext}" "gatk_input"
    #end if
    ##end standard gatk options
  </template>
  <xml name="gatk_param_type_conditional">
    <conditional name="gatk_param_type">
      <param name="gatk_param_type_selector" type="select" label="Basic or Advanced GATK options">
        <option value="basic" selected="True">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <param name="pedigree_files" type="data" format="txt" label="Pedigree files for samples" multiple="True" help="-ped,--pedigree &amp;lt;pedigree&amp;gt;"/>
        <repeat name="pedigree_string_repeat" title="Pedigree string" help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;">
            <param name="pedigree_string" type="text" value="" label="Pedigree string for samples"/>
        </repeat>
        <param name="pedigree_validation_type" type="select" label="How strict should we be in validating the pedigree information" help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat name="read_filter" title="Read Filter" help="-rf,--read_filter &amp;lt;read_filter&amp;gt;">
            <conditional name="read_filter_type">
              <param name="read_filter_type_selector" type="select" label="Read Filter Type">
                <option value="BadCigar">BadCigar</option>
                <option value="BadMate">BadMate</option>
                <option value="DuplicateRead">DuplicateRead</option>
                <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
                <option value="MalformedRead">MalformedRead</option>
                <option value="MappingQuality">MappingQuality</option>
                <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
                <option value="MappingQualityZero">MappingQualityZero</option>
                <option value="MateSameStrand">MateSameStrand</option>
                <option value="MaxInsertSize">MaxInsertSize</option>
                <option value="MaxReadLength" selected="True">MaxReadLength</option>
                <option value="MissingReadGroup">MissingReadGroup</option>
                <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
                <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
                <option value="Platform454">Platform454</option>
                <option value="Platform">Platform</option>
                <option value="PlatformUnit">PlatformUnit</option>
                <option value="ReadGroupBlackList">ReadGroupBlackList</option>
                <option value="ReadName">ReadName</option>
                <option value="ReadStrand">ReadStrand</option>
                <option value="ReassignMappingQuality">ReassignMappingQuality</option>
                <option value="Sample">Sample</option>
                <option value="SingleReadGroup">SingleReadGroup</option>
                <option value="UnmappedRead">UnmappedRead</option>
              </param>
              <when value="BadCigar">
                  <!-- no extra options -->
              </when>
              <when value="BadMate">
                  <!-- no extra options -->
              </when>
              <when value="DuplicateRead">
                  <!-- no extra options -->
              </when>
              <when value="FailsVendorQualityCheck">
                  <!-- no extra options -->
              </when>
              <when value="MalformedRead">
                  <param name="filter_mismatching_base_and_quals" type="boolean" truevalue="--filter_mismatching_base_and_quals" falsevalue="" checked="false" label="filter out the reads with mismatching number of bases and base qualities" help="filter out the mismatch reads instead of quitting with an error"/>
              </when>
              <when value="MappingQuality">
                  <param name="min_mapping_quality_score" type="integer" value="10" label="Minimum read mapping quality required to consider a read for calling"/>
              </when>
              <when value="MappingQualityUnavailable">
                  <!-- no extra options -->
              </when>
              <when value="MappingQualityZero">
                  <!-- no extra options -->
              </when>
              <when value="MateSameStrand">
                  <!-- no extra options -->
              </when>
              <when value="MaxInsertSize">
                  <param name="maxInsertSize" type="integer" value="1000000" label="Discard reads with insert size greater than the specified value"/>
              </when>
              <when value="MaxReadLength">
                  <param name="maxReadLength" type="integer" value="76" label="Max Read Length"/>
              </when>
              <when value="MissingReadGroup">
                  <!-- no extra options -->
              </when>
              <when value="NoOriginalQualityScores">
                  <!-- no extra options -->
              </when>
              <when value="NotPrimaryAlignment">
                  <!-- no extra options -->
              </when>
              <when value="Platform454">
                  <!-- no extra options -->
              </when>
              <when value="Platform">
                  <param name="PLFilterName" type="text" value="" label="Discard reads with RG:PL attribute containing this string"/>
              </when>
              <when value="PlatformUnit">
                  <!-- no extra options -->
              </when>
              <when value="ReadGroupBlackList">
                  <!-- no extra options -->
              </when>
              <when value="ReadName">
                  <param name="readName" type="text" value="" label="Filter out all reads except those with this read name"/>
              </when>
              <when value="ReadStrand">
                  <param name="filterPositive" type="boolean" truevalue="--filterPositive" falsevalue="" label="Discard reads on the forward strand"/>
              </when>
              <when value="ReassignMappingQuality">
                  <param name="default_mapping_quality" type="integer" value="60" label="Default read mapping quality to assign to all reads"/>
              </when>
              <when value="Sample">
                  <param name="sample_to_keep" type="text" value="" label="The name of the sample(s) to keep, filtering out all others"/>
              </when>
              <when value="SingleReadGroup">
                  <param name="read_group_to_keep" type="integer" value="76" label="The name of the read group to keep, filtering out all others"/>
              </when>
              <when value="UnmappedRead">
                  <!-- no extra options -->
              </when>
            </conditional>
        </repeat>
        <param name="input_intervals" multiple="True" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Operate on Genomic intervals" help="-L,--intervals &amp;lt;intervals&amp;gt;" />
        <param name="input_exclude_intervals" multiple="True" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Exclude Genomic intervals" help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;" />

        <param name="interval_set_rule" type="select" label="Interval set rule" help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;">
          <option value="UNION" selected="True">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        <param name="interval_padding" type="integer" value="0" min="0" label="Amount of padding (in bp) to add to each interval"
            help="This is typically used to add padding around exons when analyzing exomes. (--interval_padding / -ip)"/>

        <conditional name="downsampling_type">
          <param name="downsampling_type_selector" type="select" label="Type of reads downsampling to employ at a given locus" help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;">
            <option value="NONE" selected="True">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
              <!-- no more options here -->
          </when>
          <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1" help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0" help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
          <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1" help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0" help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
        </conditional>
        <param name="baq" type="select" label="Type of BAQ calculation to apply in the engine" help="-baq,--baq &amp;lt;baq&amp;gt;">
          <option value="OFF" selected="True">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param name="baq_gap_open_penalty" type="float" label="BAQ gap open penalty (Phred Scaled)" value="40" help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;" />
        <param name="use_original_qualities" type="boolean" truevalue="--useOriginalQualities" falsevalue="" label="Use the original base quality scores from the OQ tag" help="-OQ,--useOriginalQualities" />
        <param name="default_base_qualities" type="integer" label="Value to be used for all base quality scores, when some are missing" value="-1" help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;"/>
        <param name="validation_strictness" type="select" label="How strict should we be with validation" help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param name="interval_merging" type="select" label="Interval merging rule" help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;">
          <option value="ALL" selected="True">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>

        <repeat name="read_group_black_list_repeat" title="Read group black list" help="-rgbl,--read_group_black_list &amp;lt;read_group_black_list&amp;gt;">
          <conditional name="read_group_black_list_type">
            <param name="read_group_black_list_type_selector" type="select" label="Type of reads read group black list">
              <option value="file" selected="True">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
              <param name="read_group_black_list" type="data" format="txt" label="Read group black list file" />
            </when>
            <when value="text">
              <param name="read_group_black_list" type="text" value="tag:string" label="Read group black list tag:string" />
            </when>
          </conditional>
        </repeat>

        <param name="disable_experimental_low_memory_sharding" type="boolean" truevalue="--disable_experimental_low_memory_sharding" falsevalue="" label="Disable experimental low-memory sharding functionality." checked="False" help="--disable_experimental_low_memory_sharding"/>
        <param name="non_deterministic_random_seed" type="boolean" truevalue="--nonDeterministicRandomSeed" falsevalue="" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" checked="False"  help="-ndrs,--nonDeterministicRandomSeed"/>
        <param name="fix_misencoded_quality_scores" type="boolean" truevalue="--fix_misencoded_quality_scores" falsevalue="" label="Fix mis-encoded base quality scores. Q0 == ASCII 33 according to the SAM specification, whereas Illumina encoding starts at Q64. The idea here is simple: we just iterate over all reads and subtract 31 from every quality score." checked="False"  help="-fixMisencodedQuals / --fix_misencoded_quality_scores"/>

      </when>
    </conditional>
  </xml>
  <xml name="analysis_type_conditional">
    <conditional name="analysis_param_type">
      <param name="analysis_param_type_selector" type="select" label="Basic or Advanced Analysis options">
        <option value="basic" selected="True">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <yield />
      </when>
    </conditional>
  </xml>
  <xml name="reference_source_selector_param">
    <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
      <option value="cached">Locally cached</option>
      <option value="history">History</option>
    </param>
  </xml>

  <xml name="allow_n_cigar_reads">
    <param name="allow_n_cigar_reads" type="boolean" truevalue="-U ALLOW_N_CIGAR_READS" falsevalue=""
        label="Allow N in CIGAR strings" help="This is required for RNA-seq data. (-U ALLOW_N_CIGAR_READS)" />
  </xml>

  <xml name="dbsnp_param">
    <conditional name="dbsnp_rod_bind_type">
      <param name="dbsnp_rod_bind_type_selector" type="select" label="Provide a dbSNP Reference-Ordered Data (ROD) file" help="-D,--dbsnp &amp;lt;dbsnp&amp;gt;">
        <option value="set_dbsnp" selected="True">Set dbSNP</option>
        <option value="exclude_dbsnp">Don't set dbSNP</option>
      </param>
      <when value="exclude_dbsnp" />
      <when value="set_dbsnp">
        <param name="dbsnp_input_rod" type="data" format="vcf" label="dbSNP ROD file" />
        <param name="dbsnp_rod_name" type="text" value="dbsnp" label="dbsnp ROD name">
          <validator type="regex" message="Value must be a not empty string composed by alphanumeric characters and underscores">^\w+$</validator>
        </param>
      </when>
    </conditional>
  </xml>
  <token name="@CITATION_SECTION@">------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

If you use this tool in Galaxy, please cite Blankenberg D, et al. *In preparation.*

  </token>
  <xml name="citations">
    <citations>
      <citation type="doi">10.1038/ng.806</citation>
      <citation type="doi">10.1101/gr.107524.110</citation>
      <citation type="doi">10.1002/0471250953.bi1110s43</citation>
    </citations>
  </xml>
</macros>
