<macros>
    <!-- REMEMBER to bump the version of @IDX_VERSION_SUFFIX@
    whenever you make changes to the @TOOL_VERSION@ token!
    The data manager uses a symlink to this macro file to keep the STAR and
    the index versions in sync, but you should manually update @IDX_VERSION_SUFFIX@ -->
    <!-- STAR version to be used -->
    <token name="@TOOL_VERSION@">2.7.11b</token>
    <token name="@VERSION_SUFFIX@">0</token>
    <token name="@PROFILE@">21.01</token>
    <!-- STAR index version compatible with this version of STAR
    This is the STAR version that introduced the index structure expected
    by the current version.
    It can be found for any specific version of STAR with:
    STAR -h | grep versionGenome
    or by looking for the versionGenome parameter in source/parametersDefault
    of STAR's source code -->
    <token name="@IDX_VERSION@">2.7.4a</token>
    <token name="@IDX_VERSION_SUFFIX@">3</token>
    <token name="@IDX_DATA_TABLE@">rnastar_index2x_versioned</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">star</requirement>
            <requirement type="package" version="1.18">samtools</requirement>
            <requirement type="package" version="1.13">gzip</requirement>
            <yield/>
        </requirements>
    </xml>
    <xml name="edam">
        <edam_topics>
            <edam_topic>topic_3170</edam_topic>
            <edam_topic>topic_3308</edam_topic>
        </edam_topics>
        <edam_operations>
            <edam_operation>operation_0292</edam_operation>
        </edam_operations>
    </xml>
    <xml name="index_selection" token_with_gene_model="0">
        <param argument="--genomeDir" type="select" label="Select reference genome" help="If your genome of interest is not listed, contact the Galaxy team">
            <options from_data_table="@IDX_DATA_TABLE@">
                <filter type="static_value" column="4" value="@WITH_GENE_MODEL@"/>
                <filter type="static_value" column="5" value="@IDX_VERSION@"/>
                <filter type="sort_by" column="2"/>
                <validator type="no_options" message="No indexes are available for the selected input dataset"/>
            </options>
        </param>
    </xml>
    <token name="@FASTQ_GZ_OPTION@">
        --readFilesCommand zcat
    </token>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1093/bioinformatics/bts635</citation>
        </citations>
    </xml>
    <xml name="SJDBOPTIONS">
        <param argument="--sjdbGTFfile" type="data" format="gff3,gtf" label="Gene model (gff3,gtf) file for splice junctions" optional="false" help="Exon junction information for mapping splices"/>
        <param argument="--sjdbGTFfeatureExon" type="text" value="exon" label="Elements to use from the gene model to use for splice junctions" help="By default and for almost all cases: 'exon', referring to finding junctions at the RNA splice sites. This can optionally be changed to allow splicing at other levels, such as 'gene', 'transcript', 'CDS'."/>
        <param argument="--sjdbOverhang" type="integer" min="1" value="100" label="Length of the genomic sequence around annotated junctions" help="Used in constructing the splice junctions database. Ideal value is ReadLength-1"/>
    </xml>
    <xml name="dbKeyActions">
        <actions>
            <expand macro="dbKeyAction"/>
        </actions>
    </xml>
    <xml name="dbKeyAction">
        <conditional name="refGenomeSource.geneSource">
            <when value="indexed">
                <action type="metadata" name="dbkey">
                    <option type="from_data_table" name="@IDX_DATA_TABLE@" column="1" offset="0">
                        <filter type="param_value" column="0" value="#" compare="startswith" keep="False"/>
                        <filter type="param_value" ref="refGenomeSource.GTFconditional.genomeDir" column="0"/>
                    </option>
                </action>
            </when>
            <when value="history">
                <action type="metadata" name="dbkey">
                    <option type="from_param" name="refGenomeSource.genomeFastaFiles" param_attribute="dbkey"/>
                </action>
            </when>
        </conditional>
    </xml>
    <token name="@TEMPINDEX@"><![CDATA[
    ## Create temporary index for custom reference
    #if str($refGenomeSource.geneSource) == 'history':
        #if $refGenomeSource.genomeFastaFiles.ext == "fasta"
            ln -s '$refGenomeSource.genomeFastaFiles' refgenome.fa &&
        #else
            gunzip -c '$refGenomeSource.genomeFastaFiles' > refgenome.fa &&
        #end if
        mkdir -p tempstargenomedir &&
        STAR
            --runMode genomeGenerate
            --genomeDir 'tempstargenomedir'
            --genomeFastaFiles refgenome.fa
            ## Handle difference between indices with/without annotations
            #if 'GTFconditional' in $refGenomeSource:
                ## GTFconditional exists only in STAR, but not STARsolo
                #if str($refGenomeSource.GTFconditional.GTFselect) == 'with-gtf':
                    --sjdbOverhang '${refGenomeSource.GTFconditional.sjdbOverhang}'
                    --sjdbGTFfile '${refGenomeSource.GTFconditional.sjdbGTFfile}'
                    --sjdbGTFfeatureExon '${refGenomeSource.GTFconditional.sjdbGTFfeatureExon}'
                    #if str($refGenomeSource.GTFconditional.sjdbGTFfile.ext) == 'gff3':
                        --sjdbGTFtagExonParentTranscript Parent
                    #end if
                #end if
            #else:
                ## ref genome selection is less complex for STARsolo because
                ## with-gtf is mandatory there
                --sjdbOverhang '${refGenomeSource.sjdbOverhang}'
                --sjdbGTFfile '${refGenomeSource.sjdbGTFfile}'
                --sjdbGTFfeatureExon '${refGenomeSource.sjdbGTFfeatureExon}'
                #if str($refGenomeSource.sjdbGTFfile.ext) == 'gff3':
                    --sjdbGTFtagExonParentTranscript Parent
                #end if
            #end if
            #if str($refGenomeSource.genomeSAindexNbases):
                --genomeSAindexNbases ${refGenomeSource.genomeSAindexNbases}
            #end if
            ## Diploid mode
            #if 'diploidconditional' in $refGenomeSource:
                #if str($refGenomeSource.diploidconditional.diploid) == 'Yes':
                    --genomeTransformVCF '${refGenomeSource.diploidconditional.genomeTransformVCF}'
                    --genomeTransformType Diploid
                #end if
            #end if
            --runThreadN \${GALAXY_SLOTS:-4}
            ## in bytes
            --limitGenomeGenerateRAM \$((\${GALAXY_MEMORY_MB:-31000} * 1000000))
        &&
    #end if
    ]]></token>
    <token name="@REFGENOMEHANDLING@"><![CDATA[
    --runThreadN \${GALAXY_SLOTS:-4}
    --genomeLoad NoSharedMemory
    --genomeDir
    #if str($refGenomeSource.geneSource) == 'history':
        tempstargenomedir
    #else:
        '${refGenomeSource.GTFconditional.genomeDir.fields.path}'
        ## Handle difference between indices with/without annotations
        #if str($refGenomeSource.GTFconditional.GTFselect) == 'without-gtf-with-gtf':
            --sjdbOverhang $refGenomeSource.GTFconditional.sjdbOverhang
            --sjdbGTFfile '${refGenomeSource.GTFconditional.sjdbGTFfile}'
            --sjdbGTFfeatureExon '${refGenomeSource.GTFconditional.sjdbGTFfeatureExon}'
            #if str($refGenomeSource.GTFconditional.sjdbGTFfile.ext) == 'gff3':
                --sjdbGTFtagExonParentTranscript Parent
            #end if
        #end if
    #end if
    ]]></token>
    <token name="@READSHANDLING@"><![CDATA[
    ## Check that the input pairs are of the same type
    ## otherwise STARsolo will run for a long time and then error out.
    ## We consume either repeats of two inputs R1 + R2
    ## or a collection of paired reads.
    #if str($sc.input_types.use) == "repeat":
        #set $reads1 = []
        #set $reads2 = []
        #for $r1, $r2 in zip($sc.input_types.input1, $sc.input_types.input2):
            #assert $r1.datatype == $r2.datatype
            #silent $reads1.append(str($r1))
            #silent $reads2.append(str($r2))
        #end for
        #set $reads1 = ','.join($reads1)
        #set $reads2 = ','.join($reads2)
    #elif str($sc.input_types.use) == "list_paired":
        #set $r1 = $sc.input_types.input_collection.forward
        #set $r2 = $sc.input_types.input_collection.reverse
        #set $reads1 = $r1
        #set $reads2 = $r2
    #end if
    ## cDNA sequence(s) [R2] always go first, then barcode(s) [R1]
    ## see: Section 3.2 of STAR manual for multiple inputs, and Section 13 for STARsolo inputs
    --readFilesIn $reads2 $reads1
    --soloCBmatchWLtype $sc.soloCBmatchWLtype
    #if $r1.is_of_type('fastq.gz', 'fastqsanger.gz'):
        @FASTQ_GZ_OPTION@
    #end if
    ]]></token>
    <token name="@LIMITS@"><![CDATA[
        --limitOutSJoneRead $getVar('algo.params.junction_limits.limitOutSJoneRead', $getVar('solo.junction_limits.limitOutSJoneRead', 1000))
        --limitOutSJcollapsed $getVar('algo.params.junction_limits.limitOutSJcollapsed', $getVar('solo.junction_limits.limitOutSJcollapsed', 1000000))
        --limitSjdbInsertNsj $getVar('algo.params.junction_limits.limitSjdbInsertNsj', $getVar('solo.junction_limits.limitSjdbInsertNsj', 1000000))
    ]]></token>
    <xml name="ref_selection">
        <param argument="--genomeFastaFiles" type="data" format="fasta,fasta.gz" label="Select a reference genome"/>
        <param argument="--genomeSAindexNbases" type="integer" min="2" max="16" value="14" label="Length of the SA pre-indexing string" help="Typically between 10 and 15. Longer strings will use much more memory, but allow faster searches. For small genomes, the parameter --genomeSAindexNbases must be scaled down to min(14, log2(GenomeLength)/2 - 1)"/>
    </xml>
    <xml name="stdio">
        <stdio>
            <regex match="FATAL error" source="both" level="fatal"/>
            <regex match="EXITING: FATAL INPUT ERROR:" source="both" level="fatal"/>
            <regex match="EXITING: fatal error trying to allocate genome arrays, exception thrown: std::bad_alloc" source="both" level="fatal"/>
            <regex match="\[sam_read1\] missing header\? Abort!" source="both" level="fatal"/>
            <yield/>
        </stdio>
    </xml>
    <xml name="input_selection">
        <conditional name="input_types">
            <param name="use" type="select" label="Input Type">
                <option value="repeat">Separate barcode and cDNA reads</option>
                <option value="list_paired">Paired collection of barcode and cDNA reads</option>
            </param>
            <when value="repeat">
                <param format="fastq,fasta,fastq.gz,fastqsanger.gz" name="input1" type="data" multiple="true" label="RNA-Seq FASTQ/FASTA file, Barcode reads"/>
                <param format="fastq,fasta,fastq.gz,fastqsanger.gz" name="input2" type="data" multiple="true" label="RNA-Seq FASTQ/FASTA file, cDNA reads"/>
            </when>
            <when value="list_paired">
                <param name="input_collection" collection_type="paired" type="data_collection" format="fastq,fasta,fastq.gz,fastqsanger.gz" label="Collection of Pairs"/>
            </when>
        </conditional>
    </xml>
    <xml name="input_selection_smart_seq">
        <conditional name="input_types_smart_seq">
            <param name="use" type="select" label="Input Type">
                <option value="list_single_end">Single-end FASTQ collection</option>
                <option value="list_paired_end">Paired FASTQ collection</option>
            </param>
            <when value="list_single_end">
                <param name="single_end_collection" collection_type="list" type="data_collection" format="fastq,fasta,fastq.gz,fastqsanger.gz" label="List of single-end FASTQ files"/>
            </when>
            <when value="list_paired_end">
                <param name="paired_end_collection" collection_type="list:paired" type="data_collection" format="fastq,fasta,fastq.gz,fastqsanger.gz" label="List of paired-end FASTQ files"/>
            </when>
        </conditional>
    </xml>
    <xml name="umidedup_options">
        <option value="1MM_All" selected="true">Collapse all UMIs with 1 mismatch distance to each other (1MM_All)</option>
        <option value="1MM_Directional_UMItools">Directional method from the UMI-tool</option>
        <option value="1MM_Directional">Directional with stringent UMI deduplication</option>
    </xml>
    <xml name="anchor_types">
        <option value="0">Read start</option>
        <option value="1">Read end</option>
        <option value="2">Adapter start</option>
        <option value="3">Adapter end</option>
    </xml>
    <xml name="cb_match_wl_common">
        <option value="Exact">Exact</option>
        <option value="1MM">Single match (1MM)</option>
    </xml>
    <xml name="cb_match_wl_cellranger">
        <option value="1MM_multi" selected="true">Multiple matches (CellRanger 2, 1MM_multi)</option>
        <option value="1MM_multi_pseudocounts">Multiple matches (CellRanger 3, 1MM_multi_pseudocounts)</option>
        <option value="1MM_multi_Nbase_pseudocounts">Multimatching to WL is allowed for CBs with N-bases (CellRanger 3, 1MM_multi_Nbase_pseudocounts)</option>
    </xml>
    <xml name="solo_adapter_params">
        <param argument="--soloAdapterSequence" type="text" value="-" label="Adapter sequence to anchor barcodes.">
            <sanitizer>
                <valid initial="string.digits">
                    <add value="-"/>
                    <add value="A"/>
                    <add value="T"/>
                    <add value="C"/>
                    <add value="G"/>
                    <add value="N"/>
                </valid>
            </sanitizer>
        </param>
        <param argument="--soloAdapterMismatchesNmax" type="integer" min="1" value="1" label="Maximum number of mismatches allowed in adapter sequence"/>
        <param argument="--clipAdapterType" type="select">
            <option value="Hamming" selected="true">Adapter clipping based on Hamming distance</option>
            <option value="CellRanger4">5p and 3p adapter clipping similar to CellRanger4</option>
            <option value="None">No adapter clipping</option>
        </param>
    </xml>
    <xml name="common_SAM_attributes">
        <option value="NH" selected="true">NH (number of reported alignments/hits for the read)</option>
        <option value="HI" selected="true">HI (query hit index)</option>
        <option value="AS" selected="true">AS (local alignment score)</option>
        <option value="nM" selected="true">nM (number of mismatches per (paired) alignment)</option>
        <option value="NM">NM (edit distance of the aligned read to the reference)</option>
        <option value="MD">MD (string for mismatching positions)</option>
        <option value="jM">jM (intron motifs for all junctions)</option>
        <option value="jI">jI (1-based start and end of introns for all junctions)</option>
    </xml>
    <xml name="limits">
        <section name="junction_limits" title="Junction Limits" expanded="false">
            <param argument="--limitOutSJoneRead" type="integer" min="1" value="1000" label="Maximum number of junctions for one read (including all multimappers)"/>
            <param argument="--limitOutSJcollapsed" type="integer" min="1" value="1000000" label="Maximum number of collapsed junctions"/>
            <param argument="--limitSjdbInsertNsj" type="integer" min="0" value="1000000" label="Maximum number of inserts to be inserted into the genome on the fly."/>
        </section>
    </xml>
    <xml name="outCountActions">
        <actions>
            <action name="column_names" type="metadata" default="GeneID,Counts_unstrand,Counts_firstStrand,Counts_secondStrand"/>
            <expand macro="dbKeyAction"/>
        </actions>
    </xml>
    <xml name="outWig">
        <conditional name="outWig">
            <param name="outWigType" type="select" label="Compute coverage">
                <option value="None">No coverage</option>
                <option value="bedGraph">Yes in bedgraph format</option>
                <option value="wiggle">Yes in wiggle format</option>
            </param>
            <when value="None">
                <!-- This is necessary for the filtering of output -->
                <param name="outWigStrand" type="hidden" value="false"/>
            </when>
            <when value="bedGraph">
                <expand macro="outWigParams"/>
            </when>
            <when value="wiggle">
                <expand macro="outWigParams"/>
            </when>
        </conditional>
    </xml>
    <xml name="outWigParams">
        <param name="outWigTypeSecondWord" type="select" label="Input for coverage">
            <option value="">Default (everything that mapped)</option>
            <option value="read_5p">signal from only 5’ of the 1st read</option>
            <option value="read2">signal from only 2nd read</option>
        </param>
        <param argument="--outWigStrand" type="boolean" truevalue="Stranded" falsevalue="Unstranded" checked="true" label="Generate a coverage for each strand (stranded coverage)"/>
        <param argument="--outWigReferencesPrefix" type="text" value="-" label="prefix matching reference name" help="For example, set 'chr' if you mapped on an ensembl genome but you want to display on UCSC"/>
        <param argument="--outWigNorm" type="boolean" truevalue="RPM" falsevalue="None" checked="true" label="Normalize coverage to million of mapped reads (RPM)"/>
    </xml>
    <token name="@OUTWIG@"><![CDATA[
        #if str($outWig.outWigType) != 'None':
            --outWigType '$outWig.outWigType' '$outWig.outWigTypeSecondWord'
            --outWigStrand '$outWig.outWigStrand'
            --outWigReferencesPrefix '$outWig.outWigReferencesPrefix'
            --outWigNorm '$outWig.outWigNorm'
        #end if
    ]]></token>
    <token name="@OUTWIGOUTPUTS@"><![CDATA[
        #if str($outWig.outWigType) == "bedGraph":
            && mv Signal.Unique.str1.out.bg Signal.Unique.str1.out
            && mv Signal.UniqueMultiple.str1.out.bg Signal.UniqueMultiple.str1.out
            #if str($outWig.outWigStrand) == "Stranded":
                && mv Signal.Unique.str2.out.bg Signal.Unique.str2.out
                && mv Signal.UniqueMultiple.str2.out.bg Signal.UniqueMultiple.str2.out
            #end if
        #elif str($outWig.outWigType) == "wiggle":
            && mv Signal.Unique.str1.out.wig Signal.Unique.str1.out
            && mv Signal.UniqueMultiple.str1.out.wig Signal.UniqueMultiple.str1.out
            #if str($outWig.outWigStrand) == "Stranded":
                && mv Signal.Unique.str2.out.wig Signal.Unique.str2.out
                && mv Signal.UniqueMultiple.str2.out.wig Signal.UniqueMultiple.str2.out
            #end if
        #end if
    ]]></token>
    <xml name="outWigOutputs">
        <data format="bedgraph" name="signal_unique_str1" label="${tool.name} on ${on_string}: Coverage Uniquely mapped strand 1" from_work_dir="Signal.Unique.str1.out">
            <filter>outWig['outWigType'] != "None"</filter>
            <expand macro="dbKeyActions"/>
            <change_format>
                <when input="outWig.outWigType" value="wiggle" format="wig"/>
            </change_format>
        </data>
        <data format="bedgraph" name="signal_uniquemultiple_str1" label="${tool.name} on ${on_string}: Coverage Uniquely + Multiple mapped strand 1" from_work_dir="Signal.UniqueMultiple.str1.out">
            <filter>outWig['outWigType'] != "None"</filter>
            <expand macro="dbKeyActions"/>
            <change_format>
                <when input="outWig.outWigType" value="wiggle" format="wig"/>
            </change_format>
        </data>
        <data format="bedgraph" name="signal_unique_str2" label="${tool.name} on ${on_string}: Coverage Uniquely mapped strand 2" from_work_dir="Signal.Unique.str2.out">
            <filter>outWig['outWigType'] != "None" and outWig['outWigStrand']</filter>
            <expand macro="dbKeyActions"/>
            <change_format>
                <when input="outWig.outWigType" value="wiggle" format="wig"/>
            </change_format>
        </data>
        <data format="bedgraph" name="signal_uniquemultiple_str2" label="${tool.name} on ${on_string}: Coverage Uniquely + Multiple mapped strand 2" from_work_dir="Signal.UniqueMultiple.str2.out">
            <filter>outWig['outWigType'] != "None" and outWig['outWigStrand']</filter>
            <expand macro="dbKeyActions"/>
            <change_format>
                <when input="outWig.outWigType" value="wiggle" format="wig"/>
            </change_format>
        </data>
    </xml>
    <xml name="quantTranscriptomeSAMoutput_param">
        <param argument="--quantTranscriptomeSAMoutput" type="select" label="Alignment filtering for TranscriptomeSAM output">
            <option value="BanSingleEnd_BanIndels_ExtendSoftclip" selected="true">prohibit indels and single-end alignments, extend softclips - compatible with RSEM</option>
            <option value="BanSingleEnd">prohibit single-end alignments, allow indels and softclips</option>
            <option value="BanSingleEnd_ExtendSoftclip">prohibit single-end alignments, extend softclips, allow indels</option>
        </param>
    </xml>
    <xml name="quantMode">
        <conditional name="quantmode_output">
            <param argument="--quantMode" type="select" label="Per gene/transcript output" help="STAR can provide analysis results not only with respect to the reference genome, but also with respect to genes and transcripts described by a gene model. Note: This functionality requires either the selection above of a cached index with a gene model, or a gene model provided alongside the index/reference genome in GTF or GFF3 format!">
                <option value="-">No per gene or transcript output</option>
                <option value="GeneCounts">Per gene read counts (GeneCounts)</option>
                <option value="TranscriptomeSAM">Transcript-based BAM output (TranscriptomeSAM)</option>
                <option value="TranscriptomeSAM GeneCounts">Both per gene read counts and transcript-based BAM output (TranscriptomeSAM GeneCounts)</option>
            </param>
            <when value="-"/>
            <when value="GeneCounts"/>
            <when value="TranscriptomeSAM">
                <expand macro="quantTranscriptomeSAMoutput_param"/>
            </when>
            <when value="TranscriptomeSAM GeneCounts">
                <expand macro="quantTranscriptomeSAMoutput_param"/>
            </when>
        </conditional>
    </xml>
    <xml name="quantModeNoGTF">
        <conditional name="quantmode_output">
            <param argument="--quantMode" type="select" label="Per gene/transcript output">
                <option value="-">No per gene or transcript output as no GTF was provided</option>
            </param>
            <when value="-"/>
        </conditional>
    </xml>
    <xml name="outSAMmapqUnique">
        <!-- MAPQ 255 is the default in STAR (coming from tophat behaviour and compatibility for Cufflinks) but it is a problematic value
        - according to SAM/BAM specs it means "undefined".
        - Using 255 as the max mapq causes problem with modern downstream tools like mutect2: https://sites.duke.edu/workblog/2021/08/18/star-rnaseq-gatk-mutect2/ and 60 has become an inofficial replacement for 255. -->
        <param argument="--outSAMmapqUnique" type="integer" value="60" min="0" max="255" label="MAPQ value for unique mappers" help="STAR bases the mapping quality scores of alignment records in its BAM output on the number of alternative mappings for the read. If a read maps to multiple locations on the reference genome, the following MAPQ scoring scheme is used: &gt;=5 mappings =&gt; MAPQ=0; 3-4 mappings =&gt; MAPQ=1; 2 mappings =&gt; MAPQ=3. This setting lets you control the MAPQ used for reads mapped to a single location. Set to 255 for compatibility with Cufflink (default in STAR) but keep to 60 for modern downstream tools like mutect2."/>
    </xml>
    <xml name="wasp">
        <!--
            This is re-implementation of the original WASP algorithm by Bryce van de Geijn, Graham McVicker,
            Yoav Gilad and Jonathan K Pritchard. Please cite the original WASP paper: Nature Methods 12,
            1061–1063 (2015) https://www.nature.com/articles/nmeth.3582. WASP filtering is activated
            with "waspOutputMode SAMtag".
            -->
        <conditional name="wasp_conditional">
            <param argument="--waspOutputMode" type="select" label="Actiavte WASP filtering">
                <help><![CDATA[This is a reimplementation of the original WASP algorithm by Bryce van de Geijn, Graham McVicker,
                    Yoav Gilad and Jonathan K Pritchard. https://doi.org/10.1038/nmeth.3582. This option will add the vW tag to the SAM output. vW:i:1 means
                    alignment passed WASP filtering, and all other values mean it did not:<br/>
                    - vW:i:2 = multi-mapping read<br/>
                    - vW:i:3 = variant base in the read is N (non-ACGT)<br/>
                    - vW:i:4 = remapped read did not map <br/>
                    - vW:i:5 = remapped read multi-maps <br/>
                    - vW:i:6 = remapped read maps to a different locus <br/>
                    - vW:i:7 = read overlaps too many variants <br/>
                    ]]>
                </help>
                <option value="" selected="true">No WASP filtering</option>
                <option value="wasp_mode">Activate WASP filtering</option>
            </param>
            <when value="wasp_mode">
                <param argument="--varVCFfile" type="data" format="vcf" label="VCF file with personal variants" help="Each variant is expected to have a genotype with two alleles. The VCF file needs to have the 10th column with genotype recorded as 0/1, 1/0, 1/1 (or | instead of /)"/>
            </when>
            <when value=""/>
        </conditional>
    </xml>
    <xml name="full_algo_params">
        <section name="seed" title="Seed parameters" expanded="false">
            <param argument="--seedSearchStartLmax" type="integer" min="1" value="50" label="Search start point through the read"/>
            <param argument="--seedSearchStartLmaxOverLread" type="float" min="0" value="1.0" label="Search start point through the read, normalized to read length"/>
            <param argument="--seedSearchLmax" type="integer" min="0" value="0" label="Maximum length of seeds" help="Default of 0 indicates no maximum length"/>
            <param argument="--seedMultimapNmax" type="integer" min="1" value="10000" label="Maximum number of mappings to use a piece in stitching"/>
            <param argument="--seedPerReadNmax" type="integer" min="1" value="1000" label="Maximum number of seeds per read"/>
            <param argument="--seedPerWindowNmax" type="integer" min="1" value="50" label="Maximum number of seeds per window"/>
            <param argument="--seedNoneLociPerWindow" type="integer" min="1" value="10" label="Maximum number of one seed loci per window"/>
        </section>
        <section name="align" title="Alignment parameters" expanded="false">
            <param argument="--alignIntronMin" type="integer" min="0" value="21" label="Minimum intron size"/>
            <param argument="--alignIntronMax" type="integer" min="0" value="0" label="Maximum intron size"/>
            <param argument="--alignMatesGapMax" type="integer" min="0" value="0" label="Maximum gap between two mates"/>
            <param argument="--alignSJoverhangMin" type="integer" min="1" value="5" label="Minimum overhang for spliced alignments"/>
            <section name="alignSJstitchMismatchNmax" title="Maximum number of mismatches for stitching of the splice junctions (-1: no limit)" expanded="true">
                <param argument="--alignSJstitchMismatchNmax" name="alignSJstitchMismatchNmax1" type="integer" min="-1" value="0" label="Non-canonical motifs"/>
                <param argument="--alignSJstitchMismatchNmax" name="alignSJstitchMismatchNmax2" type="integer" min="-1" value="-1" label="GT/AG and CT/AC motif"/>
                <param argument="--alignSJstitchMismatchNmax" name="alignSJstitchMismatchNmax3" type="integer" min="-1" value="0" label="GC/AG and CT/GC motif"/>
                <param argument="--alignSJstitchMismatchNmax" name="alignSJstitchMismatchNmax4" type="integer" min="-1" value="0" label="AT/AC and GT/AT motif"/>
            </section>
            <param argument="--alignSJDBoverhangMin" type="integer" min="1" value="3" label="Minimum overhang for annotated spliced alignments"/>
            <param argument="--alignSplicedMateMapLmin" type="integer" min="0" value="0" label="Minimum mapped length for a read mate that is spliced"/>
            <param argument="--alignSplicedMateMapLminOverLmate" type="float" min="0" value="0.66" label="Minimum mapped length for a read mate that is spliced, normalized to mate length"/>
            <param argument="--alignWindowsPerReadNmax" type="integer" min="1" value="10000" label="Maximum number of windows per read"/>
            <param argument="--alignTranscriptsPerWindowNmax" type="integer" min="1" value="100" label="Maximum number of transcripts per window"/>
            <param argument="--alignTranscriptsPerReadNmax" type="integer" min="1" value="10000" label="Maximum number of different alignments per read to consider"/>
            <param argument="--alignEndsType" type="select" label="type of read ends alignment">
                <option value="Local">standard local alignment with soft-clipping allowed</option>
                <option value="EndToEnd">force end-to-end read alignment, do not soft-clip</option>
                <option value="Extend5pOfRead1">fully extend only the 5p of the read1, all other ends: local alignment</option>
                <option value="Extend5pOfReads12">fully extend only the 5p of the both read1 and read2, all other ends: local alignment</option>
            </param>
            <param argument="--peOverlapNbasesMin" type="integer" min="0" value="0"
            label="minimum number of overlap bases to trigger mates merging and realignment" />
            <param argument="--peOverlapMMp" type="float" min="0" max="1" value="0.01"
            label="maximum proportion of mismatched bases in the overlap area" />
        </section>
        <section name="chim_settings" title="Chimeric alignment parameters" expanded="false">
            <param argument="--chimSegmentMin" type="integer" min="1" value="12"
            label="Minimum length of chimeric segment"
            help="For small numbers this will cause large number of chimeric alignments. A value of 12 is commonly used." />
            <param argument="--chimScoreMin" type="integer" min="0" value="0"
            label="Minimum total (summed) score of chimeric segments"/>
            <param argument="--chimScoreDropMax" type="integer" min="0" value="20"
            label="Maximum difference of chimeric score from read length"/>
            <param argument="--chimScoreSeparation" type="integer" min="0" value="10"
            label="Minimum difference between the best chimeric score and the next one"/>
            <param argument="--chimScoreJunctionNonGTAG" type="integer" value="-1"
            label="Penalty for a non-GT/AG chimeric junction"/>
            <param argument="--chimJunctionOverhangMin" type="integer" min="0" value="20"
            label="Minimum overhang for a chimeric junction"/>
            <param argument="--chimSegmentReadGapMax" type="integer" min="0" value="0"
            label="Maximum gap in the read sequence between chimeric segments" />
            <param argument="--chimFilter" type="boolean" truevalue="banGenomicN" falsevalue="None" checked="true"
            label="Discard chimeric alignments with Ns in the genome sequence around the chimeric junction" />
            <param argument="--chimMainSegmentMultNmax" type="integer" min="1" value="10"
            label="Maximum number of multi-alignments for the main chimeric segment."
            help="A value of 1 prohibits multimapping main segments"/>
            <param argument="--chimMultimapNmax" type="integer" min="1" value="1"
            label="Maximum number of chimeric multi-alignments"
            help="The default value of 1 only considers unique alignments. If you chose to report chimeric alignments alongside regular ones in the BAM output, this setting is ignored and only uniquely mapping chimeric reads get reported. " />
            <param argument="--chimMultimapScoreRange" type="integer" min="0" value="1"
            label="Score range for multi-mapping chimeras"
            help="The threshold below the best chimeric score that a multimapping chimera must have to be output. This is ignored unless --chimMultimapNmax is above 1" />
        </section>
        <expand macro="limits" />
    </xml>
    <xml name="chim_params">
        <param argument="--chimOutType" type="select"
        label="Report chimeric alignments?"
        help="Choose if and how chimeric alignments should be reported. STAR-Fusion users should select the 'Junctions' option and use the resulting tabular dataset as input to STAR-Fusion. Everyone else: note that selecting 'WithinBAM' or 'WithinBAM Junctions' disables the --chimMultimapNmax setting in the algorithmic parameters section below (the tool will only consider uniquely mapped reads in the search for chimeric alignments). If you disable the reporting of chimeric alignments here, then all chimeric alignment settings in the algorithmic parameters section below will be ignored.">
            <option value="">Don't report chimeric alignments</option>
            <option value="Junctions">As separate tabular "Junctions" output (Junctions)</option>
            <option value="WithinBAM">Within the BAM output (together with regular alignments; WithinBAM)</option>
            <option value="WithinBAM HardClip">Within the BAM output (together with regular alignments; WithinBAM HardClip) hard-clipping in the CIGAR for supplemental chimeric alignments</option>
            <option value="WithinBAM SoftClip">Within the BAM output (together with regular alignments; WithinBAM SoftClip) soft-clipping in the CIGAR for supplemental chimeric alignments</option>
        </param>
    </xml>
    <token name="@ALGO_FULL@"><![CDATA[
            ## Extended parameter options

            ## Seed parameter options
            --seedSearchStartLmax ${algo.params.seed.seedSearchStartLmax}
            --seedSearchStartLmaxOverLread ${algo.params.seed.seedSearchStartLmaxOverLread}
            --seedSearchLmax ${algo.params.seed.seedSearchLmax}
            --seedMultimapNmax ${algo.params.seed.seedMultimapNmax}
            --seedPerReadNmax ${algo.params.seed.seedPerReadNmax}
            --seedPerWindowNmax ${algo.params.seed.seedPerWindowNmax}
            --seedNoneLociPerWindow ${algo.params.seed.seedNoneLociPerWindow}

            ## Alignment parameter options
            --alignIntronMin ${algo.params.align.alignIntronMin}
            --alignIntronMax ${algo.params.align.alignIntronMax}
            --alignMatesGapMax ${algo.params.align.alignMatesGapMax}
            --alignSJoverhangMin ${algo.params.align.alignSJoverhangMin}
            --alignSJstitchMismatchNmax ${algo.params.align.alignSJstitchMismatchNmax.alignSJstitchMismatchNmax1} ${algo.params.align.alignSJstitchMismatchNmax.alignSJstitchMismatchNmax2} ${algo.params.align.alignSJstitchMismatchNmax.alignSJstitchMismatchNmax3} ${algo.params.align.alignSJstitchMismatchNmax.alignSJstitchMismatchNmax4}
            --alignSJDBoverhangMin ${algo.params.align.alignSJDBoverhangMin}
            --alignSplicedMateMapLmin ${algo.params.align.alignSplicedMateMapLmin}
            --alignSplicedMateMapLminOverLmate ${algo.params.align.alignSplicedMateMapLminOverLmate}
            --alignWindowsPerReadNmax ${algo.params.align.alignWindowsPerReadNmax}
            --alignTranscriptsPerWindowNmax ${algo.params.align.alignTranscriptsPerWindowNmax}
            --alignTranscriptsPerReadNmax ${algo.params.align.alignTranscriptsPerReadNmax}
            --alignEndsType ${algo.params.align.alignEndsType}
            --peOverlapNbasesMin ${algo.params.align.peOverlapNbasesMin}
            --peOverlapMMp ${algo.params.align.peOverlapMMp}
            ## Chimeric alignment parameter options
            #if str($chimOutType):
                --chimSegmentMin ${algo.params.chim_settings.chimSegmentMin}
                --chimScoreMin ${algo.params.chim_settings.chimScoreMin}
                --chimScoreDropMax $algo.params.chim_settings.chimScoreDropMax
                --chimScoreSeparation $algo.params.chim_settings.chimScoreSeparation
                --chimScoreJunctionNonGTAG $algo.params.chim_settings.chimScoreJunctionNonGTAG
                --chimSegmentReadGapMax $algo.params.chim_settings.chimSegmentReadGapMax
                --chimFilter $algo.params.chim_settings.chimFilter
                --chimJunctionOverhangMin $algo.params.chim_settings.chimJunctionOverhangMin
                --chimMainSegmentMultNmax $algo.params.chim_settings.chimMainSegmentMultNmax
                #if str($chimOutType) == 'Junctions':
                    --chimMultimapNmax $algo.params.chim_settings.chimMultimapNmax
                #else:
                    --chimMultimapNmax 0
                #end if
                --chimMultimapScoreRange $algo.params.chim_settings.chimMultimapScoreRange
            #end if

            ## Limits
            @LIMITS@
    ]]></token>
    <token name="@ALGO_DEFAULT@"><![CDATA[
            ## Go with STAR's default algorithmic settings,
            ## but we need to provide a reasonable default
            ## (taken from STAR-Fusion)
            ## for --chimSegmentMin in case the user enabled chimeric
            ## alignments (the STAR default is 0, which disables chimeric
            ## alignments). For consistency, also set
            ## --chimMultimapNmax to 1 when chimeric alignments are reported
            ## in Junctions format only.
            #if str($chimOutType):
                --chimSegmentMin 12
                #if str($chimOutType) == 'Junctions':
                    --chimMultimapNmax 1
                #end if
            #end if
    ]]></token>

</macros>
