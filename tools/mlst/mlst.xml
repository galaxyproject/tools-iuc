<tool id="mlst" name="MLST" version="2.15.1">
    <description>Scans genomes against PubMLST schemes.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="version_command" />

    <command detect_errors="exit_code"><![CDATA[
        #import re

        ## Creates symlinks for each input file based on the Galaxy 'element_identifier'
        ## Used so that a human-readable name appears in the output table (instead of 'dataset_xyz.dat')
        #set $named_input_files = ''
        #for $input_file in $input_files
            ## Add quotes around each input file identifier
            #set $_input_file = "'{}'".format($input_file.element_identifier)
            ln -s "$input_file" $_input_file &&
            #set $named_input_files = $named_input_files + ' ' + $_input_file
        #end for

        mlst --nopath
        --threads "\${GALAXY_SLOTS:-1}"
        #if $settings.advanced == "advanced"
            #if $settings.set_scheme.auto_scheme
                #if $settings.set_scheme.minscore
                    --minscore=$settings.set_scheme.minscore
                #end if
                #if $settings.set_scheme.exclude
                    --exclude "$settings.set_scheme.exclude"
                #end if
            #else
                --scheme=$settings.set_scheme.scheme
                #if $settings.set_scheme.legacy
                    --legacy
                #end if
            #end if
            #if $settings.minid
                --minid=$settings.minid
            #end if
            #if $settings.mincov
                --mincov=$settings.mincov
            #end if
            #if $settings.novel
                --novel="$settings.novel"
            #end if
        #end if
        $named_input_files
        > "$report"
    ]]></command>

    <inputs>
        <param type="data" name="input_files" format="fasta,genbank" multiple="true" />
        <conditional name="settings">
            <param name="advanced" type="select" label="Specify advanced parameters">
                <option value="simple" selected="true">No, use program defaults.</option>
                <option value="advanced">Yes, see full parameter list.</option>
            </param>
            <when value="simple">
            </when>
            <when value="advanced">
                <conditional name="set_scheme">
                    <param name="auto_scheme" type="boolean" value="true" label="Automatically set MLST scheme" />
                    <when value="true">
                        <param argument="--minscore" type="float" label="Minimum score to match scheme" value="50" help="Minumum score out of 100 to match a scheme" optional="true" />
                        <param argument="--exclude" type="text" area="false" label="Exclude these schemes" help="Ignore these schemes from auto detection (comma sep. list) (default 'ecoli_2,abaumannii')" optional="true" />
                    </when>
                    <when value="false">
                        <param argument="--scheme" type="text" area="false" label="PubMLST Scheme" help="Use this MLST scheme (see output of 'MLST List' for a list of valid schemes)" />
                        <param argument="--legacy" type="boolean" label="Include allele header" value="true" help="Include allele header row in output table (requires scheme to be set)" />
                    </when>
                </conditional>
                <param argument="--minid" type="integer" label="Minimum DNA identity" value="95" min="0" max="100" help="Minimum DNA identity of full allelle to consider 'similar' (default 95, must be between 0-100)" optional="true" />
                <param argument="--mincov" type="integer" label="Minimum DNA coverage" value="10" help="Minimum DNA coverage to report partial allele at all (default 10)" optional="true" />
                <param argument="--novel" type="boolean" value="false" label="Output novel alleles" />
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="report" format="tabular" label="${tool.name} on ${on_string}: report.tsv"/>
        <data name="novel_alleles" format="fasta" label="${tool.name} on ${on_string}: novel_alleles.fasta">
            <filter>settings['advanced'] == "advanced" and settings['novel']</filter>
        </data>
    </outputs>

    <tests>
        <!-- Basic test - will produce no results. -->
        <test>
            <param name="input_files" value="Acetobacter.fna"/>
            <param name="advanced" value="simple"/>
            <output name="report" ftype="tabular" file="output_noresults.txt" compare="contains"/>
        </test>

        <!-- Basic test - will produce results. -->
        <test>
            <param name="input_files" value="MRSA0252_trimmed.fna"/>
            <param name="advanced" value="simple"/>
            <output name="report" ftype="tabular" file="output_mrsa.txt" compare="contains"/>
        </test>

        <!-- Advanced test - Min DNA Coverage 100 -->
        <test>
            <param name="input_files" value="MRSA0252_trimmed.fna"/>
            <param name="advanced" value="advanced"/>
            <param name="mincov" value="100"/>
            <output name="report" ftype="tabular" file="output_mincov100.txt" compare="contains"/>
        </test>

        <!-- Advanced test - Min DNA ID 100 -->
        <test>
            <param name="input_files" value="MRSA0252_trimmed.fna"/>
            <param name="advanced" value="advanced"/>
            <param name="minid" value="100"/>
            <output name="report" ftype="tabular" file="output_minid100.txt" compare="contains"/>
        </test>
    </tests>

    <help><![CDATA[
**What it does**

Given a genome file in FASTA or Genbank format, MLST will scan the file against PubMLST typing schemes.

**Output**

MLST will produce a tab-seperated output file which contains:
- the filename
- the closest PubMLST scheme name
- the ST (sequence type)
- the allele IDs

**Example Output**

::

	genomes/6008.fna        saureus         239  arcc(2)   aroe(3)   glpf(1)   gmk_(1)   pta_(4)   tpi_(4)   yqil(3)

**Without auto-detection**

If you provide the 'scheme' parameter, it will print a fixed tabular output with a heading containing allele names specific to that scheme. To view a list of schemes, use the MLST List tool.

::

	FILE      SCHEME     ST    abcZ  adk  aroE  fumC  gdh  pdhC  pgm
	NM003.fa  neisseria  11    2     3    4     3       8     4    6

**Missing data**
MLST does not just look for exact matches to full length alleles. It attempts to tell you as much as possible about what it found using the notation below:

+--------+---------------------------+
| Symbol | Meaning                   |
+========+===========================+
| n      | Exact intact allele       |
+--------+---------------------------+
| ~n     | Novel allele similar to n |
+--------+---------------------------+
| n,m    | Multiple alleles          |
+--------+---------------------------+
|  *-*   | Allele missing            |
+--------+---------------------------+

Galaxy wrapper maintained by Simon Gladman.
    ]]></help>

    <expand macro="citations" />
</tool>
