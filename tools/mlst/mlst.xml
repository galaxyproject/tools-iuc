<tool id="mlst" name="MLST" version="2.15.1">
    <description>Scans genomes against PubMLST databases.</description>
    <requirements>
        <requirement type="package" version="2.15.1">mlst</requirement>
    </requirements>

    <version_command>mlst --version</version_command>

    <command detect_errors="exit_code"><![CDATA[
        mlst "$input_file" --nopath
        --threads "\${GALAXY_SLOTS:-1}"
        --label "$input_file.element_identifier"
        #if $settings.advanced == "advanced"
            #if $settings.set_scheme.auto_scheme
                #if $settings.set_scheme.min_score
                    --minscore=$settings.set_scheme.min_score
                #end if
                #if $settings.set_scheme.exclude_scheme
                    --exclude "$settings.set_scheme.exclude_scheme"
                #end if
            #else
                --scheme=$settings.set_scheme.scheme
                #if $settings.set_scheme.legacy
                    --legacy
                #end if
            #end if
            #if $settings.min_dna_id
                --minid=$settings.min_dna_id
            #end if
            #if $settings.min_dna_cov
                --mincov=$settings.min_dna_cov
            #end if
            #if $settings.output_novel_alleles
                --novel="$settings.output_novel_alleles"
            #end if
        #end if
        > "$report"
    ]]></command>

    <inputs>
        <param type="data" name="input_file" format="fasta,genbank" />
        <conditional name="settings">
            <param name="advanced" type="select" label="Specify advanced parameters">
                <option value="simple" selected="true">No, use program defaults.</option>
                <option value="advanced">Yes, see full parameter list.</option>
            </param>
            <when value="simple">
            </when>
            <when value="advanced">
                <conditional name="set_scheme">
                    <param name="auto_scheme" type="boolean" value="true" label="Automatically set MLST scheme" />
                    <when value="true">
                        <param name="min_score" type="float" label="Minimum score to match scheme" value="50" help="Minumum score out of 100 to match a scheme" optional="true" />
                        <param name="exclude_scheme" type="text" area="false" label="Exclude these schemes" help="Ignore these schemes from auto detection (comma sep. list) (default 'ecoli_2,abaumannii')" optional="true" />
                    </when>
                    <when value="false">
                        <param name="scheme" type="text" area="false" label="PubMLST Scheme" help="Use this MLST scheme (see output of 'MLST List' for a list of valid schemes)" />
                        <param name="legacy" type="boolean" label="Use old legacy output" value="false" help="Use old legacy output with allele header row (requires --scheme) (default OFF)" optional="true" />
                    </when>
                </conditional>
                <param name="min_dna_id" type="integer" label="Minimum DNA identity" value="95" min="0" max="100" help="Minimum DNA identity of full allelle to consider 'similar' (default 95, must be between 0-100)" optional="true" />
                <param name="min_dna_cov" type="integer" label="Minimum DNA coverage" value="10" help="Minimum DNA coverage to report partial allele at all (default 10)" optional="true" />
                <param name="output_novel_alleles" type="boolean" value="false" label="Output novel alleles" />
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="report" format="tabular" label="${tool.name} on ${on_string}: report.tsv"/>
        <data name="novel_alleles" format="fasta" label="${tool.name} on ${on_string}: novel_alleles.fasta">
            <filter>settings['advanced'] == "advanced" and settings['output_novel_alleles']</filter>
        </data>
    </outputs>

    <tests>
        <!-- Basic test - will produce no results. -->
        <test>
            <param name="input_file" value="Acetobacter.fna"/>
            <param name="advanced" value="simple"/>
            <output name="report" ftype="tabular" file="output_noresults.txt" compare="contains"/>
        </test>

        <!-- Basic test - will produce results. -->
        <test>
            <param name="input_file" value="MRSA0252_trimmed.fna"/>
            <param name="advanced" value="simple"/>
            <output name="report" ftype="tabular" file="output_mrsa.txt" compare="contains"/>
        </test>

        <!-- Advanced test - Min DNA Coverage 100 -->
        <test>
            <param name="input_file" value="MRSA0252_trimmed.fna"/>
            <param name="advanced" value="advanced"/>
            <param name="min_dna_cov" value="100"/>
            <output name="report" ftype="tabular" file="output_mincov100.txt" compare="contains"/>
        </test>

        <!-- Advanced test - Min DNA ID 100 -->
        <test>
            <param name="input_file" value="MRSA0252_trimmed.fna"/>
            <param name="advanced" value="advanced"/>
            <param name="min_dna_id" value="100"/>
            <output name="report" ftype="tabular" file="output_minid100.txt" compare="contains"/>
        </test>
    </tests>

    <help><![CDATA[
**What it does**

Given a genome file in FASTA or Genbank format, MLST will scan the file against PubMLST typing schemes.

**Output**

MLST will produce a tab-seperated output file which contains:
- the filename
- the closest PubMLST scheme name
- the ST (sequence type)
- the allele IDs

**Example Output**

::

	genomes/6008.fna        saureus         239  arcc(2)   aroe(3)   glpf(1)   gmk_(1)   pta_(4)   tpi_(4)   yqil(3)

**Without auto-detection**

If you provide the 'scheme' parameter, it will print a fixed tabular output with a heading containing allele names specific to that scheme. To view a list of schemes, use the MLST List tool.

::

	FILE      SCHEME     ST    abcZ  adk  aroE  fumC  gdh  pdhC  pgm
	NM003.fa  neisseria  11    2     3    4     3       8     4    6

**Missing data**
MLST does not just look for exact matches to full length alleles. It attempts to tell you as much as possible about what it found using the notation below:

+--------+---------------------------+
| Symbol | Meaning                   |
+========+===========================+
| n      | Exact intact allele       |
+--------+---------------------------+
| ~n     | Novel allele similar to n |
+--------+---------------------------+
| n,m    | Multiple alleles          |
+--------+---------------------------+
|  *-*   | Allele missing            |
+--------+---------------------------+

Galaxy wrapper maintained by Simon Gladman.
    ]]></help>

    <citations>
        <citation type="bibtex">
            @UNPUBLISHED{Seemann2016,
            author = "Seemann T",
            title = "MLST: Scan contig files against PubMLST typing schemes",
            year = "2016",
            note = "https://github.com/tseemann/mlst"}
        </citation>
    </citations>
</tool>
