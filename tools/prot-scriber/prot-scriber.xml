<tool id="prot-scriber" name="prot-scriber" version="@TOOL_VERSION@" profile="21.05">
  <description>Protein annotation of short human readable descriptions</description>
  <macros>
    <token name="@TOOL_VERSION@">0.1.1</token>
  </macros>
  <requirements>
    <requirement type="package" version="@TOOL_VERSION@">prot-scriber</requirement>
  </requirements>
  <stdio>
    <regex match="panicked" level="fatal" source="stderr" />
  </stdio>
  <command>
    <![CDATA['prot-scriber'
  #for $ssr in $seq_sim_repeat
    -s '$ssr.seq_sim_table'
  #end for
  #for $h in $header_repeat
    -e '$h.header'
  #end for
  #for $p in $field_separator_repeat
    -p '$p.field_separator'
  #end for
  #if $seq_family_section.seq_families
    -f '$seq_families'
  #end if
  #if $seq_family_section.annotate_non_family_queries
    -a
  #end if
  #if $seq_family_section.seq_family_gene_ids_separator
    -g "$seq_family_gene_ids_separator"
  #end if
  #if $seq_family_section.seq_family_id_genes_separator
    -i '$seq_family_id_genes_separator'
  #end if
  #if $expert_options_section.expert_options.expert_options_switch
    #for $b in $expert_options_section.expert_options.blacklist_regexs_repeat
      -b '$b.blacklist_regexs'
    #end for
    #for $l in $expert_options_section.expert_options.filter_regexs_repeat
      -l '$l.filter_regexs'
    #end for
    #for $c in $expert_options_section.expert_options.capture_replace_pairs_repeat
      -c '$c.capture_replace_pairs'
    #end for
    
    #if $expert_options_section.expert_options.non_informative_words_regexs
      -w '$expert_options_section.expert_options.non_informative_words_regexs'
    #end if
    #if $expert_options_section.expert_options.description_split_regex
      -r "$expert_options_section.expert_options.description_split_regex"
    #end if
    #if $expert_options_section.expert_options.center_inverse_word_information_content_at_quantile
      -q $expert_options_section.expert_options.center_inverse_word_information_content_at_quantile
    #end if
  #end if
  -o '$output'
  ]]>
  </command>
  <inputs>
    <repeat name="seq_sim_repeat" title="Sequence similarity table" min="1" default="1">
      <param type="data" name="seq_sim_table" argument="-s" format="tabular" label="Sequence similarity search result in tabular format" help="File in which to find sequence similarity search results in tabular format (SSST). Use
          e.g. Blast or Diamond to produce them. Required columns are: 'qacc sacc stitle' (Blast)
          or 'qseqid sseqid stitle' (Diamond). If the required columns, or more, appear in different order than
          shown here you must use the --header (-e) argument. If any of the input SSSTs uses a
          different field-separator than the 'TAB' character, you must provide the --field-
          separator (-p) argument." />
    </repeat>
    <repeat name="field_separator_repeat" title="Field Separator" min="0" default="0">
      <param type="text" optional="true" name="field_separator" argument="-p" label="Field separator" help="Field-Separator of the (-s) sequence similarity table. The default value is the 'TAB'
          character.">
        <sanitizer>
          <valid initial="default">
            <add preset="string.printable" />
          </valid>
        </sanitizer>
      </param>
    </repeat>
    <repeat name="header_repeat" title="Header Line" min="0" default="0">
      <param type="text" optional="true" name="header" argument="-e" label="Header of the sequence similarity tables" help="Header of the (-s) sequence similarity table. Separated by space (' ') the names of the
          columns in order of appearance in the respective table. Required and default columns are
          'qacc sacc stitle'. Note that this option only understands Blast terminology, i.e. even
          if you ran Diamond, please provide 'qacc' instead of 'qseqid' and 'sacc' instead of
          'sseqid'. Luckily 'stitle' is 'stitle' in Diamond, too. You can have additional columns
          that will be ignored, as long as the required columns appear in the correct order.
          Consider this example: 'qacc sacc evalue bitscore stitle'." />
    </repeat>
    <section title="Sequence family annotation" name="seq_family_section">
      <param type="data" optional="true" name="seq_families" argument="-f" format="tabular" label="Families of biological sequences, one family per line in tabular format: 'fam_name TAB gene1,gene2,gene3'" help="A file in which families of biological sequences are stored, one family per line. Each
        line must have format 'fam_name TAB gene1,gene2,gene3'. Make sure no gene appears in
        more than one family." />
      <param type="boolean" optional="true" name="annotate_non_family_queries" argument="-a" label="Annotate non family query sequences" help="Use this option only in combination with --seq-families (-f), i.e. when prot-scriber is
        used to generate human readable descriptions for gene families. If in that context this
        flag is given, queries for which there are sequence similarity search (Blast) results
        but that are NOT member of a sequence family will receive an annotation (human readable
        description) in the output file, too. Default value of this setting is 'OFF' (false)." />
      <param type="text" optional="true" name="seq_family_gene_ids_separator" argument="-g" label="Sequence family file gene-id separator" help=" A regular expression (Rust syntax) used to split the list of gene_identifiers in the
        argument --seq-families (-f) gene families file. Default is '(\s*,\s*|\s+)'.">
        <sanitizer>
          <valid initial="default">
            <add preset="string.printable" />
          </valid>
        </sanitizer>
      </param>
      <param type="text" optional="true" name="seq_family_id_genes_separator" argument="-i" label="Sequence family file family - gene-id separator" help="A string used as separator in the argument --seq-families (-f) gene families file. This
        string separates the gene_family_identifier (name) from the gene_identifier list that
        family comprises. Default is 'TAB'.">
        <sanitizer>
          <valid initial="default">
            <add preset="string.printable" />
          </valid>
        </sanitizer>
      </param>
    </section>
    <section title="Expert options" name="expert_options_section">
      <conditional name="expert_options">
        <param type="boolean" name="expert_options_switch" label="Turn on expert options" value="false" />
        <when value="true">
          <repeat name="blacklist_regexs_repeat" title="Blacklist regexs">
            <param type="data" optional="true" name="blacklist_regexs" argument="-b" format="tabular" label="Blacklist Regexs" help="A file with regular expressions (Rust syntax), one per line. Any match to any of these
              regular expressions causes sequence similarity search result descriptions ('stitle' in
              Blast terminology) to be discarded from the prot-scriber annotation process. If multiple
              --seq-sim-table (-s) args are provided make sure the --blacklist-regexs (-b) args appear
              in the correct order, e.g. the first -b arg will be used for the first -s arg, the
              second -b will be used for the second -s and so on. Set to 'default' to use the hard
              coded default. An example file can be downloaded here:
              https://raw.githubusercontent.com/usadellab/prot-scriber/master/misc/blacklist_stitle_regexs.txt" />
          </repeat>
          <repeat name="capture_replace_pairs_repeat" title="Capture replace pairs">
            <param type="data" optional="true" name="capture_replace_pairs" argument="-c" format="tabular" label="Capture replace pairs" help="A file with pairs of lines. Within each pair the first line is a regular expressions
              (Rust syntax) defining one or more capture groups. The second line of a pair is the
              string used to replace the match in the regular expression with. This means the second
              line contains the capture groups (Rust syntax). These pairs are used to further filter
              the sequence similarity search result descriptions ('stitle' in Blast terminology). In
              contrast to the --filter-regex (-l) matches are not deleted, but replaced with the
              second line of the pair. Filtering is used to process descriptions ('stitle' in Blast
              terminology) and prepare the descriptions for the prot-scriber annotation process. If
              multiple --se-_sim-table (-s) args are provided make sure the --capture-replace-pairs
              (-c) args appear in the correct order, e.g. the first -c arg will be used for the first
              -s arg, the second -c will be used for the second -s and so on. Set to 'default' to use
              the hard coded default. An example file can be downloaded here:
              https://raw.githubusercontent.com/usadellab/prot-scriber/master/misc/capture_replace_pairs.txt" />
          </repeat>
          <repeat name="filter_regexs_repeat" title="Filter regexs">
            <param type="data" optional="true" name="filter_regexs" argument="-l" format="tabular" label="Filter regexs" help="A file with regular expressions (Rust syntax), one per line. Any match to any of these
              regular expressions causes the matched sub-string to be deleted, i.e. filtered out.
              Filtering is used to process descriptions ('stitle' in Blast terminology) and prepare
              the descriptions for the prot-scriber annotation process. In case of UniProt sequence
              similarity search results (Blast result tables), this removes the Blast Hit identifier
              (`sacc`) from the description (`stitle`) and also removes the taxonomic information
              starting with e.g. 'OS=' at the end of the `stitle` strings. If multiple --seq-sim-table
              (-s) args are provided make sure the --filter-regexs (-l) args appear in the correct
              order, e.g. the first -l arg will be used for the first -s arg, the second -l will be
              used for the second -s and so on. Set to 'default' to use the hard coded default. An
              example file can be downloaded here: https://raw.githubusercontent.com/usadellab/prot-scriber/master/misc/filter_stitle_regexs.txt" />
          </repeat>
          <param type="data" optional="true" name="non_informative_words_regexs" argument="-w" format="tabular" label="Non informative words regexs" help="The path to a file in which regular expressions (regexs) are stored, one per line. These
            regexs are used to recognize non-informative words, which will only receive a minimun
            score in the prot-scriber process that generates human readable description. There is a
            default list hard_coded into prot-scriber. An example file can be downloaded here:
            https://raw.githubusercontent.com/usadellab/prot-scriber/master/misc/non_informative_words_regexs.txt" />
          <param type="text" optional="true" name="description_split_regex" argument="-r" label="Description split regex" help="A regular expression in Rust syntax to be used to split descriptions (`stitle` in Blast
            terminology) into words. Default is '([~_\-/|\;,':.\s]+)'.">
            <sanitizer>
              <valid initial="default">
                <add preset="string.printable" />
              </valid>
            </sanitizer>
          </param>
          <param type="integer" optional="true" name="center_inverse_word_information_content_at_quantile" argument="-q" label="Center inverse word-information-content at quantile" help="The quantile (percentile) to be subtracted from calculated inverse word information
            content to center these values. Consequently, this must be a value between zero and one
            or literal 50, which is interpreted as mean instead of a quantile. Default is 5o,
            implying centering at the mean." />
        </when>
        <when value="false"></when>
      </conditional>
    </section>
  </inputs>
  <outputs>
    <data format="tabular" name="output" />
  </outputs>
  <tests>
    <test>
      <param name="seq_sim_table" value="8_Proteins_vs_Swissprot_blastp.txt" />
      <param name="seq_sim_table" value="8_Proteins_vs_Trembl_blastp.txt" />
      <output name="output" file="8_Proteins_prot-scriber.out" sort="true" />
    </test>
    <test>
      <param name="seq_sim_table" value="8_Proteins_vs_Swissprot_blastp.txt" />
      <param name="field_separator" value="default" />
      <param name="header" value="qacc sacc stitle" />
      <param name="seq_sim_table" value="8_Proteins_vs_Trembl_blastp.txt" />
      <param name="field_separator" value="default" />
      <param name="header" value="qacc sacc stitle" />
      <output name="output" file="8_Proteins_prot-scriber.out" sort="true" />
    </test>
    <test>
      <param name="seq_sim_table" value="8_Proteins_vs_Swissprot_blastp.txt" />
      <param name="seq_sim_table" value="8_Proteins_vs_Trembl_blastp.txt" />
      <param name="expert_options_switch" value="true" />
      <param name="blacklist_regexs" value="blacklist_stitle_regexs.txt" />
      <param name="blacklist_regexs" value="blacklist_stitle_regexs.txt" />
      <param name="description_split_regex" value="([~_\-/|;,':.\s]+)" />
      <param name="center_inverse_word_information_content_at_quantile" value="50" />
      <output name="output" file="8_Proteins_prot-scriber.out" sort="true" />
    </test>
  </tests>

  <help>
Assigns short human readable descriptions (HRD) to query biological sequences using reference candidate descriptions. In this, prot-scriber consumes sequence similarity search (Blast or Diamond or similar) results in tabular format. A customized lexical analysis is carried out on the descriptions of these Blast Hits and a resulting HRD is assigned to the query sequences.
  </help>

</tool>