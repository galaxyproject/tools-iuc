<?xml version="1.0"?>
<tool id="chromhmm_binarizebed" name="chromHMM BinarizeBed" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>create binary from bed</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <stdio></stdio>
    <command detect_errors="exit_code"><![CDATA[
        ## initialize
        mkdir -p input/bed {input,output}/control output/{binary,signal} &&
        ## bed files, filenames need to match entries in '$cellmarkfiletable', one folder
        #for $file in $inputbeddir
            ln -s '${file}' 'input/bed/${file.name}' &&
        #end for

        ## run
        @RUN@
            BinarizeBed
            ## optional parameters
            -b $ap.b
            -e $ap.e
            -f $ap.f
            -g $ap.g
            -p $ap.p
            -s $ap.s
            $ap.strictthresh
            #if $oo.t
                -t output/signal
            #end if
            #if $ap.assign_cond.assign_sel == 'shift'
                -n $ap.assign_cond.n
            #else
                -center
            #end if
            #if $ap.peaks_cond.peaks_sel == 'yes'
                -peaks
                #unless $ap.peaks_cond.i == ''
                    -i '$ap.peaks_cond.i'
                #end unless
            #end if
            ## required parameters (specific order)
            ${__tool_directory__}/tool-data/CHROMSIZES/${assembly}.txt ## chromosomelengthfile
            input/bed ## inputbeddir
            '$cellmarkfiletable' ## cellmarkfiletable
            output/binary ## outputbinarydir
        ]]></command>
    <inputs>
        <param argument="inputbeddir" type="data" format="bed" multiple="true" label="Select bed input file(s)." help="Filenames have to match entries in cellmarkfiletable."/>
        <param argument="cellmarkfiletable" type="data" format="txt" multiple="false" label="Select file with cell and mark identifiers." help=""/>
        <expand macro="assembly"/>

        <section name="ap" title="Advanced parameters">
            <expand macro="b"/>
            <expand macro="e"/>
            <expand macro="f"/>
            <expand macro="g"/>
            <expand macro="p"/>
            <expand macro="s"/>
            <expand macro="strictthresh"/>
            <conditional name="assign_cond" label="">
                <param name="assign_sel" type="select" multiple="false" label="Select mode to determine the bin to assign a read." help="Center can make sense to use if the coordinates are based on already extended reads. If this option is selected, then the strand information of a read and the shift parameter are ignored. By default reads are assigned to a bin based on the position of its 5' end as determined from the strand of the read after shifting an amount determined by the -n option with respect to the strand orientation.. The number of bases a read should be shifted to determine a bin assignment. (-center, -n)">
                    <option value="shift">Shift</option>
                    <option value="center">Center</option>
                </param>
                <when value="shift">
                    <param argument="-n" type="integer" value="100" label="Set number of bases a read should be shifted to determine a bin assignment." help="Bin assignment is based on the 5' end of a read shifted this amount with respect to the strand orientation."/>
                </when>
                <when value="center"/>
            </conditional>
            <conditional name="peaks_cond">
                <param name="peaks_sel" type="select" label="Should bed files treated as peak calls?" help="Give a '1' call to any bin overlapping a peak call. Not recommend for broad peak calls. (-peaks)">
                    <option value="no">No</option>
                    <option value="yes">Yes</option>
                </param>
                <when value="no"/>
                <when value="yes">
                    <param argument="-i" type="integer" value="" optional="true" label="Set splitindex." help="Generates row split files for each chromosome only for positions corresponding to rows in the interval [splitindex*numsplitbins, (splitindex+1)*numsplitbins]. This option enables greater parallel processing and reduced memory usage when binarizing based on peak files to generate. If using this option BinarizeBed should be run once for each value of splitindex between 0 and ceil(max(chromosome size)/(binsize*numsplitbins))-1. When using this option output is provided for all chromosomes in chromosomelengthfile opposed to just those that contain peaks."/>
                </when>
            </conditional>
        </section>
        
        <section name="oo" title="Output options">
            <expand macro="t"/>
        </section>
    </inputs>
    <outputs>
        <!-- one text file per cell identifier and chromosome; designation: <cellidentifier>_<chromosome>; e.g. GM12878_chr11_binary.txt -->
        <expand macro="out_binary"/>
        <!-- one text file per cell identifier and chromosome; designation: <cellidentifier>_<chromosome>; e.g. GM12878_chr11_signal.txt -->
        <expand macro="out_signal"/>
    </outputs>
    <tests>
        <!-- #1; required parameters -->
        <test expect_num_outputs="1">
            <param name="inputbeddir" value="binarizebed_test_1.bed,binarizebed_test_2.bed,binarizebed_test_3.bed,binarizebed_test_4.bed"/>
            <param name="cellmarkfiletable" value="binarizebed_cellmark.txt"/>
            <param name="assembly" value="hg18"/>
            <output name="out_binary">
                <discovered_dataset designation="cell1_chr7" ftype="">
                    <assert_contents>
                        <has_n_lines n="794109"/>
                        <has_line line="cell1&#009;chr7"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="cell1_chr11" ftype="">
                    <assert_contents>
                        <has_n_lines n="672263"/>
                        <has_line line="cell1&#009;chr11"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="cell2_chr7" ftype="">
                    <assert_contents>
                        <has_n_lines n="794109"/>
                        <has_line line="cell2&#009;chr7"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
            </output>
        </test>
        <!-- #2; advanced parameters -->
        <test expect_num_outputs="2">
            <param name="inputbeddir" value="binarizebed_test_1.bed,binarizebed_test_2.bed,binarizebed_test_3.bed,binarizebed_test_4.bed"/>
            <param name="cellmarkfiletable" value="binarizebed_cellmark.txt"/>
            <param name="assembly" value="hg18"/>
            <section name="ap">
                <param name="b" value="201"/>
                <param name="e" value="2"/>
                <param name="f" value="0.1"/>
                <param name="g" value="0.1"/>
                <param name="p" value="0.0002"/>
                <param name="s" value="1"/>
                <param name="strictthresh" value="true"/>

                <conditional name="assign_cond">
                    <param name="assign_sel" value="shift"/>
                    <param name="n" value="110"/>
                </conditional>
                <conditional name="peaks_cond">
                    <param name="peaks_sel" value="yes"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="t" value="true"/>
            </section>
            <output name="out_binary">
                <discovered_dataset designation="cell1_chr7" ftype="">
                    <assert_contents>
                        <has_n_lines n="790158"/>
                        <has_line line="cell1&#009;chr7"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="cell1_chr11" ftype="">
                    <assert_contents>
                        <has_n_lines n="668919"/>
                        <has_line line="cell1&#009;chr11"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="cell2_chr7" ftype="">
                    <assert_contents>
                        <has_n_lines n="790158"/>
                        <has_line line="cell2&#009;chr7"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
            </output>
            <output name="out_signal">
                <discovered_dataset designation="cell1_chr7" ftype="">
                    <assert_contents>
                        <has_n_lines n="790158"/>
                        <has_line line="cell1&#009;chr7"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="cell1_chr11" ftype="">
                    <assert_contents>
                        <has_n_lines n="668919"/>
                        <has_line line="cell1&#009;chr11"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="cell2_chr7" ftype="">
                    <assert_contents>
                        <has_n_lines n="790158"/>
                        <has_line line="cell2&#009;chr7"/>
                        <has_line line="0"/>
                    </assert_contents>
                </discovered_dataset>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

BinarizeBed @HELP_WID@

@HELP_CHROMHMM@

This command converts coordinates of aligned reads into binarized data form from which a chromatin state model can be learned. The binarization is based on a poisson background model. If no control data is specified the parameter to the poisson distribution is the global average number of reads per bin. If control data is specified the global average number of reads is multiplied by the local enrichment for control reads as determined by the specified parameters. Optionally intermediate signal files can also be outputted and these signal files can later be directly converted into binary form using BinarizeSignal. 

**Input**

@HELP_FILETYPE_BED@
@HELP_FILETYPE_CELLMARKFILETABLE@

**Output**

@HELP_FILETYPE_BINARY@
@HELP_FILETYPE_SIGNAL@

.. class:: infomark

**References**

@HELP_REFERENCES@
    ]]></help>
    <citations>
        <expand macro="citations"/>
    </citations>
</tool>