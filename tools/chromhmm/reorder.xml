<?xml version="1.0"?>
<tool id="chromhmm_reorder" name="chromHMM Reorder" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>the states of a model</description>

    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements"/>

    <stdio></stdio>  

    <command detect_errors="exit_code"><![CDATA[
        ## initialize 
        @DEF@

        #set $numstates = $obtainNumstatesFromModel($inputmodel)

        echo $numstates &&

        ## run
        @RUN@
            Reorder
            #if $ap.state_cond.state_sel == 'file'
                -o '${ap.state_cond.o}'
            #else
                -stateordering ${ap.state_cond.state_sel}
            #end if
            #if $ap.colorder_cond.colorder_sel == 'yes'
                -f $ap.colorder_cond.f
                -reordercolsmodelfile
            #end if
            #if $ap.m
                -m $ap.m
            #end if
            -color $oo.color
            $oo.holdcolumnorder
            '$inputmodel'
            output ##outputdir
        ]]></command>
    <inputs>
        <!-- excluded: -i -->
        <!-- imitaded: -noimage -->
        <param argument="inputmodel" type="data" format="txt" multiple="false" label="Select file with model parameters." help="Usually a textfile with the prefix 'model_'."/>
        <!-- advanced parameters -->
        <section name="ap" title="Advanced parameters">
            <conditional name="state_cond" label="">
                <param name="state_sel" type="select" multiple="false" label="State ordering should be based on:" help="See Ernst and Kellis, Nature Methods, 2012 for details. (-o, -stateordering, -r)">
                    <option value="emission">Emission</option>
                    <option value="transition">Transition</option>
                    <option value="file">User specific file</option>
                </param>
                <when value="file">
                    <param argument="-o" type="data" format="tabular" multiple="false" label="Select file with a ordering of states." help="The format of a stateordering file is a two column tab delimited file. The first column is the old state number and the second column is the new state number in order. The state prefix should not be given."/>
                    <param argument="-r" type="data" format="bed" multiple="false" label="Select bed file for reordering." help="A bed file produced from LearnModel, MakeSegmentation, or MakeBrowserFiles that should be updated after relabeling the state assignments according to the updated ordering in the stateorderingfile file."/>
                </when>
                <when value="emission"/>
                <when value="transition"/>
            </conditional>
            <conditional name="colorder_cond" label="">
                <param name="colorder_sel" type="select" label="Should the columns of the model file be reordered?" help="That should be done if the model is being applied with binarized data with the columns in a different order than the order when used to learn the model and the new desired ordering can be specified with a file. (-f, -reordercolsmodelfile)">
                    <option value="no">No</option>
                    <option value="yes">yes</option>
                </param>
                <when value="no"/>
                <when value="yes">
                    <param argument="f" type="data" format="tabular" multiple="false" label="Select ordring file." help="Which gives the ordering for the names of the columns one per line."/>
                </when>
            </conditional>
            <param argument="-m" type="data" format="tabular" multiple="false" optional="true" label="Set label mapping file." help="This option can specify a file which maps state IDs to descriptive names. The descriptive names can be appended to the state IDs in the emission and transition files. If this file is not specified, then just the state IDs are displayed. If reordering the states when applying this option the state number and prefix should match the reordered model. So if specifying a stateorderingfile, then the prefix should be U and the second column should have the new states. It can be simpler to relabel after reordering the states."/>
        </section>
        <!-- output options -->
        <section name="oo" title="Output options">
            <param name="emissions" type="select" multiple="true" label="Emissions: Which files should be created?" help="">
                <option value="txt">txt</option>
                <option value="png">png</option>
                <option value="svg">svg</option>
            </param>
            <param name="transitions" type="select" multiple="true" label="Transitions: Which files should be created?" help="">
                <option value="txt">txt</option>
                <option value="png">png</option>
                <option value="svg">svg</option>
            </param>
            <param argument="-color" type="text" value="0,0,255" label="Set heatmap colors." help="Integer values between 0 and 255, separated by commas."/>
            <param argument="-holdcolumnorder" type="boolean" truevalue="-holdcolumnorder" falsevalue="" checked="false" label="Suppress the reordering of the mark columns in the emission parameter table display." help=""/>
        </section>
    </inputs>

    <outputs>
       <data name="out_model" format="txt" from_work_dir="output/model_*.txt" label="${tool.name} on ${on_string} Model, txt"/>
        <!-- emissions; single file in txt, svg, png; * represents numstates -->
        <data name="out_emissions_txt" format="txt" from_work_dir="output/emissions_*.txt" label="${tool.name} on ${on_string} Emissions, txt">
            <filter>'txt' in str(oo['emissions'])</filter>
        </data>
        <data name="out_emissions_png" format="png" from_work_dir="output/emissions_*.png" label="${tool.name} on ${on_string} Emissions, png">
            <filter>'png' in str(oo['emissions'])</filter>
        </data>
        <data name="out_emissions_svg" format="svg" from_work_dir="output/emissions_*.svg" label="${tool.name} on ${on_string} Emissions, svg">
            <filter>'svg' in str(oo['emissions'])</filter>
        </data>
        <!-- transitions; single file in txt, svg, png; * represents numstates -->
        <data name="out_transitions_txt" format="txt" from_work_dir="output/transitions_*.txt" label="${tool.name} on ${on_string} Transitions, txt">
            <filter>'txt' in str(oo['transitions'])</filter>
        </data>
        <data name="out_transitions_png" format="png" from_work_dir="output/transitions_*.png" label="${tool.name} on ${on_string} Transitions, png">
            <filter>'png' in str(oo['transitions'])</filter>
        </data>
        <data name="out_transitions_svg" format="svg" from_work_dir="output/transitions_*.svg" label="${tool.name} on ${on_string} Transitions, svg">
            <filter>'svg' in str(oo['transitions'])</filter>
        </data>
    </outputs> 

    <tests> 
        <!-- #1 only required parameters, all outputs -->
        <test>
            <param name="inputmodel" value="model_2.txt"/>
            <section name="oo">
                <param name="emissions" value="txt,png,svg"/>
                <param name="transitions" value="txt,png,svg"/>
            </section>
            <output name="out_emissions_png" file="reorder_emission_test1.png"/>
            <output name="out_emissions_svg" file="reorder_emission_test1.svg"/>
            <output name="out_transitions_png" file="reorder_transition_test1.png"/>
            <output name="out_transitions_svg" file="reorder_transition_test1.svg"/>
            <output name="out_model">
                <assert_contents>
                    <has_n_lines n="47"/>
                    <has_line_matching expression="2&#009;10&#009;E.+"/>
                    <has_line_matching expression="emissionprobs&#009;2&#009;9&#009;WCE&#009;1.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 all parameters, no defaults, all outputs 
            todo
        -->
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

Reorder @HELP_WID@

Reorder allows reordering the states of a model without relearning the model, and outputs a model file and emission and transition tables with the states reordered. The states can be reordered based on the emission or transition parameters or based on a user provided state ordering. Also the columns of the emission parameters can be ordered based on their original order in the data file, based on the correlation of the columns, or a user specified order. If a user provided state ordering is given a user has the option to also specify a bed file that should be reorder based on the provided ordering. Note that this option only reorders a single bed file at a time. If multiple bed files are desired to be reordered, this command can be run multiple times or alternatively MakeSegmentation and/or MakeBrowserFiles can be re-run with the updated model and/or segmentation files. Also note that this command does not reorder the states in any existing analysis file. Reordered analysis files can be obtained by rerunning OverlapEnrichment, NeighborhoodEnrichment, and/or CompareModels on reordered segmentation file(s). In the segmentation files the state number is prefixed by an 'E' if the ordering is based on emissions, 'T' if it was based on the transition parameters, and 'U' if it was user provided. The command can also be used to add descriptive state labels to the parameter heatmaps with the current ordering.

**Input**

@HELP_FILETYPE_LABEL@

**Output**

...

.. class:: infomark

**References**

@HELP_REFERENCES@
    ]]></help>
    <citations>
        <expand macro="citations"/>
    </citations>
</tool>