<?xml version="1.0"?>
<tool id="chromhmm_overlapenrichment" name="chromHMM OverlapEnrichment" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>of states</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <stdio></stdio>
    <command detect_errors="exit_code"><![CDATA[
        ## initialize 
        @FUNCTIONS@
        mkdir 'input' &&
        @IN_SEGMENTPOSTERIOR@

        ## run
        @RUN@
            OverlapEnrichment
            ## optional parameters
            #if $inputsegment_cond.inputsegment_sel == 'post'
                -posterior
            #else if $inputsegment_cond.inputsegment_sel == 'bed'
                #unless $inputsegment_cond.labels == ""
                    '$inputsegment_cond.labels'
                #end unless
            #end if
            -b $ap.b
            $ap.binres
            $ap.center
            -e $ap.e
            $ap.multicount
            -s $ap.s
            $ap.signal
            -color '$oo.color'
            $oo.uniformscale
            ## required parameters (specific order)
            #if $inputsegment_cond.inputsegment_sel == 'bed'
                'input/segments.bed' ## inputsegment
            #else if $inputsegment_cond.inputsegment_sel == 'post'
                'input' ## inputsegment or folder with '_posterior.txt' file(s)
            #end if
            '${__tool_directory__}/tool-data/COORDS/${assembly}/' ## inputcoorddir
            'overlapenrichment' ## outfileprefix
        ]]></command>
    <inputs>
        <conditional name="inputsegment_cond">
            <param name="inputsegment_sel" type="select" multiple="false" label="Specify input type" help="">
                <option value="bed">Segmentation (bed)</option>
                <option value="post">Posterior (txt)</option>
            </param>
            <when value="bed">
                <expand macro="inputsegment" multiple="false" label="Select segmentation file." argument="(inputsegment)"/>
                <expand macro="labels"/>
            </when>
            <when value="post">
                <expand macro="posterior"/>
            </when>
        </conditional>
        <expand macro="assembly"/>

        <section name="ap" title="Advanced options">
            <param argument="-multicount" type="boolean" truevalue="-multicount" falsevalue="" checked="false" label="Should overlaps be counted multiple times?" help="This flag indicates to count overlaps multiple times when the –signal flag is not present. If the -signal flag is present overlaps are always counted multiple times. By default without the –signaloverlaps are only counted once. Overlaps are defined to either be at the base resolution or the bin resolution based on the –binresflag. If the input coordinate data for enrichments is known to be non-overlapping then including this flag can speed up the enrichment calculation without effecting the final results."/>
            <expand macro="b"/>
            <param argument="-binres" type="boolean" truevalue="" falsevalue="" checked="false" label="Should enrichments be computed at the bin resolution?" help="Requires single base overlap of a coordinate for a bin to fully count the bin opposed to the default of base resolution."/>
            <param argument="-center" type="boolean" truevalue="-center" falsevalue="" checked="false" label="Use the center base for computing enrichments instead of the entire interval" help=""/>
            <expand macro="e"/>
            <expand macro="s"/>
            <expand macro="signal"/>
        </section>

        <section name="oo" title="Output options">
            <expand macro="color"/>
            <param argument="-uniformscale" type="boolean" truevalue="-uniformscale" falsevalue="" checked="false" label="Use the same color scale in heatmaps" help="The default is to have a column specific color scale which subtracts the minimum value in the column and then divides by the maximum column value."/>
            <expand macro="overlapenrichment" optional="false" selected="true"/>
        </section>
    </inputs>
    <outputs>
        <data name="out_overlapenrichment_txt" format="txt" from_work_dir="overlapenrichment.txt" label="${tool.name} on ${on_string}: OverlapEnrichment, txt">
            <filter>'txt' in str(oo['overlapenrichment'])</filter>
        </data>
        <data name="out_overlapenrichment_png" format="png" from_work_dir="overlapenrichment.png" label="${tool.name} on ${on_string}: OverlapEnrichment, png">
            <filter>'png' in str(oo['overlapenrichment'])</filter>
        </data>
        <data name="out_overlapenrichment_svg" format="svg" from_work_dir="overlapenrichment.svg" label="${tool.name} on ${on_string}: OverlapEnrichment, svg">
            <filter>'svg' in str(oo['overlapenrichment'])</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1; required parameters; input: '_segments.bed.gz' -->
        <test expect_num_outputs="3">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="bed"/>
                <param name="inputsegment" value="GM12878_2_segments.bed.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <section name="oo">
                <param name="overlapenrichment" value="txt,png,svg"/>
            </section>
            <output name="out_overlapenrichment_png" file="overlapenrichment_test1.png"/>
            <output name="out_overlapenrichment_svg">
                <assert_contents>
                    <has_n_lines n="56"/>
                </assert_contents>
            </output>
            <output name="out_overlapenrichment_txt">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_line_matching expression="state \(Emission order\)&#009;Genome.+"/>
                    <has_line_matching expression="Base&#009;.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2; required parameters; input: '_posterior.txt.gz' -->
        <test expect_num_outputs="3">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="post"/>
                <param name="posterior" value="GM12878_2_chr11_posterior.txt.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <section name="oo">
                <param name="overlapenrichment" value="txt,png,svg"/>
            </section>
            <output name="out_overlapenrichment_png" file="overlapenrichment_test2.png"/>
            <output name="out_overlapenrichment_svg">
                <assert_contents>
                    <has_n_lines n="56"/>
                </assert_contents>
            </output>
            <output name="out_overlapenrichment_txt">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_line_matching expression="state \(Emission order\)&#009;Genome %&#009;.+"/>
                    <has_line_matching expression="2&#009;.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3; optional parameters; input: '_posterior.txt.gz', no defaults; output: all -->
        <test expect_num_outputs="3">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="post"/>
                <param name="posterior" value="GM12878_2_chr11_posterior.txt.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <section name="ap">
                <param name="b" value="190"/>
                <param name="e" value="2"/>
                <param name="s" value="1"/>
                <param name="multicount" value="true"/>
                <param name="binres" value="true"/>
                <param name="center" value="true"/>
                <param name="signal" value="true"/>
                <param name="uniformscale" value="true"/>
            </section>
            <section name="oo">
                <param name="color" value="10,80,190"/>
                <param name="overlapenrichment" value="txt,png,svg"/>
            </section>
            <output name="out_overlapenrichment_png" file="overlapenrichment_test3.png"/>
            <output name="out_overlapenrichment_svg">
                <assert_contents>
                    <has_n_lines n="56"/>
                </assert_contents>
            </output>
            <output name="out_overlapenrichment_txt">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_line_matching expression="state \(Emission order\)&#009;Genome %&#009;.+"/>
                    <has_line_matching expression="Base&#009;100&#009;.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4; optional parameters; input: '_segments.bed', no defaults; output: txt,svg -->
        <test expect_num_outputs="2">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="bed"/>
                <param name="inputsegment" value="GM12878_2_segments.bed.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <section name="ap">
                <param name="b" value="200"/>
                <param name="e" value="3"/>
                <param name="s" value="2"/>
                <param name="multicount" value="true"/>
                <param name="binres" value="true"/>
                <param name="center" value="true"/>
                <param name="signal" value="true"/>
                <param name="uniformscale" value="true"/>
            </section>
            <section name="oo">
                <param name="color" value="15,10,90"/>
                <param name="overlapenrichment" value="txt,svg"/>
            </section>
            <output name="out_overlapenrichment_svg">
                <assert_contents>
                    <has_n_lines n="56"/>
                </assert_contents>
            </output>
            <output name="out_overlapenrichment_txt">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_line_matching expression="state \(Emission order\)&#009;Genome %&#009;.+"/>
                    <has_line_matching expression="Base&#009;.+"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

OverlapEnrichment @HELP_WID@

@HELP_CHROMHMM@

OverlapEnrichment can be used to compute the fold enrichment of each state of the segmentation for a set of external coordinates by default in bed format. Signal values can optionally be associated with each coordinate to weight the enrichments. The enrichment is outputted as a table in both text and image format. Bed files for the RefSeq transcription start site, transcript end site, gene, exon, and regions within 2kb of the transcription start site of the corresponding assembly are used internally. Depending on selected assembly CpG islands as well as NuclearLamin domains are also provided. Coordinates were obtained from the UCSC genome browser. By default the fold enrichment calculation is as follows, let:

* A - be the number of bases in the state
* B - be the number of bases in the external annotation
* C - be the number of bases in the state and the external annotation
* D - be the number of bases in the genomeThe fold enrichment is then defined as (C/A)/(B/D).

**Input**

@HELP_FILETYPE_SEGMENTS@
@HELP_FILETYPE_POSTERIOR@

**Output**

The enrichments are outputted both as a text and image files. 

.. class:: infomark

**References**

@HELP_REFERENCES@
    ]]></help>
    <citations>
        <expand macro="citations"/>
        <!-- mentioned in manual -->
        <citation type="doi">10.1038/nature06947</citation>
    </citations>
</tool>