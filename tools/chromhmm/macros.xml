<?xml version="1.0"?>
<macros>
    <token name="@TOOL_VERSION@">1.21</token>
    <token name="@VERSION_SUFFIX@">0</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">chromhmm</requirement>
            <yield/>
        </requirements>
    </xml>
    <xml name="citations">
        <citation type="doi">10.1038/nmeth.1906</citation>
        <citation type="doi">10.1038/nprot.2017.124</citation>
        <citation type="doi">10.1038/nbt.1662</citation>
     </xml>

    <!--
        command
    -->

    <token name="@FUNCTIONS@">
## fetch tab separated items of a file header
## $inFile, string, file path
## $outList, list, e.g. ['GM12878', 'chr11']
#def fetchHeader($inFile)
#set $outList = [next(open(str($inFile))) for x in range(1)][0].strip().split("\t")
#return $outList
#end def
    </token>

    <token name="@IN_BINARY@">
mkdir -p 'input/binary' &amp;&amp;
## binarized data, suffix '_binary', extension *.txt, one folder
## e.g. GM12878_chr11_binary.txt
#for $file in $in_binary
    #set $listHeader = $fetchHeader($file)
    #set $filename = $listHeader[0] + '_' + $listHeader[1] + '_binary' + '.txt'
    ln -s '${file}' 'input/binary/$filename' &amp;&amp;
#end for
    </token>
    <token name="@IN_MODEL@">
## model file
## model_&lt;numstates&gt;.txt, e.g. model_10.txt
#set $numstates = $fetchHeader($in_model)[0]
ln -s '${in_model}' 'model_${numstates}.txt' &amp;&amp;
    </token>
    <token name="@IN_SEGMENTPOSTERIOR@">
## segment
#if $inputsegment_cond.inputsegment_sel == 'bed'
    ln -s '${inputsegment_cond.inputsegment}' 'input/segments.bed' &amp;&amp;
## posterior, one folder
## &lt;celltype&gt;_&lt;number&gt;_&lt;chromosome&gt;_posterior.txt, e.g. GM12878_2_chr11_posterior.txt
#else if $inputsegment_cond.inputsegment_sel == 'post'
    #for $i, $file in enumerate($inputsegment_cond.posterior)
        #set $listHeader = $fetchHeader($file)
        #set $filename = $listHeader[0] + '_' + str($i) + '_' + $listHeader[1] + '_posterior.txt'
        ln -s '${file}' 'input/$filename' &amp;&amp;
    #end for
#end if
    </token>
    <token name="@U@">
-u '${__tool_directory__}/tool-data/COORDS/'
    </token>
    <token name="@V@">
-v '${__tool_directory__}/tool-data/ANCHORFILES/'
    </token>
    <token name="@L@">
-l '${__tool_directory__}/tool-data/CHROMSIZES/${assembly}.txt'       
    </token>

    <!--
        input
    -->

    <xml name="in_binary" token_multiple="true" token_argument="" token_label="Select binary input file(s)">
        <param name="in_binary" type="data" format="txt" multiple="@MULTIPLE@" label="@LABEL@" help="Usually files with the suffix '_binary'. Only one file per celltype and chromosome is allowed. @ARGUMENT@"/>
    </xml>
    <xml name="in_model" token_multiple="false" token_label="Select file with model parameters" token_help="Usually a textfile with prefix 'model_'." token_argument="">
        <param name="in_model" type="data" format="txt" multiple="@MULTIPLE@" label="@LABEL@" help="@HELP@ @ARGUMENT@"/>
    </xml>
    <xml name="inputsegment" token_multiple="true" token_label="Select segmentation file(s)" token_argument="">
        <param argument="inputsegment" type="data" format="bed" multiple="@MULTIPLE@" label="@LABEL@" help="A four column tab delimited segmentation file: chromosome, start, end, and label. @ARGUMENT@"/>
    </xml>



    <xml name="assembly">
        <param argument="assembly" type="select" label="Specify assembly">
            <options from_data_table="chromhmm_assemblies">
                <validator message="No assembly is available" type="no_options"/>
            </options>
        </param>
    </xml>
    <xml name="b">
        <param argument="-b" type="integer" min="0" value="200" label="Set binsize" help="The number of base pairs in a bin determining the resolution of the model learning and segmentation."/>
    </xml>
    <xml name="cellmarkfiletable">
        <param argument="cellmarkfiletable" type="data" format="txt" multiple="false" label="Select file with cell and mark identifiers" help=""/>
    </xml>
    <xml name="colfields">
        <param argument="-colfields" type="text" value="" label="Set column fields" help="E.g. 'chromosome,start,end[,strand]'. A comma delimited list of integers specifying the 0-based index of the columns of the chromosome, the start position, the end position, and the strand (‘+’ or ‘-‘) of the reads. If the option –center is present, then the strand can be omitted. By default the chromosome is found in the first column, the start in the second, and the end position in the third, and the strand in the sixth column unless there are fewer columns in which case the last column of the file is assumed to contain the strand."/>
    </xml>
    <xml name="color">
        <param argument="-color" type="text" value="0,0,255" label="Set heatmap color" help="Integer values between 0 and 255 separated by commas."/>
    </xml>
    <xml name="e">
        <param argument="-e" type="integer" value="1" label="Set offset end" help="Specify the amount that should be subtracted from the end coordinate so the coordinate is inclusive and 0 based. The default value is 1 corresponding to standard bed convention of the end interval being 0-based and exclusive."/>
    </xml>
    <xml name="emissions">
        <param name="emissions" type="select" multiple="true" optional="true" label="Emissions: Which files should be created?" help="">
            <option value="txt">txt</option>
            <option value="png">png</option>
            <option value="svg">svg</option>
        </param>
    </xml>
    <xml name="f">
        <param argument="-f" type="float" value="0.0" label="Set threshold for the fold enrichment over expected" help="This value must be met or exceeded by the observed count in a bin for a present call. The expectation is determined in the same way as the mean parameter for the poission distribution in terms of being based on a uniform background unless control data is specified. This parameter can be useful when dealing with very deeply and/or unevenly sequenced data."/>
    </xml>
    <xml name="g">
        <param argument="-g" type="float" value="0.0" label="Set signal threshold" help="This value must be met or exceeded by the observed count in a bin for a present call. This parameter can be useful when desiring to directly place a threshold on the signal."/>
    </xml>
    <xml name="holdcolumnorder">
        <param argument="-holdcolumnorder" type="boolean" truevalue="-holdcolumnorder" falsevalue="" checked="false" label="Suppress the reordering of the mark columns in the emission parameter table display" help=""/>
    </xml>
    <xml name="labels">
        <param argument="-labels" type="boolean" truevalue="-labels" falsevalue="" checked="false" label="Should labels be used?" help="The four columns should be treated as having state labels instead of state IDs or state numbers. If the fourth column has a state ID or state number before a '_' and then followed by a label, the states will state be ordered by the state ID or number, otherwise the state ordering in the output may differ from the original state ordering."/>
    </xml>
    <xml name="many">
        <param argument="-many" type="boolean" truevalue="-many" falsevalue="" checked="false" label="Activate many features procedure?" help="Use a slower, but more numerically stable procedure for evaluating the emission parameters. Should be used if there are several hundreds of features."/>
    </xml>
    <xml name="overlapenrichment" token_optional="true" token_selected="false">
        <param name="overlapenrichment" type="select" multiple="true" optional="@OPTIONAL@" label="OverlapEnrichment: Which files should be created?" help="">
            <option value="txt" selected="@SELECTED@">txt</option>
            <option value="png">png</option>
            <option value="svg">svg</option>
        </param>
    </xml>
    <xml name="p">
        <param argument="-p" type="float" value="0.0001" min="0.0" max="1.0" label="Set tail probability of the poisson distribution" help="Binarization threshold should correspond to this value."/>
    </xml>
    <xml name="posterior">
        <param argument="-posterior" type="data" format="txt" multiple="true" label="Select posterior file(s)" help="Use the full posterior for the enrichment opposed to the default of the maximum probability state assignments."/>
    </xml>
    <xml name="printposterior">
        <param argument="-printposterior" type="boolean" truevalue="-printposterior" falsevalue="" checked="false" label="Posterior probabilities: Should files be created?" help="One file per chromosome."/>
    </xml>
    <xml name="s">
        <param argument="-s" type="integer" value="0" min="0" label="Set amount that should be subtracted from the interval start coordinate" help="So that the interval is inclusive and 0 based."/>
    </xml>
    <xml name="scalebeta">
        <param argument="-scalebeta" type="boolean" truevalue="-scalebeta" falsevalue="" checked="false" label="Set scale beta" help="Change the internal numerical procedure for computing the backward variables that can prevent numerical overflow observed in specialized settings. Specifically the backward variables are rescaled based on the sum of their values at a position opposed to reusing the scaling of the forward variables. Numerical underflow is prevented by setting the beta values to 10^(-300) if they fall below that, and likewise for the forward variables with the added condition that emission must evaluate greater than 0 at the position."/>
    </xml>
    <xml name="signal">
        <param argument="-signal" type="boolean" truevalue="-signal" falsevalue="" checked="false" label="Should signal information be used in enrichments?" help="If available otherwise all overlaps are given equal weight. If signal is used coordinates without signal given will be assumed to have 0 signal in the enrichment calculation."/>
    </xml>
    <xml name="stateordering" token_help="">
        <param argument="-stateordering" type="select" multiple="false" label="State ordering should be based on:" help="@HELP@">
            <option value="emission">Emission</option>
            <option value="transition">Transition</option>
        </param>
    </xml>
    <xml name="strictthresh">
        <param argument="-strictthresh" type="boolean" truevalue="-strictthresh" falsevalue="" checked="false" label="Should poisson threshold must be strictly greater than the tail probability?" help="Otherwise by default the largest integer count for which the tail includes the poisson threshold probability is used."/>
    </xml>
    <xml name="t">
        <param argument="-t" type="boolean" truevalue="-t" falsevalue="" checked="false" label="Signal: Should files be created?" help="These files could later be binarized directly at different thresholds with the BinarizeSignal command."/>
    </xml>
    <xml name="transitions">
        <param name="transitions" type="select" multiple="true" label="Transitions: Which files should be created?" help="">
            <option value="txt">txt</option>
            <option value="png">png</option>
            <option value="svg">svg</option>
        </param>
    </xml>
    <xml name="u">
        <param argument="-u" type="integer" value="1" label="Set pseudocount control" help="Value is uniformly added to every bin in the control data in order to smooth the control data from 0."/>
    </xml>

    
    <!--
        output
    -->

    <xml name="out_binary">
        <!-- one text file per cell identifier and chromosome; designation: <cellidentifier>_<chromosome>; e.g. GM12878_chr11_binary.txt -->
        <collection name="out_binary" type="list" label="${tool.name} on ${on_string}: binary, tabular">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\_binary.txt" ext="tabular" directory="output/binary" visible="false"/>
            <filter>'binary' in oo['out']</filter>
        </collection>
    </xml>
    <xml name="out_emissions">
        <data name="out_emissions_txt" format="txt" from_work_dir="output/emissions_*.txt" label="${tool.name} on $(on_string) Emissions, txt">
            <filter>'txt' in str(oo['emissions'])</filter>
        </data>
        <data name="out_emissions_png" format="png" from_work_dir="output/emissions_*.png" label="${tool.name} on $(on_string) Emissions, png">
            <filter>'png' in str(oo['emissions'])</filter>
        </data>
        <data name="out_emissions_svg" format="svg" from_work_dir="output/emissions_*.svg" label="${tool.name} on $(on_string) Emissions, svg">
            <filter>'svg' in str(oo['emissions'])</filter>
        </data>
    </xml>
    <xml name="out_model">
        <data name="out_model" format="txt" from_work_dir="output/model_*.txt" label="${tool.name} on ${on_string} Model, txt"/>
    </xml>
    <xml name="out_signal">
        <!-- one text file per cell identifier and chromosome; designation: <cellidentifier>_<chromosome>; e.g. GM12878_chr11_signal.txt -->
        <collection name="out_signal" type="list" label="${tool.name} on ${on_string}: signal, tabular">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\_signal.txt" ext="tabular" directory="output/signal" visible="false"/>
            <filter>'signal' in oo['out']</filter>
        </collection>
    </xml>
    <xml name="out_transitions">
        <data name="out_transitions_txt" format="txt" from_work_dir="output/transitions_*.txt" label="${tool.name} on $(on_string) Transitions, txt">
            <filter>'txt' in str(oo['transitions'])</filter>
        </data>
        <data name="out_transitions_png" format="png" from_work_dir="output/transitions_*.png" label="${tool.name} on $(on_string) Transitions, png">
            <filter>'png' in str(oo['transitions'])</filter>
        </data>
        <data name="out_transitions_svg" format="svg" from_work_dir="output/transitions_*.svg" label="${tool.name} on $(on_string) Transitions, svg">
            <filter>'svg' in str(oo['transitions'])</filter>
        </data>
    </xml>

    <!--
        help
    -->

    <token name="@HELP_FILETYPE_ANCHOR@">
*Anchorfiles*

Files with transcription start sites (TSS) and transcription end sites (TES).

Positions are specified by a chromosome and coordinate. See README.md of this wrapper.
    </token>
    <token name="@HELP_FILETYPE_BAM@">
*BAM*

A binary file compressed in the BGZF format with a '.bam' file extension. Details are available `here &lt;https://samtools.github.io/hts-specs/SAMv1.pdf&gt;`_.
    </token>
    <token name="@HELP_FILETYPE_BED@">
*BED*

Tab delimited format (tabular) file, usually with a '.bed' file extension. Details are available at `UCSC Genome Browser BED specification &lt;http://genome.ucsc.edu/FAQ/FAQformat.html#format1&gt;`_.
    </token>
    <token name="@HELP_FILETYPE_BINARY@">
*Binary*

Binarized data files usually have '_binary' in the file name. The format for the binarized data files are that the first line contains the name of the cell separated by a tab with the name of the chromosome. The second line contains in tab delimited form the name of each mark. The remaining lines correspond to consecutive bins on the chromosome. The remaining lines in tab delimited form corresponding to each mark, with a '1' for a present call or '0' for an absent call and a '2' if the data is considered missing at that interval for the mark.

::

    Cell chr1
    Mark1   Mark2   Mark3
    0   0   0
    0   1   0
    0   0   1
    </token>
    <token name="@HELP_FILETYPE_CELLMARKFILETABLE@">
*CellMarkFileTable*

A tab delimited file in which each row contains the cell type or other identifier for a groups of marks, then the associated mark, then the name of a bed file, and optionally a corresponding control bed file.

::

    cell1 mark1 cell1_mark1.bed cell1_control.bed
    cell1 mark2 cell1_mark2.bed cell1_control.bed
    cell2 mark1 cell2_mark1.bed cell2_control.bed
    cell2 mark2 cell2_mark2.bed cell2_control.bed

If a mark is missing in one cell type, but not others it will receive a 2 for all entries in the binarization file and -1 in the signal file. If the same cell and mark combination appears on multiple lines, then the union of all the reads across entries is taken except for control data where each unique file is only counted once.
    </token>
    <token name="@HELP_FILETYPE_CONFUSION@">
*ConfusionMatrix*

A matrix comparing the state assignments based on the full set of marks and those based on using the model
learned on the full data but with the state assignments generated based only on a subset of inputs. Each row of the
confusion matrix indicates the proportion of state assignments based on the full marks assigned to each state using a
subset of marks (columns).

    </token>
    <token name="@HELP_FILETYPE_CONTROLSIGNAL@">
*ControlSignal*

Control signal data are usually in files with '_controlsignal' in the file name and have either one column which is used for all the marks or control data specified for every mark matched to a '_signal' data file. Note the binarization from signal is designed only for signal data which represent counts of reads assigned to bins such as the optional output from the BinarizeBed command. If the signal was computed in other ways, then the binarization based on the poisson distribution may not give meaningful results. '-1' entries in a signal files are considered missing.
    </token>
    <token name="@HELP_FILETYPE_COORDS@">
*COORDS*

Files with transcription start sites (TSS), transcription end sites (TES), gene, exon, and promoter regions annotations. Promoter region annotations are defined based on a window around the TSS. The command also generates files for the TSS with strand information.

Positions are specified by a chromosome and coordinate. See README.md of this wrapper.
    </token>
    <token name="@HELP_FILETYPE_DENSE@">
*DENSE*

Can give a dense view of the segmentation in a single track with states being differentiated solely by color.     
    </token>
    <token name="@HELP_FILETYPE_ELIM@">
*ELIM*

Represents a nested set of model files, usually prefixed with 'elim\_'.
    </token>
    <token name="@HELP_FILETYPE_EMISSION@">
*Emission*

The emission parameters in table format.
    </token>
    <token name="@HELP_FILETYPE_EXPANDED@">
*Expanded*

Gives an expanded view of the segmentation showing one state per track.
    </token>
    <token name="@HELP_FILETYPE_MODEL@">
*Model*

Contains all model parameters in an internal format, usually with prefix 'model\_'.     
    </token>
    <token name="@HELP_FILETYPE_OVERLAP@">
*OverlapEnrichment*

Contains fold enrichments of each state of the segmentation for a set of external coordinates.
    </token>
    <token name="@HELP_FILETYPE_POSTERIOR@">
*Posterior*

The first line of these files specify the chromosome and cell type, followed by a header line for each column, and then the posterior probabilities one per line. 
    </token>
    <token name="@HELP_FILETYPE_SEGMENTS@">
*Segments*

A BED file containing segmentation coordinates. The four columns are chromosome, start, end, and label.
    </token>
    <token name="@HELP_FILETYPE_SIGNAL@">
*Signal*

Signal data files usually have '_signal' in the file name. The format for the signal file is the first line contains the name of the cell separated by a tab with the name of the chromosome. The second line contains in tab delimited form the name of each mark. The remaining lines correspond to consecutive bins on the chromosome and contain the integer signal value for each mark.

::

    Cell    chr1
    Mark1   Mark2   Mark3
    0   4   0
    1   3   0
    2   1   9
    </token>
    <token name="@HELP_FILETYPE_STATEBYLINE@">
*StateByLine*

The first line specifies the cell type and chromosome and the second line says MaxState and the state ordering methods. The remaining lines have the state assignments.
    </token>
    <token name="@HELP_FILETYPE_TES@">
*RefSeqTES_neighborhood*

Contains fold enrichments of each state of the segmentation for a set of external coordinates in relation to TES.
    </token>
    <token name="@HELP_FILETYPE_TRANSITION@">
*Transition*

The transition parameters in table format.
    </token>
    <token name="@HELP_FILETYPE_TSS@">
*RefSeqTSS_neighborhood*

Contains fold enrichments of each state of the segmentation for a set of external coordinates in relation to TSS.
    </token>
    <token name="@HELP_FILETYPE_UCSC@">
*UCSC table browser file*

A tab delimited gene table in a format provided by the UCSC genome table browser. The first set of columns in order being: bin, name, chrom, strand, txStart, txEnd, cdsStart, cdsEnd, exonCount, exonStarts, exonEnds. All coordinates are 0-based.
    </token>

    <!-- help section -->

    <token name="@HELP_CHROMHMM@">
ChromHMM can integrate multiple chromatin datasets such as ChIP-seq data of various histone modifications to discover de novo the major re-occuring combinatorial and spatial patterns of marks. ChromHMM is based on a multivariate Hidden Markov Model that explicitly models the presence or absence of each chromatin mark. The resulting model can then be used to systematically annotate a genome in one or more cell types. By automatically computing state enrichments for large-scale functional and annotation datasets ChromHMM facilitates the biological characterization of each state. ChromHMM also produces files with genome-wide maps of chromatin state annotations that can be directly visualized in a genome browser.
    </token>
    <token name="@HELP_WID@">
is part of ChromHMM, which is a program for learning and characterizing of chromatin states using a multivariate Hidden Markov Model that models the combinatorial and spatial patterns in data from multiple chromatin marks.
    </token>
    <token name="@HELP_REFERENCES@">
More information can be found on the `project website &lt;http://compbio.mit.edu/ChromHMM/&gt;`_, the `manual &lt;http://compbio.mit.edu/ChromHMM/ChromHMM_manual.pdf&gt;`_ and `github &lt;https://github.com/jernst98/ChromHMM/&gt;`_.
     </token>
</macros>