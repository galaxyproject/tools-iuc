<?xml version="1.0"?>
<tool id="chromhmm_neighborhoodenrichment" name="chromHMM NeighborhoodEnrichment" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>of segments</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <stdio></stdio>
    <command detect_errors="exit_code"><![CDATA[
        ## initialize 
        @FUNCTIONS@
        mkdir input &&        
        @IN_SEGMENTPOSTERIOR@

        ## run
        @RUN@
            NeighborhoodEnrichment
            ## optional parameters
            #if $inputsegment_cond.inputsegment_sel == 'post'
                -posterior
            #else if $inputsegment_cond.inputsegment_sel == 'bed'
                #unless $inputsegment_cond.labels == ""
                    '$inputsegment_cond.labels'
                #end unless
            #end if
            -b $ap.b
            -l $ap.l
            -o $ap.o
            -r $ap.r
            -s $ap.s
            $ap.signal
            -color '$oo.color'
            ## required parameters (specific order)
            #if $inputsegment_cond.inputsegment_sel == 'bed'
                input/segments.bed ## inputsegment
            #else if $inputsegment_cond.inputsegment_sel == 'post'
                input ## inputsegment or folder with '_posterior.txt' file(s)
            #end if
            '${__tool_directory__}/tool-data/ANCHORFILES/${assembly}/RefSeq${anchorpositions}.${assembly}.txt.gz' ## anchorpositions
            neighborhoodenrichment ## outfileprefix
        ]]></command>
    <inputs>
        <conditional name="inputsegment_cond">
            <param name="inputsegment_sel" type="select" multiple="false" label="Specify input type." help="">
                <option value="bed">Segmentation (bed)</option>
                <option value="post">Posterior (txt)</option>
            </param>
            <when value="bed">
                <expand macro="inputsegment" multiple="false" argument="(inputsegment)" label="Select segmentation file."/>
                <expand macro="labels"/>
            </when>
            <when value="post">
                <expand macro="posterior"/>
            </when>
        </conditional>
        <expand macro="assembly"/>
        <param argument="anchorpositions" type="select" label="Specify type of anchor positions." help="Coordinates of the anchor positions around which state enrichments will be determined.">
            <option value="TES">TES</option>
            <option value="TSS">TSS</option>
        </param>

        <section name="ap" title="Advanced options">
            <expand macro="b"/>
            <param argument="-l" type="integer" value="10" label="Set the number of enrichment columns to the left of the anchor position to display." help=""/>
            <param argument="-o" type="integer" value="10" label="Set value that should be subtracted from the anchor coordinate so it is 0 based." help=""/>
            <param argument="-r" type="integer" value="10" label="Set the number of enrichment columns to the right of the anchor position to display." help=""/>
            <param argument="-s" type="integer" value="200" label="Set the spacing in base pairs at which column enrichments should be displayed." help=""/>
            <expand macro="signal"/>
        </section>
        <section name="oo" title="Output options">
            <expand macro="color"/>
            <param name="neighborhoodenrichment" type="select" multiple="true" optional="false" label="NeighborhoodEnrichment: Which files should be created?" help="">
                <option value="txt" selected="true">txt</option>
                <option value="png">png</option>
                <option value="svg">svg</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_neighborhoodenrichment_txt" format="txt" from_work_dir="neighborhoodenrichment.txt" label="${tool.name} on ${on_string}: NeighborhoodEnrichment, txt">
            <filter>'txt' in str(oo['neighborhoodenrichment'])</filter>
        </data>
        <data name="out_neighborhoodenrichment_png" format="png" from_work_dir="neighborhoodenrichment.png" label="${tool.name} on ${on_string}: NeighborhoodEnrichment, png">
            <filter>'png' in str(oo['neighborhoodenrichment'])</filter>
        </data>
        <data name="out_neighborhoodenrichment_svg" format="svg" from_work_dir="neighborhoodenrichment.svg" label="${tool.name} on ${on_string}: NeighborhoodEnrichment, svg">
            <filter>'svg' in str(oo['neighborhoodenrichment'])</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1; required parameters; input: '_segments.bed', TES; output: all -->
        <test expect_num_outputs="3">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="bed"/>
                <param name="inputsegment" value="GM12878_2_segments.bed.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <param name="anchorpositions" value="TES"/>
            <section name="oo">
                <param name="neighborhoodenrichment" value="txt,png,svg"/>
            </section>
            <output name="out_neighborhoodenrichment_png" file="neighborhoodenrichment_test1.png"/>
            <output name="out_neighborhoodenrichment_svg">
                <assert_contents>
                    <has_n_lines n="97"/>
                </assert_contents>
            </output>
            <output name="out_neighborhoodenrichment_txt">
                <assert_contents>
                    <has_n_lines n="3"/>
                    <has_line_matching expression="State \(Emission order\)&#009;-2000&#009;.+"/>
                    <has_line_matching expression="2&#009;.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2; required parameters; input: '_posterior.txt', TSS; output: all -->
        <test expect_num_outputs="3">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="post"/>
                <param name="posterior" value="GM12878_2_chr11_posterior.txt.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <param name="anchorpositions" value="TSS"/>
            <section name="oo">
                <param name="neighborhoodenrichment" value="txt,png,svg"/>
            </section>
            <output name="out_neighborhoodenrichment_png" file="neighborhoodenrichment_test2.png"/>
            <output name="out_neighborhoodenrichment_svg">
                <assert_contents>
                    <has_n_lines n="97"/>
                </assert_contents>
            </output>
            <output name="out_neighborhoodenrichment_txt">
                <assert_contents>
                    <has_n_lines n="3"/>
                    <has_line_matching expression="State \(Emission order\)&#009;-2000&#009;.+"/>
                    <has_line_matching expression="2&#009;.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3; optional parameters; input: '_posterior.txt', TSS, no defaults; output: all -->
        <test expect_num_outputs="3">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="post"/>
                <param name="posterior" value="GM12878_2_chr11_posterior.txt.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <param name="anchorpositions" value="TSS"/>
            <section name="ap">
                <param name="b" value="190"/>
                <param name="l" value="9"/>
                <param name="o" value="9"/>
                <param name="r" value="11"/>
                <param name="s" value="190"/>
                <param name="signal" value="true"/>
            </section>
            <section name="oo">
                <param name="color" value="10,80,190"/>
                <param name="neighborhoodenrichment" value="txt,png,svg"/>
            </section>
            <output name="out_neighborhoodenrichment_png" file="neighborhoodenrichment_test3.png"/>
            <output name="out_neighborhoodenrichment_svg">
                <assert_contents>
                    <has_n_lines n="98"/>
                </assert_contents>
            </output>
            <output name="out_neighborhoodenrichment_txt">
                <assert_contents>
                    <has_n_lines n="3"/>
                    <has_line_matching expression="State \(Emission order\)&#009;-1710&#009;.+"/>
                    <has_line_matching expression="2&#009;.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4; optional parameters; input: '_segments.bed', TSS, no defaults; output: all -->
        <test expect_num_outputs="2">
            <conditional name="inputsegment_cond">
                <param name="inputsegment_sel" value="bed"/>
                <param name="inputsegment" value="GM12878_2_segments.bed.gz"/>
            </conditional>
            <param name="assembly" value="hg18"/>
            <param name="anchorpositions" value="TSS"/>
            <section name="ap">
                <param name="b" value="210"/>
                <param name="l" value="11"/>
                <param name="o" value="8"/>
                <param name="r" value="9"/>
                <param name="s" value="205"/>
                <param name="signal" value="true"/>
            </section>
            <section name="oo">
                <param name="color" value="15,10,90"/>
                <param name="neighborhoodenrichment" value="txt,svg"/>
            </section>
            <output name="out_neighborhoodenrichment_svg">
                <assert_contents>
                    <has_n_lines n="98"/>
                </assert_contents>
            </output>
            <output name="out_neighborhoodenrichment_txt">
                <assert_contents>
                    <has_n_lines n="3"/>
                    <has_line_matching expression="State \(Emission order\)&#009;-2255&#009;.+"/>
                    <has_line_matching expression="2&#009;.+"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

NeighborhoodEnrichment @HELP_WID@

@HELP_CHROMHMM@

NeighborhoodEnrichment given a set of anchor positions determines the fold enrichment for each state at fixed positions relative to the anchor positions. Signal values can optionally be associated with each coordinate to weight the enrichments. Strand information can also be optionally used to compute the positional enrichments in a strand aware manner. Fold enrichments by default are calculated analogously as specified in OverlapEnrichment.

**Input**

@HELP_FILETYPE_SEGMENTS@
@HELP_FILETYPE_POSTERIOR@

**Output**

The enrichments are outputted both as a text and image files. 

.. class:: infomark

**References**

@HELP_REFERENCES@
    ]]></help>
    <citations>
        <expand macro="citations"/>
    </citations>
</tool>