<tool id='strawberry' name='Strawberry' version='@TOOL_VERSION@+galaxy@SUFFIX_VERSION@' profile='20.01'>
    <description>fast and accurate ab initio transcript reconstruction and quantification</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='xrefs' />
    <expand macro='requirements' />
    <command detect_errors='exit_code'><![CDATA[
    ~/bin/strawberry $mode_options
    #if $mode_options == ''
        

    --output-gtf output.gtf
    --num-threads \${GALAXY_SLOTS:-2}
    ]]>    </command>
    <inputs>
        <param name="bam_file" type="data" format="bam" label="BAM file" help="This step can be done using any splice-awareness aligner, e.g. Tophat 2, GSNAP, HISAT 2. 
            The BAM file needs to be sorted according to the genomic positions. If you use Tophat, the default output is already sorted. For other software, you might 
            have to sort their outputs before running Strawberry. This can be done using Samtools command samtools sort. Strawberry is designed for Illumina pair-end reads." />
        <param name="gff_file" type="data" format="gff3,gtf" label="Reference transcripts annotation file"/>
        <conditional name="mode_conditional">
            <param name="mode_options" type="select" label="Mode options">
                <option value="">Assembly and quantification mode</option>
                <option value="--no-assembly">Quantification mode</option>
                <option value="--no-quant">Assembly mode</option>
            </param>
            <when value="">
                <expand macro="common_parameters"/>
                <section name="assembly_section" title="Assembly options">
                    <expand macro="assembly_parameters"/>
                </section>
                <section name="quantification_section" title="Quantification options">
                    <expand macro="quantification_parameters"/>
                </section>
            </when>
            <when value="--no-quant">
                <expand macro="common_parameters"/>
                <section name="assembly_section" title="Assembly options">
                    <expand macro="assembly_parameters"/>
                </section>
            </when>
            <when value="--no-assembly">
                <expand macro="common_parameters"/>
                <section name="quantification_section" title="Quantification options">
                    <expand macro="quantification_parameters"/>
                </section>
            </when>
        </conditional>
        <param name="outputs" type="select" label="Output files">
            <option value="--logfile">Log file</option>
        </param>
    </inputs>
    <outputs>

    </outputs>
    <tests>

    </tests>
    <help><![CDATA[

.. class:: infomark

**Purpose**

DeepVariant is a deep learning-based variant caller that takes aligned reads (in BAM or CRAM format), produces pileup image tensors from them, classifies each tensor using a convolutional neural network, and finally reports the results in a standard VCF or gVCF file.

DeepVariant supports germline variant-calling in diploid organisms.

- NGS (Illumina) data for either a `whole genome <https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-case-study.md>`_ or `whole exome <https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-exome-case-study.md>`_.
- PacBio HiFi data, see the `PacBio case study <https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-pacbio-model-case-study.md>`_.
- Hybrid PacBio HiFi + Illumina WGS, see the `hybrid case study <https://github.com/google/deepvariant/blob/r1.2/docs/deepvariant-hybrid-case-study.md>`_.

Please also note:

For somatic data or any other samples where the genotypes go beyond two copies of DNA, DeepVariant will not work out of the box because the only genotypes supported are hom-alt, het, and hom-ref.

The models included with DeepVariant are only trained on human data. For other organisms, see the blog post on `non-human variant-calling <https://google.github.io/deepvariant/posts/2018-12-05-improved-non-human-variant-calling-using-species-specific-deepvariant-models/>`_ for some possible pitfalls and how to handle them.

----

.. class:: infomark

**How DeepVariants works**

DeepVariant relies on `Nucleus <https://github.com/google/nucleus>`_, a library of Python and C++ code for reading and writing data in common genomics file formats (like SAM and VCF) designed for painless integration with the `TensorFlow <https://www.tensorflow.org/>`_ machine learning framework. Nucleus was built with DeepVariant in mind and open-sourced separately so it can be used by anyone in the genomics research community for other projects. See this blog post on `Using Nucleus and TensorFlow for DNA Sequencing Error Correction <https://google.github.io/deepvariant/posts/2019-01-31-using-nucleus-and-tensorflow-for-dna-sequencing-error-correction/>`_.


]]>    </help>
    <expand macro="citations"/>
</tool>
