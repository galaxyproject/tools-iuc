<tool id="idba_ud" name="IDBA-UD" version="1.1.3">
    <description>
        Iterative de Bruijn Graph Assembler <!--for sequencing data with highly uneven depth-->
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command><![CDATA[

    idba_ud

    --read '$read'
    #if $read_level_2:
        --read_level_2 '$read_level_2'
    #end if
    #if $read_level_3:
        --read_level_3 '$read_level_3'
    #end if
    #if $read_level_4:
        --read_level_4 '$read_level_4'
    #end if
    #if $read_level_5:
        --read_level_5 '$read_level_5'
    #end if
    #if $long_read:
        --long_read '$long_read'
    #end if
    --mink $mink
    --maxk $maxk
    --step $step
    --inner_mink $inner_mink
    --inner_step $inner_step
    --prefix $prefix
    --min_count $min_count
    --min_support $min_support
    --num_threads \${GALAXY_SLOTS:-1}
    --seed_kmer $seed_kmer
    --min_contig $min_contig
    --similar $similar
    --max_mismatch $max_mismatch
    --min_pairs $min_pairs
    #if $other:
        ${" ".join(str($other).split(","))}
    #end if
    ]]></command>

    <inputs>
        <param argument="--read" type="data" format="fasta" label="Fasta read file. Lower or equal to 600b"/>
        <param argument="--long_read" type="data" format="fasta" optional="true" label="Fasta long read file. More than 600b"/>

        <param argument="--read_level_2" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for second level scaffolds"/>
        <param argument="--read_level_3" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for third level scaffolds"/>
        <param argument="--read_level_4" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for fourth level scaffolds"/>
        <param argument="--read_level_5" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for fifth level scaffolds"/>

        <param argument="--mink" type="integer" value="20" max="312" label="Minimum k value. Lower or equal to 312"/>
        <param argument="--maxk" type="integer" value="100" max="312" label="Maximum k value. Lower or equal to 312"/>
        <param argument="--step" type="integer" value="20" label="Increment of k-mer of each iteration"/>
        <param argument="--inner_mink" type="integer" value="10" label="Inner minimum k value"/>
        <param argument="--inner_step" type="integer" value="5" label="Inner increment of k-mer"/>
        <param argument="--prefix" type="integer" value="3" label="Prefix length used to build sub k-mer table"/>
        <param argument="--min_count" type="integer" value="2" label="Minimum multiplicity for filtering k-mer when building the graph"/>
        <param argument="--min_support" type="integer" value="1" label="Minimum supoort in each iteration"/>
        <param argument="--seed_kmer" type="integer" value="30" label="Seed kmer size for alignment"/>
        <param argument="--min_contig" type="integer" value="200" label="Minimum size of contig"/>
        <param argument="--similar" type="float" value="0.95" label="Similarity for alignment"/>
        <param argument="--max_mismatch" type="integer" value="3" label="Max mismatch of error correction"/>
        <param argument="--min_pairs" type="integer" value="3" label="Minimum number of pairs"/>

        <param name="other" type="select" display="checkboxes" multiple="true" label="Other options">
            <option value="--no_bubble">Do not merge bubble (--no_bubble)</option>
            <option value="--no_local">Do not use local assembly (--no_local)</option>
            <option value="--no_coverage">Do not iterate on coverage (--no_coverage)</option>
            <option value="--no_correct">Do not do correction (--no_correct)</option>
            <option value="--pre_correction">Perform pre-correction before assembly (--pre_correction)</option>
        </param>
    </inputs>
    <outputs>
        <data name="output" from_work_dir="out/scaffold.fa" format="fasta"/>
    </outputs>
    <tests>
        <test>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <output name="output" file="out/scaffold.fa" ftype="fasta"/>
        </test>
    </tests>
    <help><![CDATA[
        IDBA-UD is a iterative De Bruijn Graph De Novo Assembler for Short Reads Sequencing data with Highly Uneven Sequencing Depth. It is an extension of IDBA algorithm. IDBA-UD also iterates from small k to a large k. In each iteration, short and low-depth contigs are removed iteratively with cutoff threshold from low to high to reduce the errors in low-depth and high-depth regions. Paired-end reads are aligned to contigs and assembled locally to generate some missing k-mers in low-depth regions. With these technologies, IDBA-UD can iterate k value of de Bruijn graph to a very large value with less gaps and less branches to form long contigs in both low-depth and high-depth regions.


Input: IDBA-UD takes interleaved paired end data in the FASTA format as input, 
i.e. paired-end reads need to be stored in the same FASTA file suc h that a pair 
of reads should be in two consecutive lines. 
In Galaxy paired reads in separate FASTQ files can be converted into interleaved 
FASTA using the tools:  

* `FASTQ interlacer on paired end read <https://toolshed.g2.bx.psu.edu/view/devteam/fastq_paired_end_interlacer>`_
* `Samtools extract FASTA or FASTQ from a SAM file <https://toolshed.g2.bx.psu.edu/view/devteam/fastq_to_fasta>`_

Note that, IDBA-UD assumes that the paired-end reads are in order (->,<-). 
If your data is in reverse order (<-,->), please convert it by yourself.
    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/bts174</citation>
    </citations>
</tool>
