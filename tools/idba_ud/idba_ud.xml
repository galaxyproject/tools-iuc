<tool id="idba_ud" name="IDBA-UD" version="@IDBA_VERSION@+galaxy1">
    <description>
        Iterative de Bruijn Graph Assembler for data with highly uneven depth
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="aggressive"><![CDATA[
    idba_ud

    @MAIN_INPUT@
    @LEVELS_INPUT@
    @KMER_OPTIONS@
    @FILTER_OPTIONS@
	--min_pairs $min_pairs
	@OTHER_OPTIONS@
	@THREADS@
    ]]></command>

    <inputs>
        <expand macro="main_input"/>
        <expand macro="levels_input"/>
        <expand macro="kmer_options" maxk_default="100" step_default="20"/>
        <expand macro="filter_options"/>
        <expand macro="min_pairs_filter"/>
        <expand macro="other_options">
            <option value="--no_bubble">Do not merge bubble (--no_bubble)</option>
        </expand>
    </inputs>
    <outputs>
        <data name="output" from_work_dir="out/scaffold.fa" format="fasta"/>
    </outputs>
    <tests>
        <!-- basic test + check of defaults -->
        <test>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <assert_command>
                <has_text text="--mink 20" />
                <has_text text="--maxk 100" />
                <has_text text="--step 20" />
                <has_text text="--inner_mink 10" />
                <has_text text="--inner_step 5" />
                <has_text text="--prefix 3" />
                <has_text text="--min_count 2" />
                <has_text text="--min_support 1" />
                <has_text text="--seed_kmer 30" />
                <has_text text="--min_contig 200" />
                <has_text text="--similar 0.95" />
                <has_text text="--max_mismatch 3" />
                <has_text text="--min_pairs 3" />
                <not_has_text text="--read_level_2" />
                <not_has_text text="--read_level_3" />
                <not_has_text text="--read_level_4" />
                <not_has_text text="--read_level_5" />
                <not_has_text text="--no_bubble" />
                <not_has_text text="--no_local" />
                <not_has_text text="--no_coverage" />
                <not_has_text text="--no_correct" />
                <not_has_text text="--pre_correction" />
            </assert_command>
            <output name="output" file="out/scaffold.fa" ftype="fasta"/>
        </test>
        <!-- read levels test -->
        <test>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <param name="read_level_2" ftype="fasta" value="merged.fa"/>
            <param name="read_level_3" ftype="fasta" value="merged.fa"/>
            <param name="read_level_4" ftype="fasta" value="merged.fa"/>
            <param name="read_level_5" ftype="fasta" value="merged.fa"/>
            <assert_command>
                <has_text text="--read_level_2" />
                <has_text text="--read_level_3" />
                <has_text text="--read_level_4" />
                <has_text text="--read_level_5" />
            </assert_command>
            <output name="output" file="out/scaffold.fa" ftype="fasta" compare="sim_size"/>
        </test>
        <!-- k-mer options -->
        <test>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <param name="mink" value="19"/>
            <param name="maxk" value="99"/>
            <param name="step" value="19"/>
            <param name="inner_mink" value="9"/>
            <param name="inner_step" value="4"/>
            <param name="prefix" value="2"/>
            <param name="min_count" value="1"/>
            <param name="min_support" value="2"/>
            <param name="seed_kmer" value="29"/>
            <assert_command>
                <has_text text="--mink 19" />
                <has_text text="--maxk 99" />
                <has_text text="--step 19" />
                <has_text text="--inner_mink 9" />
                <has_text text="--inner_step 4" />
                <has_text text="--prefix 2" />
                <has_text text="--min_count 1" />
                <has_text text="--min_support 2" />
                <has_text text="--seed_kmer 29" />
            </assert_command>
            <output name="output" file="out/scaffold.fa" compare="sim_size"/>
        </test>
        <!-- filter options -->
        <test>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <param name="min_contig" value="199"/>
            <param name="similar" value="0.96"/>
            <param name="max_mismatch" value="2"/>
            <assert_command>
                <has_text text="--min_contig 199" />
                <has_text text="--similar 0.96" />
                <has_text text="--max_mismatch 2" />
            </assert_command>
            <output name="output" file="out/scaffold.fa" compare="sim_size"/>
        </test>
        <!-- min-pairs and other options -->
        <test>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <param name="min_pairs" value="2"/>
            <param name="other" value="--no_bubble,--no_local,--no_coverage,--no_correct,--pre_correction"/>
            <assert_command>
                <has_text text="--min_pairs 2" />
                <has_text text="--no_bubble" />
                <has_text text="--no_local" />
                <has_text text="--no_coverage" />
                <has_text text="--no_correct" />
                <has_text text="--pre_correction" />
            </assert_command>
            <output name="output" file="out/scaffold.fa" compare="sim_size"/>
        </test>
    </tests>
    <expand macro="help" more_help="IDBA-UD is an extension of IDBA algorithm for Short Reads Sequencing data with Highly Uneven Sequencing Depth. IDBA-UD also iterates from small k to a large k. In each iteration, short and low-depth contigs are removed iteratively with cutoff threshold from low to high to reduce the errors in low-depth and high-depth regions. Paired-end reads are aligned to contigs and assembled locally to generate some missing k-mers in low-depth regions. With these technologies, IDBA-UD can iterate k value of de Bruijn graph to a very large value with less gaps and less branches to form long contigs in both low-depth and high-depth regions."/>
    <expand macro="citations">
        <citation type="doi">10.1093/bioinformatics/bts174</citation>
    </expand>
</tool>
