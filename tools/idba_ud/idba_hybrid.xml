<tool id="idba_hybrid" name="IDBA-HYBRID" version="@IDBA_VERSION@">
    <description>
        Iterative de Bruijn Graph Assembler for hybrid sequencing data
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="aggressive"><![CDATA[
    idba_hybrid

    @MAIN_INPUT@
    #if $ref_source.ref_source_sel == "cached"
        --reference '${$ref_source.reference.fields.path}'
    #else
        --reference '$ref_source.reference'
    #end if
    @LEVELS_INPUT@
    @KMER_OPTIONS@
    @FILTER_OPTIONS@
    --min_region $min_region
    --max_gap $max_gap
    @MIN_PAIRS_FILTER@
    @OTHER_OPTIONS@
    @THREADS@
    ]]></command>

    <inputs>
        <expand macro="main_input"/>
        <conditional name="ref_source">
            <param label="Choose the source for the reference genome" name="ref_source_sel" type="select">
                <option value="cached">Locally cached</option>
                <option value="history">History</option>
            </param>
            <when value="cached">
                <param argument="--reference" label="Using reference genome" type="select">
                    <options from_data_table="all_fasta">
                        <filter column="1" type="sort_by" />
                    </options>
                    <validator message="No reference genome is available" type="no_options" />
                </param>
            </when>
            <when value="history">
                <param argument="--reference" type="data" format="fasta" label="Reference Annotation" />
            </when>
        </conditional>
        <expand macro="levels_input"/>
        <expand macro="kmer_options" maxk_default="100" step_default="20"/>
        <expand macro="filter_options"/>
        <param argument="--min_region" type="integer" value="300" label="Minimum size of region in reference genome"/>
        <param argument="--max_gap" type="integer" value="3" label="Maximum gap in reference"/>
        <expand macro="min_pairs_filter"/>
        <expand macro="other_options"/>
    </inputs>
    <outputs>
        <data name="output" from_work_dir="out/scaffold.fa" format="fasta"/>
    </outputs>
    <tests>
        <!-- basic test + check of defaults -->
        <test>
            <param name="ref_source|reference" value="reference.fa" ftype="fasta"/>
            <param name="ref_source|ref_source_sel" value="history"/>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <output name="output" file="out/scaffold.fa" ftype="fasta"/>
            <assert_command>
                <has_text text="--min_region 300" />
                <has_text text="--max_gap 3" />
            </assert_command>
        </test>
        <!-- chached reference test -->
        <test>
            <param name="ref_source|reference" value="test_id"/>
            <param name="ref_source|ref_source_sel" value="cached"/>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <output name="output" file="out/scaffold.fa" ftype="fasta"/>
        </test>
        <!-- tool specific parameters -->
        <test>
            <param name="ref_source|reference" value="reference.fa" ftype="fasta"/>
            <param name="ref_source|ref_source_sel" value="history"/>
            <param name="read" value="merged.fa" ftype="fasta"/>
            <param name="min_region" value="299"/>
            <param name="max_gap" value="2"/>
            <assert_command>
                <has_text text="--min_region 299" />
                <has_text text="--max_gap 2" />
            </assert_command>
            <output name="output" file="out/scaffold.fa" ftype="fasta"/>
        </test>
    </tests>
    <expand macro="help" more_help="IDBA-Hybrid is an iterative De Bruijn Graph De Novo Assembler for hybrid sequencing. It is an extension of IDBA-UD algorithm. It aims at using a closed related reference genome to help de novo assembly, especially when sequencing depth is low. IDBA-Hybrid does alignment between reads and reference first to extract similar regions in the reference genome, and then it correct the similar regions based on the alignment results and apply local assembly technique to resolve potential structure virations. Finally, it groups all the reads and the contigs got from those similar regions to do de novo assembly. The expriments showed it outperforms all existing de novo or hybrid assembly algorithms, especilly when the sequencing depth is low and the reference genome is similar to the target genome."/>
    <expand macro="citations">
    </expand>
</tool>
