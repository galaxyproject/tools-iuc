<macros>
    <token name="@IDBA_VERSION@">1.1.3</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@IDBA_VERSION@">idba</requirement>
            <yield/>
        </requirements>
    </xml>

    <xml name="main_input">
        <param argument="--read" type="data" format="fasta" label="Fasta read file. Lower or equal to 600b"/>
        <param argument="--long_read" type="data" format="fasta" optional="true" label="Fasta long read file. More than 600b"/>
    </xml>

    <token name="@MAIN_INPUT@">
        --read '$read'
        #if $long_read:
           --long_read '$long_read'
        #end if
    </token>

    <xml name="levels_input">
        <param argument="--read_level_2" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for second level scaffolds"/>
        <param argument="--read_level_3" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for third level scaffolds"/>
        <param argument="--read_level_4" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for fourth level scaffolds"/>
        <param argument="--read_level_5" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for fifth level scaffolds"/>
    </xml>
    <token name="@LEVELS_INPUT@">
    #if $read_level_2:
        --read_level_2 '$read_level_2'
    #end if
    #if $read_level_3:
        --read_level_3 '$read_level_3'
    #end if
    #if $read_level_4:
        --read_level_4 '$read_level_4'
    #end if
    #if $read_level_5:
        --read_level_5 '$read_level_5'
    #end if
    </token>

    <xml name="kmer_options" token_maxk_default="" token_step_default="">
        <param argument="--mink" type="integer" value="20" max="312" label="Minimum k value. Lower or equal to 312"/>
        <param argument="--maxk" type="integer" value="@MAXK_DEFAULT@" max="312" label="Maximum k value. Lower or equal to 312"/>
        <param argument="--step" type="integer" value="@STEP_DEFAULT@" label="Increment of k-mer of each iteration"/>
        <param argument="--inner_mink" type="integer" value="10" label="Inner minimum k value"/>
        <param argument="--inner_step" type="integer" value="5" label="Inner increment of k-mer"/>
        <param argument="--prefix" type="integer" value="3" label="Prefix length used to build sub k-mer table"/>
        <param argument="--min_count" type="integer" value="2" label="Minimum multiplicity for filtering k-mer when building the graph"/>
        <param argument="--min_support" type="integer" value="1" label="Minimum supoort in each iteration"/>
        <param argument="--seed_kmer" type="integer" value="30" label="Seed kmer size for alignment"/>
    </xml>
    <token name="@KMER_OPTIONS@">
        --mink $mink
        --maxk $maxk
        --step $step
        --inner_mink $inner_mink
        --inner_step $inner_step
        --prefix $prefix
        --min_count $min_count
        --min_support $min_support
        --seed_kmer $seed_kmer
    </token>

    <xml name="filter_options">
        <param argument="--min_contig" type="integer" value="200" label="Minimum size of contig"/>
        <param argument="--similar" type="float" value="0.95" label="Similarity for alignment"/>
        <param argument="--max_mismatch" type="integer" value="3" label="Max mismatch of error correction"/>
    </xml>
    <token name="@FILTER_OPTIONS@">
        --min_contig $min_contig
        --similar $similar
        --max_mismatch $max_mismatch
    </token>

    <xml name="min_pairs_filter">
        <param argument="--min_pairs" type="integer" value="3" label="Minimum number of pairs"/>
    </xml>
    <token name="@MIN_PAIRS_FILTER@">
        --min_pairs $min_pairs
    </token>
    <xml name="other_options">
       <param name="other" type="select" display="checkboxes" multiple="true" label="Other options">
            <yield/>
            <option value="--no_local">Do not use local assembly (--no_local)</option>
            <option value="--no_coverage">Do not iterate on coverage (--no_coverage)</option>
            <option value="--no_correct">Do not do correction (--no_correct)</option>
            <option value="--pre_correction">Perform pre-correction before assembly (--pre_correction)</option>
        </param>
    </xml>
    <token name="@OTHER_OPTIONS@">
        #if $other:
            ${" ".join(str($other).split(","))}
        #end if
    </token>

    <token name="@THREADS@">
        --num_threads \${GALAXY_SLOTS:-1}
    </token>

    <xml name="help" token_more_help="">
        <help><![CDATA[
IDBA is an iterative De Bruijn Graph De Novo Assembler for sequence assembly. Most assemblers based on de Bruijn graph build a de Bruijn graph with a specific k-mer size to perform the assembling task. For all of them, it is very crucial to find a specific value of k. If k is too large, there will be a lot of gap problems in the graph. If k is too small, there will a lot of branch problems. IDBA uses not only one specific k but a range of k values to build the iterative de Bruijn graph. It can keep all the information in graphs with different k values. 

@MORE_HELP@

Input: IDBA-* take interleaved paired end data in the FASTA format as input, 
i.e. paired-end reads need to be stored in the same FASTA file such that a pair 
of reads should be in two consecutive lines.
In Galaxy paired reads in separate FASTQ files can be converted into interleaved 
FASTA using the tools:  

* `FASTQ interlacer on paired end read <https://toolshed.g2.bx.psu.edu/view/devteam/fastq_paired_end_interlacer>`_
* `Samtools extract FASTA or FASTQ from a SAM file <https://toolshed.g2.bx.psu.edu/view/devteam/fastq_to_fasta>`_

Note that, IDBA-* assumes that the paired-end reads are in order (->,<-). 
If your data is in reverse order (<-,->), please convert it by yourself.
        ]]></help>
    </xml>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1007/978-3-642-12683-3_28</citation>
            <yield/>
        </citations>
    </xml>

</macros>
