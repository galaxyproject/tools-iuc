<tool id="chopper" name="Chopper" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" python_template_version="3.5" profile="23.2">
	<description>Filtering and trimming of fastq files (long reads).</description>
	<macros>
		<token name="@TOOL_VERSION@">0.10.0</token>
		<token name="@VERSION_SUFFIX@">0</token>
	</macros>
	<requirements>
		<requirement type="package" version="@TOOL_VERSION@">chopper</requirement>
	</requirements>
	<version_command>chopper --version</version_command>
	<command detect_errors="exit_code"><![CDATA[
 chopper

 --input $input

 #if $contam
	--contam $contam	
 #end if

 #if $option_params.quality
	--quality $option_params.quality.value
 #end if

 #if $option_params.maxqual
	--maxqual $option_params.maxqual.value
 #end if

 #if $option_params.minlength
	--minlength $option_params.minlength.value
 #end if

 #if $option_params.maxlength
	--maxlength $option_params.maxlength.value
 #end if

 #if $option_params.headcrop
	--headcrop $option_params.headcrop.value
 #end if

 #if $option_params.tailcrop
	--tailcrop $option_params.tailcrop.value
 #end if

 #if $option_params.mingc
	--mingc $option_params.mingc.value
 #end if

 #if $option_params.maxgc
	--maxgc $option_params.maxgc.value
 #end if

 ##output capture
 #if $output_params.inverse == "yes"
    $output_params.inverse
 #end if 

 #if $output_params.gzip == "no"
	> $fq_filt 
 #else
	| gzip > $fq_filt_gz
 #end if

 ]]></command>
	<inputs>
		<param argument="--input" type="data" label="FASTQ file to check" format="fastq,fastq.gz,fastqsanger.gz,fastqsanger" />
		<param argument="--contam" type="data" format="fasta" optional="True"  size="30" label="Reference FASTA" help="FASTA file with reference to check potential contaminants against."/>	

		<section name="option_params" title="Optional Parameters" expanded="True">
			<param argument="--quality" type="integer" label="Minimal quality score" value="0" min="0" max="60" help="Sets a minimum Phred average quality score [default: 0]" />
			<param argument="--maxqual" type="integer" label="Maximal quality score" value="60" min="0" max="60" help="Sets a maximum Phred average quality score [default: 60]" />
			<param argument="--minlength" type="integer" label="Sets a minimum read length" value="1" min="1"  help="Minimal length of read to keep [default: 1]"  optional="True"/>
			<param argument="--maxlength" type="integer" label="Sets a maximum read length" help="Maximal length of read to keep" optional="True"/>
			<param argument="--headcrop" type="integer" label="Headcrop" value="0" min="0" help="Trim N nucleotides from the start of a read." optional="True"/>
			<param argument="--tailcrop" type="integer" label="Tailcrop" value="0" min="0" help="Trim N nucleotides from the end of a read." optional="True"/>
			<param argument="--mingc" type="float" label="Minimum GC content" value="0.0" min="0.0" max="1.0" help="Sets a minimum GC content for reads to keep [default: 0.0]" optional="True"/>
			<param argument="--maxgc" type="float" label="Maximum GC content" value="1.0" min="0.0" max="1.0" help="Sets a maximum GC content for reads to keep [default: 1.0]" optional="True"/>
			<param argument="--trim" type="integer" label="Q-score cutoff to trim read ends" value="0" min="0" max="60" help="Takes a quality score and will trim the ends of the reads if they are below the specified cut-off (window-size = 1)." />
		</section>

		<section name="output_params" title="Output Parameters" expanded="False">
			<param argument="--inverse" type="boolean" checked="false" truevalue="--inverse" falsevalue="" label="Output the opposite of the normal results" help="Reverse the output results (aka, the 'failed reads')" />
			<param name="gzip" type="boolean" checked="true" truevalue="yes" falsevalue="no" label="Gzip output data" help="Set to 'no' to NOT gzip the output file [default gzip output]."/>
		</section>
	</inputs>

	<outputs>
		<data name="fq_filt_gz" format="fastq.gz" label="${tool.name} on ${input.name} ($on_string), gzipped" >
			<filter> output_params['gzip'] is True </filter>
		</data>
		<data name="fq_filt" format="fastq" label="${tool.name} on ${input.name} ($on_string)" >
			<filter> output_params['gzip'] is False </filter>
		</data>
	</outputs>
	
	<tests>
		<test expect_num_outputs="1">
			<param name="input" value="test.fastq"/>
			<section name="output_params">
				<param name="gzip" value="false"/>
			</section>
			<output name="fq_filt">
				<assert_contents>
					<has_text_matching expression="^@"/>
					<has_text_matching expression="\n\+\n"/>
				</assert_contents>
			</output>
		</test>
		<test expect_num_outputs="1">
			<param name="input" value="test.fastq"/>
			<param name="contam" value="random_contam.fa"/>
			<output name="fq_filt">
				<assert_contents>
					<has_text text="@"/>
					<has_text text="+"/>
				</assert_contents>
			</output>
		</test>
		<test expect_num_outputs="1">
			<param name="input" value="other-test.fastq"/>
			<section name="option_params">
				<param name="mingc" value="0.2"/>
			</section>
			<section name="output_params">
				<param name="gzip" value="false"/>
			</section>
			<output name="fq_filt">
				<assert_contents>
					<has_text_matching expression="^@"/>
					<has_text_matching expression="\n\+\n"/>
				</assert_contents>
			</output>
		</test>
	</tests>
	<help><![CDATA[
**Chopper**

Rust implementation of NanoFilt+NanoLyse, both originally written in Python. This tool, intended for long read sequencing such as PacBio or ONT, filters and trims a fastq file.
Filtering is done on average read quality and minimal or maximal read length, and applying a headcrop (start of read) and tailcrop (end of read) while printing the reads passing the filter.

**More Information** 

- **Official Repository**: `Chopper on GitHub`_

.. _Chopper on GitHub: https://github.com/wdecoster/chopper

	]]></help>
	<citations>
		<citation type="doi">10.1093/bioinformatics/btad311</citation>
	</citations>
</tool>
