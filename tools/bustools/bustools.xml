<tool id="bustools" name="Bustools" version="@VERSION@">
    <description>Working with bus files</description>
    <macros>
        <import>busmacros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
#if $commandselect.commandtype == "capture":
    @CAPTURE@
#else if $commandselect.commandtype == "correct":
    @CORRECT@
#else if $commandselect.commandtype == "count":
    @COUNT@
#else if $commandselect.commandtype == "inspect":
    @INSPECT@
#else if $commandselect.commandtype == "linker":
    @LINKER@
#else if $commandselect.commandtype == "project":
    @PROJECT@
#else if $commandselect.commandtype == "sort":
    @SORT@
#else if $commandselect.commandtype == "text":
    @TEXT@
#else if $commandselect.commandtype == "whitelist":
    @WHITELIST@
#end if
    ]]></command>
    <inputs>
        <param name="file" type="data" label="Data file" format="bus"/>
        <conditional name="commandselect">
            <param name="commandtype" type="select" label="Bustool function">
                <option value="capture">Capture reads mapping to a transcript capture list</option>
                <option value="correct">Error correct bus files</option>
                <option value="count">Generate count matrices from bus file</option>
                <option value="inspect">Produce a report summarizing a BUS file</option>
                <option value="linker">Remove section of barcodes in BUS files</option>
                <option value="project">Project a BUS file to gene sets</option>
                <option value="sort">Sort bus file by barcodes and UMI</option>
                <option value="text">Output as tab separated text file</option>
                <option value="whitelist">Generate a whitelist from a BUS file</option>
            </param>
            <when value="capture">
                <param name="capture" type="data" format="txt" label="Capture" help="List of transcripts to capture"/>
                <expand macro="ecfile"/>
                <expand macro="txtnamesfile"/>
                <param name="complement" type="boolean" truevalue="--complement" falsevalue="" label="Complement" help="Take complement of captured set"/>
                <param name="ctype" type="select" label="Capture list contains:">
                    <option value="--umis">a list of umis</option>
                    <option value="--transcripts">a list of transcripts</option>
                    <option value="--barcode">a list of barcodes</option>
                </param>
            </when>
            <when value="correct">
                <expand macro="whitelistfile"/>
            </when>
            <when value="count">
                <expand macro="genemapfile"/>
                <expand macro="ecfile"/>
                <expand macro="txtnamesfile"/>
                <param name="genecounts" type="boolean" truevalue="--genecounts" falsevalue="" label="Gene counts" help="Aggregate counts to genes only?"/>
                <param name="multimapping" type="boolean" truevalue="--multimapping" falsevalue="" label="Multimapping" help="Include bus records that pseudoalign to multiple genes"/>
            </when>
            <when value="inspect">
                <expand macro="ecfile"/>
                <expand macro="whitelistfile"/>
            </when>
            <when value="linker">
                <param name="start" type="integer" value="-1" label="Start coordinate for section of barcode to remove"
                help="0-indexed, inclusive. If set at -1, removed section will begin at the beginning of the barcode."/>
                <param name="end" type="integer" value="-1" label="End coordinate for section of barcode to remove"
                help="0-indexed, inclusive. If set at -1, removed section will end at the end of the barcode."/>
            </when>
            <when value="project">
                <expand macro="genemapfile"/>
                <expand macro="ecfile"/>
                <expand macro="txtnamesfile"/>
            </when>
            <when value="sort"/>
            <when value="text"/>
            <when value="whitelist">
                <param name="threshold" type="integer" value="1" label="Minimum number of times a barcode must appear to be included in whitelist"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="buscap" format="bus" from_work_dir="out.capture" label="Captured bus on ${on_string}">
            <filter>commandselect['commandtype'] == 'capture'</filter>
        </data>

        <data name="buscorr" format="bus" from_work_dir="out.corrected.bus" label="Corrected bus on ${on_string}">
            <filter>commandselect['commandtype'] == 'correct'</filter>
        </data>

        <data name="bussort" format="bus" from_work_dir="out.sorted.bus" label="Sorted bus on ${on_string}">
            <filter>commandselect['commandtype'] == 'sort'</filter>
        </data>

        <data name="bustext" format="tsv" from_work_dir="out.text.tsv" label="Text bus on ${on_string}">
            <filter>commandselect['commandtype'] == 'text'</filter>
        </data>

        <data name="countoutbar" format="txt" from_work_dir="countout.barcodes.txt" label="List of barcodes from count on ${on_string}">
            <filter>commandselect['commandtype'] == 'count'</filter>
        </data>
        <data name="countoutec" format="txt" from_work_dir="countout.ec.txt" label="Equivalence classes from count on ${on_string}">
            <filter>commandselect['commandtype'] == 'count'</filter>
            <filter>not commandselect['genecounts']</filter>
        </data>
        <data name="countoutmtx" format="mtx" from_work_dir="countout.mtx" label="Counts matrix from count on ${on_string}">
            <filter>commandselect['commandtype'] == 'count'</filter>
        </data>
        <data name="countoutgenes" format="txt" from_work_dir="countout.genes.txt" label="List of genes from count on ${on_string}">
            <filter>commandselect['commandtype'] == 'count'</filter>
            <filter>commandselect['genecounts']</filter>
        </data>

        <data name="businspect" format="json" from_work_dir="inspect.json" label="Inspect on ${on_string}">
            <filter>commandselect['commandtype'] == 'inspect' and commandselect['genecounts']</filter>
        </data>

        <data name="buslinked" format="bus" from_work_dir="linked.bus" label="Linker on ${on_string}">
            <filter>commandselect['commandtype'] == 'linker'</filter>
        </data>

        <data name="projectbus" format="bus" from_work_dir="projectout.bus" label="Projected bus on ${on_string}">
            <filter>commandselect['commandtype'] == 'project'</filter>
        </data>
        <data name="projectec" format="txt" from_work_dir="projectout.ec" label="Projected equivalence classes on ${on_string}">
            <filter>commandselect['commandtype'] == 'project'</filter>
        </data>
        <data name="projectgenes" format="txt" from_work_dir="projectout.genes.txt" label="Projected genes on ${on_string}">
            <filter>commandselect['commandtype'] == 'project'</filter>
        </data>

        <data name="whitelistout" format="txt" from_work_dir="buswhitelist.txt" label="Whitelist on ${on_string}">
            <filter>commandselect['commandtype'] == 'whitelist'</filter>
        </data>

    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="file" value="testbus.bus"/>
            <param name="commandtype" value="capture"/>
            <param name="capture" value="transcripts.txt"/>
            <param name="ecmap" value="matrix.ec"/>
            <param name="txtnames" value="txg.txt"/>
            <param name="ctype" value="--transcripts"/>
            <output name="buscap" value="cap.test.bus" ftype="bus" compare="sim_size"/>
        </test>
        <test expect_num_outputs="1">
            <param name="file" value="testbus.bus"/>
            <param name="commandtype" value="correct"/>
            <param name="whitelist" value="whitelist.txt"/>
            <output name="buscorr" value="corr.test.bus" ftype="bus" compare="sim_size"/>
        </test>
        <test expect_num_outputs="3">
            <param name="file" value="kbtest.bus"/>
            <param name="commandtype" value="count"/>
            <param name="genemap" value="txg.txt"/>
            <param name="ecmap" value="matrix.ec"/>
            <param name="txtnames" value="transcripts.txt"/>
            <output name="countoutec" value="count.ec"/>
        </test>
        <test expect_num_outputs="1">
            <param name="file" value="kbtest.bus"/>
            <param name="commandtype" value="inspect"/>
            <param name="ecmap" value="matrix.ec"/>
            <param name="whitelist" value="buswhitelist.txt"/>
            <output name="businspect">
                <assert_contents>
                    <has_text text='"numRecords": 23,'/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="file" value="testbus.bus"/>
            <param name="commandtype" value="linker"/>
            <param name="start" value="0"/>
            <param name="end" value="12"/>
            <output name="buslinked" value="linked.bus" ftype="bus" compare="sim_size"/>
        </test>
        <test expect_num_outputs="3">
            <param name="file" value="kbtest.bus"/>
            <param name="commandtype" value="project"/>
            <param name="genemap" value="txg.txt"/>
            <param name="ecmap" value="matrix.ec"/>
            <param name="txtnames" value="transcripts.txt"/>
            <output name="projectgenes" value="project.txt"/>
        </test>
        <test expect_num_outputs="1">
            <param name="file" value="testbus.bus"/>
            <param name="commandtype" value="sort"/>
            <output name="bussort" value="sort.test.bus" ftype="bus" compare="sim_size"/>
        </test>
        <test expect_num_outputs="1">
            <!-- -->
            <param name="file" value="testbus.bus"/>
            <param name="commandtype" value="text"/>
            <output name="bustext" value="text.test.tsv" ftype="tsv"/>
        </test>
        <test expect_num_outputs="1">
            <!-- -->
            <param name="file" value="testbus.bus"/>
            <param name="commandtype" value="whitelist"/>
            <param name="whitelist" value="1"/>
            <output name="whitelistout" value="buswhitelist.txt"/>
        </test>
    </tests>
    <help><![CDATA[
@help@
    ]]></help>
    <expand macro="citations"/>
</tool>
