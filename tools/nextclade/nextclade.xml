<tool id="nextclade" name="Nextclade" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01" license="MIT">
    <description>Viral genome clade assignment, mutation calling, and sequence quality checks</description>
    <macros>
        <import>macros.xml</import>
        <import>generated_macros.xml</import>
        <token name="@VERSION_SUFFIX@">0</token>
        <!-- Nextclade 3 warns that 3.0.0 is the minimum required schema version. -->
        <token name="@COMPATIBILITY_SPEC@"><![CDATA[^3.0.0$)]]></token>
    </macros>
    <expand macro="xrefs"/>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">nextclade</requirement>
        <requirement type="package" version="9.0">coreutils</requirement>
    </requirements>
    <version_command>nextclade --version|cut -d' ' -f2</version_command>
    <command detect_errors="exit_code"><![CDATA[
        #if $db.source == "cached"
            ln -s '${db.release.fields.path}' db &&
        #elif $db.source == "dataset"
            ln -s '${db.input_nextclade_dataset}' db.zip &&
        #end if
        @QUERY_FASTA@
        nextclade run
        #if $db.source == "download"
            --dataset-name '${organism}'
        #elif $db.source == "cached"
            --input-dataset db/
        #elif $db.source == "dataset"
            --input-dataset db.zip
        #end if 
        #if $adv.advanced_options == 'yes'
            #if $adv.input_pathogen_json
                --input-pathogen-json '$adv.input_pathogen_json'
            #end if
            #if $adv.input_ref
                --input-ref '$adv.input_ref'
            #end if
            #if $adv.input_tree
                --input-tree '$adv.input_tree'
            #end if
            #if $adv.input_annotation
                --input-annotation '$adv.input_annotation'
            #end if 
            #if $adv.input_pcr_primers
                --input-pcr-primers '$adv.input_pcr_primers'
            #end if
        #end if
        #if $outputs and "report_tsv" in $outputs
            #if $include_header
                --output-tsv '$report_tsv'
            #else
                --output-tsv report.tsv
            #end if
        #end if 
        #if $outputs and "report_json" in $outputs
            --output-json '${report_json}'
        #end if 
        #if $outputs and "output_tree" in $outputs
            --output-tree '${output_tree}'
        #end if
        #if $outputs and "output_fasta" in $outputs
            --output-fasta "${output_fasta}"
            #if str($adv.advanced_options) == "yes"
                $adv.include_reference true
            #end if
        #end if
        $query
        #if $outputs and "report_tsv" in $outputs and not $include_header
            && tail -n+2 report.tsv >'$report_tsv'
        #end if 
    ]]></command>
    <inputs>
        <param argument="--input-fasta" type="data" format="fasta,fasta.gz" label="FASTA file with input sequences"/>
        <param name="organism" type="select" label="Organism">
            <expand macro="dataset_selector" />
        </param>
        <conditional name="db">
            <param name="source" type="select" label="Version of database to use">
                <option value="cached" selected="true">Use specific database version cached on this Galaxy server</option>
                <option value="dataset">Use a dataset from the history</option>
                <option value="download">Download latest available database version from web</option>
            </param>
            <when value="cached">
                <param name="release" label="Cached nextclade database release" type="select">
                    <options from_data_table="nextclade">
                        <column name="value" index="0"/>
                        <column name="description" index="2"/>
                        <column name="date" index="4"/>
                        <column name="path" index="5"/>
                        <filter type="sort_by" column="4"/>
                        <filter type="param_value" ref="organism" column="1"/>
                        <filter type="regexp" column="3" value="@COMPATIBILITY_SPEC@"/>
                    </options>
                </param>
            </when>
            <when value="dataset">
                <param name="input_nextclade_dataset" type="data" format="zip" label="Nextclade dataset (ZIP archive)" help="A ZIP archive containing a nextclade dataset, such as the one downloaded from the nextclade get command." />
            </when>
            <when value="download"/>
        </conditional>
        <param name="outputs" type="select" label="Output options" help="Output reports and optionally tree" multiple="true">
            <option value="report_json">JSON format report</option>
            <option value="report_tsv" selected="true">Tabular format report</option>
            <option value="output_tree">Auspice v2 tree file (JSON format)</option>
            <option value="output_fasta">Aligned sequences (FASTA format)</option>
        </param>
        <param name="include_header" type="boolean" label="Include header line in output file" truevalue="true" falsevalue="false"/>
        <conditional name="adv">
            <param name="advanced_options" type="select" label="Use advanced options">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <param argument="--input-pathogen-json" type="data" label="Custom pathogen config file (JSON)" format="json" optional="true" help="JSON file to override pathogen.json in the dataset"/>
                <param argument="--input-ref" type="data" label="Custom reference sequence" format="fasta" optional="true" help="FASTA file containing reference sequence to override the one in the dataset"/>
                <param argument="--input-tree" type="data" label="Custom reference tree" format="json" optional="true" help="Auspice JSON v2 file containing custom reference tree"/>
                <param argument="--input-annotation" type="data" label="Genome annotation in GFF3 format" format="gff3" optional="true" help="GFF3 custom annotation, used to find coding regions"/>
                <param argument="--input-pcr-primers" type="data" label="Custom PCR primer sites" format="json" optional="true" help="CSV file containing a list of custom PCR primer sites. These are used to report mutations in these sites"/>
                <param argument="--include-reference" truevalue="--include-reference" falsevalue="" type="boolean" label="Include reference sequence in FASTA alignment output" help="The FASTA alignment is an optional output of nextclade. Select this option to include the reference sequence in that alignment file"/>
            </when>
            <when value="no">
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="report_tsv" format="tabular" label="${tool.name} on ${on_string} (TSV report)">
            <filter>outputs and "report_tsv" in outputs</filter>
            <actions>
                <expand macro="output_columns" />
            </actions>
        </data>
        <data name="report_json" format="json" label="${tool.name} on ${on_string} (JSON report)">
            <filter>outputs and "report_json" in outputs</filter>
        </data>
        <data name="output_tree" format="json" label="${tool.name} on ${on_string} (Auspice v2 tree)">
            <filter>outputs and "output_tree" in outputs</filter>
        </data>
        <data name="output_fasta" format="fasta" label="${tool.name} on ${on_string} (FASTA alignment)">
            <filter>outputs and "output_fasta" in outputs</filter>
        </data>
    </outputs>
    <tests>
        <!-- test1 -->
        <test expect_num_outputs="1">
            <param name="input_fasta" value="sarscov2_1.fasta" ftype="fasta"/>
            <conditional name="db">
                <param name="source" value="download"/>
            </conditional>
            <param name="outputs" value="report_tsv"/>
            <param name="organism" value="sars-cov-2"/>
            <output name="report_tsv">
                <assert_contents>
                    <has_n_columns n="@SARS_COV_2_NUM_COLUMNS@"/>
                    <has_text text="20A"/>
                </assert_contents>
            </output>
        </test>
        <!-- test2 -->
        <test expect_num_outputs="3">
            <param name="input_fasta" value="sarscov2_1.fasta" ftype="fasta"/>
            <conditional name="db">
                <param name="source" value="download"/>
            </conditional>
            <param name="outputs" value="report_tsv,report_json,output_tree"/>
            <param name="organism" value="sars-cov-2"/>
            <output name="report_tsv">
                <assert_contents>
                    <has_n_columns n="@SARS_COV_2_NUM_COLUMNS@"/>
                    <has_text text="20A"/>
                </assert_contents>
                <metadata name="column_names" value="@SARS_COV_2_COLUMNS@"/>
            </output>
            <output name="report_json">
                <assert_contents>
                    <has_text text="&quot;pos&quot;: 240,"/>
                </assert_contents>
            </output>
            <output name="output_tree">
                <assert_contents>
                    <has_text text="&quot;title&quot;: &quot;QC Status&quot;"/>
                </assert_contents>
            </output>
        </test>
        <!-- test3 -->
        <test expect_num_outputs="1">
            <param name="input_fasta" value="sarscov2_1.fasta" ftype="fasta"/>
            <conditional name="db">
                <param name="source" value="download"/>
            </conditional>
            <param name="outputs" value="report_tsv"/>
            <param name="organism" value="sars-cov-2"/>
            <conditional name="adv">
                <param name="advanced_options" value="yes"/>
                <param name="input_pathogen_json" value="sars-cov-2.pathogen.json" ftype="json"/>
            </conditional>
            <output name="report_tsv">
                <assert_contents>
                    <has_n_columns n="@SARS_COV_2_NUM_COLUMNS@"/>
                    <has_text text="mediocre"/>
                </assert_contents>
            </output>
        </test>
        <!-- test4 -->
        <test expect_num_outputs="2">
            <param name="input_fasta" value="sarscov2_1.fasta" ftype="fasta"/>
            <conditional name="db">
                <param name="source" value="download"/>
            </conditional>
            <param name="outputs" value="report_tsv,output_fasta"/>
            <param name="organism" value="sars-cov-2"/>
            <conditional name="adv">
                <param name="advanced_options" value="yes"/>
                <param name="include_reference" value="true"/>
            </conditional>
            <output name="report_tsv">
                <assert_contents>
                    <has_n_columns n="@SARS_COV_2_NUM_COLUMNS@"/>
                    <has_text text="mediocre"/>
                </assert_contents>
            </output>
            <output name="output_fasta" value="output_alignment.fasta" ftype="fasta"/>
        </test>
        <!-- test5 -->
        <test expect_num_outputs="1">
            <param name="input_fasta" value="mpxv.fasta.gz" ftype="fasta.gz"/>
            <conditional name="db">
                <param name="source" value="download"/>
            </conditional>
            <param name="outputs" value="report_tsv"/>
            <param name="organism" value="MPXV"/>
            <output name="report_tsv">
                <assert_contents>
                    <has_n_columns n="@MPXV_NUM_COLUMNS@"/>
                    <has_text text="hMPXV-1"/>
                </assert_contents>
                <metadata name="column_names" value="@MPXV_COLUMNS@"/>
            </output>
        </test>
        <!-- test6 -->
        <test expect_num_outputs="1">
            <param name="input_fasta" value="yellowfever.fasta.gz" ftype="fasta.gz"/>
            <conditional name="db">
                <param name="source" value="dataset" />
                <param name="input_nextclade_dataset" value="yellowfever_dataset.zip" ftype="zip"/>
            </conditional>
            <param name="outputs" value="report_tsv"/>
            <param name="organism" value="nextstrain/yellow-fever/prM-E" />
            <output name="report_tsv">
                <assert_contents>
                    <has_text text="T216C,C390T,C402T,C525T,C531T"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

Nextclade_ assigns clades, calls mutations and performs sequence quality checks on viral genome sequences.

For a description of nextclade's configuration files, see the `nextclade documentation <https://docs.nextstrain.org/projects/nextclade/en/latest/index.html>`_.

**Input**

Input is a FASTA file containing one or more SARS-CoV-2 consensus genomes.

**Output**

Outputs can include:

* A tabular format file with a report, one line per input sequence

* A JSON format file with the same information as is present in the tabular report

* An Auspice v2 tree file in JSON format

.. _Nextclade: https://github.com/nextstrain/nextclade

    ]]></help>
    <expand macro="citations"/>
</tool>
