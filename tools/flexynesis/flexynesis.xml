<tool id="flexynesis" name="Flexynesis" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description></description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="edam"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        #if str($license_type) == 'academic' or str($license_type) == 'commercial':
            mkdir -p input/test input/train output &&
            #for $file in $train
                ln -sf '$file' 'input/train/${file.element_identifier}.${file.ext}' &&
            #end for
            #for $file in $test
                ln -sf '$file' 'input/test/${file.element_identifier}.${file.ext}' &&
            #end for
            flexynesis  --data_path 'input'
                        --outdir 'output'
                        --model_class $model_class
                        #if str($model_class) == 'GNN':
                            --gnn_conv_type $gnn_conv_type
                            --string_organism $string_organism
                            --string_node_name $string_node_name
                        #end if
                        #if str($training_type.model) == 's_train':
                            #if str($target_variables) != '':
                                --target_variables $target_variables
                            #end if
                            #if str($surv_event_var) != '':
                                --surv_event_var $surv_event_var
                                --surv_time_var $surv_time_var
                            #end if
                        #end if
                        #if str($training_type.model) == 'cm_train':
                            --input_layers $input_layers
                            --output_layers $output_layers
                        #end if
                        --fusion_type $fusion_type
                        --hpo_iter $hpo_iter
                        --finetuning_samples $finetuning_samples
                        --variance_threshold $variance_threshold
                        --correlation_threshold $correlation_threshold
                        --subsample $subsample
                        --features_min $features_min
                        --features_top_percentile $features_top_percentile
                        --data_types $data_types
                        --log_transform $log_transform
                        --early_stop_patience $early_stop_patience
                        --hpo_patience $hpo_patience
                        --use_loss_weighting $use_loss_weighting
                        $use_cv
                        $evaluate_baseline_performance
                        $disable_marker_finding
        #end if
    ]]></command>
    <inputs>
        <conditional name="license" label="LICENSE">
            <param name="license_type" type="select" label="Please confirm to proceed." help="Permission is only granted for ACADEMIC, RESEARCH, and EDUCATIONAL usage. For commercial use please contact copyright holders.">
                <option value=""></option>
                <option value="academic">I confirm to use this tool only for ACADEMIC, RESEARCH, or EDUCATIONAL purposes</option>
                <option value="commercial">I use this tool for commercial purpose but I HAVE explicit permission</option>
            </param>
            <when value=""></when>
            <when value="academic">
                <expand macro="all_param"/>
            </when>
            <when value="commercial">
                <expand macro="all_param"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <collection name="results" type="list" label="${tool.name} on ${on_string}: results">
            <discover_datasets pattern="(?P&lt;name&gt;.+)\.csv$" format="csv" directory="output"/>
        </collection>
    </outputs>
    <tests>
        <test>
            <conditional name="license">
                <param name="license_type" value="academic"/>
            </conditional>
            <param name="train" value="train/clin,train/gex,train/cnv" ftype="csv"/>
            <param name="test" value="test/clin,test/gex,test/cnv" ftype="csv"/>
            <param name="data_types" value="gex,cnv" />
            <conditional name="training_type">
                <param name="model" value="s_train"/>
                <param name="model_class" value="DirectPred"/>
                <param name="target_variables" value="Erlotinib"/>
            </conditional>
            <param name="hpo_iter" value="1"/>
            <output_collection name="results" type="list">
                <element name="job.embeddings_test" file="test1_job.embeddings_test.csv" compare="sim_size"/>
                <element name="job.embeddings_train" file="test1_job.embeddings_train.csv" compare="sim_size"/>
                <element name="job.feature_importance">
                    <assert_contents>
                        <has_text_matching expression="Erlotinib,0,,gex,A2M,"/>
                        <has_text_matching expression="Erlotinib,0,,gex,ABCC4,"/>
                    </assert_contents>
                </element>
                <element name="job.feature_logs.gex" file="test1_job.feature_logs.gex.csv" compare="sim_size"/>
                <element name="job.feature_logs.cnv" file="test1_job.feature_logs.cnv.csv" compare="sim_size"/>
                <element name="job.predicted_labels">
                    <assert_contents>
                        <has_text_matching expression="source_dataset:A-704,Erlotinib,"/>
                        <has_text_matching expression="target_dataset:KMRC-20,Erlotinib,"/>
                    </assert_contents>
                </element>
                <element name="job.stats">
                    <assert_contents>
                        <has_text_matching expression="DirectPred,Erlotinib,numerical,mse,"/>
                        <has_text_matching expression="DirectPred,Erlotinib,numerical,r2,"/>
                        <has_text_matching expression="DirectPred,Erlotinib,numerical,pearson_corr,"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <test>
            <conditional name="license">
                <param name="license_type" value="academic"/>
            </conditional>
            <param name="train" value="train/clin,train/gex,train/cnv" ftype="csv"/>
            <param name="test" value="test/clin,test/gex,test/cnv" ftype="csv"/>
            <param name="data_types" value="gex,cnv"/>
            <conditional name="training_type">
                <param name="model" value="s_train"/>
                <param name="model_class" value="DirectPred"/>
                <param name="target_variables" value="Irinotecan"/>
            </conditional>
            <param name="hpo_iter" value="1"/>
            <output_collection name="results" type="list">
                <element name="job.embeddings_test" file="test2_job.embeddings_test.csv" compare="sim_size"/>
                <element name="job.embeddings_train" file="test2_job.embeddings_train.csv" compare="sim_size"/>
                <element name="job.feature_importance">
                    <assert_contents>
                        <has_text_matching expression="Irinotecan,0,,gex,A2M,"/>
                        <has_text_matching expression="Irinotecan,0,,gex,ABCC4,"/>
                    </assert_contents>
                </element>
                <element name="job.feature_logs.gex" file="test2_job.feature_logs.gex.csv" compare="sim_size"/>
                <element name="job.feature_logs.gex" file="test2_job.feature_logs.cnv.csv" compare="sim_size"/>
                <element name="job.predicted_labels">
                    <assert_contents>
                        <has_text_matching expression="source_dataset:A-704,Irinotecan,"/>
                        <has_text_matching expression="target_dataset:KMRC-20,Irinotecan,"/>
                    </assert_contents>
                </element>
                <element name="job.stats">
                    <assert_contents>
                        <has_text_matching expression="DirectPred,Irinotecan,numerical,mse,"/>
                        <has_text_matching expression="DirectPred,Irinotecan,numerical,r2,"/>
                        <has_text_matching expression="DirectPred,Irinotecan,numerical,pearson_corr,"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <test>
            <conditional name="license">
                <param name="license_type" value="academic"/>
            </conditional>
            <param name="train" value="train/clin,train/gex,train/cnv" ftype="csv"/>
            <param name="test" value="test/clin,test/gex,test/cnv" ftype="csv"/>
            <param name="data_types" value="gex,cnv"/>
            <conditional name="training_type">
                <param name="model" value="us_train"/>
                <param name="model_class" value="supervised_vae"/>
            </conditional>
            <param name="hpo_iter" value="1"/>
            <output_collection name="results" type="list">
                <element name="job.embeddings_test" file="test3_job.embeddings_test.csv" compare="sim_size"/>
                <element name="job.embeddings_train" file="test3_job.embeddings_train.csv" compare="sim_size"/>
                <element name="job.feature_logs.cnv" file="test3_job.feature_logs.cnv.csv" compare="sim_size"/>
                <element name="job.feature_logs.gex" file="test3_job.feature_logs.gex.csv" compare="sim_size"/>
            </output_collection>
        </test>
    </tests>
    <help>
Flexynesis is a deep-learning based multi-omics bulk sequencing data integration suite with a focus on (pre-)clinical endpoint prediction.
The package includes multiple types of deep learning architectures such as simple fully connected networks, supervised variational autoencoders, graph convolutional networks, multi-triplet networks different options of data layer fusion, and automates feature selection and hyperparameter optimisation.

For more information, please check the Documentation_ :

-----

.. image:: https://github.com/BIMSBbioinfo/flexynesis/raw/main/img/graphical_abstract.jpg
    :width: 600

-----

**Input Files**

**clin.csv**

clin.csv contains the sample metadata. The first column contains unique sample identifiers. The other columns contain sample-associated clinical variables. NA values are allowed in the clinical variables. 

The format might look like so:

========    === === === 
,           v1  v2  ...
--------    --- --- ---
sample1     a   b   ...
--------    --- --- ---
sample2     c   d   ...
--------    --- --- ---
sample3     e   f   ...          
--------    --- --- ---
...         ... ... ...          
========    === === ===

.

**omics.csv**

The first column of the feature tables must be unique feature identifiers (e.g. gene names). The column names must be sample identifiers that should overlap with those in the clin.csv. They don't have to be completely identical or in the same order. Samples from the clin.csv that are not represented in the omics table will be dropped. 

The format might look like so:

=====   ======= ======= ======= =======
,       sample1 sample2 sample3 ...
-----   ------- ------- ------- -------
gene1   0       1       2       ...
-----   ------- ------- ------- -------
gene2   3       3       5       ...
-----   ------- ------- ------- -------
gene3   2       3       4       ...
-----   ------- ------- ------- -------
...     ...     ...     ...     ...
=====   ======= ======= ======= =======

.

.. class:: infomark

**Concordance between train/test splits**

The corresponding omics files in train/test splits must contain overlapping feature names (they don't have to be identical or in the same order). The clin.csv files in train/test must contain matching clinical variables. 

.. class:: infomark

**data type**

Data type is a comma-separated list of filenames of the omics data. For example, if you have 2 omics files, mut.csv and rna.csv, you can provide them as mut,rna.

-----

**Supervised Training**

**Minimum requirements**

* clin.csv and omics.csv files for training and testing
* Selection of a tool/model 
* One target variable which can be numerical or categorical for regression/classification tasks.
* List of data types to use for modeling. 

Flexynesis supports both single-task and multi-task training. We can provide one or more target variables and optionally survival variables as input and Flexynesis will build the appropriate model architecture. If the selected variable is numerical, a Multi-Layered-Perceptron (MLP) with MSE loss will be used. If a categorical variable is provided, an MLP with cross-entropy-loss will be utilized. If survival variables are provided, an MLP with Cox-Proportional-Hazards loss will be attached to the model. 

**Regression:**


If your target variable is numerical, Flexynesis will build a regression model.

**Classification:**


If your target variable is categorical, Flexynesis will build a classification model.

**Survival Analysis:**


If your target variable is survival data, Flexynesis will build a survival analysis model.
For survival analysis, two separate variables are required, where the first variable is a numeric event variable (consisting of 0's or 1's, where 1 means an event such as disease progression or death has occurred). The second variable is also a numeric time variable, which indicates how much time it took since last patient follow-up. 

.. class:: infomark

**Note:** Flexynesis can be trained with multiple target variables, which can be a mixture of regression/classification/survival tasks. 

.. class:: infomark

**Note:** For the supervised tasks, the user can easily switch between different model architectures. 

.. class:: infomark

**Note:**  If you choose **MultiTripletNetwork** model, the first target variable should be a categorical variable.

.. class:: infomark

**Note:**  If you choose **GNN** model, the features should have the same naming convention between different omics modalities.

.. class:: infomark

**Note:**  The **GNN** model only works with genes (for example CpG methylation sites does not work). The reason is that GNNs require a prior knowledge network, which is currently set to use STRING database.

-----

**Unsupervised Training**

In the absence of any target variables or survival variables, you can use a VAE architecture to carry out unsupervised training. 

-----

**Cross-modality Training**

We have implemented a special case of VAEs where the input data layers and output data layers can be set to different data modalities. The purpose of a cross-modality encoder is to learn embeddings that can translate from one data modality to another. Crossmodality encoder we implemented supports both single/multiple input layers and also one or more target/survival variables can be added to the model. 

.. class:: infomark

**Note:** if you use same input and output layers, it will be the same as unsupervised training.

-----

.. class:: infomark

**Modality fusion:** 

Flexynesis currently supports two main ways of fusing different omics data modalities: 1. Early fusion: The input data matrices are initially concatenated and pushed through the networks 2. Intermediate fusion: The input data matrices are initially pushed through the networks to obtain a modality-specific embedding space, which then gets concatenated to serve as input for the supervisor MLPs. 

.. _Documentation: https://bimsbstatic.mdc-berlin.de/akalin/buyar/flexynesis/site/
    </help>

    <expand macro="citations" />
</tool>