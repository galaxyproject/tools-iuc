<tool id="unicycler" name="Create assemblies with Unicycler" version="0.1.0">
    <requirements>
         <requirement type="package" version="0.2.0">unicycler</requirement>
    </requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <command><![CDATA[

    ## Preparing files
    
    #if str( $paired_unpaired.fastq_input_selector ) == "paired":
        ln -s $paired_unpaired.fastq_input1 fq1.fastq &&
        ln -s $paired_unpaired.fastq_input2 fq2.fastq &&
    #elif str( $paired_unpaired.fastq_input_selector ) == "single":
        ln -s $paired_unpaired.fastq_input1 fq.fastq &&
    #end if

    #if str( $long_or_no_long.long_reads_selector ) == "yes":
        #if $long_or_no_long.long_reads.extension == "fastqsanger":
            ln -s $long_or_no_long.long_reads lr.fastq &&
        #elif $long_or_no_long.long_reads.extension == "fasta":
            ln -s $long_or_no_long.long_reads lr.fasta &&
        #end if
    #end if

    ## Running Unicycler

    unicycler -t 4 ## "\${GALAXY_SLOTS:-8}"

    #if str( $paired_unpaired.fastq_input_selector ) == "paired":
        -1 fq1.fastq
        -2 fq2.fastq
    #elif str( $paired_unpaired.fastq_input_selector ) == "single":
        -s fq.fastq
    #end if

    #if str( $long_or_no_long.long_reads_selector ) == "yes":
        #if $long_or_no_long.long_reads.extension == "fastqsanger":
            -l lr.fastq
        #elif $long_or_no_long.long_reads.extension == "fasta":
            -l lr.fasta
        #end if
    #end if

    -o ./

    --mode $mode

    #if str( $adv_param.adv_param_selector ) == "yes":
        --expected_linear $adv_param.lin_seq
        $adv_param.no_correct
        $adv_param.no_rotate
    #end if

    #if str( $spades.spades_selector ) == "yes":
        #if float( $spades.min_kmer_frac ) > 0.0:
            --min_kmer_frac $spades.min_kmer_frac
        #end if

        #if float( $spades.max_kmer_frac ) > 0.0:
            --max_kmer_frac $spades.max_kmer_frac
        #end if

        #if int( $spades.kmer_count ) > 0:
            --kmer_count $spades.kmer_count
        #end if
    #end if

    #if str( $rotation.rotation_selector ) == "yes":
        #if str( $rotation.rotation_fasta.rotation_fasta_selector ) == "yes":
            --start_genes $rotation.rotation_fasta.start_genes
        #end if
        
        #if int( $rotation.start_gene_id ) > 0:
            --start_gene_id $rotation.start_gene_id
        #end if

        #if int( $rotation.start_gene_cov ) > 0:
            --start_gene_cov $rotation.start_gene_cov
        #end if
    #end if

    #if str( $pilon.pilon_selector ) == "yes":
        #if int( $pilon.min_polish_size ) > 0:
            --min_polish_size $pilon.min_polish_size
        #end if
    #end if

    #if str( $graph_clean.graph_clean_selector ) == "yes":
        #if int( $graph_clean.min_component_size ) > 0:
            --min_component_size $graph_clean.min_component_size
        #end if

        #if int( $graph_clean.min_dead_end_size ) > 0:
            --min_dead_end_size $graph_clean.min_dead_end_size
        #end if
    #end if

    #if str( $lr_align.lr_align_selector ) == "yes":
        #if str( $lr_align.contamination.contamination_selector ) == "yes":
            --contamination $lr_align.contamination_fasta
        #end if

        #if str( $lr_align.scores ) != "0,0,0,0":
            --scores $lr_align.scores
        #end if

        #if int( $lr_align.low_score ) > 0:
            --low_score $lr_align.low_score
        #end if

        #if int( $lr_align.min_len ) > 0:
            --min_len $lr_align.min_len
        #end if

        $lr_align.keep_bad

        #if int( $lr_align.allowed_overlap ) > 0:
            --allowed_overlap $lr_align.allowed_overlap
        #end if

        #if int( $lr_align.kmer ) > 0:
            --kmer $lr_align.kmer
        #end if
    #end if

    --verbosity 3

    ]]></command>

    <inputs>
        <conditional name="paired_unpaired">
            <param name="fastq_input_selector" type="select" label="Paired or Single end data?" help="Select between paired and single end data">
                <option selected="True" value="paired">Paired</option>
                <option value="single">Single</option>
            </param>
            <when value="paired">
                <param name="fastq_input1" type="data" format="fastqsanger" label="Select first set of reads" help="Specify dataset with forward reads (-1)"/>
                <param name="fastq_input2" type="data" format="fastqsanger" label="Select second set of reads" help="Specify dataset with reverse reads (-2)"/>
            </when>
            <when value="single">
                <param name="fastq_input1" type="data" format="fastqsanger" label="Select unpaired reads" help="Specify dataset with unpaired reads (-s)"/>
            </when>
        </conditional>

        <conditional name="long_or_no_long">
            <param name="long_reads_selector" type="select" label="Are there long reads?" help="If present, select long (Oxford Nanopore or PacBio) reads">
                <option value="yes">Yes</option>
                <option selected="True" value="no">No</option>
            </param>
            <when value="yes">
                <param name="long_reads" type="data" format="fastqsanger,fasta" label="Select long reads" help="Specify dataset containing long reads (--long)"/>
            </when>
            <when value="no"/>
        </conditional>

        <param name="mode" type="select" label="Select Bridging mode" help="(--mode)">
            <option value="conservative">Conservative (smaller contigs, lower misassembly)</option>
            <option value="normal" selected="True">Normal (moderate contig size and misassembly rate)</option>
            <option value="bold">Bold (longest contigs, higher misassembly rate)</option>
        </param>

        <conditional name="adv_param">
            <param name="adv_param_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to set advanced Unicycler options?"/>
            <when value="yes">
                <param name="no_correct" type="boolean" checked="False" truevalue="--no_correct" falsevalue="" label="Skip SPAdes error correction step" help="This option turns off SPAdes error correction. Generally it is highly recommended to use correction. (--no_correct)"/>
                <param name="no_rotate" type="boolean" checked="False" truevalue="--no_rotate" falsevalue="" label="Do not rotate completed replicons to start at a standard gene." help="Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon. If one is found, the sequence is rotated and/or flipped so that it begins with that gene encoded on the forward strand. This provides consistently oriented assemblies and reduces the risk that a gene will be split across the start and end of the sequence. (--no_rotate)"/>
                <param name="no_pilon" type="boolean" checked="False" truevalue="--no_pilon" falsevalue="" label="Do not use Pilon to polish the final assembly." help="Unicycler uses Pilon tool for polishing final assembly. (--no_pilon)"/>
                <param name="lin_seq" type="integer" value="0" label="Expected number of linear sequences" help="The expected number of linear (i.e. non-circular) sequences in the underlying sequence (--expected_linear_seqs)"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="spades">
            <param name="spades_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust SPAdes-specific parameters?" help="Unicycler uses SPAdes to construct assembly graphs. You can modify some of the SPAdes settings here. Use this ONLY if you know what you are doing!"/>
            <when value="yes">
                <param name="min_kmer_frac" type="float" value="0" label="Lowest k-mer size for SPAdes assembly, expressed as a fraction of the read length" help="--min_kmer_frac; 0 = default behavior"/>
                <param name="max_kmer_frac" type="float" min="0" max="1" value="0" label="Highest k-mer size for SPAdes assembly, expressed as a fraction of the read length" help="--max_kmer_frac"/>
                <param name="kmer_count" type="integer" value="0" label="Number of k-mer steps to use in SPAdes assembly" help="--kmer_count"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="rotation">
            <param name="rotation_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust assembly rotation options?" help="These options control the rotation of completed circular sequence near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!"/>
            <when value="yes">
                <conditional name="rotation_fasta">
                    <param name="rotation_fasta_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Do you wish to provide gene sequences at the start of rotated replicons?" help="If you would like your assembly to start at a particular gene, use this option"/>
                    <when value="yes">
                        <param name="start_genes" type="data" format="fasta" label="FASTA file of genes for start point of rotated replicons" help="--start_genes"/>
                    </when>
                    <when value="no"/>
                </conditional>
                <param name="start_gene_id" type="integer" min="0" max="100" value="0" label="The minimum required BLAST percent identity for a start gene search" help="--start_gene_id; 0 = default behavior"/>
                <param name="start_gene_cov" type="integer" min="0" max="100" value="0" label="The minimum required BLAST percent coverage for a start gene search" help="--start_gene_cov; 0 = default behavior"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="pilon">
            <param name="pilon_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust Pilon options?" help="These options control the final assembly polish using Pilon at the end of the Unicycler pipeline."/>
            <when value="yes">
                <param name="min_polish_size" type="integer" min="0" value="0" label="Sequences shorter than this value will not be polished using Pilon" help="--min_polish_size; 0 = default behavior"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="graph_clean">
            <param name="graph_clean_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust graph cleaning options?" help="These options control the removal of small leftover sequences after bridging is complete."/>
            <when value="yes">
                <param name="min_component_size" type="integer" value="0" label="Unbridged graph components smaller than this size will be removed from the final graph" help="--min_component_size; 0 = proceed with default value"/>
                <param name="min_dead_end_size" type="integer" value="0" label="Graph dead ends smaller than this size will be removed from the final graph" help="--min_dead_end_size; 0 = proceed with default value"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="lr_align">
            <param name="lr_align_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust long read alignment parameters?" help="These options control the alignment of long reads to the assembly graph."/>
            <when value="yes">
                <conditional name="contamination">
                    <param name="contamination_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Are there known contaminants?" help="Use this to provide Unicycler with sequences of known contaminants such as skipe-ins used in library preps."/>
                    <when value="yes">
                        <param name="contamination_fasta" type="data" format="fasta" label="FASTA file of known contamination in long reads, e.g. lambda, phiXm or puc18 spike-ins." help="--contamination"/>
                    </when>
                    <when value="no"/>
                </conditional>
                <param name="scores" type="text" size="10" value="0,0,0,0" label="Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend" help="--scores; 0,0,0,0 = proceed with default value"/>
                <param name="low_score" type="integer" value="0" label="Score threshold - alignments below this are considered poor" help="--low_score; 0 = default (set automatically)"/>
                <param name="min_len" type="integer" value="0" label="Minimum alignment length (bp) - exclude alignments shorter than this length" help="--min_len; 0 = proceed with default value"/>
                <param name="keep_bad" type="boolean" truevalue="--keep_bad" falsevalue="" checked="False" label="Include alignments in the results even if they are below the low score threshold" help="--keep_bad; default = No (low-scoring alignments are discarded)"/>
                <param name="allowed_overlap" type="integer" value="0" label="Allow this much overlap between alignments in a single read" help="--allowed_overlap; 0 = proceed with default value"/>
                <param name="kmer" type="integer" value="0" label="K-mer size used for seeding alignments" help="--kmer; 0 = proceed with default value"/>
            </when>
            <when value="no"/>
        </conditional>
    </inputs>

    <outputs>
      <data format="fasta" name="assembly" from_work_dir="assembly.fasta" label="${tool.name} on ${on_string}: Final Assembly"/>
      <!--<data format="txt" name="assembly_grapth" from_work_dir="assembly.gfa" label="${tool.name} on ${on_string}: Final Assembly Graph" /> -->
    </outputs>

    <tests>
        <test>
            <param name="fastq_input_selector" value="paired" />
            <param name="fastq_input1" value="phiX_f.fq" ftype="fastq" />
            <param name="fastq_input2" value="phiX_r.fq" ftype="fastq" />
            <param name="long_reads_selector" value="no" />
            <param name="mode" value="normal" />
            <param name="adv_param_selector" value="yes" />
            <param name="no_correct" value="true" />
            <param name="no_rotate" value="false" />
            <param name="no_pilon" value="false" />
            <param name="lin_seq" value="0" />
            <param name="spades_selector" value="no" />
            <param name="rotation_selector" value="no" />
            <param name="pilon_selector" value="no" />
            <param name="graph_clean_selector" value="no" />
            <param name="lr_align_selector" value="no" />
            <output compare="re_match" file="assembly_test1.fa" ftype="fasta" lines_diff="1" name="assembly" />
         </test>
        <!-- <test>
            <param name="fastq_input_selector" value="paired" />
            <param name="fastq_input1" value="phiX_f.fq" ftype="fastq" />
            <param name="fastq_input2" value="phiX_r.fq" ftype="fastq" />
            <param name="long_reads_selector" value="yes" />
            <param name="long_reads" value="onp.fa" ftype="fasta" />
            <param name="mode" value="normal" />
            <param name="adv_param_selector" value="yes" />
            <param name="no_correct" value="true" />
            <param name="no_rotate" value="false" />
            <param name="no_pilon" value="false" />
            <param name="lin_seq" value="0" />
            <param name="spades_selector" value="no" />
            <param name="rotation_selector" value="no" />
            <param name="pilon_selector" value="no" />
            <param name="graph_clean_selector" value="no" />
            <param name="lr_align_selector" value="no" />
            <output compare="re_match" file="assembly_test2.fa" ftype="fasta" lines_diff="1" name="assembly" />
         </test> -->
     </tests>



    <help><![CDATA[
        usage: unicycler [-h] [--help_all] [--version] -1 SHORT1 -2 SHORT2
                 [-s SHORT_UNPAIRED] [-l LONG] [--no_long] -o OUT
                 [--verbosity VERBOSITY] [--keep_temp KEEP_TEMP] [-t THREADS]
                 [--mode {conservative,normal,bold}]
                 [--expected_linear_seqs EXPECTED_LINEAR_SEQS]

Help:
  -h, --help              Show this help message and exit
  --help_all              Show a help message with all program options
  --version               Show Unicycler's version number

Input:
  -1 SHORT1, --short1 SHORT1
                          FASTQ file of short reads (first reads in each pair)
  -2 SHORT2, --short2 SHORT2
                          FASTQ file of short reads (second reads in each
                          pair)
  -s SHORT_UNPAIRED, --short_unpaired SHORT_UNPAIRED
                          FASTQ file of unpaired short reads
  -l LONG, --long LONG    FASTQ or FASTA file of long reads, if all reads are
                          available at start.
  --no_long               Do not use any long reads (assemble with short reads
                          only)

Output:
  -o OUT, --out OUT       Output directory
  --verbosity VERBOSITY   Level of stdout information (0 to 3, default: 1)
                            0 = no stdout, 1 = basic progress indicators,
                            2 = extra info, 3 = debugging info
  --keep_temp KEEP_TEMP   Level of file retention (0 to 2, default: 0)
                            0 = only keep files at main checkpoints,
                            1 = keep some temp files including SAM,
                            2 = keep all temp files

Other:
  -t THREADS, --threads THREADS
                          Number of threads used (default: number of CPUs, up
                          to 8)
  --mode {conservative,normal,bold}
                          Bridging mode (default: normal)
                            conservative = smaller contigs, lowest misassembly
                                           rate
                            normal = moderate contig size and misassembly rate
                            bold = longest contigs, higher misassembly rate
  --expected_linear_seqs EXPECTED_LINEAR_SEQS
                          The expected number of linear (i.e. non-circular)
                          sequences in the underlying sequence

    ]]></help>
    <citations>
        <citation type="bibtex">
@misc{Unicycler2016,
  author = {Wick, Ryan},
  year = {2016},
  title = {Unicycler: resolving bacterial genome assemblies from short and long sequencing reads},
  publisher = {CSHL},
  journal = {bioRxiv},
  url = {http://biorxiv.org/content/early/2016/12/22/096412},
}</citation>
    </citations>
</tool>