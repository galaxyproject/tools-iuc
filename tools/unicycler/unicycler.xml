<tool id="unicycler" name="Create assemblies with Unicycler" version="0.1.0">
    <requirements>
         <requirement type="package" version="0.2.0">unicycler</requirement>
    </requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <command><![CDATA[

    ## Preparing files
    
    #if str( $paired_unpaired.fastq_input_selector ) == "paired":
        ln -s '${paired_unpaired.fastq_input1}' fq1.fastq &&
        ln -s '${paired_unpaired.fastq_input2}' fq2.fastq &&
    #elif str( $paired_unpaired.fastq_input_selector ) == "single":
        ln -s '${paired_unpaired.fastq_input1}' fq.fastq &&
    #end if

    #if $long_reads:
        #if $long_reads.extension == "fastqsanger":
            ln -s '${long_reads}' lr.fastq &&
        #elif $long_reads.extension == "fasta":
            ln -s '${long_reads}' lr.fasta &&
        #end if
    #end if

    ## Running Unicycler

    unicycler -t "\${GALAXY_SLOTS:-8}"

    #if str( $paired_unpaired.fastq_input_selector ) == "paired":
        -1 fq1.fastq
        -2 fq2.fastq
    #elif str( $paired_unpaired.fastq_input_selector ) == "single":
        -s fq.fastq
    #end if

    #if $long_reads:
        #if $long_reads.extension == "fastqsanger":
            -l lr.fastq
        #elif $long_reads.extension == "fasta":
            -l lr.fasta
        #end if
    #end if

    -o ./

    --mode '${mode}'
    --min_fasta_length $min_fasta_length

    --expected_linear $lin_seq
    $no_correct
    $no_rotate

    #if str( $spades.spades_selector ) == "yes":
        --min_kmer_frac $spades.min_kmer_frac        
        --max_kmer_frac $spades.max_kmer_frac      
        --kmer_count $spades.kmer_count
    #end if

    #if str( $rotation.rotation_selector ) == "yes":
        #if str( $rotation.rotation_fasta.rotation_fasta_selector ) == "yes":
            --start_genes '${rotation.rotation_fasta.start_genes}'
        #end if
        --start_gene_id $rotation.start_gene_id
        --start_gene_cov $rotation.start_gene_cov
    #end if

    #if str( $pilon.pilon_selector ) == "yes":
        --min_polish_size $pilon.min_polish_size
    #end if

    #if str( $graph_clean.graph_clean_selector ) == "yes":
        --min_component_size $graph_clean.min_component_size
        --min_dead_end_size $graph_clean.min_dead_end_size
    #end if

    #if str( $lr_align.lr_align_selector ) == "yes":
        #if $lr_align.contamination_fasta:
            --contamination '${lr_align.contamination_fasta}'
        #end if

        --scores '${lr_align.scores}'

        #if int( $lr_align.low_score ) > 0:
            --low_score $lr_align.low_score
        #end if

    #end if

    --verbosity 3

    ]]></command>

    <inputs>
        <conditional name="paired_unpaired">
            <param name="fastq_input_selector" type="select" label="Paired or Single end data?" help="Select between paired and single end data">
                <option selected="True" value="paired">Paired</option>
                <option value="single">Single</option>
            </param>
            <when value="paired">
                <param name="fastq_input1" type="data" format="fastqsanger" label="Select first set of reads" help="Specify dataset with forward reads (-1)"/>
                <param name="fastq_input2" type="data" format="fastqsanger" label="Select second set of reads" help="Specify dataset with reverse reads (-2)"/>
            </when>
            <when value="single">
                <param name="fastq_input1" type="data" format="fastqsanger" label="Select unpaired reads" help="Specify dataset with unpaired reads (-s)"/>
            </when>
        </conditional>

        <param name="long_reads" optional="True" type="data" format="fastqsanger,fasta" label="Select long reads. If there are no long reads, leave this empty" help="--long"/>

        <param name="min_fasta_length" type="integer" value="1" label="Exclude contigs from the FASTA file which are shorter than this length (bp)" help="--min_fasta_length; default = 1"/>

        <param name="mode" type="select" label="Select Bridging mode" help="--mode">
            <option value="conservative">Conservative (smaller contigs, lower misassembly)</option>
            <option value="normal" selected="True">Normal (moderate contig size and misassembly rate)</option>
            <option value="bold">Bold (longest contigs, higher misassembly rate)</option>
        </param>
    
        <param name="no_correct" optional="True" type="boolean" checked="False" truevalue="--no_correct" falsevalue="" label="Skip SPAdes error correction step" help="This option turns off SPAdes error correction. Generally it is highly recommended to use correction. (--no_correct)"/>
        <param name="no_rotate" optional="True" type="boolean" checked="False" truevalue="--no_rotate" falsevalue="" label="Do not rotate completed replicons to start at a standard gene." help="Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon. If one is found, the sequence is rotated and/or flipped so that it begins with that gene encoded on the forward strand. This provides consistently oriented assemblies and reduces the risk that a gene will be split across the start and end of the sequence. (--no_rotate)"/>
        <param name="no_pilon" optional="True" type="boolean" checked="False" truevalue="--no_pilon" falsevalue="" label="Do not use Pilon to polish the final assembly." help="Unicycler uses Pilon tool for polishing final assembly. (--no_pilon)"/>
        <param name="lin_seq" optional="True" type="integer" value="0" label="The expected number of linear (i.e. non-circular) sequences in the assembly" help="--expected_linear_seqs; default = 0"/>

        <conditional name="spades">
            <param name="spades_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust SPAdes-specific parameters?" help="Unicycler uses SPAdes to construct assembly graphs. You can modify some of the SPAdes settings here. Use this ONLY if you know what you are doing!"/>
            <when value="yes">
                <param name="min_kmer_frac" type="float" min="0" max="1" value="0.2" label="Lowest k-mer size for SPAdes assembly, expressed as a fraction of the read length" help="--min_kmer_frac; default = 0.2"/>
                <param name="max_kmer_frac" type="float" min="0" max="1" value="0.95" label="Highest k-mer size for SPAdes assembly, expressed as a fraction of the read length" help="--max_kmer_frac; default = 0.95"/>
                <param name="kmer_count" type="integer" value="10" label="Number of k-mer steps to use in SPAdes assembly" help="--kmer_count; default = 10"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="rotation">
            <param name="rotation_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust assembly rotation options?" help="These options control the rotation of completed circular sequence near the end of the Unicycler pipeline. Use this ONLY if you know what you are doing!"/>
            <when value="yes">
                <conditional name="rotation_fasta">
                    <param name="rotation_fasta_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Do you wish to provide gene sequences at the start of rotated replicons?" help="If you would like your assembly to start at a particular gene, use this option"/>
                    <when value="yes">
                        <param name="start_genes" type="data" format="fasta" label="FASTA file of genes for start point of rotated replicons" help="--start_genes"/>
                    </when>
                    <when value="no"/>
                </conditional>
                <param name="start_gene_id" type="integer" min="0" max="100" value="90" label="The minimum required BLAST percent identity for a start gene search" help="--start_gene_id; default = 90"/>
                <param name="start_gene_cov" type="integer" min="0" max="100" value="95" label="The minimum required BLAST percent coverage for a start gene search" help="--start_gene_cov; default = 95"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="pilon">
            <param name="pilon_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust Pilon options?" help="These options control the final assembly polish using Pilon at the end of the Unicycler pipeline."/>
            <when value="yes">
                <param name="min_polish_size" type="integer" min="0" value="1000" label="Contigs shorter than this value (bp) will not be polished using Pilon" help="--min_polish_size; default = 1000"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="graph_clean">
            <param name="graph_clean_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust graph cleaning options?" help="These options control the removal of small leftover sequences after bridging is complete."/>
            <when value="yes">
                <param name="min_component_size" type="integer" value="1000" label="Unbridged graph components smaller than this size will be removed from the final graph" help="--min_component_size; default = 1000"/>
                <param name="min_dead_end_size" type="integer" value="1000" label="Graph dead ends smaller than this size will be removed from the final graph" help="--min_dead_end_size; default = 1000"/>
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="lr_align">
            <param name="lr_align_selector" type="boolean" checked="False" truevalue="yes" falsevalue="no" label="Would you like to adjust long read alignment parameters?" help="These options control the alignment of long reads to the assembly graph."/>
            <when value="yes">
               
                <param name="contamination_fasta" optional="True" type="data" format="fasta" label="FASTA file of known contamination in long reads, e.g. lambda, phiXm or puc18 spike-ins." help="--contamination"/>   
                <param name="scores" type="text" size="10" value="3,-6,-5,-2" label="Comma-delimited string of alignment scores: match, mismatch, gap open, gap extend" help="--scores; default = 3,-6,-5,-2"/>
                <param name="low_score" type="integer" value="0" label="Score threshold - alignments below this are considered poor" help="--low_score; 0 = default (set automatically)"/>
            </when>
            <when value="no"/>
        </conditional>
    </inputs>

    <outputs>
      <data format="txt" name="assembly_grapth" from_work_dir="assembly.gfa" label="${tool.name} on ${on_string}: Final Assembly Graph" />
      <data format="fasta" name="assembly" from_work_dir="assembly.fasta" label="${tool.name} on ${on_string}: Final Assembly"/>
    </outputs>

    <tests>
        <test> <!-- short reads only -->
            <param name="fastq_input_selector" value="paired" />
            <param name="fastq_input1" value="phix_f.fq.gz" ftype="fastq" />
            <param name="fastq_input2" value="phix_r.fq.gz" ftype="fastq" />
            <param name="long_reads_selector" value="no" />
            <param name="mode" value="normal" />
            <param name="adv_param_selector" value="yes" />
            <param name="no_correct" value="true" />
            <param name="no_rotate" value="false" />
            <param name="no_pilon" value="false" />
            <param name="lin_seq" value="0" />
            <param name="spades_selector" value="no" />
            <param name="rotation_selector" value="no" />
            <param name="pilon_selector" value="no" />
            <param name="graph_clean_selector" value="no" />
            <param name="lr_align_selector" value="no" />
            <output ftype="fasta" name="assembly">
                <assert_contents>
                    <has_text text="length=5386" />
                </assert_contents>
            </output>
        </test>
        <test> <!-- short and long reads -->
            <param name="fastq_input_selector" value="paired" />
            <param name="fastq_input1" value="phix_f.fq.gz" ftype="fastq" />
            <param name="fastq_input2" value="phix_r.fq.gz" ftype="fastq" />
            <param name="long_reads_selector" value="yes" />
            <param name="long_reads" value="onp.fa" ftype="fasta" />
            <param name="mode" value="normal" />
            <param name="adv_param_selector" value="yes" />
            <param name="no_correct" value="true" />
            <param name="no_rotate" value="false" />
            <param name="no_pilon" value="false" />
            <param name="lin_seq" value="0" />
            <param name="spades_selector" value="no" />
            <param name="rotation_selector" value="no" />
            <param name="pilon_selector" value="no" />
            <param name="graph_clean_selector" value="no" />
            <param name="lr_align_selector" value="no" />
            <output ftype="fasta" name="assembly">
                <assert_contents>
                    <has_text text="length=5386" />
                </assert_contents>
            </output>
         </test>
     </tests>



    <help><![CDATA[

**Unicycler**

Unicycler is a hybrid assembly pipeline for bacterial genomes. It uses both Illumina reads and long reads (PacBio or Nanopore) to produce complete and accurate assemblies. It is written by `Ryan Wick`_ at the University of Melbourne's Centre for Systems Genomics. Much of the description below is lifted from Unicycler's `github page`_. 

.. _`Ryan Wick`: https://github.com/rrwick
.. _`github page`: https://github.com/rrwick/Unicycler

-----

**Input data**

Unicycler accepts inputs short (Illumina) reads in FASTQ format. Galaxy places additional requirement of having these in FASTQ format with `Sanger encoding`_ of quality scores. Long reads (from Oxford Nanopore or PacBio) can be either in FASTQ of FASTA form.

.. _`Sanger encoding`: https://en.wikipedia.org/wiki/FASTQ_format#Quality

The input options are::

    -1 SHORT1, --short1 SHORT1
        FASTQ file of short reads (first reads in each pair)
    -2 SHORT2, --short2 SHORT2
        FASTQ file of short reads (second reads in each pair)
    -s SHORT_UNPAIRED, --short_unpaired SHORT_UNPAIRED
        FASTQ file of unpaired short reads
    -l LONG, --long LONG    
        FASTQ or FASTA file of long reads, if all reads are available at start.

-----

**Bridging mode**

Unicycler can be run in three modes: conservative, normal (the default) and bold, set with the --mode option. Conservative mode is least likely to produce a complete assembly but has a very low risk of misassembly. Bold mode is most likely to produce a complete assembly but carries greater risk of misassembly. Normal mode is intermediate regarding both completeness and misassembly risk. See `description of modes`_ for more information.

.. _`description of modes`: https://github.com/rrwick/Unicycler#conservative-normal-and-bold

The available modes are::

    --mode {conservative,normal,bold}     
        Bridging mode (default: normal)
        conservative = smaller contigs, lowest misassembly rate
        normal = moderate contig size and misassembly rate
        bold = longest contigs, higher misassembly rate

----

**Skip SPAdes error correction step**

Sequencing data contains a substantial number of sequencing errors that manifest themselves as deviations (bulges and non-connected components) within the assembly graph. One of the ways to improve the graph even constructing it is to minimize the amount sequencing errors by performing error correction. SPAdes, which is used by Unicycler for error correction and assembly, uses `BayesHammer`_ to correct the reads. Here is a brief summary of what it does:

 1. SPAdes (or rather BayesHammer) counts *k*-mers in reads and computed *k*-mer statistics that takes into account base quality values. 
 2. `Hamming graph`_ is constructed for *k*-mers is which *k*-mers are nodes. In this graph edges connect nodes (*k*-mers) is they differ from each other by a number of nucleotides up to a certain threshold (the `Hamming distance`_). The graph is central to the error correction algorithm.
 3. At this step Bayesian subclustering of the graph produced in the previous step. For each *k*-mer we now know the center of its subcluster. 
 4. Solid *k*-mers are derived from cluster centers and are assumed to be *error free*.
 5. Solid *k*-mers are mapped back to the reads and used to correct them.

This step takes considerable time, so if one need to quickly evaluate assemblies this step can be skipped. However, this is not recommended if one if trying to produce a final high quality assembly.

.. _`BayesHammer`: https://goo.gl/1iGkMe
.. _`Hamming graph`: https://en.wikipedia.org/wiki/Hamming_graph
.. _`Hamming distance`: https://en.wikipedia.org/wiki/Hamming_distance

This following option turns error correction on and off::

    --no_correct  
        Skip SPAdes error correction step 
        (default: conduct SPAdes error correction)

-----

**Do not rotate completed replicons to start at a standard gene**

Unicycler uses TBLASTN to search for dnaA or repA alleles in each completed replicon. If one is found, the sequence is rotated and/or flipped so that it begins with that gene encoded on the forward strand. This provides consistently oriented assemblies and reduces the risk that a gene will be split across the start and end of the sequence.

The following option turns rotation on and off::

    --no_rotate
        Do not rotate completed replicons 
        to start at a standard gene 
        (default: completed replicons are rotated)

**Do not use Pilon to polish the final assembly**

`Pilon`_ is a tool for improving overall quality of draft assemblies and finding variation among strains. Unicycler uses it for assembly *polishing*. 

The following option turns pilon part of Unicycler pipeline on and off::

    --no_pilon
        Do not use Pilon to polish the 
        final assembly (default: Pilon is used)

.. _`Pilon`: https://github.com/broadinstitute/pilon/wiki

------

**Expected number of linear sequences**

If you expect your sample to contain linear (non circular) sequences, set this option::

    --expected_linear_seqs EXPECTED_LINEAR_SEQS
        The expected number of linear (i.e. non-circular)
        sequences in the underlying sequence

----

**SPAdes-specific parameters**

This section provides control of SPAdes options::

    --min_kmer_frac MIN_KMER_FRAC
        Lowest k-mer size for SPAdes assembly, 
        expressed as a fraction of the read length 
        (default: 0.2)
    --max_kmer_frac MAX_KMER_FRAC
        Highest k-mer size for SPAdes assembly,
        expressed as a fraction of the read length 
        (default: 0.95)
    --kmer_count KMER_COUNT
        Number of k-mer steps to use in 
        SPAdes assembly (default: 10)

----

**Rotation parameters**

Unicycler attempts to rotate circular assemblies to make sure that they begin at a consistent starting gene. The following parameters control assembly rotation::

    --start_genes START_GENES
        FASTA file of genes for start point 
        of rotated replicons 
        (default: start_genes.fasta)
    --start_gene_id START_GENE_ID 
        The minimum required BLAST percent identity 
        for a start gene search 
        (default: 90.0)
    --start_gene_cov START_GENE_COV
        The minimum required BLAST percent coverage 
        for a start gene search 
        (default: 95.0)

-----

**Graph cleaning options**

These options control the removal of small leftover sequences after bridging is complete::

    --min_component_size MIN_COMPONENT_SIZE
        Unbridged graph components smaller 
        than this size (bp) will be removed 
        from the final graph (default: 1000)
    --min_dead_end_size MIN_DEAD_END_SIZE
        Graph dead ends smaller than this size (bp)
        will be removed from the final graph
        (default: 1000)

-----

**Long read alignment parameters**

These options control the alignment of long reads to the assembly graph::

    --contamination CONTAMINATION
        FASTA file of known contamination in long reads
    --scores SCORES
        Comma-delimited string of alignment scores: 
        match, mismatch, gap open, gap extend 
        (default: 3,-6,-5,-2)
    --low_score LOW_SCORE
        Score threshold - alignments below this
        are considered poor
        (default: set threshold automatically)

-----

**Outputs**

Galaxy's wrapped for Unicycler produces two outputs:

 * final assembly in FASTA format
 * final assembly grapth in graph format

 While most will likely be interested in the FASTA dataset, the graph dataset is also quite useful and can be visualized using tools such as `Bandage`_.


.. _`Bandage`: https://github.com/rrwick/Bandage


    ]]></help>
    <citations>
        <citation type="bibtex">
@misc{Unicycler2016,
  author = {Wick, Ryan},
  year = {2016},
  title = {Unicycler: resolving bacterial genome assemblies from short and long sequencing reads},
  publisher = {CSHL},
  journal = {bioRxiv},
  url = {http://biorxiv.org/content/early/2016/12/22/096412},
}</citation>
    </citations>
</tool>