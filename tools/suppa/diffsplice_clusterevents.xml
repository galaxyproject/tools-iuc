<?xml version="1.0"?>
<tool id="suppa_diffsplice_clusterevents" name="SUPPA diffSplice, clusterEvents" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>of transcripts and local events</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize
ln -s '$i' 'events.$event_type' &&

## run diffSplice
suppa.py diffSplice
-i 'events.$event_type'
-p
#for $i, $current in enumerate($files)
    '$current.p'
#end for
-e
#for $i, $current in enumerate($files)
    '$current.e'
#end for
-m $m
-a $a
-l $l
$pa
$gc
-al $al
$c
$me
-th $th
-nan $nan
-mo 'DEBUG'
-o 'results'
#if 'avg' in $out
    -s
#end if
@LOG@

## run clusterEvents
#if $clust_cond.clust_sel == 'yes'
     && suppa.py clusterEvents
    -d 'results.dpsi'
    -p 'results.psivec'
    -st $clust_cond.st
    -dt $clust_cond.dt
    -e $clust_cond.e
    -m '$clust_cond.m'
    -c '$clust_cond.c_cond.c_sel'
    #if $clust_cond.c_cond.c_sel == 'OPTICS'
        -s $clust_cond.c_cond.s
    #end if
    -n $clust_cond.n
    #if $g
        -g '$clust_cond.g'
    #end if
    -o 'results'
    @LOG@
#end if
    ]]></command>
    <inputs>
        <param argument="-i" type="data" format="tabular" label="Select event file" help="Output of SUPPA generateEvents (IOI, IOE)."/>
        <param argument="event_type" type="select" label="Select event file type">
            <option value="ioe" selected="true">Local alternative splicing events (IOE)</option>
            <option value="ioi">Transcripts events per gene (IOI)</option>
        </param>
        <repeat name="files" title="Select files per condition" min="2">
            <param argument="-p" type="data" format="tabular" label="Select PSI file"/>
            <param argument="-e" type="data" format="tabular" label="Select transcript expression file"/>
        </repeat>
        <param argument="-m" type="select" label="Select method to calculate the significance">
            <option value="empirical" selected="true">Empirical</option>
            <option value="classical">Classical</option>
        </param>
        <param argument="-a" type="integer" value="1000" label="Set integer indicating the number of points in the local area of the delta PSI - average TPM distribution"/>
        <param argument="-l" type="float" min="0.0" max="1.0" value="0.0" label="Set lower bound for the absolute delta PSI value" help="Events with less than this delta PSI will not be tested."/>
        <param argument="-pa" type="boolean" truevalue="-pa" falsevalue="" label="Replicates across conditions should be handled as paired?"/>
        <param argument="-gc" type="boolean" truevalue="-gc" falsevalue="" label="Correct p-values by gene?"/>
        <param argument="-al" type="float" min="0.0" max="1.0" value="0.05" label="Set family-wise error rate to use for multiple test correction"/>
        <param argument="-c" type="boolean" truevalue="-c" falsevalue="" label="Peform analysis between all possible combinations of conditions?"/>
        <param argument="-me" type="boolean" truevalue="-me" falsevalue="" label="Use median to calculate delta PSI?" help="Instead of mean."/>
        <param argument="-th" type="float" value="1.0" label="Set minimum expression" help="Calculated as average TPM value within-replicates and between-conditions."/>
        <param argument="-nan" type="float" min="0.0" max="1.0" value="0.0" label="Set percentage of samples allowed per condition with NAN values for returning a delta PSI" help="A value of 0.0 means that no missing values are allowed."/>        
        <conditional name="clust_cond">
            <param name="clust_sel" type="select" label="Peform clustering of events according to PSI values?" help="(clusterEvents)">
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="no"/>
            <when value="yes">                
                <param argument="-st" type="float" min="0.0" max="1.0" value="0.0" label="Set p-value threshold to consider an event significant from the DPSI file"/>
                <param argument="-dt" type="float" min="0.0" max="1.0" value="0.05" label="Set Lower-bound for the absolute delta PSI value to cluster"/>
                <param argument="-e" type="float" min="0.0" max="1.0" value="0.05" label="Set maximum distance" help="To consider two events as members of the same cluster"/>
                <param argument="-m" type="select" label="Select distance metric">
                    <option value="euclidean" selected="true">Euclidean</option>
                    <option value="manhattan">Manhattan</option>
                    <option value="cosine">Cosine</option>
                </param>
                <conditional name="c_cond">
                    <param name="c_sel" type="select" label="Select clustering method" help="(-c)">
                        <option value="DBSCAN" selected="true">DBSCAN</option>
                        <option value="OPTICS">OPTICS</option>
                    </param>
                    <when value="DBSCAN"/>
                    <when value="OPTICS">
                        <param argument="-s" type="float" min="0.0" max="1.0" value="0.05" label="Set maximum distance in PSI space of an event to a cluster"/>
                    </when>
                </conditional>
                <param argument="-n" type="integer" min="1" value="20" label="Set minimum number of events required per cluster"/>
                <!-- required, but no default value possible -->
                <param argument="-g" type="text" value="" label="Specify ranges of column numbers that specify replicates per condition" help="Column numbers have to be continuous, with no overlapping or missing columns between them (e.g. 1-3,4-6)."/>
                <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="Only shown in history if selected here and generated by the specific run.">
                    <option value="clustvec" selected="true">Results</option>
                    <option value="log">Log</option>
                </param>
            </when>
        </conditional>
        <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="Only shown in history if selected here and generated by the specific run.">
            <option value="avg">Average log TPM of events (-s)</option>
            <option value="clustvec" selected="true">Results</option>
            <option value="dpsi" selected="true">DPSI</option>
            <option value="psivec" selected="true">PSIVEC</option>
            <option value="log">Log</option>
        </param>
    </inputs>
    <outputs>
        <data name="out_psivec" format="tabular" from_work_dir="results.psivec" label="${tool.name} on ${on_string}: PSIVEC">
            <filter>'psivec' in out</filter>
        </data>
        <data name="out_dpsi" format="tabular" from_work_dir="results.dpsi" label="${tool.name} on ${on_string}: DPSI">
            <filter>'dpsi' in out</filter>
        </data>
        <data name="out_avg" format="tabular" from_work_dir="results_avglogtpm.tab" label="${tool.name} on ${on_string}: avglogtpm">
            <filter>'avg' in out</filter>
        </data>
        <data name="out_clustvec" format="tabular" from_work_dir="results.clustvec" label="${tool.name} on ${on_string}: CLUSTVEC">
            <filter>'clustvec' in out and clust_cond['clust_sel'] == 'yes'</filter>
        </data>
        <!-- clusterEvents is the only SUPPA subcommand that generates a .log file. Anyway, it's skipped here, because the implemented logging method fetches more information. -->
        <expand macro="log"/>
    </outputs>
    <tests>
        <!-- no test implemented for -m 'classical' -->

        <!-- #1 defaut, ioe -->
        <test expect_num_outputs="4">
            <param name="i" value="events.ioe"/>
            <param name="event_type" value="ioe"/>
            <repeat name="files">
                <param name="p" value="sample1.psi"/>
                <param name="e" value="sample1.tpm"/>
            </repeat>
            <repeat name="files">
                <param name="p" value="sample2.psi"/>
                <param name="e" value="sample2.tpm"/>
            </repeat>
            <param name="out" value="psivec,dpsi,avg,log"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="3100"/>
                    <has_text_matching expression="ENSG00000000003.+"/>
                </assert_contents>
            </output>
            <output name="out_dpsi">
                <assert_contents>
                    <has_n_lines n="1276"/>
                    <has_text_matching expression="ENSG00000000460.+"/>
                </assert_contents>
            </output>
            <output name="out_avg">
                <assert_contents>
                    <has_n_lines n="9"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 defaut, ioi -->
        <test expect_num_outputs="4">
            <param name="i" value="events.ioi"/>
            <param name="event_type" value="ioi"/>
            <repeat name="files">
                <param name="p" value="sample1.iso.psi"/>
                <param name="e" value="sample1.iso.tpm"/>
            </repeat>
            <repeat name="files">
                <param name="p" value="sample2.iso.psi"/>
                <param name="e" value="sample2.iso.tpm"/>
            </repeat>
            <param name="out" value="psivec,dpsi,avg,log"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="1500"/>
                    <has_text_matching expression="ENSG00000223972.+"/>
                </assert_contents>
            </output>
            <output name="out_dpsi">
                <assert_contents>
                    <has_n_lines n="507"/>
                    <has_text_matching expression="ENSG00000009709.+"/>
                </assert_contents>
            </output>
            <output name="out_avg">
                <assert_contents>
                    <has_n_lines n="11"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="4">
            <param name="i" value="events.ioe"/>
            <param name="event_type" value="ioe"/>
            <repeat name="files">
                <param name="p" value="sample1.psi"/>
                <param name="e" value="sample2.tpm"/>
            </repeat>
            <repeat name="files">
                <param name="p" value="sample2.psi"/>
                <param name="e" value="sample2.tpm"/>
            </repeat>
            <param name="a" value="999"/>
            <param name="l" value="1"/>
            <param name="pa" value="true"/>
            <param name="gc" value="true"/>
            <param name="al" value="0.04"/>
            <param name="s" value="true"/>
            <param name="c" value="true"/>
            <param name="me" value="true"/>
            <param name="th" value="1.1"/>
            <param name="nan" value="1.0"/>
            <param name="out" value="psivec,dpsi,avg,log"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="3100"/>
                    <has_text_matching expression="ENSG00000000419.+"/>
                </assert_contents>
            </output>
            <output name="out_dpsi">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_avg">
                <assert_contents>
                    <has_n_lines n="11"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

SUPPA *diffSplice* reads the PSI for the (transcripts or local) events and the transcript expression values from multiple samples, grouped by condition, and the ioe/ioi file, to calucate the events that are differentially spliced between a pair of conditions. SUPPA can test multiple conditions with a variabe number of samples per condition.

Using the relative abundances (PSI values) of (transcript or local) events in all samples, and the information of which events change significantly in at least one comparison, SUPPA *clusterEvents* calculates clusters of events using a density-based clustering. Density-based clustering has various advantages over other methods: it does not require to choose the number of clusters, as this is driven by the data; and it cluster together events that even though they might not have similar PSI values, they behave similarly across conditions as long as there are sufficient events between them.

**Input**

@PSI@
@EXPRESSION@

**Output**

@CLUSTVEC@
@DPSI@
@PSIVEC@

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>