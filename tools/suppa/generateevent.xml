<?xml version="1.0"?>
<tool id="suppa_generateevent" name="SUPPA GenerateEvent" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>from GTF</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <stdio></stdio>
    <command detect_errors="exit_code"><![CDATA[        
        ## run
        suppa.py
            generateEvents
            -i '$i'
            -o 'result'
            -f $f_cond.f_sel
            #if $f_cond.f_sel == 'ioe'
                #if $f_cond.e
                    #set $e = str($f_cond.e).replace(',',' ')
                    -e $e ## doesn't allow ''
                #end if
                -b $f_cond.b_cond.b_sel
                #if $f_cond.b_cond.b_sel == 'V'
                    -t $f_cond.b_cond.t
                #end if
                -l $f_cond.l
            #end if

        && ls -lisa
        ]]></command>
    <inputs>
        <param argument="-i" type="data" format="gtf" multiple="false" label="Select input file" help="GTF format file containing at least exon lines."/>
        <param argument="--pool-genes" type="boolean" truevalue="--pool-genes" falsevalue="" checked="false" label="Redefine genes" help="By clustering together transcripts by genomic stranded overlap and sharing at least one exon. It is crucial when creating ioe/ioi from annotations that are not loci-based, e.g.: RefSeq and UCSC genes."/>
        <conditional name="f_cond">
            <param name="f_sel" type="select" multiple="false" label="Select format of the event annotation file" help="">
                <option value="ioe">local events (ioe)</option>
                <option value="ioi">transcript events (ioi)</option>
            </param>
            <when value="ioi"/>
            <when value="ioe">
                <param argument="-e" type="select" multiple="true" optional="false" label="Select event type" help="">
                    <option value="SE">Skipping exon (SE)</option>
                    <option value="SS">Alternative 5' (A5) or 3' (A3) splice sites (generates both, SS)</option>
                    <option value="MX">Mutually Exclusive (MX) exons</option>
                    <option value="RI">Retained intron (RI)</option>
                    <option value="FL">Alternative First (AF) and Last (AL) exons (generates both, FL)</option>
                </param>
                <conditional name="b_cond">
                    <param name="b_sel" type="select" multiple="false" label="Select boundary type" help="(-b)">
                        <option value="S">Strict</option>
                        <option value="V">Variable</option>
                    </param>
                    <when value="V">
                        <param argument="-t" type="integer" value="10" label="Select variability threshold" help=""/>
                    </when>
                    <when value="S"/>
                </conditional>
                <param argument="-l" type="integer" value="100" label="Set number of nucleotides" help="To display in the output GTF."/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="out_ioi" format="tabular" from_work_dir="result.ioi" label="${tool.name} on ${on_string}: ioi">
            <filter>f_cond['f_sel'] == 'ioi'</filter>
        </data>
        <data name="out_ioe" format="tabular" label="${tool.name} on ${on_string}: ioe" hidden="true">
            <discover_datasets pattern="result\_(?P&lt;designation&gt;.+)\.ioe" ext="tabular" visible="true" assign_primary_output="false"/>
            <filter>f_cond['f_sel'] == 'ioe'</filter>
        </data>
        <data name="out_gtf" format="gtf" label="${tool.name} on ${on_string}: gtf" hidden="true">
            <discover_datasets pattern="result\_(?P&lt;designation&gt;.+)\.gtf" ext="tabular" visible="true" assign_primary_output="false"/>
            <filter>f_cond['f_sel'] == 'ioe'</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 -->
        <test expect_num_outputs="1">
            <param name="i" value="testdata.gtf"/>
            <conditional name="f_cond">
                <param name="f_sel" value="ioi"/>
                <param name="e" value=""/>
            </conditional>
            <output name="out_ioi">
                <assert_contents>
                    <has_n_lines n="241"/>
                    <has_text_matching expression="seqname&#09;gene\_id.+"/>
                    <has_text_matching expression="chr1&#09;ENSG00000223972.+"/>
                    <has_text_matching expression="chr1&#09;ENSG00000078808.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 -->
        <test expect_num_outputs="2">
            <param name="i" value="testdata.gtf"/>
            <conditional name="f_cond">
                <param name="f_sel" value="ioe"/>
                <param name="e" value="SE,SS,MX,RI,FL"/>
                <conditional name="b_cond">
                    <param name="b_sel" value="S"/>
                </conditional>
                <param name="l" value="90"/>
            </conditional>
            <output name="out_ioe">
                <discovered_dataset designation="SE_strict">
                    <assert_contents>
                        <has_n_lines n="24"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000131591&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="RI_strict">
                    <assert_contents>
                        <has_n_lines n="9"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000186827&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="MX_strict">
                    <assert_contents>
                        <has_n_lines n="4"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000131591&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="AL_strict">
                    <assert_contents>
                        <has_n_lines n="14"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000131591&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="AF_strict">
                    <assert_contents>
                        <has_n_lines n="29"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000131591&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="A5_strict">
                    <assert_contents>
                        <has_n_lines n="16"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000186891&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="A3_strict">
                    <assert_contents>
                        <has_n_lines n="22"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000131591&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
            </output>
            <output name="out_gtf">
                <discovered_dataset designation="SE_strict">
                    <assert_contents>
                        <has_n_lines n="116"/>
                        <has_text_matching expression="track name.+"/>
                        <has_text_matching expression="chr1&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="RI_strict">
                    <assert_contents>
                        <has_n_lines n="25"/>
                        <has_text_matching expression="track name.+"/>
                        <has_text_matching expression="chr1&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="MX_strict">
                    <assert_contents>
                        <has_n_lines n="19"/>
                        <has_text_matching expression="track name.+"/>
                        <has_text_matching expression="chr1&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="AL_strict">
                    <assert_contents>
                        <has_n_lines n="53"/>
                        <has_text_matching expression="track name.+"/>
                        <has_text_matching expression="chr1&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="AF_strict">
                    <assert_contents>
                        <has_n_lines n="113"/>
                        <has_text_matching expression="track name.+"/>
                        <has_text_matching expression="chr1&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="A5_strict">
                    <assert_contents>
                        <has_n_lines n="61"/>
                        <has_text_matching expression="track name.+"/>
                        <has_text_matching expression="chr1&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
                <discovered_dataset designation="A3_strict">
                    <assert_contents>
                        <has_n_lines n="85"/>
                        <has_text_matching expression="track name.+"/>
                        <has_text_matching expression="chr1&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
            </output>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="2">
            <param name="i" value="testdata.gtf"/>
            <conditional name="f_cond">
                <param name="f_sel" value="ioe"/>
                <param name="e" value="SE"/>
                <conditional name="b_cond">
                    <param name="b_sel" value="V"/>
                    <param name="t" value="9"/>
                </conditional>
                <param name="l" value="90"/>
            </conditional>
            <output name="out_ioe">
                <discovered_dataset designation="SE_variable_9">
                    <assert_contents>
                        <has_n_lines n="24"/>
                        <has_text_matching expression="seqname&#009;.+"/>
                        <has_text_matching expression="chr1&#009;ENSG00000131591&#009;.+"/>
                    </assert_contents>
                </discovered_dataset>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

SUPPA can work with local alternative splicing events or with transcripts "events" per gene. The local alternative splicing events are standard local splicing variations (see below), whereas a transcript event is an isoform-centric approach, where each isoform in a gene is described separately.

SUPPA generates the AS events or transcript events from an input annotation file (GTF format). The method reads transcript and gene information solely from the "exon" lines. It then generates the events and outputs an event file: .ioe format for local AS events, and .ioi format for transcripts.

**Input**

An annotation file in GTF format is required (see e.g. http://mblab.wustl.edu/GTF22.html):

::

    chr14 Ensembl exon  73741918  73744001  0.0 - . gene_id "ENSG00000000001"; transcript_id "ENST00000000001.1"; 
    chr14 Ensembl exon  73749067  73749213  0.0 - . gene_id "ENSG00000000001"; transcript_id "ENST00000000001.1";  
    chr14 Ensembl exon  73750789  73751082  0.0 - . gene_id "ENSG00000000001"; transcript_id "ENST00000000001.1"; 
    chr14 Ensembl exon  73753818  73754022  0.0 - . gene_id "ENSG00000000001"; transcript_id "ENST00000000001.1"; 

**Output**

For transcripts, the generateEvents operation outputs one single file: An ioi file that shows the transcript "events" in each gene. This is a tab separated file with the following fields:

- seqname: field 1 from the input GTF file of the generateEvents operation (generally the chromosome name)
- gene_id: ID of the gene where the event appears taken from the GTF file. (comma separated list in case of using the --pool-genes option)
- event_id: ID of the event, formatted as gene_id;transcript_id
- transcript_id: ID of the transcript that defines the event, for which the relative inclusion (PSI) is calculated.
- Total transcripts: IDs of the all transcripts in the gene (including the transcript in 4.)

::

    seqname gene_id event_id    inclusion_transcripts   total_transcripts
    chr
    chr
    chr14   ENSG00000133961.15      ENSG00000133961.15;ENST00000556600.1    ENST00000556600.1       ENST00000554546.1,ENST00000356296.4,ENST00000557597.1,ENST00000555238.1,ENST00000556772.1,ENST00000355058.3,ENST00000359560.3,ENST00000555394.1,ENST00000454166.4,ENST00000544991.3,ENST00000560335.1,ENST00000559312.1,ENST00000554521.2,ENST00000555738.2,ENST00000535282.1,ENST00000554014.2,ENST00000553997.1,ENST00000557486.1,ENST00000555859.1,ENST00000555307.1,ENST00000554394.1,ENST00000554315.1,ENST00000556989.1,ENST00000555987.1,ENST00000556112.1,ENST00000557774.1,ENST00000554818.1,ENST00000557031.1,ENST00000556700.1,ENST00000556600.1,ENST00000553415.1,ENST00000557577.1,ENST00000557581.1
    chr14   ENSG00000133961.15      ENSG00000133961.15;ENST00000557774.1    ENST00000557774.1       ENST00000554546.1,ENST00000356296.4,ENST00000557597.1,ENST00000555238.1,ENST00000556772.1,ENST00000355058.3,ENST00000359560.3,ENST00000555394.1,ENST00000454166.4,ENST00000544991.3,ENST00000560335.1,ENST00000559312.1,ENST00000554521.2,ENST00000555738.2,ENST00000535282.1,ENST00000554014.2,ENST00000553997.1,ENST00000557486.1,ENST00000555859.1,ENST00000555307.1,ENST00000554394.1,ENST00000554315.1,ENST00000556989.1,ENST00000555987.1,ENST00000556112.1,ENST00000557774.1,ENST00000554818.1,ENST00000557031.1,ENST00000556700.1,ENST00000556600.1,ENST00000553415.1,ENST00000557577.1,ENST00000557581.1

For local AS events, the generateEvents operation outputs two files:

An ioe file that shows the relationship between each event and the transcripts that define that particular event.

- seqname: field 1 from the input GTF file of the generateEvents operation (generally the chromosome name)
- gene_id: ID of the gene where the event appears. (comma separated list in case of using the --pool-genes option)
- event_id: ID of the event.
- Inclusion transcripts: IDs of the transcripts that define the form of the event for which we calculate the PSI (e.g. exon inclusion) and contribute to the numerator of the PSI formula. For more details see Figures above.
- Total transcripts: IDs of the all transcripts that define either of the two forms of the event (e.g. inclusion and skipping) and contribute to the denominator of the PSI formula. For more details see Figures above.

::

    seqname gene_id event_id    inclusion_transcripts   total_transcripts
    chr14   ENSG00000133961.15  ENSG00000133961.15;SE:chr14:73763993-73789838:73789937-73822334:-   ENST00000556112.1    ENST00000556112.1,ENST00000555859.1
    chr14   ENSG00000133961.15  ENSG00000133961.15;SE:chr14:73876776-73925740:73926011-73929235:-   ENST00000553415.1    ENST00000553415.1,ENST00000556700.1
    chr14   ENSG00000133961.15  ENSG00000133961.15;SE:chr14:73744001-73745989:73746132-73749067:-   ENST00000557597.1,ENST00000555238.1,ENST00000556772.1,ENST00000359560.3,ENST00000355058.3,ENST00000535282.1   ENST00000557597.1,ENST00000555238.1,ENST00000556772.1,ENST00000359560.3,ENST00000355058.3,ENST00000535282.1,ENST00000554546.1,ENST00000356296.4,ENST00000555394.1,ENST00000454166.4,ENST00000560335.1,ENST00000555738.2,ENST00000554014.2
    chr14   ENSG00000133961.15  ENSG00000133961.15;SE:chr14:73749213-73750789:73751082-73753818:-   ENST00000554546.1,ENST00000356296.4,ENST00000557597.1,ENST00000555238.1,ENST00000556772.1,ENST00000359560.3,ENST00000355058.3,ENST00000555394.1,ENST00000535282.1,ENST00000553997.1,ENST00000557486.1    ENST00000554546.1,ENST00000356296.4,ENST00000557597.1,ENST00000555238.1,ENST00000556772.1,ENST00000359560.3,ENST00000355058.3,ENST00000555394.1,ENST00000535282.1,ENST00000553997.1,ENST00000557486.1,ENST00000454166.4,ENST00000560335.1,ENST00000555738.2

This output file is aimed for visualization and it is a regular gtf in half-open coordinate convention with a track header to be directly uploaded in UCSC. In this file, each of the two possible forms of an event is described as a separated transcript_id. Moreover, the gene_id is defined as the event_id. Note that SUPPA generally operates with closed coordinates.

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>