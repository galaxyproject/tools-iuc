<?xml version="1.0"?>
<tool id="suppa_generateevent" name="SUPPA_GenerateEvent" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>...</description>

    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements"/>

    <stdio></stdio>  

    <command detect_errors="exit_code"><![CDATA[
        ## initialize 
 
        ## run
        suppa.py
            generateEvents
            -i '$i'
            -o 'outputfile'
            -f $e_cond.e_sel
            #if $e_cond.e_sel == 'ioe' 
                -e $e_cond.e ## todo replace "," with " "
            #end if

        ]]></command>
    <inputs>
        <param argument="-i" type="data" format="gtf" multiple="false" label="Select file" help="GTF foprmat file containing at least exon lines."/>
        <param argument="--pool-genes" type="boolean" truevalue="--pool-genes" falsevalue="" checked="" label="Redefine genes" help="By clustering together transcripts by genomic stranded overlap and sharing at least one exon. It is crucial when creating ioe/ioi from annotations that are not loci-based, e.g.: RefSeq and UCSC genes."/>

        <conditional name="e_cond">
            <param name="e_sel" type="select" multiple="false" label="Select format of the event annotation file" help="">
                <option value="ioe">local events</option>
                <option value="ioi">transcript events</option>
            </param>
            <when value="ioi"/>
            <when value="ioe">
                <param argument="-e" type="select" multiple="true" label="Select event type" help="">
                    <option value="SE">Skipping exon (SE)</option>
                    <option value="SS">Alternative 5' (A5) or 3' (A3) splice sites (generates both)</option>
                    <option value="MX">Mutually Exclusive (MX) exons</option>
                    <option value="RI">Retained intron (RI)</option>
                    <option value="FL">Alternative First (AF) and Last (AL) exons (generates both)</option>
                </param>
                <conditional name="b_cond">
                    <param argument="b_sel" type="select" multiple="false" label="Select boundary type" help="">
                        <option value="S">Strict</option>
                        <option value="V">Variable</option>
                    </param>
                    <when value="V"/>
                    <when value="S">
                        <param argument="-t" type="integer" value="10" label="Select variability threshold" help=""/>
                        <param argument="-l" type="integer" value="100" label="SDefines the number of nucleotides to display in the output GTF" help=""/>

                    </when>
                </conditional>

            </when>
        </conditional>







        <section name="ap" title="Advanced parameters">

        </section>
        
        <section name="oo" title="Output options">
        </section>
    </inputs>

    <outputs>
        <output name="output" from_work_dir="output.ioi" format="txt" label="">
            <filter>e_cond['e'] == ioi</filter>
        </output>
        <output name="output" from_work_dir="output.ioe" format="txt" label="">
            <filter>e_cond['e'] == ioe</filter>
        </output>
        <output name="output" from_work_dir="output.gtf" format="txt" label="">
            <filter>e_cond['e'] == ioe</filter>
        </output>
    </outputs> 

    <tests> 
        <!-- #1; required parameters -->
        <test>          
        </test>
        <!-- #2; advanced parameters -->
        <test>          
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

...

**Input**

...

**Output**

...

.. class:: infomark

**References**

    ]]></help>
    <citations>
        <expand macro="citation"/>
    </citations>
</tool>