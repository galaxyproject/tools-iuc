<?xml version="1.0"?>
<tool id="suppa_diffsplice" name="SUPPA diffSplice" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>of events</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <stdio></stdio>
    <command detect_errors="exit_code"><![CDATA[
        ## initialize 
        ln -s '$i' 'events.ioi' &&

        ## run
        suppa.py
            diffSplice
            -m $m
            ## todo possible without a loop?
            #set $p = ''
            #set $e = ''
            #for $i, $current in enumerate($files)
                #set $p = $p + ' ' + str($current.p)
                #set $e = $e + ' ' + str($current.e)
            #end for
            -p $p ## '' not allowed ## todo
            -e $e ## '' not allowed
            -i 'events.ioi' ## todo ioi or ioe detected automaticaly?
            -a $a
            -l $l
            $pa
            $gc
            -al $al
            $s ## todo extra output file maybe?
            $c
            $me
            -th $th
            -nan $nan
            -o 'results'
        ]]></command>
    <inputs>
        <param argument="-m" type="select" label="Select method to calculate the significance" help="">
            <option value="empirical">empirical</option>
            <option value="classical">classical</option>
        </param>
        <repeat name="files" title="Select input files">
            <param argument="-p" type="data" format="tabular" multiple="false" label="Select PSI file" help=""/>
            <param argument="-e" type="data" format="tabular" multiple="false" label="Select transcript expression file" help=""/>
        </repeat>
        <param argument="-i" type="data" format="tabular" multiple="false" label="Select file with local or transcript events" help="ioe or ioi format."/>
        <param argument="-a" type="integer" value="1000" label="Set integer indicating the number of points in the local area of the delta PSI - average TPM distribution" help=""/>
        <param argument="-l" type="integer" value="0" label="Lower-bound for the absolute delta PSI value to test for significance. Events with less than this delta PSI will not be tested." help=""/>
        <param argument="-pa" type="boolean" truevalue="-pa" falsevalue="" checked="false" label="Replicates across conditions should be handled as paired" help=""/>
        <param argument="-gc" type="boolean" truevalue="-gc" falsevalue="" checked="false" label="Correct the p-values by gene" help=""/>
        <param argument="-al" type="float" value="0.05" label="Set family-wise error rate to use for the multiple test correction." help=""/>
        <param argument="-s" type="boolean" truevalue="-s" falsevalue="" checked="false" label="Save the average log TPM of the events in an external file" help=""/>
        <param argument="-c" type="boolean" truevalue="-c" falsevalue="" checked="false" label="Peform analysis between all possible combinations of conditions." help=""/>
        <param argument="-me" type="boolean" truevalue="-me" falsevalue="" checked="false" label="Use median to calculate the Delta PSI, instead of the mean" help=""/>
        <param argument="-th" type="float" value="0.0" label="Set minimum expression" help="To be included in the analysis. Calculated as average TPM value within-replicates and between-conditions."/>
        <param argument="-nan" type="float" value="0.0" label="Set percentage allowed of samples per condition with nan values for returning a DeltaPSI" help=""/>
    </inputs>

    <outputs>
        <data name="out_psivec" format="tabular" from_work_dir="results.psivec" label="${tool.name} on ${on_string}: psivec"/>
        <!-- todo doesn't work with test data set data name="out_dpsi" format="tabular" from_work_dir="results.dpsi" label="${tool.name} on ${on_string}: dpsi"/ -->
    </outputs> 

    <tests>
        <!-- #1 -->
        <test>
            <param name="-m" value="empirical"/>
            <repeat name="files">
                <param name="p" value="isoform.psi"/>
                <param name="e" value="expression.txt"/>
            </repeat>
            <param name="-i" value="events.ioe"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="ENSG00000187642;ENST00000341290.+"/>
                </assert_contents>
            </output> 
        </test>
        <!-- #2 -->
        <test>
            <param name="-m" value="empirical"/>
            <repeat name="files">
                <param name="p" value="isoform.psi"/>
                <param name="e" value="expression.txt"/>
            </repeat>
            <param name="-i" value="events.ioe"/>
            <param name="-a" value="999"/>
            <param name="-l" value="1"/>
            <param name="-pa" value="true"/>
            <param name="-gc" value="true"/>
            <param name="-al" value="0.04"/>
            <param name="-s" value="true"/>
            <param name="-c" value="true"/>
            <param name="-me" value="true"/>
            <param name="-th" value="1"/>
            <param name="-nan" value="1"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="ENSG00000187642;ENST00000341290.+"/>
                </assert_contents>
            </output> 
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

SUPPA reads the PSI for the (transcripts or local) events and the transcript expression values from multiple samples, grouped by condition, and the ioe/ioi file, to calucate the events that are differentially spliced between a pair of conditions. SUPPA can test multiple conditions with a variabe number of samples per condition.

**Input**

The ioe/ioi file, the PSI files and the transcript expression files are required.

The PSI and transcript expression files are both tab separated files, where each line provides the (transcript or local) event PSI values and the estimated abundance of each transcript, respectively. These files must contain multiple columns with the PSI values and expression values in the different samples, always keeping the same order of samples in both files.

The PSI and transcript expression files must have a header with the sample names. For instance, the PSI file could look like this:

::

    sample1 sample2 sample3 sample4
    event1  <psi_value> <psi_value> <psi_value> <psi_value>
    event2  <psi_value> <psi_value> <psi_value> <psi_value>
    event3  <psi_value> <psi_value> <psi_value> <psi_value>

and the transcript expression file should be then of the form:

::

    sample1 sample2 sample3 sample4
    transcript1 <expression>  <expression>  <expression>  <expression>
    transcript2 <expression>  <expression>  <expression>  <expression>
    transcript3 <expression>  <expression>  <expression>  <expression>

where the expression values are given in TPM units.

Note: these files have a header with only the sample names (1 less column)

Important: SUPPA will read one PSI file and one transcript expression file per condition. Each of these files will contain the multiple replicates (or individual samples) that are grouped into a given condition, and the should be specified in the same order within the files.

**Output**

dpsi is a tab separated file, with the (transcript or local) event ID in the first column, followed by a variable even number of fields, two for each pair of conditions being compared:

- Cond1_Cond2_dPSI: Event PSI difference (ΔPSI) between Cond1 and Cond2 (ΔPSI = PSI_2 - PSI_1).

- Cond1_Cond2_pvalue: Significance of the difference of PSI between Cond1 and Cond2

An example of a dpsi file for transcript events is the following one:

::

    Cond1_Cond2_dPSI    Cond1_Cond2_p-val
    ENSG00000000419.8;ENST00000413082.1 0.1204556785    0.0119388277
    ENSG00000000419.8;ENST00000371583.5 0.0940010396    0.0897896221
    ENSG00000000419.8;ENST00000494752.1 0.1904161332    0.2039492118

An example of a dpsi file for local events is the following one:

::

    Cond1_Cond2_dPSI    Cond1_Cond2_p-val
    ENSG00000000419;A3:chr20:49557492-49558568:49557470-49558568:-  0.1307455855    0.0484515485
    ENSG00000000419;SE:chr20:49557470-49557642:49557746-49558568:-  0.0469449126    0.0954045953
    ENSG00000000419;SE:chr20:49557470-49557666:49557746-49558568:-  0.0164051352    0.1518481518

If --combination flag is indicated, ΔPSI values are calculated pairwise between each pair of adjacent conditions as provided, and calculating the PSI different between a given condition and the previous one. For instance, for three conditions 1,2,3, the ΔPSI values will be calculated for 2 - 1 (Cond1_Cond2_dPSI) and 3 - 2 (Cond2_Cond3_dPSI). By contrast, if --combination flag is not indicated, ΔPSI values are calculated pairwise between all the possible combinations conditions. For the previous example conditions 1,2,3, the ΔPSI values will be calculated for 2 - 1 (Cond1_Cond2_dPSI), 3 - 1 (Cond1_Cond3_dPSI) and 3 - 2 (Cond2_Cond3_dPSI).

psivec is a tab separated file, with the (transcript or local) event ID in the first column, followed by a variable number of fields, each giving the PSI value per replicate:

- sample PSI: PSI value for a given replicate/condition.

An example of an psivec file is the following one:

:: 

    sample1 sample2 sample1 sample2
    ENSG00000000003;A5:chrX:99890743-99891188:99890743-99891605:- 0.14343855447180462 0.02929736320730957 0.12495621749266525 -1.0
    ENSG00000000003;A5:chrX:99890743-99891605:99890743-99891790:- 1.0     1.0     1.0       -1.0
    ENSG00000000419;A3:chr20:49557492-49557642:49557470-49557642:-  0.0     0.0     0.0       0.0
    ENSG00000000419;A3:chr20:49557492-49558568:49557470-49558568:-  0.004508763698090278  0.0     0.028759955911389606 0.0638008250417565 
    ENSG00000000419;A5:chr20:49557470-49557642:49557470-49557666:-  0.4495047957648805  0.490664195110865 0.6304018235083193   0.678131

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>