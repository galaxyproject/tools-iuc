<?xml version="1.0"?>
<tool id="suppa_diffsplice" name="SUPPA diffSplice" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>of transcripts and local events</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize
ln -s '$i' 'events.$event_type' &&

## run
suppa.py diffSplice
-i 'events.$event_type'
-p
#for $i, $current in enumerate($files)
    '$current.p'
#end for
-e
#for $i, $current in enumerate($files)
    '$current.e'
#end for
-m $m
-a $a
-l $l
$pa
$gc
-al $al
$c
$me
-th $th
-nan $nan
-mo 'DEBUG'
-o 'results'
#if 'avg' in $out
    -s
#end if
@LOG@
    ]]></command>
    <inputs>
        <param argument="-i" type="data" format="tabular" label="Select event file" help="Output of SUPPA generateEvents (IOI, IOE)."/>
        <param argument="event_type" type="select" label="Select event file type">
            <option value="ioe" selected="true">Local alternative splicing events (IOE)</option>
            <option value="ioi">Transcripts events per gene (IOI)</option>
        </param>
        <repeat name="files" title="Select files per condition" min="2">
            <param argument="-p" type="data" format="tabular" label="Select PSI file"/>
            <param argument="-e" type="data" format="tabular" label="Select transcript expression file"/>
        </repeat>
        <param argument="-m" type="select" label="Select method to calculate the significance">
            <option value="empirical" selected="true">Empirical</option>
            <option value="classical">Classical</option>
        </param>
        <param argument="-a" type="integer" value="1000" label="Set integer indicating the number of points in the local area of the delta PSI - average TPM distribution"/>
        <!-- some PSI values are > 1.0, skipped attribute max -->
        <param argument="-l" type="integer" min="0" value="0" label="Set lower bound for the absolute delta PSI value" help="Events with less than this delta PSI will not be tested."/>
        <param argument="-pa" type="boolean" truevalue="-pa" falsevalue="" label="Replicates across conditions should be handled as paired?"/>
        <param argument="-gc" type="boolean" truevalue="-gc" falsevalue="" label="Correct p-values by gene?"/>
        <param argument="-al" type="float" min="0.0" max="1.0" value="0.05" label="Set family-wise error rate to use for multiple test correction"/>
        <param argument="-c" type="boolean" truevalue="-c" falsevalue="" label="Peform analysis between all possible combinations of conditions?"/>
        <param argument="-me" type="boolean" truevalue="-me" falsevalue="" label="Use median to calculate delta PSI?" help="Instead of mean."/>
        <param argument="-th" type="float" value="1.0" label="Set minimum expression" help="Calculated as average TPM value within-replicates and between-conditions."/>
        <param argument="-nan" type="float" min="0.0" max="1.0" value="0.0" label="Set percentage allowed of samples per condition with NAN values for returning a delta PSI" help="A value of 0.0 means that no missing values are allowed."/>
        <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="Only shown in history if selected here and generated by the specific run.">
            <option value="psivec" selected="true">psivec</option>
            <option value="dpsi" selected="true">dpsi</option>
            <option value="avg">Average log TPM of events (-s)</option>
            <option value="log">Log</option>
        </param>
    </inputs>
    <outputs>
        <data name="out_psivec" format="tabular" from_work_dir="results.psivec" label="${tool.name} on ${on_string}: PSIVEC">
            <filter>'psivec' in out</filter>
        </data>
        <data name="out_dpsi" format="tabular" from_work_dir="results.dpsi" label="${tool.name} on ${on_string}: DPSI">
            <filter>'dpsi' in out</filter>
        </data>
        <data name="out_avg" format="tabular" from_work_dir="results_avglogtpm.tab" label="${tool.name} on ${on_string}: avglogtpm">
            <filter>'avg' in out</filter>
        </data>
        <expand macro="log"/>
    </outputs>
    <tests>
        <!-- no test implemented for -m 'classical' -->

        <!-- #1 defaut, ioe -->
        <test expect_num_outputs="4">
            <param name="i" value="events.ioe"/>
            <param name="event_type" value="ioe"/>
            <repeat name="files">
                <param name="p" value="sample1.psi"/>
                <param name="e" value="sample2.tpm"/>
            </repeat>
            <repeat name="files">
                <param name="p" value="sample2.psi"/>
                <param name="e" value="sample2.tpm"/>
            </repeat>
            <param name="out" value="psivec,dpsi,avg,log"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="3100"/>
                    <has_text_matching expression="ENSG00000000003.+"/>
                </assert_contents>
            </output>
            <output name="out_dpsi">
                <assert_contents>
                    <has_n_lines n="1276"/>
                    <has_text_matching expression="ENSG00000000460.+"/>
                </assert_contents>
            </output>
            <output name="out_avg">
                <assert_contents>
                    <has_n_lines n="11"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 defaut, ioi -->
        <test expect_num_outputs="4">
            <param name="i" value="events.ioi"/>
            <param name="event_type" value="ioi"/>
            <repeat name="files">
                <param name="p" value="sample1.iso.psi"/>
                <param name="e" value="sample1.iso.tpm"/>
            </repeat>
            <repeat name="files">
                <param name="p" value="sample2.iso.psi"/>
                <param name="e" value="sample2.iso.tpm"/>
            </repeat>
            <param name="out" value="psivec,dpsi,avg,log"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="1500"/>
                    <has_text_matching expression="ENSG00000223972.+"/>
                </assert_contents>
            </output>
            <output name="out_dpsi">
                <assert_contents>
                    <has_n_lines n="507"/>
                    <has_text_matching expression="ENSG00000009709.+"/>
                </assert_contents>
            </output>
            <output name="out_avg">
                <assert_contents>
                    <has_n_lines n="11"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="4">
            <param name="i" value="events.ioe"/>
            <param name="event_type" value="ioe"/>
            <repeat name="files">
                <param name="p" value="sample1.psi"/>
                <param name="e" value="sample2.tpm"/>
            </repeat>
            <repeat name="files">
                <param name="p" value="sample2.psi"/>
                <param name="e" value="sample2.tpm"/>
            </repeat>
            <param name="a" value="999"/>
            <param name="l" value="1"/>
            <param name="pa" value="true"/>
            <param name="gc" value="true"/>
            <param name="al" value="0.04"/>
            <param name="s" value="true"/>
            <param name="c" value="true"/>
            <param name="me" value="true"/>
            <param name="th" value="1.1"/>
            <param name="nan" value="1.0"/>
            <param name="out" value="psivec,dpsi,avg,log"/>
            <output name="out_psivec">
                <assert_contents>
                    <has_n_lines n="3100"/>
                    <has_text_matching expression="ENSG00000000419.+"/>
                </assert_contents>
            </output>
            <output name="out_dpsi">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_avg">
                <assert_contents>
                    <has_n_lines n="11"/>
                    <has_text_matching expression="ENSG00000011009.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

SUPPA *diffSplice* reads the PSI for the (transcripts or local) events and the transcript expression values from multiple samples, grouped by condition, and the ioe/ioi file, to calucate the events that are differentially spliced between a pair of conditions. SUPPA can test multiple conditions with a variabe number of samples per condition.

**Input**

@PSI@
@EXPRESSION@

**Output**

@DPSI@
@PSIVEC@

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>