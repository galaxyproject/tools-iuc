<?xml version="1.0"?>
<tool id="suppa_events_psi" name="SUPPA generateEvents, psiPerIsoform, psiPerEvent" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>of expression values</description>
    <macros>
        <import>macros.xml</import>
        <token name="@VERSION_SUFFIX@">0</token>
        <token name="@PAIRS@"><![CDATA[
## ['A3_strict','A3_variable','A5_strict', ...]
#set $pairs = [x + '_' + y for x in ['A3','A5','AF','AL','MX','RI','SE'] for y in ['strict','variable']] 
        ]]></token>
        <xml name="e">
            <param argument="-e" type="data" format="tabular" label="Select expression file" help="Containing the abundances of all transcripts (ideally in TPM units)."/>
        </xml>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## elements that can't be matched between input files
## are shown in stderr and saved in $out_log

## run generateEvents
suppa.py generateEvents
-i '$i'
-o 'generateevents'
$poolgenes
-f '$f_cond.f_sel'
#if $f_cond.f_sel == 'ioe'
    #if $f_cond.e
        -e ${str($f_cond.e).replace(',',' ')} ## whitespace required
    #end if
    -b '$f_cond.b_cond.b_sel'
    #if $f_cond.b_cond.b_sel == 'V'
        -t '$f_cond.b_cond.t'
    #end if
    -l '$f_cond.l'
#end if
#if $log
    2>&1 | tee -a '$out_log'
#end if

## run PsiPerEvent
#if $f_cond.f_sel == 'ioe'
    #if $f_cond.psievent_cond.psievent_sel == 'yes'
        @PAIRS@
        #for $pair in $pairs
            #set $filename = 'generateevents' + '_' + $pair
            ## value of t (given V is selected) is part of generateEvents output filenames
            #if $f_cond.b_cond.b_sel == 'V'
                #set $filename = $filename + '_' + str($f_cond.b_cond.t)
            #end if
            ## apply psiPerEvent on all existing generateEvents *.ioe output files
            && test -f '${filename}.ioe'
                && suppa.py psiPerEvent
                    -e '$f_cond.psievent_cond.e'
                    -i '${filename}.ioe'
                    -f '$f_cond.psievent_cond.f'
                    -o 'psievent_${pair}'
                    #if $log
                        2>&1 | tee -a '$out_log'
                    #end if
                || echo ''
        #end for
    #end if
#end if

## run PsiPerIsoform
#if $f_cond.f_sel == 'ioe'
    #if $f_cond.psiisoform_cond.psiisoform_sel == 'yes'
        @PAIRS@
        #for pair in $pairs
            #set $filename = 'generateevents' + '_' + $pair
            ## value of t (given V is selected) is part of generateEvents output filenames
            #if $f_cond.b_cond.b_sel == 'V'
                #set $filename = $filename + '_' + str($f_cond.b_cond.t)
            #end if
            ## apply psiPerIsoform on all existing generateEvents *.gtf output files
            && test -f '${filename}.gtf'
                && suppa.py psiPerIsoform 
                    -e '$f_cond.psiisoform_cond.e'
                    -g '${filename}.gtf'
                    -o '${pair}' ## results have suffix '_isoform'
                    #if $log
                        2>&1 | tee -a '$out_log'
                    #end if
                || echo ''
        #end for
    #end if
#end if

## postprocessing
&& ls -lisa
    ]]></command>
    <inputs>
        <param argument="-i" type="data" format="gtf" label="Select file containing exon lines"/>
        <param name="poolgenes" type="boolean" truevalue="--pool-genes" falsevalue="" label="Redefine genes?" help="By clustering together transcripts by genomic stranded overlap and sharing at least one exon. It is crucial when creating ioe/ioi from annotations that are not loci-based, e.g. RefSeq and UCSC genes. (--pool-genes)"/>
        <conditional name="f_cond">
            <param name="f_sel" type="select" label="Select format of event annotation to create" help="(-f)">
                <option value="ioi" selected="true">Transcript events (IOI)</option>
                <option value="ioe">Local events (IOE)</option>
            </param>
            <when value="ioi"/>
            <when value="ioe">
                <param argument="-e" type="select" multiple="true" label="Select event type(s)">
                    <option value="SE" selected="true">Skipping exon (SE)</option>
                    <option value="SS" selected="true">Alternative 5' (A5) or 3' (A3) splice sites (generates both, SS)</option>
                    <option value="MX" selected="true">Mutually Exclusive (MX) exons</option>
                    <option value="RI" selected="true">Retained intron (RI)</option>
                    <option value="FL" selected="true">Alternative First (AF) and Last (AL) exons (generates both, FL)</option>
                </param>
                <conditional name="b_cond">
                    <param name="b_sel" type="select" multiple="false" label="Select boundary type" help="(-b)">
                        <option value="S" selected="true">Strict</option>
                        <option value="V">Variable</option>
                    </param>
                    <when value="S"/>
                    <when value="V">
                        <param argument="-t" type="integer" value="10" label="Set variability threshold"/>
                    </when>
                </conditional>
                <param argument="-l" type="integer" value="100" label="Set number of nucleotides" help="To display in the output GTF."/>
                <conditional name="psievent_cond">
                    <param name="psievent_sel" type="select" label="Calculate PSI per local event?">
                        <option value="no" selected="true">No</option>
                        <option value="yes">Yes</option>
                    </param>
                    <when value="no"/>
                    <when value="yes">
                        <expand macro="e"/>
                        <param argument="-f" type="float" value="0.0" label="Set minimum total expression?" help="Of the transcripts involved in the event (Default is zero). If used, it will filter out the events that do not reach this total expression value for the transcripts defining the event (the denominator of the PSI calculation)."/>
                    </when>
                </conditional>
                <conditional name="psiisoform_cond">
                    <param name="psiisoform_sel" type="select" label="Calculate PSI per transcript isoform?">
                        <option value="no" selected="true">No</option>
                        <option value="yes">Yes</option>
                    </param>
                    <when value="no"/>
                    <when value="yes">
                        <expand macro="e"/>
                    </when>
                </conditional>
            </when>
        </conditional>
        <param name="log" type="boolean" label="Create log file?"/>
    </inputs>
    <outputs>
        <data name="out_ioi" format="tabular" from_work_dir="generateevents.ioi" label="${tool.name} on ${on_string}: Transcript events (IOI)">
            <filter>f_cond['f_sel'] == 'ioi'</filter>
        </data>
        <collection name="out_ioe" type="list" label="${tool.name} on ${on_string}: Local events (IOE)">
            <filter>f_cond['f_sel'] == 'ioe'</filter>
            <discover_datasets pattern="generateevents\_(?P&lt;designation&gt;.+)\.ioe" ext="tabular" visible="false"/>
        </collection>
        <collection name="out_gtf" type="list" label="${tool.name} on ${on_string}: Annotation (GTF)">
            <filter>f_cond['f_sel'] == 'ioe'</filter>
            <discover_datasets pattern="generateevents\_(?P&lt;designation&gt;.+)\.gtf" ext="gtf" visible="false"/>
        </collection>
        <collection name="out_event" type="list" label="${tool.name} on ${on_string}: PSI per event">
            <filter>f_cond['f_sel'] == 'ioe' and f_cond['psievent_cond']['psievent_sel'] == 'yes'</filter>
            <discover_datasets pattern="psievent\_(?P&lt;designation&gt;.+)\.psi" ext="tabular" visible="false"/>
        </collection>
        <collection name="out_isoform" type="list" label="${tool.name} on ${on_string}: PSI per isoform">
            <filter>f_cond['f_sel'] == 'ioe' and f_cond['psiisoform_cond']['psiisoform_sel'] == 'yes'</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\_isoform\.psi" ext="tabular" visible="false" />
        </collection>
        <data name="out_log" format="txt" label="${tool.name} on ${on_string}: Log">
            <filter>log</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default, ioi -->
        <test expect_num_outputs="1">
            <param name="i" value="annotation.gtf"/>
            <conditional name="f_cond">
                <param name="f_sel" value="ioi"/>
            </conditional>
            <output name="out_ioi">
                <assert_contents>
                    <has_n_lines n="241"/>
                    <has_text_matching expression="seqname&#09;gene\_id.+"/>
                    <has_text_matching expression="chr1&#09;ENSG00000223972.+"/>
                    <has_text_matching expression="chr1&#09;ENSG00000078808.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 default, ioe -->
        <test expect_num_outputs="2">
            <param name="i" value="annotation.gtf"/>
            <conditional name="f_cond">
                <param name="f_sel" value="ioe"/>
            </conditional>
            <output_collection name="out_ioe" count="7">
                <element name="A3_strict" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="22"/>
                        <has_text_matching expression="chr1&#009;ENSG00000223972.+"/>
                    </assert_contents>
                </element>
                <element name="A5_strict" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="16"/>
                        <has_text_matching expression="chr1&#009;ENSG00000237094.+"/>
                    </assert_contents>
                </element>
                <element name="AF_strict" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="29"/>
                        <has_text_matching expression="chr1&#009;ENSG00000237094.+"/>
                    </assert_contents>
                </element>
                <element name="AL_strict" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="14"/>
                        <has_text_matching expression="chr1&#009;ENSG00000237094.+"/>
                    </assert_contents>
                </element>
                <element name="MX_strict" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="4"/>
                        <has_text_matching expression="chr1&#009;ENSG00000228794.+"/>
                    </assert_contents>
                </element>
                <element name="RI_strict" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="9"/>
                        <has_text_matching expression="chr1&#009;ENSG00000187583.+"/>
                    </assert_contents>
                </element>
                <element name="SE_strict" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="24"/>
                        <has_text_matching expression="chr1&#009;ENSG0000023749.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="out_gtf" count="7">
                <element name="A3_strict" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="85"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="A5_strict" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="61"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="AF_strict" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="113"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="AL_strict" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="53"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="MX_strict" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="19"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="RI_strict" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="25"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="SE_strict" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="116"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- #3 custom values, ioe, psi -->
        <test expect_num_outputs="5">
            <param name="i" value="annotation.gtf"/>
            <param name="poolgenes" value="true"/>
            <conditional name="f_cond">
                <param name="f_sel" value="ioe"/>
                <param name="e" value="SE,SS,MX,RI,FL"/>
                <conditional name="b_cond">
                    <param name="b_sel" value="V"/>
                    <param name="t" value="11"/>
                </conditional>
                <param name="l" value="101"/>
                <conditional name="psievent_cond">
                    <param name="psievent_sel" value="yes"/>
                    <param name="e" value="expression.tpm"/>
                    <param name="f" value="0.01"/>
                </conditional>
                <conditional name="psiisoform_cond">
                    <param name="psiisoform_sel" value="yes"/>
                    <param name="e" value="expression.tpm"/>
                </conditional>
            </conditional>
            <param name="log" value="true"/>
            <output_collection name="out_ioe" count="7">
                <element name="A3_variable_11" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="59"/>
                        <has_text_matching expression="chr1&#009;ENSG00000223972.+"/>
                    </assert_contents>
                </element>
                <element name="A5_variable_11" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="43"/>
                        <has_text_matching expression="chr1&#009;ENSG00000237094.+"/>
                    </assert_contents>
                </element>
                <element name="AF_variable_11" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="29"/>
                        <has_text_matching expression="chr1&#009;ENSG00000237491.+"/>
                    </assert_contents>
                </element>
                <element name="AL_variable_11" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="14"/>
                        <has_text_matching expression="chr1&#009;ENSG00000237491.+"/>
                    </assert_contents>
                </element>
                <element name="MX_variable_11" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="4"/>
                        <has_text_matching expression="chr1&#009;ENSG00000228794.+"/>
                    </assert_contents>
                </element>
                <element name="RI_variable_11" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="42"/>
                        <has_text_matching expression="chr1&#009;ENSG00000223972.+"/>
                    </assert_contents>
                </element>
                <element name="SE_variable_11" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="24"/>
                        <has_text_matching expression="chr1&#009;ENSG00000237491.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="out_gtf" count="7">
                <element name="A3_variable_11" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="117"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="A5_variable_11" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="85"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="AF_variable_11" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="113"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="AL_variable_11" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="53"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="MX_variable_11" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="19"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="RI_variable_11" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="124"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
                <element name="SE_variable_11" ftype="gtf">
                    <assert_contents>
                        <has_n_lines n="116"/>
                        <has_text_matching expression="chr1.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="out_event" count="7">
                <element name="A3_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="59"/>
                        <has_text_matching expression="ENSG00000131591.+"/>
                    </assert_contents>
                </element>
                <element name="A5_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="43"/>
                        <has_text_matching expression="ENSG00000131591.+"/>
                    </assert_contents>
                </element>
                <element name="AF_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="29"/>
                        <has_text_matching expression="ENSG00000131591.+"/>
                    </assert_contents>
                </element>
                <element name="AL_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="14"/>
                        <has_text_matching expression="ENSG00000131591.+"/>
                    </assert_contents>
                </element>
                <element name="MX_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="4"/>
                        <has_text_matching expression="ENSG00000131591.+"/>
                    </assert_contents>
                </element>
                <element name="RI_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="42"/>
                        <has_text_matching expression="ENSG00000131591.+"/>
                    </assert_contents>
                </element>
                <element name="SE_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="24"/>
                        <has_text_matching expression="ENSG00000131591.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <!-- outputs are empty, test dataset is to small -->
            <output_collection name="out_isoform" count="7">
                <element name="A3_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_text_matching expression="Sample1.+"/>
                    </assert_contents>
                </element>
                <element name="A5_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_text_matching expression="Sample1.+"/>
                    </assert_contents>
                </element>
                <element name="AF_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_text_matching expression="Sample1.+"/>
                    </assert_contents>
                </element>
                <element name="AL_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_text_matching expression="Sample1.+"/>
                    </assert_contents>
                </element>
                <element name="MX_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_text_matching expression="Sample1.+"/>
                    </assert_contents>
                </element>
                <element name="RI_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_text_matching expression="Sample1.+"/>
                    </assert_contents>
                </element>
                <element name="SE_variable" ftype="tabular">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_text_matching expression="Sample1.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_log">
                <assert_contents>
                    <has_line line="INFO:eventGenerator:Done"/>
                    <has_line line="INFO:psiCalculator:Done"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

SUPPA can work with local alternative splicing events or with transcripts 'events' per gene. The local alternative splicing events are standard local splicing variations, whereas a transcript event is an isoform-centric approach, where each isoform in a gene is described separately.

This module combines *generateEvents*, *psiPerEvents* and *psiPerIsoform*.

*generateEvents* reads transcript and gene information solely from the 'exon' lines. *psiPerEvents* and *psiPerIsoform* read the IOI or IOE file generated in the previous step and a transcript expression file with the transcript abundances (TPM) to calculate the relative abundance (PSI) value per sample for each transcript or each local event.

**Input**

*generateEvents*

- annotation file (GTF)

*psiPerEvents*

- file with transcript 'events' created with *generateEvents* and automatically included (IOI, tabular)
- a transcript expression file (TPM, tabular)

*psiPerIsoform*

- an automatically included file with half-open coordinate convention and a track header created with *generateEvents* (GTF)
- a transcript expression file (TPM, tabular)

**Output**

- IOI/IOE and GTF result files created by *generateEvents*
- a tabular file with PSI values for every IOE/GTF (*psiPerIsoform*, *psiPerEvents*)

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>