<tool id="scanpy_plot" name="Plot" version="@galaxy_version@">
    <description>with scanpy</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
          python $script_file
      ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

sc.settings.figdir = '.'

#if $method.method == 'pl.scatter'
@CMD_params_pl_color@
@CMD_params_pl_groups@
@CMD_params_pl_components@
sc.pl.scatter(
    adata=adata,
    save='.$format',
    #if $method.type.type == 'xy'
    x='$method.type.x',
    y='$method.type.y',
    layers=('$method.type.layer_x', '$method.type.layer_y', '$method.type.layer_color'),
    #else
    basis='$method.type.basis',
    #end if
    color=col,
    use_raw=$method.use_raw,
    sort_order=$method.sort_order,
    groups=groups,
    @CMD_pl_attribute_section@
    show=False)

#elif $method.method == 'pl.heatmap'
@CMD_params_var_group@
sc.pl.heatmap(
    adata=adata,
    save='.$format',
    @CMD_params_plots@
    @CMD_params_figsize@ 
    #if $method.layer != ''
    layer=$method.layer,
    #end if
    swap_axes=$method.swap_axes,
    show_gene_labels=$method.show_gene_labels,
    #if $seaborn_heatmap.vmin
    vmin=$seaborn_heatmap.vmin,
    #end if
    #if $seaborn_heatmap.vmax
    vmax=$seaborn_heatmap.vmax,
    #end if
    cmap='$seaborn_heatmap.cmap',
    #if $seaborn_heatmap.center
    center=$seaborn_heatmap.center,
    #end if
    annot=$seaborn_heatmap.annot,
    linewidths=$seaborn_heatmap.linewidths,
    linecolor='$seaborn_heatmap.linecolor',
    cbar=$seaborn_heatmap.cbar,
    square=$seaborn_heatmap.square,
    show=False)

#elif $method.method == 'pl.dotplot'
@CMD_params_var_group@
sc.pl.dotplot(
    adata=adata,
    save='.$format',
    @CMD_params_plots@
    @CMD_params_figsize@
    #if $method.layer != ''
    layer='$method.layer',
    #end if
    color_map='$color_map',
    #if $method.dot_max
    dot_max=$method.dot_max,
    #end if
    #if $method.dot_min
    dot_min=$method.dot_min,
    #end if
    @CMD_params_matplotlib_pyplot_scatter@
    show=False)

#elif $method.method == 'pl.violin'
    #if $method.key_variables.type == "var_names"
key_list = adata.var_names
    #elif $method.key_variables.type == "obs"
key_list = adata.obs.select_dtypes(exclude=['category']).columns
    #elif $method.key_variables.type == "custom"
key_list=[]
        #for $i, $s in enumerate($method.key_variables.key_variables)
key_list.append('$s.var')
        #end for
    #end if
sc.pl.violin(
    adata=adata,
    save='.$format',
    keys=key_list,
    #if $method.groupby
    groupby='$method.groupby',
    #end if
    log=$method.log,
    use_raw=$method.use_raw,
    sstripplot=$method.violin_plot.stripplot.stripplot,
    #if $method.violin_plot.stripplot.stripplot == "True"
    jitter=$method.violin_plot.stripplot.jitter.jitter,
        #if $method.violin_plot.stripplot.jitter.jitter == "True"
    size=$method.violin_plot.stripplot.jitter.size,
        #end if
    #end if
    multi_panel=$method.violin_plot.multi_panel.multi_panel, 
    scale='$method.violin_plot.scale',,
    #if $method.xlabel
    xlabel='$method.xlabel',
    #end if
    #if $method.rotation
    rotation=$method.rotation,
    #end if
    @CMD_params_seaborn_violinplot@
    save='.$format',
    show=False)

#elif $method.method == 'pl.matrixplot'
@CMD_params_var_group@
sc.pl.matrixplot(
    adata=adata,
    save='.$format',
    @CMD_params_plots@
    @CMD_params_figsize@
    #if $method.layer != ''
    layer='$method.layer',
    #end if
    cmap='$method.matplotlib_pyplot_pcolor.cmap',
    #if $method.matplotlib_pyplot_pcolor.vmin
    vmin=$method.matplotlib_pyplot_pcolor.vmin,
    #end if
    #if $method.matplotlib_pyplot_pcolor.vmax
    vmax=$method.matplotlib_pyplot_pcolor.vmax,
    #end if
    edgecolors='$method.matplotlib_pyplot_pcolor.edgecolors',
    #if $method.matplotlib_pyplot_pcolor.alpha
    alpha=$method.matplotlib_pyplot_pcolor.alpha,
    #end if
    snap=$method.matplotlib_pyplot_pcolor.snap,
    show=False)

elif $method.method == 'pl.clustermap'
g = sc.pl.clustermap(
    #if $use_raw=="True"
    data=adata.X,
    #else
    data=adata,
    #end if
    obs_keys='$method.obs_keys',
    use_raw=$method.use_raw,
    method='$method.seaborn_clustermap.method',
    metric='$method.seaborn_clustermap.metric',
    z_score=$method.seaborn_clustermap.z_score,
    standard_scale=$method.seaborn_clustermap.standard_scale,
    col_cluster='$method.seaborn_clustermap.col_cluster',
    row_cluster='$method.seaborn_clustermap.row_cluster',
    show=False)

g.savefig(fname="output.$format")

#elif $method.method == 'pl.highest_expr_genes'
sc.pl.highest_expr_genes(
    adata=adata,
    n_top=$method.n_top,
    show=False,
    save='.$format',
    #if $method.gene_symbols
    gene_symbols='$method.gene_symbols',
    #end if
    #if $method.setseaborn_boxplot.color
    color='$method.setseaborn_boxplot.color',
    #end if
    #if $method.setseaborn_boxplot.palette
    palette='$method.setseaborn_boxplot.palette',
    #end if
    saturation=$method.setseaborn_boxplot.saturation)

#elif $method.method == 'pl.pca'
@CMD_params_pl_color@
@CMD_params_pl_groups@
@CMD_params_pl_components@
sc.pl.pca(
    adata=adata,
    color=col,
    use_raw=$method.use_raw,
    sort_order=$method.sort_order,
    groups=groups,
    @CMD_pl_attribute_section@
    @CMD_params_matplotlib_pyplot_scatter@
    show=False,
    save='.$format')

#elif $method.method == 'pl.pca_loadings'
components=[]
#for $i, $s in enumerate($method.components)
    components.append($s.comp)
#end for

sc.pl.pca_loadings(
    adata=adata,
    components=components,
    show=False,
    save='.$format')

#elif method.method == 'pl.pca_variance_ratio'
sc.pl.pca_variance_ratio(
    adata=adata,
    n_pcs=$method.n_pcs,
    log=$method.log,
    show=False,
    save='.$format')

#elif method.method == 'pl.pca_overview'
@CMD_params_pl_color@
@CMD_params_pl_groups@
@CMD_params_pl_components@
sc.pl.pca_overview(
    adata=adata,
    color=col,
    use_raw=$method.use_raw,
    sort_order=$method.sort_order,
    groups=groups,
    @CMD_pl_attribute_section@
    @CMD_params_matplotlib_pyplot_scatter@
    show=False,
    save='.$format')

#elif method.method == 'pl.tsne'
@CMD_params_pl_color@
@CMD_params_pl_groups@
@CMD_params_pl_components@
sc.pl.tsne(
    adata=adata,
    color=col,
    use_raw=$method.use_raw,
    edges=$method.edges,
    edges_width=$method.edges_width,
    edges_color='$method.edges_color',
    arrows=$method.arrows,
    sort_order=$method.sort_order,
    groups=groups,
    @CMD_pl_attribute_section@
    @CMD_params_matplotlib_pyplot_scatter@
    show=False,
    save='.$format')

#elif method.method == 'pl.umap'
@CMD_params_pl_color@
@CMD_params_pl_groups@
@CMD_params_pl_components@
sc.pl.umap(
    adata=adata,
    color=col,
    use_raw=$method.use_raw,
    edges=$method.edges,
    edges_width=$method.edges_width,
    edges_color='$method.edges_color',
    arrows=$method.arrows,
    sort_order=$method.sort_order,
    groups=groups,
    @CMD_pl_attribute_section@
    @CMD_params_matplotlib_pyplot_scatter@
    show=False,
    save='.$format')

#elif method.method == 'pl.diffmap'
@CMD_params_pl_color@
@CMD_params_pl_groups@
@CMD_params_pl_components@
sc.pl.diffmap(
    adata=adata,
    color=col,
    use_raw=$method.use_raw,
    sort_order=$method.sort_order,
    groups=groups,
    @CMD_pl_attribute_section@
    @CMD_params_matplotlib_pyplot_scatter@
    show=False,
    save='.$format')

#elif method.method == 'pl.dpt_groups_pseudotime'
sc.pl.dpt_groups_pseudotime(
    adata=adata,
    color_map='$method.color_map',
    palette='$method.palette',
    show=False,
    save='.$format'

#elif method.method == 'pl.dpt_timeseries'
sc.pl.dpt_timeseries(
    adata=adata,
    as_heatmap=$method.heatmap.as_heatmap,
    #if $method.heatmap.as_heatmap == "True"
    color_map='$method.heatmap.color_map',
    #end if
    show=False,
    save='.$format')

#elif method.method == 'pl.paga'
labels=[]
    #for $i, $s in enumerate($labels)
labels.append('$s.label')
    #end for
if len(labels) == 0:
  labels=None

root=[]
    #for $i, $s in enumerate($roots)
root.append($s.root)
    #end for
if len(root) == 0:
  root=None

sc.pl.paga(
    adata=adata,
    @CMD_params_pl_paga@
    show=False,
    save='.$format')
#end if
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <expand macro="param_plot_format"/>
        <conditional name="method">
            <param argument="method" type="select" label="Method used for plotting">
                <option value="pl.scatter">Generic: Scatter plot along observations or variables axes, using `pl.scatter`</option>
                <option value="pl.heatmap">Generic: Heatmap of the expression values of set of genes, using `pl.heatmap`</option>
                <option value="pl.dotplot">Generic: Makes a dot plot of the expression values, using `pl.dotplot`</option>
                <option value="pl.violin">Generic: Violin plot, using `pl.violin`</option>
                <option value="pl.matrixplot">Generic: Heatmap of the mean expression values per cluster, using `pl.matrixplot`</option>
                <option value="pl.clustermap">Generic: Hierarchically-clustered heatmap, using `pl.clustermap`</option>
                <option value="pl.highest_expr_genes">Preprocessing: Plot the fraction of counts assigned to each gene over all cells, using `pl.highest_expr_genes`</option>
                <!--<option value="pl.filter_genes_dispersion">Preprocessing: Plot dispersions versus means for genes, using `pl.filter_genes_dispersion`</option>-->
                <option value="pl.pca">PCA: Scatter plot in PCA coordinates, using `pl.pca`</option>
                <option value="pl.pca_loadings">PCA: Rank genes according to contributions to PCs, using `pl.pca_loadings`</option>
                <option value="pl.pca_variance_ratio">PCA: Scatter plot in PCA coordinates, using `pl.pca_variance_ratio`</option>
                <option value="pl.pca_overview">PCA: Plot PCA results, using `pl.pca_overview`</option>
                <option value="pl.tsne">Embeddings: Scatter plot in tSNE basis, using `pl.tsne`</option>
                <option value="pl.umap">Embeddings: Scatter plot in UMAP basis, using `pl.umap`</option>
                <option value="pl.diffmap">Embeddings: Scatter plot in Diffusion Map basis, using `pl.diffmap`</option>
                <option value="pl.dpt_groups_pseudotime">Branching trajectories and pseudotime, clustering: Plot groups and pseudotime, using `pl.dpt_groups_pseudotime`</option>
                <option value="pl.dpt_timeseries">Branching trajectories and pseudotime, clustering: Heatmap of pseudotime series, using `pl.dpt_timeseries`</option>
                <option value="pl.paga">Branching trajectories and pseudotime, clustering: Plot the abstracted graph through thresholding low-connectivity edges, using `pl.paga`</option>
            </param>
            <when value="pl.scatter">
                <conditional name="type">
                    <param name="type" type="select" label="Plotting tool that computed coordinates" help="">
                        <option value="xy">Using coordinates</option>
                        <option value="basis">Using tool that computes coordinates</option>
                    </param>
                    <when value="xy">
                        <param argument="x" type="text" value="" label="x coordinate" help="Index or key from either `.obs` or `.var`"/>
                        <param argument="y" type="text" value="" label="y coordinate" help="Index or key from either `.obs` or `.var`"/>
                        
                        <param argument="layer_x" type="text" value="X" label="Layers for x coordinate" help="Use the `layers` attribute of `adata` if present"/>
                        <param argument="layer_y" type="text" value="X" label="Layers for y coordinate" help="Use the `layers` attribute of `adata` if present"/>
                        <param argument="layer_color" type="text" value="X" label="Layers for color" help="Use the `layers` attribute of `adata` if present"/>
                    </when>
                    <when value="basis">
                        <param argument="basis" type="select" label="Plotting tool that computes coordinates" help="">
                            <option value="pca">pca (need to run on `tl.pca` output)</option>
                            <option value="tsne">tsne (need to run on `tl.tsne` output)</option>
                            <option value="umap">umap (need to run on `tl.umap` output)</option>
                            <option value="diffmap">diffmap (need to run on `tl.diffmap` output)</option>
                            <option value="draw_graph_fr">draw_graph_fr (need to run on `tl.draw_graph` output)</option>
                        </param>
                    </when>
                </conditional>
                <expand macro="pl_color"/>
                <expand macro="param_use_raw"/>
                <param argument="sort_order" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Plot data points with higher values on top of others?" help="For continuous annotations used as color parameter"/>
                <expand macro="pl_groups"/>
                <expand macro="pl_attribute_section"/>
                <expand macro="section_matplotlib_pyplot_scatter"/> 
            </when>
            <when value="pl.heatmap">
                <expand macro="pl_var_names"/>
                <expand macro="param_groupby"/>
                <expand macro="param_log"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_num_categories"/>
                <expand macro="pl_figsize"/>
                <expand macro="param_dendrogram"/>
                <expand macro="pl_var_group_positions"/>
                <expand macro="param_var_group_rotation"/>
                <expand macro="param_layer"/>
                <param argument="swap_axes" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Swap axes?" help="By default, the x axis contains `var_names` (e.g. genes) and the y axis the `groupby` categories (if any). By setting `swap_axes` then x are the `groupby` categories and y the `var_names`."/>
                <param argument="show_gene_labels" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Show gene labels?" help="By default gene labels are shown when there are 50 or less genes. Otherwise the labels are removed."/>
                <section name="seaborn_heatmap" title="Parameters for seaborn.heatmap">
                    <param argument="vmin" type="float" value="" optional="true" label="Minimum value to anchor the colormap" help="If not set, it is inferred from the data and other keyword arguments"/>
                    <param argument="vmax" type="float" value="" optional="true" label="Maximum value to anchor the colormap" help="If not set, it is inferred from the data and other keyword arguments"/>
                    <param argument="cmap" type="select" label="Color palette">
                        <expand macro="seaborn_color_palette_options"/>
                    </param>
                    <param argument="center" type="float" value="" optional="true" label="Value at which to center the colormap" help=""/>
                    <param argument="annot" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Write the data value in each cell?" help=""/>
                    <param argument="linewidths" type="float" value="0" label="Width of the lines that will divide each cell" help=""/>
                    <param argument="linecolor" type="text" value="white" label="Color of the lines that will divide each cell" help=""/>
                    <param argument="cbar" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Draw a colorbar?" help=""/>
                    <param argument="square" type="boolean" truevalue="True" falsevalue="False" checked="false" label="set the Axes aspect to 'equal' so each cell will be square-shaped?" help=""/>
                </section>
            </when>
            <when value="pl.dotplot">
                <expand macro="pl_var_names"/>
                <expand macro="param_groupby"/>
                <expand macro="param_log"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_num_categories"/>
                <expand macro="pl_figsize"/>
                <expand macro="param_dendrogram"/>
                <expand macro="pl_var_group_positions"/>
                <expand macro="param_var_group_rotation"/>
                <expand macro="param_layer"/>
                <param argument="color_map" type="select" label="Color palette">
                    <expand macro="matplotlib_pyplot_colormap"/>
                </param>
                <param argument="dot_max" type="integer" value="" min="0" max="1" optional="true" label="Maximum dot size" help="If none, the maximum dot size is set to the maximum fraction value found (e.g. 0.6). If given, the value should be a number between 0 and 1. All fractions larger than dot_max are clipped to this value."/>
                <param argument="dot_min" type="integer" value="" min="0" max="1" optional="true" label="Maximum dot size" help="If none, the minimum dot size is set to 0. If given, the value should be a number between 0 and 1. All fractions smaller than dot_min are clipped to this value."/>
                <expand macro="section_matplotlib_pyplot_scatter"/>
            </when>
            <when value="pl.violin">
                <conditional name="key_variables">
                    <param name="type" type="select" label="Keys for accessing variables">
                        <option value="var_names">All variables in `.var_names`</option>
                        <option value="obs">All fields in `.obs`</option>
                        <option value="custom">Subset of variables in `adata.var_names` or fields of `.obs`"</option>
                    </param>
                    <when value="var_names"/>
                    <when value="obs"/>
                    <when value="custom">
                        <repeat name="key_variables" title="Keys for accessing variables" help="">
                            <param name="var" type="text" value="" label="Variable" help="It should be from `.var_names` or fields of `.obs`"/>
                        </repeat>
                    </when>
                </conditional>
                <expand macro="param_groupby"/>
                <expand macro="param_log"/>
                <expand macro="param_use_raw"/>
                <expand macro="section_violin_plots"/>
                <param argument="xlabel" type="text" value="" optional="true" label="Label of the x axis" help="Defaults to `groupby` if `rotation` is `None`,    otherwise, no label is shown."/>
                <param argument="rotation" type="float" value="" optional="true" label="Rotation of xtick labels" help=""/>
                <expand macro="seaborn_violinplot"/>
            </when>
            <when value="pl.matrixplot">
                <expand macro="pl_var_names"/>
                <expand macro="param_groupby"/>
                <expand macro="param_log"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_num_categories"/>
                <expand macro="pl_figsize"/>
                <expand macro="param_dendrogram"/>
                <expand macro="pl_var_group_positions"/>
                <expand macro="param_var_group_rotation"/>
                <expand macro="param_layer"/>
                <section name="matplotlib_pyplot_pcolor" title="Parameters for matplotlib.pyplot.pcolor">
                    <param argument="cmap" type="select" label="Color palette">
                        <expand macro="seaborn_color_palette_options"/>
                    </param>
                    <param argument="vmin" type="float" value="" optional="true" label="Minimum value to anchor the colormap" help=""/>
                    <param argument="vmax" type="float" value="" optional="true" label="Maximum value to anchor the colormap" help=""/>
                    <expand macro="param_matplotlib_pyplot_edgecolors"/>
                    <expand macro="param_matplotlib_pyplot_alpha"/>
                    <param argument="snap" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Snap the mesh to pixel boundaries?" help=""/>
                </section>
            </when>
            <when value="pl.clustermap">
                <param argument="obs_keys" type="text" value="" label="Categorical annotation to plot with a different color map" help="Currently, only a single key is supported."/>
                <expand macro="param_use_raw"/>
                <section name="seaborn_clustermap" title="Parameters for seaborn.clustermap">
                    <param name="method" type="select" label="Linkage method to use for calculating clusters" help="More details in https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html">
                        <option value="single">single: Nearest Point Algorithm</option>
                        <option value="complete">complete: Farthest Point Algorithm or Voor Hees Algorithm</option>
                        <option value="average">average: UPGMA algorithm</option>
                        <option value="weighted">weighted: WPGMA algorithm</option>
                        <option value="centroid">centroid: UPGMC algorithm</option>
                        <option value="median">median: WPGMC algorithm</option>
                        <option value="ward">ward: incremental algorithm</option>
                    </param>
                    <param name="metric" type="select" label="Distance metric to use for the data" help="See scipy.spatial.distance.pdist documentation for more options https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html">
                        <expand macro="distance_metric_options"/>
                    </param>
                    <param name="z_score" type="select" label="Calculate z-scores for the rows or the columns?" help="Z scores are: z = (x - mean)/std, so values in each row (column) will get the mean of the row (column) subtracted, then divided by the standard deviation of the row (column). This ensures that each row (column) has mean of 0 and variance of 1.">
                        <option value="None">No Z-score</option>
                        <option value="0">Rows</option>
                        <option value="1">Columns</option>
                    </param>
                    <param name="standard_scale" type="select" label="Standardize a dimension?" help="It means for each row or column, subtract the minimum and divide each by its maximum.">
                        <option value="None">No standardization</option>
                        <option value="0">Rows</option>
                        <option value="1">Columns</option>
                    </param>
                    <param name="col_cluster" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Cluster the columns?" help=""/>
                    <param name="row_cluster" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Cluster the rows?" help=""/>
                </section>
            </when>
            <when value="pl.highest_expr_genes">
                <param argument="n_top" type="integer" value="30" label="Number of top genes" help=""/>
                <param argument="gene_symbols" type="text" optional="true" label="Key for field in `.var` that stores gene symbols" help="Fill it if you do not want to use `.var_names`."/>
                <section name="setseaborn_boxplot" title="Plot settings" expanded="false">
                    <param argument="color" type="text" value="" optional="true" label="Color for all of the elements, or seed for a gradient palette" help=""/>
                    <param argument="palette" type="select" optional="true" label="Colors to use for the different levels of the hue variable" help="See https://seaborn.pydata.org/tutorial/color_palettes.html for more details.">
                        <expand macro="seaborn_color_palette_options"/>
                    </param>
                    <param argument="saturation" type="float" value="1" label="Proportion of the original saturation to draw colors at" help="Large patches often look better with slightly desaturated colors, but set this to 1 if you want the plot colors to perfectly match the input color spec."/>            
                </section>
            </when>
            <when value="pl.pca">
                <expand macro="pl_color"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_sort_order"/>
                <expand macro="pl_groups"/>
                <expand macro="pl_attribute_section"/>
                <expand macro="section_matplotlib_pyplot_scatter"/>
            </when>
            <when value="pl.pca_loadings">
                <repeat name="components" title="Component" min="2">
                    <param name="comp" type="integer" value="1" label="Component" help="1, 2, 3 means first, second and third principal components"/>
                </repeat>
            </when>
            <when value="pl.pca_variance_ratio">
                <param argument="n_pcs" type="integer" value="30" label="Number of PCs to show" help=""/>
                <expand macro="param_log"/>
            </when>
            <when value="pl.pca_overview">
                <expand macro="pl_color"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_sort_order"/>
                <expand macro="pl_groups"/>
                <expand macro="pl_attribute_section"/>
                <expand macro="section_matplotlib_pyplot_scatter"/>
            </when>
            <when value="pl.tsne">
                <expand macro="pl_color"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_edges"/>
                <expand macro="param_edges_width"/>
                <expand macro="param_edges_color"/>
                <expand macro="param_arrows"/>
                <expand macro="param_sort_order"/>
                <expand macro="pl_groups"/>
                <expand macro="pl_attribute_section"/>
                <expand macro="section_matplotlib_pyplot_scatter"/>
            </when>
            <when value="pl.umap">
                <expand macro="pl_color"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_edges"/>
                <expand macro="param_edges_width"/>
                <expand macro="param_edges_color"/>
                <expand macro="param_arrows"/>
                <expand macro="param_sort_order"/>
                <expand macro="pl_groups"/>
                <expand macro="pl_attribute_section"/>
                <expand macro="section_matplotlib_pyplot_scatter"/>
            </when>
            <when value="pl.diffmap">
                <expand macro="pl_color"/>
                <expand macro="param_use_raw"/>
                <expand macro="param_sort_order"/>
                <expand macro="pl_groups"/>
                <expand macro="pl_attribute_section"/>
                <expand macro="section_matplotlib_pyplot_scatter"/>
            </when>
            <when value="pl.dpt_groups_pseudotime">
                <expand macro="param_color_map"/>
                <param argument="palette" type="select" label="Colors to use for the different levels of the hue variable" help="">
                    <expand macro="matplotlib_pyplot_colormap"/>
                </param>
            </when>
            <when value="pl.dpt_timeseries">
                <conditional name="heatmap">
                    <param argument="as_heatmap" type="select" label="Plot the timeseries as heatmap?" help="">
                        <option value="True">Yes</option>
                        <option value="False">No</option>
                    </param>
                    <when value="True">
                        <expand macro="param_color_map"/>
                    </when>
                    <when value="False" />
                </conditional>
            </when>
            <when value="pl.paga">
                <expand macro="inputs_paga"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <expand macro="plot_output"/>
    </outputs>
    <tests>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pp.pca.krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.scatter"/>
                <conditional name="type">
                    <param name="type" value="basis"/>
                    <param name="basis" value="pca"/>
                </conditional>
                <param name="use_raw" value="False"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="palette" value="inferno"/>
                    <param name="frameon" value="True"/>
                    <param name="size" value="1"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.scatter.pca.krumsiek11.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.scatter"/>
                <conditional name="type">
                    <param name="type" value="xy"/>
                    <param name="x" value="EKLF"/>
                    <param name="y" value="Cebpa"/>
                    <param name="color" value="EgrNab"/>
                    <param name="layer_x" value="X"/>
                    <param name="layer_y" value="X"/>
                    <param name="layer_color" value="X"/>
                </conditional>
                <param name="use_raw" value="False"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="palette" value="bwr"/>
                    <param name="frameon" value="False"/>
                    <param name="size" value="1"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                    <param name="title" value="A title"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.scatter.krumsiek11.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.scatter"/>
                <conditional name="var_names">
                    <param name="type" value="all"/>
                </conditional>
                <param name="groupby" value=""/>
                <param name="log" value="False"/>
                <param name="use_raw" value="False"/>
                <param name="num_categories" value="7"/>
                <conditional name="figsize">
                    <param name="test" value="no"/>
                </conditional>
                <param name="dendrogram" value="False"/>
                <repeat name="var_group_positions">
                    <param name="start" value="1"/>
                    <param name="end" value="4"/>
                    <param name="label" value="1"/>
                </repeat>
                <repeat name="var_group_positions">
                    <param name="start" value="3"/>
                    <param name="end" value="6"/>
                    <param name="label" value="the label"/>
                </repeat>
                <param name="swap_axes" value="False"/>
                <param name="show_gene_labels" value="False"/>
                <section name="seaborn_heatmap">
                    <param name="cmap" value="Oranges_r"/>
                    <param name="annot" value="False"/>
                    <param name="linewidths" value="0"/>
                    <param name="linecolor" value="white"/>
                    <param name="cbar" value="True"/>
                    <param name="square" value="False"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.heatmap.krumsiek11_all.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.scatter"/>
                <conditional name="var_names">
                    <param name="type" value="custom"/>
                    <param name="var_names" value="Gata1, Fog1, EKLF, Fli1, SCL, Cebpa"/>
                </conditional>
                <param name="groupby" value="cell_type"/>
                <param name="log" value="False"/>
                <param name="use_raw" value="False"/>
                <param name="num_categories" value="7"/>
                <conditional name="figsize">
                    <param name="test" value="yes"/>
                    <param name="width" value="10" />
                    <param name="height" value="10" />
                </conditional>
                <param name="dendrogram" value="False"/>
                <param name="swap_axes" value="False"/>
                <param name="show_gene_labels" value="False"/>
                <section name="seaborn_heatmap">
                    <param name="cmap" value="Oranges_r"/>
                    <param name="annot" value="False"/>
                    <param name="linewidths" value="0"/>
                    <param name="linecolor" value="white"/>
                    <param name="cbar" value="True"/>
                    <param name="square" value="False"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.heatmap.krumsiek11_custom_var_names.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.dotplot"/>
                <conditional name="var_names">
                    <param name="type" value="all"/>
                </conditional>
                <param name="groupby" value="cell_type"/>
                <param name="log" value="False"/>
                <param name="use_raw" value="False"/>
                <param name="num_categories" value="7"/>
                <param name="dendrogram" value="False"/>
                <conditional name="figsize">
                    <param name="test" value="no"/>
                </conditional>
                <param name="dendrogram" value="False"/>
                <section name="matplotlib_pyplot_scatter">
                    <param name="marker" value="o"/>
                    <param name="linewidths" value="0" />
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.dotplot.krumsiek11.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pbmc68k_reduced.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.violin"/>
                <conditional name="key_variables">
                    <param name="type" value="custom"/>
                    <repeat name="key_variables" >
                        <param name="var" value="n_genes" />
                    </repeat>
                    <repeat name="key_variables" >
                        <param name="var" value="percent_mito" />
                    </repeat>
                </conditional>
                <param name="groupby" value="bulk_labels"/>
                <param name="log" value="False"/>
                <param name="use_raw" value="False"/>
                <conditional name="multi_panel">
                    <param name="multi_panel" value="False"/>
                </conditional>
                <conditional name="stripplot">
                    <param name="stripplot" value="False"/>
                </conditional>
                <param name="scale" value="width"/>
                <param name="xlabel" value=""/>
                <param name="rotation" value=""/>
                <section name="seaborn_violinplot">
                    <param name="bw" value="scott"/>
                    <param name="linewidth" value="0"/>
                    <param name="color" value="AliceBlue"/>
                    <param name="palette" value="viridis"/>
                    <param name="saturation" value="0.75"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.violin.pbmc68k_reduced_custom.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pbmc68k_reduced.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.violin"/>
                <conditional name="key_variables">
                    <param name="type" value="var_names"/>
                </conditional>
                <param name="log" value="False"/>
                <param name="use_raw" value="False"/>
                <conditional name="multi_panel">
                    <param name="multi_panel" value="False"/>
                </conditional>
                <conditional name="stripplot">
                    <param name="stripplot" value="True"/>
                    <conditional name="jitter">
                        <param name="jitter" value="False"/>
                    </conditional>
                </conditional>
                <param name="scale" value="width"/>
                <section name="seaborn_violinplot">
                    <param name="bw" value="scott"/>
                    <param name="linewidth" value="0"/>
                    <param name="color" value="AliceBlue"/>
                    <param name="palette" value="viridis"/>
                    <param name="saturation" value="0.75"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.violin.pbmc68k_reduced_var_names.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pbmc68k_reduced.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.violin"/>
                <conditional name="key_variables">
                    <param name="type" value="obs"/>
                </conditional>
                <param name="log" value="True"/>
                <param name="use_raw" value="False"/>
                <conditional name="multi_panel">
                    <param name="multi_panel" value="True"/>
                </conditional>
                <conditional name="stripplot">
                    <param name="stripplot" value="True"/>
                    <conditional name="jitter">
                        <param name="jitter" value="True"/>
                        <param name="size" value="1"/>
                    </conditional>
                </conditional>
                <param name="scale" value="width"/>
                <section name="seaborn_violinplot">
                    <param name="bw" value="scott"/>
                    <param name="linewidth" value="0"/>
                    <param name="color" value="AliceBlue"/>
                    <param name="palette" value="viridis"/>
                    <param name="saturation" value="0.75"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.violin.pbmc68k_reduced_obs.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.matrixplot"/>
                <conditional name="var_names">
                    <param name="type" value="all"/>
                </conditional>
                <param name="groupby" value="cell_type"/>
                <param name="log" value="False"/>
                <param name="use_raw" value="False"/>
                <param name="num_categories" value="7"/>
                <param name="dendrogram" value="False"/>
                <param name="format" value="png"/>
                <conditional name="figsize">
                    <param name="test" value="no"/>
                </conditional>
                <section name="matplotlib_pyplot_pcolor">
                    <param name="cmap" value="viridis"/>
                    <param name="edgecolors" value="face"/>
                    <param name="snap" value="False"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.matrixplot.krumsiek11.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.clustermap"/>
                <param name="obs_keys" value="cell_type"/>
                <param name="use_raw" value="False"/>
                <param name="format" value="png"/>
                <section name="seaborn_clustermap">
                    <param name="method" value="single"/>
                    <param name="metric" value="braycurtis"/>
                    <param name="z_score" value="None"/>
                    <param name="standard_scale" value="None"/>
                    <param name="col_cluster" value="False"/>
                    <param name="row_cluster" value="False"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.clustermap.krumsiek11.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.highest_expr_genes"/>
                <param name="n_top" value="30"/>
                <section name="setseaborn_boxplot">
                    <param name="color" value="blue"/>
                    <param name="saturation" value="0.5"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.highest_expr_genes.krumsiek11.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="pdf"/>
            <conditional name="method">
                <param name="method" value="pl.highest_expr_genes"/>
                <param name="n_top" value="30"/>
                <section name="setseaborn_boxplot">
                    <param name="palette" value="Blues"/>
                    <param name="saturation" value="1.0"/>
                </section>
            </conditional>
            <output name="out_pdf" file="pl.highest_expr_genes.krumsiek11.pdf" ftype="pdf" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="svg"/>
            <conditional name="method">
                <param name="method" value="pl.highest_expr_genes"/>
                <param name="n_top" value="30"/>
                <section name="setseaborn_boxplot">
                    <param name="saturation" value="1.0"/>
                </section>
            </conditional>
            <output name="out_svg" file="pl.highest_expr_genes.krumsiek11.svg" ftype="svg" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pbmc68k_reduced.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.pca"/>
                <repeat name="color">
                    <param name="color" value="bulk_labels"/>
                </repeat>
                <param name="use_raw" value="False"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <repeat name="components">
                        <param name="axis1" value="1"/>
                        <param name="axis2" value="2"/>
                    </repeat>
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="size" value="1"/>
                    <param name="palette" value="viridis"/>
                    <param name="frameon" value="True"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.pca.pbmc68k_reduced.bulk_labels_2d.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pbmc68k_reduced.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.pca"/>
                <repeat name="color">
                    <param name="color" value="bulk_labels"/>
                </repeat>
                <param name="use_raw" value="False"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <param name="projection" value="3d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="size" value="1"/>
                    <param name="palette" value="viridis"/>
                    <param name="frameon" value="True"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.pca.pbmc68k_reduced.bulk_labels_3d.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pbmc68k_reduced.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.pca"/>
                <repeat name="color">
                    <param name="color" value="CD3D"/>
                </repeat>
                <repeat name="color">
                    <param name="color" value="CD79A"/>
                </repeat>
                <param name="use_raw" value="False"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <repeat name="components">
                        <param name="axis1" value="1"/>
                        <param name="axis2" value="2"/>
                    </repeat>
                    <repeat name="components">
                        <param name="axis1" value="1"/>
                        <param name="axis2" value="3"/>
                    </repeat>
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="size" value="1"/>
                    <param name="palette" value="viridis"/>
                    <param name="frameon" value="True"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="vmax" value="5.0"/>
                    <param name="vmin" value="-5.0"/>
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.pca.pbmc68k_reduced.CD3D_CD79A_2d.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pp.pca.krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.pca_loadings"/>
                <repeat name="components">
                    <param name="comp" value="1"/>
                </repeat>
                <repeat name="components">
                    <param name="comp" value="2"/>
                </repeat>
                <repeat name="components">
                    <param name="comp" value="3"/>
                </repeat>
            </conditional>
            <output name="out_png" file="pl.pca_loadings.pp.pca.krumsiek11.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pp.pca.krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.pca_variance_ratio"/>
                <param name="n_pcs" value="30"/>
                <param name="log" value="False"/>
            </conditional>
            <output name="out_png" file="pl.pca_variance_ratio.pp.pca.krumsiek11.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pp.pca.krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.pca_overview"/>
                <repeat name="color">
                    <param name="color" value="cell_type"/>
                </repeat>
                <param name="use_raw" value="False"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="size" value="1"/>
                    <param name="palette" value="viridis"/>
                    <param name="frameon" value="True"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.pca_overview.pp.pca.krumsiek11.png"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="tl.tsne.krumsiek11.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.tsne"/>
                <repeat name="color">
                    <param name="color" value="cell_type"/>
                </repeat>
                <param name="use_raw" value="False"/>
                <param name="edges" value="false" />
                <param name="edges_width" value="0.1" />
                <param name="edges_color" value="Grey"/>
                <param name="arrows" value="false" />
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="palette" value="viridis"/>
                    <param name="frameon" value="True"/>
                    <param name="size" value="1"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.tsne.krumsiek11.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="tl.umap.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.umap"/>
                <repeat name="color">
                    <param name="color" value="paul15_clusters"/>
                </repeat>
                <param name="use_raw" value="False"/>
                <param name="edges" value="false" />
                <param name="edges_width" value="0.1" />
                <param name="edges_color" value="AliceBlue"/>
                <param name="arrows" value="false" />
                <section name="plot">
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="size" value="1"/>
                    <param name="palette" value="viridis"/>
                    <param name="frameon" value="True"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.umap.paul15_gauss_braycurtis.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="tl.diffmap.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.diffmap"/>
                <repeat name="color">
                    <param name="color" value="paul15_clusters"/>
                </repeat>
                <param name="use_raw" value="False"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="size" value="1"/>
                    <param name="palette" value="viridis"/>
                    <param name="frameon" value="True"/>
                    <param name="ncols" value="4"/>
                    <param name="wspace" value="0.1"/>
                    <param name="hspace" value="0.25"/>
                </section>
                <section name="matplotlib_pyplot_scatter">
                    <param name="linewidths" value="0"/>
                    <param name="edgecolors" value="face"/>
                </section>
            </conditional>
            <output name="out_png" file="pl.diffmap.paul15_gauss_braycurtis.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="tl.dpt.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.diffmap"/>
                <param name="color_map" value="viridis"/>
                <param name="palette" value="viridis"/>
            </conditional>
            <output name="out_png" file="pl.dpt_groups_pseudotime.paul15_gauss_braycurtis.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="tl.dpt.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.dpt_timeseries"/>
                <conditional name="heatmap">
                    <param name="as_heatmap" value="True"/>
                    <param name="color_map" value="viridis"/>
                </conditional>
            </conditional>
            <output name="out_png" file="pl.dpt_timeseries.paul15_gauss_braycurtis.png" ftype="png" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="tl.paga.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.paga"/>
                <param name="threshold" value="0.01"/>
                <param name="color" value="paul15_clusters"/>
                <repeat name="labels">
                    <param name="format" value="label" />
                </repeat>
                <param name="layout" value="fr"/>
                <param name="random_state" value="0"/>
                <param name="solid_edges" value="connectivities"/>
                <param name="single_component" value="False"/>
                <param name="fontsize" value="1"/>
                <param name="node_size_scale" value="1.0"/>
                <param name="node_size_power" value="0.5"/>
                <param name="edge_width_scale" value="5"/>
                <param name="arrowsize" value="30"/>
                <param name="normalize_to_color" value="False"/>
                <param name="cmap" value="viridis"/>
                <param name="title" value="A title"/>
                <param name="frameon" value="True"/>
            </conditional>
            <output name="out_png" file="pl.paga.paul15_gauss_braycurtis.png" ftype="png" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[
Generic: Scatter plot along observations or variables axes (`pl.scatter`)
=========================================================================

Color the plot using annotations of observations (`.obs`), variables
(`.var`) or expression of genes (`.var_names`).

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.scatter.html#scanpy.api.pl.scatter>`__

Generic: Heatmap of the expression values of set of genes (`pl.heatmap`)
========================================================================

If `groupby` is given, the heatmap is ordered by the respective group. For
example, a list of marker genes can be plotted, ordered by clustering. If
the `groupby` observation annotation is not categorical the observation
annotation is turned into a categorical by binning the data into the number
specified in `num_categories`.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.heatmap.html#scanpy.api.pl.heatmap>`__

Generic: Makes a dot plot of the expression values (`pl.dotplot`)
=================================================================

For each var_name and each `groupby` category a dot is plotted. Each dot
represents two values: mean expression within each category (visualized by
color) and fraction of cells expressing the var_name in the
category. (visualized by the size of the dot).  If groupby is not given, the
dotplot assumes that all data belongs to a single category. A gene is not
considered expressed if the expression value in the adata (or adata.raw) is
equal to zero.

For instance, for each marker gene, the mean value and the percentage of cells
expressing the gene can be visualized for each cluster.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.dotplot.html#scanpy.api.pl.dotplot>`__

Generic: Violin plot (`pl.violin`)
==================================

Wraps `seaborn.violinplot` for `anndata.AnnData`.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.stacked_violin.html#scanpy.api.pl.stacked_violin>`__

Generic: Heatmap of the mean expression values per cluster (`pl.matrixplot`)
============================================================================

Creates a heatmap of the mean expression values per cluster of each var_names

If groupby is not given, the matrixplot assumes that all data belongs to a single
category.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.matrixplot.html#scanpy.api.pl.matrixplot>`__

Generic: Hierarchically-clustered heatmap (`pl.clustermap`)
===========================================================

Wraps `seaborn.clustermap
<https://seaborn.pydata.org/generated/seaborn.clustermap.html>`__ for
`anndata.AnnData`.

The returned object has a savefig() method that should be used if you want
to save the figure object without clipping the dendrograms.

To access the reordered row indices, use:
clustergrid.dendrogram_row.reordered_ind

Column indices, use: clustergrid.dendrogram_col.reordered_ind

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.clustermap.html#scanpy.api.pl.clustermap>`__

Preprocessing: Plot the fraction of counts assigned to each gene over all cells (`pl.highest_expr_genes`)
=========================================================================================================

Computes, for each gene, the fraction of counts assigned to that gene within
a cell. The `n_top` genes with the highest mean fraction over all cells are
plotted as boxplots.

This plot is similar to the `scater` package function `plotHighestExprs(type= "highest-expression")`, see `here
<https://bioconductor.org/packages/devel/bioc/vignettes/scater/inst/doc/vignette-qc.html>`__.
-- Davis McCarthy and Aaron Lun

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.highest_expr_genes.html#scanpy.api.pl.highest_expr_genes>`__

PCA: Scatter plot in PCA coordinates (`pl.pca`)
===============================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.pca.html#scanpy.api.pl.pca>`__

PCA: Rank genes according to contributions to PCs (`pl.pca_loadings`)
=====================================================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.pca_loadings.html#scanpy.api.pl.pca_loadings>`__

PCA: Plot the variance ratio (`pl.pca_variance_ratio`)
======================================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.pca_variance_ratio.html#scanpy.api.pl.pca_variance_ratio>`__

PCA: Plot PCA results (`pl.pca_overview`)
=========================================

The parameters are the ones of the scatter plot. Call pca_ranking separately
if you want to change the default settings.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.pca_overview.html#scanpy.api.pl.pca_overview>`__

Embedding: Scatter plot in tSNE basis (`pl.tsne`)
=================================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.tsne.html#scanpy.api.pl.tsne>`__

Embeddings: Scatter plot in UMAP basis (`pl.umap`)
==================================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.umap.html#scanpy.api.pl.umap>`__

Embeddings: Scatter plot in Diffusion Map basis (`pl.diffmap`)
==============================================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.diffmap.html#scanpy.api.pl.diffmap>`__

Branching trajectories and pseudotime, clustering: Plot groups and pseudotime (`pl.dpt_groups_pseudotime`)
===========================================================================================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.dpt_groups_pseudotime.html#scanpy.api.pl.dpt_groups_pseudotime>`__

Branching trajectories and pseudotime, clustering: Heatmap of pseudotime series (`pl.dpt_timeseries`)
=====================================================================================================

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.dpt_timeseries.html#scanpy.api.pl.dpt_timeseries>`__


Branching trajectories and pseudotime, clustering: Plot the abstracted graph through thresholding low-connectivity edges (`pl.paga`)
====================================================================================================================================

This uses ForceAtlas2 or igraph's layout algorithms for most layouts.

When initializing the positions, note that - for some reason - igraph
mirrors coordinates along the x axis... that is, you should increase the
`maxiter` parameter by 1 if the layout is flipped.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.paga.html#scanpy.api.pl.paga>`__


    ]]></help>
    <expand macro="citations"/>
</tool>