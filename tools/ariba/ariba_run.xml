<tool id="ariba_run" name="ARIBA run" version="@VERSION@">
    <description>
        Runs the local assembly pipeline
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="version_command" />

    <command detect_errors="exit_code"><![CDATA[
        ariba run 
        
        --nucmer_min_id $adv_nucmer.nucmer_min_id
        --nucmer_min_len $adv_nucmer.nucmer_min_len
        --nucmer_breaklen $adv_nucmer.nucmer_breaklen

        --assembly_cov $adv_assembly.assembly_cov
        --min_scaff_depth $adv_assembly.min_scaff_depth
        
        #if str($adv_assembly.adv_assembler.assembler) == "spades"
        --spades_mode $adv_assembly.adv_assembler.spades_mode
            #if str($adv_assembly.adv_assembler.assembler) != "none"
                --spades_options $adv_assembly.adv_assembler.spades_options
            #end if
        #end if

        --threads $adv_other.threads
        --assembled_threshold $adv_other.assembled_threshold
        --gene_nt_extend $adv_other.gene_nt_extend
        --unique_threshold $adv_other.unique_threshold

        $adv_other.force
        $adv_other.noclean
        $adv_other.verbose
        
        '$ariba_databases.fields.path'

        #if str($library.lib_type) == "paired"
                '$library.R1'
                '$library.R2'
        #else if str($library.lib_type) == "collection"
                '$library.input1.forward'
                '$library.input1.reverse'
        #end if

        out
    ]]>    </command>
    <inputs>
        <conditional name="library">
            <param name="lib_type" type="select" label="Input reads type or collection" help="Select 'paired end' for a single library or 'collection' for a paired end collection">
                <option value="paired" selected="true">Paired End</option>
                <option value="collection">Paired Collection</option>
            </param>
            <when value="paired">
                <param name="R1" type="data" format="fastqsanger,fastqsanger.gz,fastqsanger.bz2" label="Forward reads (R1)" help="The file of forward reads in FASTQ format"/>
                <param name="R2" type="data" format="fastqsanger,fastqsanger.gz,fastqsanger.bz2" label="Reverse reads (R2)" help="The file of reverse reads in FASTQ format"/>
            </when>
            <when value="collection">
                <param name="input1" format="fastqsanger,fastqsanger.gz,fastqsanger.bz2" type="data_collection" collection_type="paired" label="Paired collection" help="See help section for an explanation of dataset collections"/>
            </when>
        </conditional>

        <!-- DATABASE INPUT-->
        <param label="Select a database" name="ariba_databases" type="select">
            <options from_data_table="ariba_databases">
                <validator message="No database is available" type="no_options" />
            </options>
        </param>
        <!-- Assembly options -->
        <section name="adv_assembly" title="Assembly Advanced options" expanded="False">
            <conditional name="adv_assembler">
                <param name="assembler" type="select" label="Assembler">
                    <option value="spades" selected="true">spades</option>
                    <option value="fermilite">fermilite</option>
                </param>
                <when value="spades">
                    <param name="spades_mode" argument="--spades_mode" type="select" label="Spades assembler mode" help="SPAdes assembler mode  either use default WGS
                        mode, Single Cell mode (sc) or RNA mode (rna). Use SC or RNA mode if your input is from a viral sequencing with very uneven and deep coverage. Set assembly_cov to some high value if
                        using SC or RNA mode">
                        <option value="wgs" selected="true">WGS</option>
                        <option value="sc">SC</option>
                        <option value="rna">RNA</option>
                    </param>
                    <param name="spades_options" argument="--spades_options" type="text" value="none" label="Extra options to pass to Spades assembler" help="Sensible default options will be picked based on spades_mode argument. Anything set here will replace the defaults completely" />
                </when>
            </conditional>
            <param name="assembly_cov" argument="--assembly_cov" type="integer" value="50" label="Assembly coverage" help="Target read coverage when sampling reads for assembly. The reads are randomly downsampled to the given coverage for assembly. If this option is more than the actual read coverage, then all reads are used for assembly. (Default: 50)" />
            <param name="min_scaff_depth" argument="--min_scaff_depth" type="integer" value="10" label="Min scaffold depth" help="Minimum number of read pairs needed as evidence for scaffold link between two contigs. (Default: 10)" />
        </section>
        <!-- Nucmer options -->
        <section name="adv_nucmer" title="Nucmer Advanced options" expanded="False">
            <param name="nucmer_min_id" argument="--nucmer_min_id" type="integer" value="90" label="Minimum alignment identity" help="Minimum alignment identity (the delta-filter -i option). (Default: 90)" />
            <param name="nucmer_min_len" argument="--nucmer_min_len" type="integer" value="20" label="Minimum alignment length" help="Minimum alignment length (the delta-filter -l option). (Default: 20)" />
            <param name="nucmer_breaklen" argument="--nucmer_breaklen" type="integer" value="200" label="Value to use for -breaklen when running nucmer" help="Value to use for -breaklen when running nucmer. (Default: 200)" />
        </section>
        <!-- Other options -->
        <section name="adv_other" title="Other options" expanded="False">
            <param name="threads" argument="--threads" type="integer" value="1" label=" Number of threads" help=" Experimental. Number of threads. Will run clusters in parallel, but not minimap. (Default: 1)" />
            <param name="assembled_threshold" argument="--assembled_threshold" type="float" min="0" max="1" value="0.95" label="Assembly threshold" help="If proportion of gene assembled (regardless of into how many contigs) is at least this value then the flag gene_assembled is set. (Default: 0.95)" />
            <param name="gene_nt_extend" argument="--gene_nt_extend" type="integer" value="30" label="Max number of nucleotides to extend ends of gene matches to look for start/stop codons" help="Max number of nucleotides to extend ends of gene matches to look for start/stop codons. (Default: 30)" />
            <param name="unique_threshold" argument="--unique_threshold" type="float" min="0" max="1" value="0.03" label="Proportion of bases to set unique assembled contig" help="If proportion of bases in gene assembled more than once is smaller than this value, then the flag unique_contig is set. (Default: 0.03)" />
            <param name="force" argument="--force" type="boolean" truevalue="--force" falsevalue="" checked="True" label="Overwrite output directory, if it already exists" help="Overwrite output directory, if it already exists (default: ON)" />
            <param name="noclean" argument="--noclean" type="boolean" truevalue="--noclean" falsevalue="" checked="False" label="Do not clean up intermediate files" help="Do not clean up intermediate files (default: OFF)" />
            <param name="verbose" argument="--verbose" type="boolean" truevalue="--verbose" falsevalue="" checked="False" label="Be verbose" help="Be verbose (default: OFF)" />
        </section>
    </inputs>

    <outputs>
        <data format="tabular" name="report" label="${tool.name} on ${on_string} report file" from_work_dir="out/report.tsv" />
        <data format="fasta" name="assembled_genes" label="${tool.name} on ${on_string}: gzipped FASTA file of assembled gene sequences" from_work_dir="out/assembled_genes.fa.gz"/>
        <data format="fasta" name="assembled_seqs" label="${tool.name} on ${on_string}: gzipped FASTA file of assembled sequences" from_work_dir="out/assembled_seqs.fa.gz"/>
        <data format="fasta" name="assemblies" label="${tool.name} on ${on_string}: gzipped FASTA file of the assemblies" from_work_dir="out/assemblies.fa.gz"/>
        <data format="gz" name="log_cluster" label="${tool.name} on ${on_string}: Log for the progress of each cluster" from_work_dir="out/log.clusters.gz"/>
        <data format="txt" name="tools_version" label="${tool.name} on ${on_string}: Tools version" from_work_dir="out/version_info.txt"/>
    </outputs>

    <tests>
        <test>
            <param name="lib_type" value="paired"/>
            <param name="R1" value="reads_1.fq" format="fastqsanger.gz"/>
            <param name="R2" value="reads_2.fq" format="fastqsanger.gz" />
            <param name="ariba_databases" value="PREPAREREF"/>

            <output name="report" file="OUT/report.tsv" ftype="tabular"/>
        </test>
    </tests>

    <help><![CDATA[
            **Usage**: ariba run [options] <prepareref_dir><reads1.fq><reads2.fq><outdir>

            Runs the local assembly pipeline. Input is dir made by prepareref, and paired
            reads
           
    ]]>    </help>

    <expand macro="citations" />
</tool>