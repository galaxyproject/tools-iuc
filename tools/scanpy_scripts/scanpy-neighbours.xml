<?xml version="1.0" encoding="utf-8"?>
<tool id="scanpy-compute-graph" name="Scanpy ComputeGraph" version="0.0.2">
  <macros>
    <import>scanpy_macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
ln -s $input_obj_file input.h5;
scanpy-neighbours.py -i input.h5
                     -f $input_format
                     -o output.h5
                     -F $output_format
#if $settings.default == "false"
                     -N $settings.n_neighbour
                     -m $settings.method
                     -s $settings.seed
## comment out as "-r" needs fixing in the python script
##    #if $settings.use_rep != "auto"
##                     -r $settings.use_rep
##    #end if
    #if $settings.n_pc
                     -n $settings.n_pc
    #end if
    #if $settings.knn
                     --knn
    #end if
    #if $settings.metric
                     -M $settings.metric
    #end if
#end if
]]></command>

  <inputs>
    <expand macro="input_object_params"/>
    <expand macro="output_object_params"/>
    <conditional name="settings">
      <param name="default" type="boolean" label="Use programme defaults" checked="true"/>
      <when value="true"/>
      <when value="false">
	<param name="n_neighbour" type="integer" label="Maximum number of neighbours used" value="15"/>
	<param name="use_rep" type="select" label="Use the indicated representation">
	  <option value="X_pca">X_pca, use PCs</option>
	  <option value="X">X, use normalised expression values</option>
	  <option value="auto" selected="true">Automatically chosen based on problem size</option>
	</param>
	<param name="n_pc" type="integer" label="Number of PCs to use" value="50" optional="true"/>
	<param name="knn" type="boolean" label="Use hard threshold to restrict neighbourhood size (otherwise use a Gaussian kernel to down weight distant neighbours)" checked="true"/>
	<param name="method" type="select" label="Method for calculating connectivity">
	  <option value="umap" selected="true">UMAP</option>
	  <option value="gauss">Gaussian</option>
	</param>
	<param name="metric" type="text" label="Distance metric" value="euclidean"/>
	<param name="seed" type="integer" label="Seed for random number generator" value="0"/>
      </when>
    </conditional>
  </inputs>

  <outputs>
    <data name="output_h5" format="h5" label="" from_work_dir="output.h5"/>
  </outputs>

  <tests>
    <test>
      <param name="input_obj_file" value="run_pca.h5"/>
      <param name="input_format" value="anndata"/>
      <param name="output_format" value="anndata"/>
      <param name="default" value="false"/>
      <param name="n_neighbour" value="15"/>
      <param name="n_pc" value="50"/>
      <param name="knn" value="true"/>
      <param name="seed" value="0"/>
      <param name="method" value="umap"/>
      <param name="metric" value="euclidean"/>
      <output name="output_h5" file="compute_graph.h5" ftype="h5" compare="sim_size"/>
    </test>
  </tests>

  <help><![CDATA[
usage: scanpy-neighbours.py [options]

optional arguments:
  -h, --help            show this help message and exit

  --debug               Print debug information.

  -i INPUT_OBJECT_FILE, --input-object-file INPUT_OBJECT_FILE
                        Path to anndata or loom file.

  -f {loom,anndata,auto-detect}, --input-format {loom,anndata,auto-detect}
                        Format for input object: loom/anndata/[auto-detect].

  -o OUTPUT_OBJECT_FILE, --output-object-file OUTPUT_OBJECT_FILE
                        File name in which to store serialized python object.

  -F {loom,anndata,auto-detect}, --output-format {loom,anndata,auto-detect}
                        Format for output object: loom/anndata/[auto-detect].

  -N N_NEIGHBORS, --n-neighbors N_NEIGHBORS
                        Size of local neighbourhood used for manifold approximation. Default: 15

  -n N_PCS, --n-pcs N_PCS
                        Number of principal components to use. Default: None

  -r, --use-rep         Use the indicated representation. If None, the representation is chosen automatically:
                        for .n_vars < 50, .X is used, otherwise "X_pca" is used.

  --knn                 If True, use a hard threshold to restrict the number of neighbors to --n-neigbors.
                        Otherwise, use a Gaussian Kernel to assign low weights to neighbors more distant then
                        the --n-neighbors nearest neighbors.

  --no-knn              See --knn

  -s RANDOM_SEED, --random-seed RANDOM_SEED
                        Random seed for numpy

  -m {umap,gauss}, --method {umap,gauss}
                        Use "umap" or "gauss" with adpative width for computing connectivities. Default:
                        "umap"

  -M METRIC, --metric METRIC
                        A known metric's name. Choices are "euclidean", "l2", "l1", "manhattan", "cityblock",
                        "braycurtis", "canberra", "chebyshev", "correlation", "cosine", "dice", "hamming",
                        "jaccard", "kulsinski", "mahalanobis", "matching", "minkowski", "rogerstanimoto",
                        "russellrao", "seuclidean", "sokalmichener", "sokalsneath", "sqeuclidean", "yule",
                        "wminkowski", "precomputed". Default "euclidean"


]]></help>
  <expand macro="citations"/>
</tool>
