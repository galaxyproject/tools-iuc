<?xml version="1.0" encoding="utf-8"?>
<tool id="scanpy-compute-graph" name="Scanpy ComputeGraph" version="@TOOL_VERSION@+galaxy0">
  <description>to derive kNN graph</description>
  <macros>
    <import>scanpy_macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
ln -s '${input_obj_file}' input.h5;
scanpy-neighbours.py -i input.h5
                     -f '${input_format}'
                     -o output.h5
                     -F '${output_format}'
#if $settings.default == "false"
                     -N '${settings.n_neighbour}'
                     -m '${settings.method}'
                     -s '${settings.seed}'
    #if $settings.use_rep != "auto"
                     -r '${settings.use_rep}'
    #end if
    #if $settings.n_pc
                     -n '${settings.n_pc}'
    #end if
    #if $settings.knn
                     --knn
    #end if
    #if $settings.metric
                     -M '${settings.metric}'
    #end if
#end if
]]></command>

  <inputs>
    <expand macro="input_object_params"/>
    <expand macro="output_object_params"/>
    <conditional name="settings">
      <param name="default" type="boolean" checked="true" label="Use programme defaults"/>
      <when value="true"/>
      <when value="false">
        <param name="n_neighbour" argument="--n-neighbors" type="integer" value="15" label="Maximum number of neighbours used"/>
        <param name="use_rep" type="select" label="Use the indicated representation">
          <option value="X_pca">X_pca, use PCs</option>
          <option value="X">X, use normalised expression values</option>
          <option value="auto" selected="true">Automatically chosen based on problem size</option>
        </param>
        <param name="n_pc" argument="--n-pcs" type="integer" value="50" optional="true" label="Number of PCs to use"/>
        <param name="knn" argument="--knn/--no-knn" type="boolean" checked="true" label="Use hard threshold to restrict neighbourhood size (otherwise use a Gaussian kernel to down weight distant neighbours)"/>
        <param name="method" argument="--method" type="select" label="Method for calculating connectivity">
          <option value="umap" selected="true">UMAP</option>
          <option value="gauss">Gaussian</option>
        </param>
        <param name="metric" argument="--metric" type="text" value="euclidean" label="Distance metric"/>
        <param name="seed" argument="--random-seed" type="integer" value="0" label="Seed for random number generator"/>
      </when>
    </conditional>
  </inputs>

  <outputs>
    <data name="output_h5" format="h5" from_work_dir="output.h5" label="${tool.name} on ${on_string}: Graph object"/>
  </outputs>

  <tests>
    <test>
      <param name="input_obj_file" value="run_pca.h5"/>
      <param name="input_format" value="anndata"/>
      <param name="output_format" value="anndata"/>
      <param name="default" value="false"/>
      <param name="n_neighbour" value="15"/>
      <param name="n_pc" value="50"/>
      <param name="knn" value="true"/>
      <param name="seed" value="0"/>
      <param name="method" value="umap"/>
      <param name="metric" value="euclidean"/>
      <output name="output_h5" file="compute_graph.h5" ftype="h5" compare="sim_size"/>
    </test>
  </tests>

  <help><![CDATA[
@HELP@
]]></help>
  <expand macro="citations"/>
</tool>
