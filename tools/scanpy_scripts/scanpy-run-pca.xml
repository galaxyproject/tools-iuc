<?xml version="1.0" encoding="utf-8"?>
<tool id="scanpy-run-pca" name="Scanpy RunPCA" version="0.0.2">
  <macros>
    <import>scanpy_macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
ln -s $input_obj_file input.h5;
scanpy-run-pca.py -i input.h5
                  -f $input_format
                  -o output.h5
                  -F $output_format
                  -n $n_pc
#if $run_mode.chunked
                  -c
		  --chunk-size $run_mode.chunk_size
#else
    #if $run_mode.zero_center
                  -z
    #else
                  -Z
    #end if
    #if $run_mode.svd_solver
                  --svd-solver $run_mode.svd_solver
    #end if
    #if $run_mode.seed
                  -s $run_mode.seed
    #end if
#end if

#if $do_plotting.plot
                  -P output.png
                  --projectio $do_plotting.projection
                  --components $do_plotting.components
    #if $do_plotting.color_by
                  --color $do_plotting.color_by
    #end if
    #if $do_plotting.groups
                  --group $do_plotting.groups
    #end if
    #if $do_plotting.use_raw
                  --use-raw
    #end if
    #if $do_plotting.palette
                  --palette $do_plotting.palette
    #end if
    #if $do_plotting.show_edges
                  --edges
    #end if
    #if $do_plotting.show_arrows
                  --arrows
    #end if
    #if not $do_plotting.color_order
                  --no-sort-order
    #end if
    #if $do_plotting.omit_frame
                  --frameoff
    #end if
#end if

#if $extra_outputs
#set extras = ' '.join(['--output-{}-file {}.csv'.format(x, x) for x in str($extra_outputs).split(',')])
                  $extras
#end if
]]></command>

  <inputs>
    <expand macro="input_object_params"/>
    <expand macro="output_object_params"/>

    <param name="n_pc" type="integer" label="Number of PCs to produce" value="50"/>

    <conditional name="run_mode">
      <param name="chunked" type="boolean" label="Perform incremental PCA by chunks" checked="false"/>
      <when value="true">
	<param name="chunk_size" type="integer" label="Chunk size" value="0"/>
      </when>
      <when value="false">
	<param name="zero_center" type="boolean" label="Zero center data before scaling" checked="true"/>
	<param name="svd_solver" type="select" label="SVD solver" optional="true">
	  <option value="arpack">ARPACK</option>
	  <option value="randomised">Randomised</option>
	</param>
	<param name="seed" type="integer" label="Seed for numpy random number generator" value="0"/>
      </when>
    </conditional>

    <param name="extra_outputs" type="select" multiple="true" label="Type of output" optional="true">
      <option value="embeddings">PCA embeddings</option>
      <option value="loadings">PCA loadings</option>
      <option value="stdev">PCs stdev</option>
      <option value="var-ratio">PCs proportion of variance</option>
    </param>

    <conditional name="do_plotting">
      <param name="plot" type="boolean" label="Make PCA plot" checked="false"/>
      <when value="true">
	<expand macro="output_plot_params"/>
      </when>
      <when value="false"/>
    </conditional>
  </inputs>

  <outputs>
    <data name="output_h5" format="h5" label="" from_work_dir="output.h5"/>
    <data name="output_png" format="png" label="PCA plot" from_work_dir="output.png">
      <filter>do_plotting['plot']</filter>
    </data>
    <data name="output_embed" format="csv" label="PCA embeddings" from_work_dir="embeddings.csv">
      <filter>'embeddings' in extra_outputs.split(',')</filter>
    </data>
    <data name="output_load" format="csv" label="PCA loadings" from_work_dir="loadings.csv">
      <filter>'loadings' in extra_outputs.split(',')</filter>
    </data>
    <data name="output_stdev" format="csv" label="PCA stdev" from_work_dir="stdev.csv">
      <filter>'stdev' in extra_outputs.split(',')</filter>
    </data>
    <data name="output_vprop" format="csv" label="PC explained proportion of variance" from_work_dir="var-ratio.csv">
      <filter>'var-ratio' in extra_outputs.split(',')</filter>
    </data>
  </outputs>

  <tests>
    <test>
      <param name="input_obj_file" value="scale_data.h5"/>
      <param name="input_format" value="anndata"/>
      <param name="output_format" value="anndata"/>
      <param name="n_pc" value="50"/>
      <param name="zero_center" value="true"/>
      <param name="svd_solver" value="arpack"/>
      <param name="seed" value="0"/>
      <param name="chunked" value="false"/>
      <param name="extra_outputs" value="embeddings"/>
      <param name="plot" value="true"/>
      <param name="color_by" value="n_genes"/>
      <output name="output_h5" file="run_pca.h5" ftype="h5" compare="sim_size"/>
      <output name="output_png" file="run_pca.png" ftype="png" compare="sim_size"/>
      <output name="output_embed" file="run_pca.embeddings.csv" ftype="csv"/>
    </test>
  </tests>

  <help><![CDATA[
usage: scanpy-run-pca.py [options]

optional arguments:
  -h, --help            show this help message and exit

  --debug               Print debug information.

  -i INPUT_OBJECT_FILE, --input-object-file INPUT_OBJECT_FILE
                        Path to anndata or loom file.

  -f {loom,anndata,auto-detect}, --input-format {loom,anndata,auto-detect}
                        Format for input object: loom/anndata/[auto-detect].

  -o OUTPUT_OBJECT_FILE, --output-object-file OUTPUT_OBJECT_FILE
                        File name in which to store serialized python object.

  -F {loom,anndata,auto-detect}, --output-format {loom,anndata,auto-detect}
                        Format for output object: loom/anndata/[auto-detect].

  --output-embeddings-file OUTPUT_EMBEDDINGS_FILE
                        File name in which to store a csv-format embeddings table with PCs by cell.

  --output-loadings-file OUTPUT_LOADINGS_FILE
                        File name in which to store a csv-format loadings table with PCs by gene.

  --output-stdev-file OUTPUT_STDEV_FILE
                        File name in which to store PC stdev values (one per line).

  --output-var-ratio-file OUTPUT_VAR_RATIO_FILE
                        File name in which to store proportion of variance explained by PCs (one per line).

  -n N_PCS, --n-pcs N_PCS
                        Number of principal components to compute. Default: 50

  -z, --zero-center     Compute standard PCA from covariance matrix. See also --no-zero-center. If neither
                        --zero-center nor --no-zero-center is set, automatically set to TRUE if input is
                        sparse, otherwise FALSE.

  -Z, --no-zero-center  Compute PCA without zero-centering using TruncatedSVD from scikit-learn.
                        See also --zero-center.

  --svd-solver {arpack,randomised,auto}
                        "arpack" for scipy ARPACK wrapper, or "randomised" for randomised algorithm by
                        Halko (2009). "auto" chooces automatically depending on problem size. Default: auto

  -s RANDOM_SEED, --random-seed RANDOM_SEED
                        Random seed for initialising optimisation

  -c, --chunked         Perform an incremental PCA on segments of --chunk-size. Imply --zero-center,
                        ignore --svd-solver and --random-seed.

  --chunk-size CHUNK_SIZE
                        Number of observations to include in each chunk. Required if --chunked is set

  -P OUTPUT_PLOT, --output-plot OUTPUT_PLOT
                        Save plot in the specified file

  --color COLOR         String or list of strings. Default: []

  --use-raw             Use raw attribute of adata if present. Default: False

  --edges               Show edges. Default: False.

  --arrows              Show arrwos (requires to run rna_velocity() before). Default: False.

  --no-sort-order       For continuous annotations used as color parameter, by default plot data points with
                        higher values on top of others. Disable this behavior if set.

  --groups GROUPS       Restrict to a few categories in observation annotation.

  --projection {2d,3d}  Projection of plot. Default: 2d

  --components COMPONENTS
                        Components to plot. To plot all available components use "all". Default: "1,2"

  --palette PALETTE     Colors to use for plotting categorical annotation groups. Can be a valid
                        matplotlib.pyplot.colormap name. Default: None

  --frameoff            Do not draw a frame around the scatter plot. Draw by default.


]]></help>
  <expand macro="citations"/>
</tool>
