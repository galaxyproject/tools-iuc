<?xml version="1.0" encoding="utf-8"?>
<tool id="scanpy-run-tsne" name="Scanpy RunTSNE" version="0.0.2">
  <macros>
    <import>scanpy_macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
ln -s $input_obj_file input.h5;
scanpy-run-tsne.py -i input.h5
                   -f $input_format
                   -o output.h5
                   -F $output_format
#if $embeddings
                   --output-embeddings-file embeddings.csv
#end if

#if $settings.default == "false"
		   --perplexity $settings.perplexity
		   --early-exaggeration $settings.early_exag
		   --learning-rate $settings.learning_rate
    #if $settings.use_rep != "auto"
                   -r $settings.use_rep
    #end if
    #if $settings.n_pc
                   -n $settings.n_pc
    #end if
    #if not $settings.fast_tsne
                   --no-fast-tsne
    #end if
    #if $settings.n_job
                   --n-jobs $settings.n_job
    #end if
    #if $settings.seed
                   -s $settings.seed
    #end if
#end if

#if $do_plotting.plot
                   -P output.png
                   --projectio $do_plotting.projection
                   --components $do_plotting.components
    #if $do_plotting.color_by
                   --color $do_plotting.color_by
    #end if
    #if $do_plotting.groups
                   --group $do_plotting.groups
    #end if
    #if $do_plotting.use_raw
                   --use-raw
    #end if
    #if $do_plotting.palette
                   --palette $do_plotting.palette
    #end if
    #if $do_plotting.show_edges
                   --edges
    #end if
    #if $do_plotting.show_arrows
                   --arrows
    #end if
    #if not $do_plotting.color_order
                   --no-sort-order
    #end if
    #if $do_plotting.omit_frame
                   --frameoff
    #end if
#end if
]]></command>

  <inputs>
    <expand macro="input_object_params"/>
    <expand macro="output_object_params"/>

    <param name="embeddings" type="boolean" label="Output embeddings in csv format" checked="true"/>

    <conditional name="settings">
      <param name="default" type="boolean" label="Use programme defaults" checked="true"/>
      <when value="true"/>
      <when value="false">
	<param name="use_rep" type="select" label="Use the indicated representation">
	  <option value="X_pca">X_pca, use PCs</option>
	  <option value="X">X, use normalised expression values</option>
	  <option value="auto" selected="true">Automatically chosen based on problem size</option>
	</param>
	<param name="perplexity" type="float" label="The perplexity is related to the number of nearest neighbours, select a value between 5 and 50" value="30"/>
	<param name="early_exag" type="float" label="Controls the tightness within and between clusters" value="12"/>
	<param name="learning_rate" type="float" label="Learning rate, should be between 100 and 1000" value="1000"/>
	<param name="fast_tsne" type="boolean" label="Use multicoreTSNE" checked="true"/>
	<param name="n_job" type="integer" label="The number of jobs" optional="true"/>
	<param name="n_pc" type="integer" label="The number of PCs to use" optional="true"/>
	<param name="seed" type="integer" label="Seed for random number generator" value="0"/>
      </when>
    </conditional>

    <conditional name="do_plotting">
      <param name="plot" type="boolean" label="Make PCA plot" checked="false"/>
      <when value="true">
	<expand macro="output_plot_params"/>
	<param name="color_by" type="text" label="Color by attributes, comma separated strings" value="louvain" argument="--color"/>
      </when>
      <when value="false"/>
    </conditional>
  </inputs>

  <outputs>
    <data name="output_h5" format="h5" label="" from_work_dir="output.h5"/>
    <data name="output_png" format="png" label="tSNE plot" from_work_dir="output.png">
      <filter>do_plotting['plot']</filter>
    </data>
    <data name="output_embed" format="csv" label="tSNE embeddings" from_work_dir="embeddings.csv">
      <filter>embeddings</filter>
    </data>
  </outputs>

  <tests>
    <test>
      <param name="input_obj_file" value="find_cluster.h5"/>
      <param name="input_format" value="anndata"/>
      <param name="output_format" value="anndata"/>
      <param name="default" value="false"/>
      <param name="embeddings" value="true"/>
      <param name="seed" value="0"/>
      <param name="plot" value="true"/>
      <param name="color_by" value="louvain"/>
      <output name="output_h5" file="run_tsne.h5" ftype="h5" compare="sim_size"/>
      <output name="output_png" file="run_tsne.png" ftype="png" compare="sim_size"/>
      <output name="output_embed" file="run_tsne.embeddings.csv" ftype="csv"/>
    </test>
  </tests>

  <help><![CDATA[
usage: scanpy-run-tsne.py [options]

optional arguments:
  -h, --help            show this help message and exit

  --debug               Print debug information.

  -i INPUT_OBJECT_FILE, --input-object-file INPUT_OBJECT_FILE
                        Path to anndata or loom file.

  -f {loom,anndata,auto-detect}, --input-format {loom,anndata,auto-detect}
                        Format for input object: loom/anndata/[auto-detect].

  -o OUTPUT_OBJECT_FILE, --output-object-file OUTPUT_OBJECT_FILE
                        File name in which to store serialized python object.

  -F {loom,anndata,auto-detect}, --output-format {loom,anndata,auto-detect}
                        Format for output object: loom/anndata/[auto-detect].

  --output-embeddings-file OUTPUT_EMBEDDINGS_FILE
                        File name in which to store a csv-format embeddings table with coordinates by cell.

  -n N_PCS, --n-pcs N_PCS
                        The number of PCs to use.

  -r USE_REP, --use-rep USE_REP
                        Use the indicated representation. If None, the representation is chosen automatically:
                        for .n_vars < 50, .X is used, otherwise X_pca is used. If X_pca is not present, it's
                        computed with default parameters. Default: None

  --perplexity PERPLEXITY
                        The perplexity is related to the number of nearest neighbors that is used in other
                        manifold learning algorithms. Larger datasets usually require a larger perplexity.
                        Consider selecting a value between 5 and 50. The choice is not extremely critical
                        since t-SNE is quite insensitive to this parameter. Default: 30

  --early-exaggeration EARLY_EXAGGERATION
                        Controls how tight natural clusters in the original space are in the embedded space
                        and how much space will be between them. For larger values, the space between natural
                        clusters will be larger in the embedded space. Again, the choice of this parameter is
                        not very critical. Default: 12

  --learning-rate LEARNING_RATE
                        The learning rate can be a critical parameter. It should be between 100 and 1000. If
                        the cost function increases during initial optimization, the early exaggeration factor
                        or the learning rate might be too high. If the cost function gets stuck in a bad local
                        minimum increasing the learning rate helps sometimes. Default: 1000

  --no-fast-tsne        The multicoreTSNE package is used by default. Set this flag to not using it.

  --n-jobs N_JOBS       Number of jobs. If None, use sc.settings.n_jobs

  -s RANDOM_SEED, --random-seed RANDOM_SEED
                        The seed used by the random number generator. Default: 0

  -P OUTPUT_PLOT, --output-plot OUTPUT_PLOT
                        Save plot in the specified file

  --color COLOR         String or list of strings. Default: []

  --use-raw             Use raw attribute of adata if present. Default: False

  --edges               Show edges. Default: False.

  --arrows              Show arrwos (requires to run rna_velocity() before). Default: False.

  --no-sort-order       For continuous annotations used as color parameter, by default plot data points with
                        higher values on top of others. Disable this behavior if set.

  --groups GROUPS       Restrict to a few categories in observation annotation.

  --projection {2d,3d}  Projection of plot. Default: 2d

  --components COMPONENTS
                        Components to plot. To plot all available components use "all". Default: "1,2"

  --palette PALETTE     Colors to use for plotting categorical annotation groups. Can be a valid
                        matplotlib.pyplot.colormap name. Default: None

  --frameoff            Do not draw a frame around the scatter plot. Draw by default.


]]></help>
  <expand macro="citations"/>
</tool>
