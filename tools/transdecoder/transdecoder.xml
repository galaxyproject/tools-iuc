<tool id="transdecoder" name="TransDecoder" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>finds coding regions within transcripts</description>
    <macros>
        <token name="@TOOL_VERSION@">5.5.0</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">transdecoder</requirement>
        <requirement type="package" version="2.10.1">blast</requirement>
    </requirements>
    <version_command><![CDATA[TransDecoder.LongOrfs --version 2>&1 | grep 'TransDecoder.LongOrfs' | cut -f 2 -d ' ']]></version_command>
    <command detect_errors="exit_code"><![CDATA[
## initialize
ln -s '${t}' 'transcripts.fasta' &&

## run LongOrfs
TransDecoder.LongOrfs
## Shared options
-t 'transcripts.fasta'
-G '${G}'
## LongOrfs options
#if $lo.gene_trans_map
    --gene_trans_map '${lo.gene_trans_map}'
#end if
-m $lo.m
${lo.S}
-O 'output' ## required, otherwise value of -t is used

## run Predict
&& TransDecoder.Predict
## Shared options
-t 'transcripts.fasta'
-G '${G}'
## Predict options
--retain_long_orfs_mode $po.mode_cond.retain_long_orfs_mode
#if $po.mode_cond.retain_long_orfs_mode == 'strict'
    --retain_long_orfs_length $po.mode_cond.retain_long_orfs_length
#end if
$po.single_best_only
$po.no_refine_starts
-T $po.T
-O 'output'

## postprocessing
#if 'log' in $oo.out
    |& tee '$out_log'
#end if
    ]]></command>
    <inputs>
        <param argument="-t" type="data" format="fasta" label="Select file with transcripts"/>
        <param argument="-G" type="select" label="Select genetic code">
            <option value="Acetabularia">Acetabularia</option>
            <option value="Candida">Candida</option>
            <option value="Ciliate">Ciliate</option>
            <option value="Dasycladacean">Dasycladacean</option>
            <option value="Euplotid">Euplotid</option>
            <option value="Hexamita">Hexamita</option>
            <option value="Mesodinium">Mesodinium</option>
            <option value="Mitochondrial-Ascidian">Mitochondrial-Ascidian</option>
            <option value="Mitochondrial-Chlorophycean">Mitochondrial-Chlorophycean</option>
            <option value="Mitochondrial-Echinoderm">Mitochondrial-Echinoderm</option>
            <option value="Mitochondrial-Flatworm">Mitochondrial-Flatworm</option>
            <option value="Mitochondrial-Invertebrates">Mitochondrial-Invertebrates</option>
            <option value="Mitochondrial-Protozoan">Mitochondrial-Protozoan</option>
            <option value="Mitochondrial-Pterobranchia">Mitochondrial-Pterobranchia</option>
            <option value="Mitochondrial-Scenedesmus_obliquus">Mitochondrial-Scenedesmus_obliquus</option>
            <option value="Mitochondrial-Thraustochytrium">Mitochondrial-Thraustochytrium</option>
            <option value="Mitochondrial-Trematode">Mitochondrial-Trematode</option>
            <option value="Mitochondrial-Vertebrates">Mitochondrial-Vertebrates</option>
            <option value="Mitochondrial-Yeast">Mitochondrial-Yeast</option>
            <option value="Pachysolen_tannophilus">Pachysolen_tannophilus</option>
            <option value="Peritrich">Peritrich</option>
            <option value="SR1_Gracilibacteria">SR1_Gracilibacteria</option>
            <option value="Tetrahymena">Tetrahymena</option>
            <option value="Universal" selected="true">Universal</option>
        </param>
        <section name="lo" title="LongOrfs options" expanded="true">
            <param argument="--gene_trans_map" type="data" format="tabular" optional="true" label="Select gene-to-transcript identifier mapping file" help="gene_id&lt;tab&gt;trans_id&lt;return&gt;"/>
            <param argument="-m" type="integer" value="100" min="0" label="Set minimum protein length"/> <!-- todo -->
            <param argument="-S" type="boolean" truevalue="-S" falsevalue="" label="Activate strand-specificity?" help="Only analyzes top strand."/>            
        </section>
        <section name="po" title="Predict options" expanded="true">
            <conditional name="mode_cond">
                <param argument="--retain_long_orfs_mode" type="select" label="Select mode to retain long ORFs" help="In dynamic mode, sets range according to 1%FDR in random sequence of same GC content.">
                    <option value="dynamic" selected="true">dynamic</option>
                    <option value="strict">strict</option>
                </param>
                <when value="dynamic"/>
                <when value="strict">
                    <param argument="--retain_long_orfs_length" type="integer" value="1000000" min="0" label="Set long ORFs length" help="Retain all ORFs found that are equal or longer than these many nucleotides even if no other evidence marks it as coding."/>
                </when>            
            </conditional>
            <param argument="--single_best_only" type="boolean" truevalue="--single_best_only" falsevalue="" label="Retain only the single best ORF per transcript?" help="Prioritized by homology then ORF length"/>
            <param argument="--no_refine_starts" type="boolean" truevalue="--no_refine_starts" falsevalue="" label="Start refinement that identifies potential start codons for 5' partial ORFs using a PWM?"/>
            <param argument="-T" type="integer" value="500" min="1" label="Set top longest ORFs to train Markov Model" help="10x this value are first selected for removing redundancies, and then this value of longest ORFs are selected from the non-redundant set."/>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <!-- LongOrfs -->
                <option value="lo_pep" selected="true">Longest ORFs (PEP)</option>
                <option value="lo_gff3">Longest ORFs (GFF3)</option>
                <option value="lo_cds">Longest ORFs (CDS)</option>
                <!-- Predict -->
                <option value="pep" selected="true">Results (PEP)</option>
                <option value="cds" selected="true">Results (CDS)</option>
                <option value="gff3" selected="true">Results (GFF3)</option>
                <option value="bed" selected="true">Results (BED)</option>
                <!-- Others -->
                <option value="log">Log</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <!-- LongOrfs -->
        <data name="out_lo_pep" format="fasta" from_work_dir="output/longest_orfs.pep" label="${tool.name} on ${on_string}: Longest ORFs (PEP)">
            <filter>'lo_pep' in oo['out']</filter>
        </data>
        <data name="out_lo_gff3" format="fasta" from_work_dir="output/longest_orfs.gff3" label="${tool.name} on ${on_string}: Longest ORFs (GFF3)">
            <filter>'lo_gff3' in oo['out']</filter>
        </data>
        <data name="out_lo_cds" format="fasta" from_work_dir="output/longest_orfs.cds" label="${tool.name} on ${on_string}: Longest ORFs (CDS)">
            <filter>'lo_cds' in oo['out']</filter>
        </data>
        <!-- Predict -->
        <data name="out_pep" format="fasta" from_work_dir="transcripts.fasta.transdecoder.pep" label="${tool.name} on ${on_string}: Results (PEP)">
            <filter>'pep' in oo['out']</filter>
        </data>
        <data name="out_bed" format="fasta" from_work_dir="transcripts.fasta.transdecoder.bed" label="${tool.name} on ${on_string}: Results (BED)">
            <filter>'bed' in oo['out']</filter>
        </data>
        <data name="out_cds" format="fasta" from_work_dir="transcripts.fasta.transdecoder.cds" label="${tool.name} on ${on_string}: Results (CDS)">
            <filter>'cds' in oo['out']</filter>
        </data>
        <data name="out_gff3" format="fasta" from_work_dir="transcripts.fasta.transdecoder.gff3" label="${tool.name} on ${on_string}: Results (GFF3)">
            <filter>'gff3' in oo['out']</filter>
        </data>
        <!-- Others -->
        <data name="out_log" format="txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in oo['out']</filter>
        </data> 
    </outputs>
    <tests>
        <!-- no test implemented for: gene_trans_map -->

        <!-- #1 default -->
        <test>
            <param name="t" value="test.fa"/>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>
        </test>            
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

TransDecoder identifies candidate coding regions within transcript sequences, such as those generated by de novo RNA-Seq transcript assembly using Trinity, or constructed based on RNA-Seq alignments to the genome using Tophat and Cufflinks. It is integrated into other related software such as Trinity, PASA, EVidenceModeler, and Trinotate.

TransDecoder identifies likely coding sequences based on the following criteria:

 - a minimum length open reading frame (ORF) is found in a transcript sequence
 - a log-likelihood score similar to what is computed by the GeneID software is > 0
 - the above coding score is greatest when the ORF is scored in the 1st reading frame as compared to scores in the other 5 reading frames
 - if a candidate ORF is found fully encapsulated by the coordinates of another candidate ORF, the longer one is reported. However, a single transcript can report multiple ORFs (allowing for operons, chimeras, etc)
 - optional the putative peptide has a match to a Pfam domain above the noise cutoff score

**Input**

- FASTA file with transcripts
- (optional) BLAST or Pfam database file ( `details <https://github.com/TransDecoder/TransDecoder/wiki#including-homology-searches-as-orf-retention-criteria>`_)

**Output**

*LongOrfs*

- longest ORFs (PEP): all ORFs meeting the minimum length criteria, regardless of coding potential
- longest ORFs (GFF3): positions of all ORFs as found in the target transcripts
- longest ORFs (CDS): the nucleotide coding sequence for all detected ORFs

*Predict*

- Results (PEP): peptide sequences for the final candidate ORFs; all shorter candidates within longer ORFs were removed
- Results (CDS): nucleotide sequences for coding regions of the final candidate ORFs
- Results (GFF3): positions within the target transcripts of the final selected ORFs
- Results (BED): bed-formatted file describing ORF positions, best for viewing using GenomeView or IGV

*Other*

- Log file

.. class:: infomark

**References**

More information are available on `GitHub <https://github.com/TransDecoder/TransDecoder>`_.
    ]]></help>
    <citations>
        <citation type="doi">10.1038/nprot.2013.084</citation>
    </citations>
</tool>