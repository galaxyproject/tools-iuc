<tool id="transdecoder" name="TransDecoder" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>finds coding regions within transcripts</description>
    <macros>
        <token name="@TOOL_VERSION@">5.5.0</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">transdecoder</requirement>
    </requirements>
    <version_command><![CDATA[TransDecoder.LongOrfs --version 2>&1 | grep 'TransDecoder.LongOrfs' | cut -f 2 -d ' ']]></version_command>
    <command detect_errors="exit_code"><![CDATA[
## initialize

## run LongOrfs
TransDecoder.LongOrfs
-t '${t}'
--gene_trans_map '${gene_trans_map}'
-m $m
-G '${G}'
-O 'output_longorfs' ## todo
--genetic_code $geneticcode

&&

## run Predict
TransDecoderPredict
-t '${t}'
#if $mode_cond.retain_long_orfs_mode == "strict"
    --retain_long_orfs_mode '$mode_cond.retain_long_orfs_mode'
    --retain_long_orfs_length $mode_cond.retain_long_orfs_length
#end if
--retain_pfam_hits '$retain_pfam_hits'
--retain_blastp_hits '$retain_blastp_hits'
$single_best_only
-G '${G}'
$no_refine_starts
-T ${T}
--genetic_code $geneticcode

## postprocessing
#if 'log' in $oo.out
    |& tee '$out_log'
#end if
    ]]></command>
    <inputs>
        <param argument="-t" type="data" format="fasta" label="Select file with transcripts"/>
        <!-- LongOrfs -->
        <section name="ao" title="Advanced options">
            <param argument="--gene_trans_map" type="data" format="tabular" label="Select gene-to-transcript identifier mapping file" help="gene_id&lt;tab&gt;trans_id&lt;return&gt;"/>
            <param argument="-m" type="integer" value="100" min="0" label="Set minimum protein length"/> <!-- todo -->
            <param argument="-G" type="select" label="Select genetic code">
                <option value="Universal" selected="true">Universal</option>
                <option value="Euplotes">Euplotes</option>
                <option value="Tetrahymena">Tetrahymena</option>
                <option value="Candida">Candida</option>
                <option value="Acetabularia">Acetabularia</option>
            </param>
            <param argument="-S" type="boolean" truevalue="-S" falsevalue="" label="Activate strand-specificity?" help="Only analyzes top strand."/>
            <param argument="--genetic_code" type="select" label="Select genetic code">
                <option value="Acetabularia">Acetabularia</option>
                <option value="Candida">Candida</option>
                <option value="Ciliate">Ciliate</option>
                <option value="Dasycladacean">Dasycladacean</option>
                <option value="Euplotid">Euplotid</option>
                <option value="Hexamita">Hexamita</option>
                <option value="Mesodinium">Mesodinium</option>
                <option value="Mitochondrial-Ascidian">Mitochondrial-Ascidian</option>
                <option value="Mitochondrial-Chlorophycean">Mitochondrial-Chlorophycean</option>
                <option value="Mitochondrial-Echinoderm">Mitochondrial-Echinoderm</option>
                <option value="Mitochondrial-Flatworm">Mitochondrial-Flatworm</option>
                <option value="Mitochondrial-Invertebrates">Mitochondrial-Invertebrates</option>
                <option value="Mitochondrial-Protozoan">Mitochondrial-Protozoan</option>
                <option value="Mitochondrial-Pterobranchia">Mitochondrial-Pterobranchia</option>
                <option value="Mitochondrial-Scenedesmus_obliquus">Mitochondrial-Scenedesmus_obliquus</option>
                <option value="Mitochondrial-Thraustochytrium">Mitochondrial-Thraustochytrium</option>
                <option value="Mitochondrial-Trematode">Mitochondrial-Trematode</option>
                <option value="Mitochondrial-Vertebrates">Mitochondrial-Vertebrates</option>
                <option value="Mitochondrial-Yeast">Mitochondrial-Yeast</option>
                <option value="Pachysolen_tannophilus">Pachysolen_tannophilus</option>
                <option value="Peritrich">Peritrich</option>
                <option value="SR1_Gracilibacteria">SR1_Gracilibacteria</option>
                <option value="Tetrahymena">Tetrahymena</option>
                <option value="Universal" selected="true">Universal</option>
            </param>
        </section>
        <!-- Predict -->
        <section name="ao" title="Advanced options">
            <conditional name="mode_cond">
                <param argument="--retain_long_orfs_mode" type="select" label="Select mode to retain long ORFs" help="In dynamic mode, sets range according to 1%FDR in random sequence of same GC content.">
                    <option value="dynamic" selected="true">dynamic</option>
                    <option value="strict">strict</option>
                </param>
                <when value="dynamic"/>
                <when value="strict">
                    <param argument="--retain_long_orfs_length" type="integer" value="1000000" min="0" label="Set long ORFs length" help="Retain all ORFs found that are equal or longer than these many nucleotides even if no other evidence marks it as coding."/>
                </when>            
            </conditional>
            <param argument="--retain_pfam_hits" type="data" format="tabular" label="Select domain table output file from running hmmscan to search Pfam"/>
            <param argument="--retain_blastp_hits" type="data" format="tabular" label="Select blastp output" help="Any ORF with a blast match will be retained in the final output. (-outfmt 6 format)"/>
            <param argument="--single_best_only " type="boolean" truevalue="--single_best_only" falsevalue="" label="Retain only the single best ORF per transcript?" help="Prioritized by homology then ORF length"/>
            <param argument="-G" type="select" label="Select genetic code">
                <option value="Universal" selected="true">Universal</option>
                <option value="Euplotes">Euplotes</option>
                <option value="Tetrahymena">Tetrahymena</option>
                <option value="Candida">Candida</option>
                <option value="Acetabularia">Acetabularia</option>
            </param>
            <param argument="--no_refine_starts" type="boolean" truevalue="--no_refine_starts" falsevalue="" label="Start refinement that identifies potential start codons for 5' partial ORFs using a PWM?"/>
            <param argument="-T" type="integer" value="500" min="1" label="Set top longest ORFs to train Markov Model" help="10x this value are first selected for removing redundancies, and then this value of longest ORFs are selected from the non-redundant set."/> <!-- todo -->
            <param argument="--genetic_code" type="select" label="Select genetic code">
                <option value="Acetabularia">Acetabularia</option>
                <option value="Candida">Candida</option>
                <option value="Ciliate">Ciliate</option>
                <option value="Dasycladacean">Dasycladacean</option>
                <option value="Euplotid">Euplotid</option>
                <option value="Hexamita">Hexamita</option>
                <option value="Mesodinium">Mesodinium</option>
                <option value="Mitochondrial-Ascidian">Mitochondrial-Ascidian</option>
                <option value="Mitochondrial-Chlorophycean">Mitochondrial-Chlorophycean</option>
                <option value="Mitochondrial-Echinoderm">Mitochondrial-Echinoderm</option>
                <option value="Mitochondrial-Flatworm">Mitochondrial-Flatworm</option>
                <option value="Mitochondrial-Invertebrates">Mitochondrial-Invertebrates</option>
                <option value="Mitochondrial-Protozoan">Mitochondrial-Protozoan</option>
                <option value="Mitochondrial-Pterobranchia">Mitochondrial-Pterobranchia</option>
                <option value="Mitochondrial-Scenedesmus_obliquus">Mitochondrial-Scenedesmus_obliquus</option>
                <option value="Mitochondrial-Thraustochytrium">Mitochondrial-Thraustochytrium</option>
                <option value="Mitochondrial-Trematode">Mitochondrial-Trematode</option>
                <option value="Mitochondrial-Vertebrates">Mitochondrial-Vertebrates</option>
                <option value="Mitochondrial-Yeast">Mitochondrial-Yeast</option>
                <option value="Pachysolen_tannophilus">Pachysolen_tannophilus</option>
                <option value="Peritrich">Peritrich</option>
                <option value="SR1_Gracilibacteria">SR1_Gracilibacteria</option>
                <option value="Tetrahymena">Tetrahymena</option>
                <option value="Universal" selected="true">Universal</option>
            </param>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="bed" selected="true">BED</option>
                <option value="cds" selected="true">CDS</option>
                <option value="gff3" selected="true">GFF3</option>
                <option value="log">Log</option>
                <option value="pep" selected="true">PEP</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="transdecoder_bed" format="bed" label="${tool.name} on ${on_string}: Results (BED)">
            <filter>'bed' in oo['out']</filter>
        </data>
        <data name="transdecoder_cds" format="fasta" label="${tool.name} on ${on_string}: Results (CDS)">
            <filter>'cds' in oo['out']</filter>
        </data>
        <data name="transdecoder_gff3" format="gff3" label="${tool.name} on ${on_string}: Results (GFF3)">
            <filter>'gff3' in oo['out']</filter>
        </data>
        <data name="out_log" format="txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in oo['out']</filter>
        </data>
        <data name="transdecoder_pep" format="fasta" label="${tool.name} on ${on_string}: Results (PEP)">
            <filter>'pep' in oo['out']</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="input" value="test.fa"/>
            <output name="transdecoder_gff3" file="raw/test.fa.transdecoder.gff3" compare="sim_size" />
            <output name="transdecoder_bed" file="raw/test.fa.transdecoder.bed" compare="sim_size" />
            <output name="transdecoder_cds" file="raw/test.fa.transdecoder.cds" compare="sim_size" />
            <output name="transdecoder_pep" file="raw/test.fa.transdecoder.pep" compare="sim_size" />
        </test>
        <test>
            <param name="input" value="test.fa"/>
            <param name="training_selector" value="training_top"/>
            <param name="top_longest" value="10"/>
            <output name="transdecoder_gff3" file="top/test.fa.transdecoder.gff3" compare="sim_size" />
            <output name="transdecoder_bed" file="top/test.fa.transdecoder.bed" compare="sim_size" />
            <output name="transdecoder_cds" file="top/test.fa.transdecoder.cds" compare="sim_size" />
            <output name="transdecoder_pep" file="top/test.fa.transdecoder.pep" compare="sim_size" />
        </test>
        <test>
            <param name="input" value="test.fa"/>
            <param name="gen_code" value="Mitochondrial-Arthropods"/>
            <output name="transdecoder_gff3" file="gencode/test.fa.transdecoder.gff3" compare="sim_size" />
            <output name="transdecoder_bed" file="gencode/test.fa.transdecoder.bed" compare="sim_size" />
            <output name="transdecoder_cds" file="gencode/test.fa.transdecoder.cds" compare="sim_size" />
            <output name="transdecoder_pep" file="gencode/test.fa.transdecoder.pep" compare="sim_size" />
        </test>
        <test>
            <param name="input" value="test.fa"/>
            <param name="stranded" value="true"/>
            <output name="transdecoder_gff3" file="strand/test.fa.transdecoder.gff3" compare="sim_size" />
            <output name="transdecoder_bed" file="strand/test.fa.transdecoder.bed" compare="sim_size" />
            <output name="transdecoder_cds" file="strand/test.fa.transdecoder.cds" compare="sim_size" />
            <output name="transdecoder_pep" file="strand/test.fa.transdecoder.pep" compare="sim_size" />
        </test>        
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

TransDecoder identifies candidate coding regions within transcript sequences, such as those generated by de novo RNA-Seq transcript assembly using Trinity, or constructed based on RNA-Seq alignments to the genome using Tophat and Cufflinks.

TransDecoder identifies likely coding sequences based on the following criteria:

 - a minimum length open reading frame (ORF) is found in a transcript sequence

 - a log-likelihood score similar to what is computed by the GeneID software is > 0.

 - the above coding score is greatest when the ORF is scored in the 1st reading frame as compared to scores in the other 5 reading frames.

 - if a candidate ORF is found fully encapsulated by the coordinates of another candidate ORF, the longer one is reported. However, a single transcript can report multiple ORFs (allowing for operons, chimeras, etc).

 - optional the putative peptide has a match to a Pfam domain above the noise cutoff score.

The software is primarily maintained by Brian Haas at the Broad Institute and Alexie Papanicolaou at the Commonwealth Scientific and Industrial Research Organisation (CSIRO). It is integrated into other related software such as Trinity, PASA, EVidenceModeler, and Trinotate.

**Input**

- FASTA file with transcript

**Output**

- BED
- CDS
- GFF3
- Log
- PEP

.. class:: infomark

**References**

More information are available on `GitHub <https://github.com/TransDecoder/TransDecoder>`_.
    ]]></help>
    <citations>
        <citation type="doi">10.1038/nprot.2013.084</citation>
    </citations>
</tool>