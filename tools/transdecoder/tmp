            <conditional name="blast_cond">
                <param name="blast_sel" type="select" label="Select mode of including BLAST results" help="(--retain_blastp_hits)">
                    <option value="none" selected="true">None</option>
                    <option value="file">File from history</option>
                    <option value="calculation">Perform new BLAST search</option>
                </param>
                <when value="none"/>
                <when value="file">
                    <param argument="--retain_blastp_hits" type="data" format="tabular" label="Select blastp result file" help="Any ORF with a blast match will be retained in the final output. (outfmt 6 format)"/>
                </when>
                <when value="calculation">
                    <param argument="-db" type="data" format="fasta" label="Select file with protein database"/>
                    <param argument="-max_target_seqs" type="integer" value="1" label="Set maximum target sequences"/>
                    <param argument="-evalue" type="float" value="1e-5" label="Set E-value"/>
                </when>
            </conditional>
            <conditional name="pfam_cond">
                <param name="pfam_sel" type="select" label="Select mode of including Pfam results" help="(--retain_pfam_hits)">
                    <option value="none" selected="true">None</option>
                    <option value="file">File from history</option>
                    <option value="calculation">Perform new BLAST search</option>
                </param>
                <when value="none"/>
                <when value="file">
                    <param name="pfam_results" type="data" format="tabular" label="Select Pfam result file"/>
                </when>
                <when value="calculation">
                    <param argument="-db" type="data" format="fasta" label="Select file with Pfam database"/>
                </when>
            </conditional>










&&

## run Predict
TransDecoderPredict
-t '${t}'
#if $mode_cond.retain_long_orfs_mode == "strict"
    --retain_long_orfs_mode '$mode_cond.retain_long_orfs_mode'
    --retain_long_orfs_length $mode_cond.retain_long_orfs_length
#end if
--retain_pfam_hits '$retain_pfam_hits'
--retain_blastp_hits '$retain_blastp_hits'
$single_best_only
-G '${G}'
$no_refine_starts
-T ${T}
--genetic_code $geneticcode




TransDecoder.LongOrfs -t '${input}'
-m ${min_len}
${adv.stranded}
-G ${adv.gen_code}
#if str($adv.partials)
    -p ${adv.partials}
#end if


## run Predict
&&

TransDecoder.Predict --cpu \${GALAXY_SLOTS:-1} -t '${input}'
--retain_long_orfs ${adv.retain_long_orfs}
${adv.single_best_orf}
#if str( $training_sect.training.training_selector ) == "training_top":
    -T ${training_sect.training.top_longest}
#else
    --train '${training_sect.training.train}'
#end if

## postprocessing
&&
mv `basename '${input}'`.transdecoder.pep '$transdecoder_pep' &&
mv `basename '${input}'`.transdecoder.cds '$transdecoder_cds' &&
mv `basename '${input}'`.transdecoder.bed '$transdecoder_bed' &&
mv `basename '${input}'`.transdecoder.gff3 '$transdecoder_gff3'







        <param name="input" argument="-t" type="data" format="fasta" label="Transcripts" />
        
        <section name="adv" title="Advanced Options" expanded="False">

            <param name="gen_code" argument="-G" type="select" label="Genetic code">
                <option value="universal" selected="True">universal</option>
                <option value="Euplotes">Euplotes</option>
                <option value="Tetrahymena">Tetrahymena</option>
                <option value="Candida">Candida</option>
                <option value="Acetabularia">Acetabularia</option>
                <option value="Mitochondrial-Canonical">Mitochondrial-Canonical</option>
                <option value="Mitochondrial-Vertebrates">Mitochondrial-Vertebrates</option>
                <option value="Mitochondrial-Arthropods">Mitochondrial-Arthropods</option>
                <option value="Mitochondrial-Echinoderms">Mitochondrial-Echinoderms</option>
                <option value="Mitochondrial-Molluscs">Mitochondrial-Molluscs</option>
                <option value="Mitochondrial-Ascidians">Mitochondrial-Ascidians</option>
                <option value="Mitochondrial-Nematodes">Mitochondrial-Nematodes</option>
                <option value="Mitochondrial-Platyhelminths">Mitochondrial-Platyhelminths</option>
                <option value="Mitochondrial-Yeasts">Mitochondrial-Yeasts</option>
                <option value="Mitochondrial-Euascomycetes">Mitochondrial-Euascomycetes</option>
                <option value="Mitochondrial-Protozoans">Mitochondrial-Protozoans</option>
            </param>
            <param name="partials" argument="-p" type="integer" value="" optional="true" label="Shorten potential 5' partials if they are this percentage of the original protein or longer" />
            <param name="retain_long_orfs" argument="--retain_long_orfs" type="integer" value="900" label="Retain long ORFs" help="Retain all ORFs found that are equal or longer than these many nucleotides even if no other evidence marks it as coding (default: 900 bp => 300aa)" />
            <param argument="--single_best_orf" type="boolean" truevalue="--single_best_orf" falsevalue="" label="Retain only the single best ORF per transcript" help="Best is defined as having (optionally Pfam and/or BLAST support) and longest ORF" />
        </section>
        <section name="training_sect" title="Training Options" expanded="False">
            <conditional name="training">
                <param name="training_selector" type="select" label="Select the training method">
                    <option value="training_top" selected="True">Train with the top longest ORFs</option>
                    <option value="training_set">Train with a set of known ORFs</option>
                </param>
                <when value="training_top">
                    <param name="top_longest" argument="-T" type="integer" value="500" label="Number of top longest ORFs" help="Number of top longest ORFs to train Markov Model (hexamer stats). Note, 10x this value are first selected for use with cd-hit to remove redundancies, and then this value of longest ORFs are selected from the non-redundant set" />
                </when>
                <when value="training_set">
                    <param name="train" argument="--train" type="data" format="fasta" label="Training set of transcripts" help="FASTA file with ORFs to train Markov Mod for protein identification" />
                </when>
            </conditional>
        </section>