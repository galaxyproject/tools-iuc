<tool id="phylophlan_assign_sgbs" name="PhyloPhlAn: Assign SGBs and taxonomy" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>
         to metagenome-assembled genomes.
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="biotools"/>
    <expand macro="requirements_assign_sgbs"/>
    <command detect_errors="exit_code"><![CDATA[
        #import re
        #import os
        
        mkdir -p 'input/' &&
        #for $i in $input
            #set $identifier = re.sub('[^\w\-\._]', '_', str($i.element_identifier))
            ln -s '$i' 'input/${identifier}' &&
        #end for
        
        #if $analysis.type != "matrix"
            mkdir -p 'database/' &&

            #if $reference.source == "cache"
                #set $database_path = $reference.db_name.fields.path
                #set $database_filename = os.path.basename($database_path)
            #else if $reference.source == "history"
                #set $database_path = $reference.db_file
                #set $database_filename = $reference.db_file.element_identifier
            #end if
            
            #set $sanitized_name = re.sub('[^\w\-\._]', '', str($database_filename))
            #if $database_filename != $sanitized_name or $sanitized_name[-4:] != ".tar"
                exit 1 &&
            #end if
            #set $database_name = $sanitized_name[:-4]

            ln -s '$database_path' 'database/${sanitized_name}' &&
            cd database &&
            tar -xf '${sanitized_name}' &&
            md5sum '${sanitized_name}' > '${database_name}.md5' &&
            cd .. &&
        #end if
        
        phylophlan_assign_sgbs
            -i input
            -o output
            --database_folder database
            #if $analysis.type == "closest"
                -d '$database_name'
                #if $analysis.assign_all
                    -n all
                #else
                    -n $analysis.n
                #end if
            #else if $analysis.type == "taxonomy"
                -d '$database_name'
                --add_ggb_fgb
            #else if $analysis.type == "matrix"
                --only_input
            #end if
            
            --overwrite
            --nproc \${GALAXY_SLOTS:-4}
            --verbose
    ]]></command>
    <inputs>
        <param name="input" type="data_collection" collection_type="list" format="fasta" label="Input Dataset"/>
        <conditional name="reference">
            <param name="source" type="select" label="Select a reference database">
                <option value="cache">Locally cached</option>
                <option value="history">From history</option>
            </param>
            <when value="cache">
                <param name="db_name" type="select" label="Cached database">
                    <options from_data_table="phylophlan_sgb_database"/>
                    <validator type="no_options" message="No database is available"/>
                </param>
            </when>
            <when value="history">
                <param name="db_file" type="data" format="tar" label="Reference database"/>
            </when>
        </conditional>
        <conditional name="analysis">
            <param name="type" type="select" label="Output type">
                <option value="closest">Closest n SGBs</option>
                <option value="taxonomy">Single closest SGB, GGB, FGB and reference genome</option>
                <!-- This option is broken in the current PhyloPhlAn release. -->
                <!-- <option value="matrix">Pairwise mash distances of the inputs</option> -->
            </param>
            <when value="closest">
                <param argument="-n" type="integer" min="1" value="1" label="How many SGBs to assign to each input genome"/>
                <param name="assign_all" type="boolean" label="Assign all SGBs instead" argument="-n all"/>
            </when>
            <when value="taxonomy"/>
            <!-- <when value="matrix"/> -->
        </conditional>
    </inputs>
    <outputs>
        <data name="output" format="tabular" from_work_dir="output.tsv"/>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="input">
                <collection type="list">
                    <element name="CM_ethiopia__CM_A06_M0_18__bin.34.fna" ftype="fasta" value="CM_ethiopia__CM_A06_M0_18__bin.34.fna"/>
                </collection>
            </param>
            <conditional name="reference">
                <param name="source" value="history"/>
                <param name="db_file" ftype="tar" value="ethiopia_tutorial.tar"/>
            </conditional>
            <conditional name="analysis">
                <param name="type" value="closest"/>
            </conditional>
            <output name="output" file="output.tsv" compare="diff"/>
        </test>
        <test expect_num_outputs="1">
            <param name="input">
                <collection type="list">
                    <element name="CM_ethiopia__CM_A06_M0_18__bin.34.fna" ftype="fasta" value="CM_ethiopia__CM_A06_M0_18__bin.34.fna"/>
                </collection>
            </param>
            <conditional name="reference">
                <param name="source" value="cache"/>
                <param name="db_name" ftype="tar" value="ethiopia_tutorial_filtered"/>
            </conditional>
            <conditional name="analysis">
                <param name="type" value="closest"/>
            </conditional>
            <output name="output" file="output.tsv" compare="diff"/>
        </test>
    </tests>
    <help><![CDATA[
The phylophlan_assign_sgbs.py script assigns the SGB and taxonomy to a given set of input genomes. Outputs can be of
three types: (1) for each input genomes returns the list of the closest -n/--how_many SGBs sorted by average Mash
distance; (2) for each input genomes returns the closest SGB, GGB, FGB, and reference genomes; (3) returns a all vs.
all matrix with all the pairwise mash distances

options:
  --database_list       List of all the available databases that can be specified with the -d/--database option
                        (default: False)
  --database_update     Update the databases file (default: False)
  -e INPUT_EXTENSION, --input_extension INPUT_EXTENSION
                        Specify the extension of the input file(s) specified via -i/--input. If not specified will try
                        to infer it from the input files (default: None)

    ]]></help>
    <expand macro="citations"/>
</tool>