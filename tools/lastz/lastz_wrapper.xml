<tool id="lastz_wrapper_2" name="Lastz" version="1.2.2">
    <description> map short reads against reference sequence</description>
    <requirements>
        <requirement type="package" version="1.02.00">lastz</requirement>
        <requirement type="package" version="1.0.2">lastz</requirement>
        <requirement type="package" version="0.7.2">bx-python</requirement>
    </requirements>
    <command interpreter="python">lastz_wrapper.py
      #if $seq_name.how_to_name=="yes":
        --ref_name="${seq_name.ref_name}"
      #end if
      --ref_source="${source.ref_source}"
      --source_select="${params.source_select}"
      --out_format="${out_format}"
      --input2="${input2}"
      #if $source.ref_source=="history":
        --input1="${source.input1}"
        --ref_sequences="${input1.metadata.sequences}"
      #else:
        --input1="${source.input1_2bit.fields.path}"
        --ref_sequences="None" 
      #end if
      #if $params.source_select=="pre_set":
        --pre_set_options="${params.pre_set_options}"
      #else:
        --strand="${params.strand}"
        --seed="${params.seed}"
        --gfextend="${params.gfextend}"
        --chain="${params.chain}"
        --transition="${params.transition}"
        --O="${params.O}"
        --E="${params.E}"
        --X="${params.X}"
        --Y="${params.Y}"
        --K="${params.K}"
        --L="${params.L}"
        --entropy="${params.entropy}"
      #end if
      --identity_min="${min_ident}"
      --identity_max="${max_ident}"
      --coverage="${min_cvrg}"
      --output="${output1}"
      --unmask="${unmask}"
      --lastzSeqsFileDir="${GALAXY_DATA_INDEX_DIR}"
    </command>
    <inputs>
        <param name="input2" format="fasta" type="data" label="Align sequencing reads in" />
        <conditional name="source">
            <param name="ref_source" type="select" label="Against reference sequences that are">
                <option value="cached">locally cached</option>
                <option value="history">in your history</option>
            </param>
            <when value="cached">
                <param name="input1_2bit" type="select" label="Using reference genome" help="If your genome of interest is not listed, contact the Galaxy team">
                    <options from_data_table="lastz_seqs" />
                </param>
            </when>
            <when value="history">
                <param name="input1" type="data" format="fasta" label="Select a reference dataset" />
            </when>
        </conditional>
        <param name="out_format" type="select" label="Output format">
            <option value="sam">SAM</option>
            <option value="diffs">Polymorphisms</option>
            <option value="tabular">Tabular</option>
        </param>
        <conditional name="params">
            <param name="source_select" type="select" label="Lastz settings to use" help="For most mapping needs use Commonly used settings. If you want full control use Full List">
                <option value="pre_set">Commonly used</option>
                <option value="full">Full Parameter List</option>
            </param>
            <when value="pre_set">
                <param name="pre_set_options" type="select" label="Select mapping mode">
                    <option value="yasra98">Roche-454 98% identity</option>
                    <option value="yasra95">Roche-454 95% identity</option>
                    <option value="yasra90">Roche-454 90% identity</option>
                    <option value="yasra85">Roche-454 85% identity</option>
                    <option value="yasra75">Roche-454 75% identity</option>
                    <option value="yasra95short">Illumina 95% identity</option>
                    <option value="yasra85short">Illumina 85% identity</option>
                </param>
            </when>
            <when value="full">
                <param name="strand" type="select" label="Which strand to search?">
                    <option value="both">Both</option>
                    <option value="plus">Search forward strand only (the one in the reference)</option>
                    <option value="minus">Search the reverse complement strand only (opposite of the reference)</option>
                </param>
                <param name="seed" type="select" label="Select seeding settings" help="allows you set word size and number of mismatches">
                    <option value="12of19">Seed hits require a 19 bp word with matches in 12 specific positions</option>
                    <option value="14of22">Seed hits require a 22 bp word with matches in 14 specific positions</option>
                </param>
                <param name="transition" type="select" label="Select transition settings" help="affects the number of allowed transition substitutions">
                    <option value="transition">Allow one transition in each seed hit</option>
                    <option value="transition=2">Allow two transitions in a seed hit </option>
                    <option value="notransition">Don't allow any transitions in seed hits</option>
                </param>
                <param name="gfextend" type="select" label="Perform gap-free extension of seed hits to HSPs (high scoring segment pairs)?">
                    <option value="nogfextend">No</option>
                    <option value="gfextend">Yes</option>
                </param>
                <param name="chain" type="select" label="Perform chaining of HSPs?">
                    <option value="nochain">No</option>
                    <option value="chain">Yes</option>
                </param>
                <param name="O" type="integer" value="400" label="Gap opening penalty"/>
                <param name="E" type="integer" value="30" label="Gap extension penalty"/>
                <param name="X" type="integer" value="910" label="X-drop threshold"/>
                <param name="Y" type="integer" value="9370" label="Y-drop threshold"/>
                <param name="K" type="integer" value="3000" label="Set the threshold for HSPs (ungapped extensions scoring lower are discarded)"/>
                <param name="L" type="integer" value="3000" label="Set the threshold for gapped alignments (gapped extensions scoring lower are discarded)"/>
                <param name="entropy" type="select" label="Involve entropy when filtering HSPs?">
                    <option value="noentropy">No</option>
                    <option value="entropy">Yes</option>
                </param>
            </when>   
        </conditional>
        <conditional name="seq_name">
            <param name="how_to_name" type="select" label="Do you want to modify the reference name?">
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <param name="ref_name" type="text" value="Type sequence name here" label="Enter name for the Reference sequence"/>
            </when>
            <when value="no" />
        </conditional>
        <param name="min_ident" type="integer" value="0" label="Do not report matches below this identity (%)"/>
        <param name="max_ident" type="integer" value="100" label="Do not report matches above this identity (%)"/>
        <param name="min_cvrg" type="integer" value="0" label="Do not report matches that cover less than this percentage of each read"/>
        <param name="unmask" type="select" label="Convert lowercase bases to uppercase">
            <option value="yes">Yes</option>
            <option value="no">No</option>
        </param>
    </inputs>
    <outputs>
        <data format="tabular" name="output1" label="${tool.name} on ${on_string}: mapped reads">
            <change_format>
                <when input="out_format" value="sam" format="sam" />
            </change_format>
        </data>
    </outputs>
    <tests>
        <test>
            <!--
            Lastz command:
            lastz phiX.2bit/phiX174[nickname=Ref] test-data/b1.fasta +nogfextend +nochain +gapped +strand=both +seed=12of19 +transition O=400 E=30 X=910 Y=9370 K=3000 L=3000 +noentropy +ambiguousn +nolaj +identity=0..100 +coverage=0 +format=sam- > lastz_wrapper_out2.sam 
            You need to point to phiX.2bit somewhere on your system. b1.fasta is located in galaxy's test-data.  You will have to replace all the pluses before the
            commands with 2 dashes, as double-dash can't appear in an XML comment.
            -->
            <param name="input2" value="b1.fasta" ftype="fasta" />
            <param name="ref_source" value="cached" />
            <param name="input1_2bit" value="phiX174" />
            <param name="out_format" value="sam" />
            <param name="source_select" value="full" />
            <param name="strand" value="both" />
            <param name="seed" value="12of19" />
            <param name="transition" value="transition" />
            <param name="gfextend" value="nogfextend" />
            <param name="chain" value="nochain" />
            <param name="O" value="400" />
            <param name="E" value="30" />
            <param name="X" value="910" />
            <param name="Y" value="9370" />
            <param name="K" value="3000" />
            <param name="L" value="3000" />
            <param name="entropy" value="noentropy" />
            <!--
            how_to_name is not the default. It is changed to modify 
            input1_2bit by adding the ref_name as a nickname
            -->
            <param name="how_to_name" value="yes" />
            <param name="ref_name" value="Ref" />
            <param name="min_ident" value="0" />
            <param name="max_ident" value="100" />
            <param name="min_cvrg" value="0" />
            <param name="unmask" value="yes" />
            <output name="output1" file="lastz_wrapper_out2.sam" />
        </test>
        <test>
            <!--
            Lastz command:
            lastz test-data/phiX.fasta test-data/b1.fasta[fullnames] +yasra95short +ambiguousn +nolaj +identity=0..100 +coverage=0 +format=diffs > lastz_wrapper_out3.tabular 
            phiX.fasta and b1.fasta are located in galaxy's test-data.  You will have to replace all the pluses before the commands with 2 dashes, 
            as double-dash can't appear in an XML comment.
            -->
            <param name="input2" value="b1.fasta" ftype="fasta" />
            <param name="ref_source" value="history" />
            <param name="input1" value="phiX.fasta" ftype="fasta" />
            <param name="out_format" value="diffs" />
            <param name="source_select" value="pre_set" />
            <param name="pre_set_options" value="yasra95short" />
            <param name="how_to_name" value="no" />
            <param name="min_ident" value="0" />
            <param name="max_ident" value="100" />
            <param name="min_cvrg" value="0" />
            <param name="unmask" value="yes" />
            <output name="output1" file="lastz_wrapper_out3.tabular" />
        </test>
        <test>
            <!--
            Lastz command: first you will need to split the file phiX_split.fasta into two files, 
            phiX1.fasta and phiX2.fasta, each with 1 sequence (phiX1 and phiX2, respectively). Then:
            lastz phiX1.fasta test-data/b1.fasta *yasra95short *ambiguousn *nolaj *identity=0..100 *coverage=0 *format=general-:score,name1,strand1,size1,start1,zstart1,end1,length1,text1,name2,strand2,size2,start2,zstart2,end2,start2+,zstart2+,end2+,length2,text2,diff,cigar,identity,coverage,gaprate,diagonal,shingle > lastz_wrapper_out4.tabular 
            lastz phiX2.fasta test-data/b1.fasta *yasra95short *ambiguousn *nolaj *identity=0..100 *coverage=0 *format=general-:score,name1,strand1,size1,start1,zstart1,end1,length1,text1,name2,strand2,size2,start2,zstart2,end2,start2+,zstart2+,end2+,length2,text2,diff,cigar,identity,coverage,gaprate,diagonal,shingle >> lastz_wrapper_out4.tabular 
            You need to point to phiX1.fasta and phiX2.fasta somewhere on your system. 
            phiX_split.fasta and b1.fasta are located in galaxy's test-data 
            You will have to replace all the asterisks before the commands with 2 dashes, 
            as double-dash can't appear in an XML comment 

            NOTE: since the input file include more than 1 sequence, the output must be sorted in 
            order for functional test to pass.  This is done using the sort="True" attribute on the output.
            -->
            <param name="input2" value="b1.fasta" ftype="fasta" />
            <param name="ref_source" value="history" />
            <param name="input1" value="phiX_split.fasta" ftype="fasta"  />
            <param name="out_format" value="tabular" />
            <param name="source_select" value="pre_set" />
            <param name="pre_set_options" value="yasra95short" />
            <param name="how_to_name" value="no" />
            <param name="min_ident" value="0" />
            <param name="max_ident" value="100" />
            <param name="min_cvrg" value="0" />
            <param name="unmask" value="yes" />
            <output name="output1" file="lastz_wrapper_out4.tabular" sort="True" />
        </test>
    </tests>
    <help>
        
**What it does**
        
**LASTZ** is a high performance pairwise sequence aligner derived from BLASTZ. It is written by Bob Harris in Webb Miller's laboratory at Penn State University. Special scoring sets were derived to improve runtime performance and quality. This Galaxy version of LASTZ is geared towards aligning short (Illumina/Solexa, AB/SOLiD) and medium (Roche/454) reads against a reference sequence. There is excellent, extensive documentation on LASTZ available here_.

 .. _here: http://www.bx.psu.edu/miller_lab/dist/README.lastz-1.02.00/README.lastz-1.02.00.html
 
------

**Input formats**

LASTZ accepts reference and reads in FASTA format. However, because Galaxy supports implicit format conversion the tool will recognize fastq and other method specific formats.

------

**Outputs**

LASTZ generates one output. Depending on the choice you make in the *Select output format* drop-down, LASTZ will produce a SAM file showing sequence alignments, a list of differences between the reads and reference (Polymorphisms), or a general table with one line per alignment block (Tabular). Examples of these outputs are shown below.

**SAM output**

SAM has 12 columns::

                                   1     2     3         4   5    6  7         8     9                                    10                                     11  12
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  HWI-EAS91_1_30788AAXX:1:2:1670:915    99  chr9  58119878  60  36M  =  58120234   392  GACCCCTACCCCACCGTGCTCTGGATCTCAGTGTTT   IIIIIIIIIIIIIIIIEIIIIIII7IIIIIIIIIII  XT:A:U  NM:i:0  SM:i:37  AM:i:37  X0:i:1  X1:i:0  XM:i:0  XO:i:0  XG:i:0  MD:Z:36
  HWI-EAS91_1_30788AAXX:1:2:1670:915   147  chr9  58120234  60  36M  =  58119878  -392  ATGAGTCGAATTCTATTTTCCAAACTGTTAACAAAA   IFIIDI;IIICIIIIIIIIIIIIIIIIIIIIIIIII  XT:A:U  NM:i:0  SM:i:37  AM:i:37  X0:i:1  X1:i:0  XM:i:0  XO:i:0  XG:i:0  MD:Z:36


where::

     Column  Description
  ---------  ---------------------------------------------------------------------   
   1. QNAME  Query (pair) NAME
   2. FLAG   bitwise FLAG
   3. RNAME  Reference sequence NAME
   4. POS    1-based leftmost POSition/coordinate of clipped sequence
   5. MAPQ   MAPping Quality (Phred-scaled)
   6. CIGAR  extended CIGAR string
   7. MRNM   Mate Reference sequence NaMe ('=' if same as RNAME)
   8. MPOS   1-based Mate POSition
   9. ISIZE  Inferred insert SIZE
  10. SEQ    query SEQuence on the same strand as the reference
  11. QUAL   query QUALity (ASCII-33 gives the Phred base quality)
  12. OPT    variable OPTional fields in the format TAG:VTYPE:VALUE, tab-separated
  
The flags are as follows::

    Flag  Description
  ------  -------------------------------------
  0x0001  the read is paired in sequencing
  0x0002  the read is mapped in a proper pair
  0x0004  the query sequence itself is unmapped
  0x0008  the mate is unmapped
  0x0010  strand of the query (1 for reverse)
  0x0020  strand of the mate
  0x0040  the read is the first read in a pair
  0x0080  the read is the second read in a pair
  0x0100  the alignment is not primary

**Polymorphism (SNP or differences) output**

Polymorphism output contains 14 columns::

     1     2     3  4     5                                   6   7   8  9  10  11 12                                   13                                    14
  --------------------------------------------------------------------------------------------------------------------------------------------------------------
  chrM  2490  2491  +  5386  HWI-EAS91_1_306UPAAXX:6:1:486:822   10  11  -  36  C  A  ACCTGTTTTACAGACACCTAAAGCTACATCGTCAAC  ACCTGTTTTAAAGACACCTAAAGCTACATCGTCAAC
  chrM  2173  2174  +  5386  HWI-EAS91_1_306UPAAXX:6:1:259:1389  26  27  +  36  G  T  GCGTACTTATTCGCCACCATGATTATGACCAGTGTT  GCGTACTTATTCGCCACCATGATTATTACCAGTGTT

where::

  1. (chrM)   - Reference sequence id
  2. (2490)   - Start position of the difference in the reference
  3. (2491)   - End position of the difference in the reference
  4. (+)      - Strand of the reference (always plus)
  5. (5386)   - Length of the reference sequence
  6. (HWI...) - read id
  7. (10)     - Start position of the difference in the read
  8. (11)     - End position of the difference in the read
  9. (+)      - Strand of the read
 10. (36)     - Length of the read
 11. (C)      - Nucleotide in the reference
 12. (A)      - Nucleotide in the read
 13. (ACC...) - Reference side os the alignment
 14. (ACC...) - Read side of the alignment
 
**Tabular output**

Tabular output is a tab-separated format with 30 columns::

   1        2  3     4     5     6     7   8                 9              10  11   12   13   14   15   16   17   18  19                20                21   22     23      24      25    26    27    28    29  30
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  14  PHIX174  +  5386  4648  4647  4661  14  ATTTTCGTGATATT    EYKX4VC01BV8HS  +   204  154  153  167  154  153  167  14  ATTTTCGTGATATT    ..............    14M  14/14  100.0%  14/204  6.9%  0/14  0.0%  4494  NA
  16  PHIX174  +  5386  3363  3362  3378  16  GACGCCGGATTTGAGA  EYKX4VC01AWJ88  -   259   36   35   51  209  208  224  16  GACGCCGGATTTGAGA  ................  16M  16/16  100.0%  16/259  6.2%  0/16  0.0%  3327  NA

The following columns are present::

             Field  Meaning
  ----------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   1.        score  Score of the alignment block. The scale and meaning of this number will vary, depending on the final stage performed and other command-line options.
   2.        name1  Name of the target sequence.
   3.      strand1  Target sequence strand, either "+" or "−".
   4.        size1  Size of the entire target sequence.
   5.       start1  Starting position of the alignment block in the target, origin-one.
   6.      zstart1  Starting position of the alignment block in the target, origin-zero.
   7.         end1  Ending position of the alignment block in the target, expressed either as origin-one closed or origin-zero half-open (the ending value is the same in both systems).
   8.      length1  Length of the alignment block in the target (excluding gaps).
   9.        text1  Aligned characters in the target, including gap characters.
  10.        name2  Name of the query sequence.
  11.      strand2  Query sequence strand, either "+" or "−".
  12.        size2  Size of the entire query sequence.
  13.       start2  Starting position of the alignment block in the query, origin-one.
  14.      zstart2  Starting position of the alignment block in the query, origin-zero.
  15.         end2  Ending position of the alignment block in the query, expressed either as origin-one closed or origin-zero half-open (the ending value is the same in both systems).
  16.      start2+  Starting position of the alignment block in the query, counting along the query sequence's positive strand (regardless of which query strand was aligned), origin-one. Note that if strand2 is "−", then this is the other end of the block from start2.
  17.     zstart2+  Starting position of the alignment block in the query, counting along the query sequence's positive strand (regardless of which query strand was aligned), origin-zero. Note that if strand2 is "−", then this is the other end of the block from zstart2.
  18.        end2+  Ending position of the alignment block in the query, counting along the query sequence's positive strand (regardless of which query strand was aligned), expressed either as origin-one closed or origin-zero half-open (the ending value is the same in both systems). Note that if strand2 is "−", then this is the other end of the block from end2.
  19.      length2  Length of the alignment block in the query (excluding gaps).
  20.        text2  Aligned characters in the query, including gap characters.
  21.         diff  Differences between what would be written for text1 and text2. Matches are written as . (period), transitions as : (colon), transversions as X, and gaps as - (hyphen).
  22.        cigar  A CIGAR-like representation of the alignment's path through the Dynamic Programming matrix. This is the short representation, without spaces, described in the Ensembl CIGAR specification.
  23./24. identity  Fraction of aligned bases in the block that are matches (see Identity). This is written as two fields. The first field is a fraction, written as &lt;n&gt;/&lt;d&gt;. The second field contains the same value, computed as a percentage.
  25./26. coverage  Fraction of the entire input sequence (target or query, whichever is shorter) that is covered by the alignment block (see Coverage). This is written as two fields. The first field is a fraction, written as &lt;n&gt;/&lt;d&gt;. The second field contains the same value, computed as a percentage.
  27./28.  gaprate  Rate of gaps (also called indels) in the alignment block. This is written as two fields. The first field is a fraction, written as &lt;n&gt;/&lt;d&gt;, with the numerator being the number of alignment columns containing gaps and the denominator being the number without gaps. The second field contains the same value, computed as a percentage.
  29.     diagonal  The diagonal of the start of the alignment block in the dynamic programming matrix, expressed as an identifying number start1-start2.
  30.      shingle  A measurement of the shingle overlap between the target and the query. This is intended for the case where both the target and query are relatively short, and their ends are expected to overlap.  

-------

**LASTZ Settings**

There are two setting modes: (1) **Commonly used settings** and (2) **Full Parameter List**.

**Commonly used settings**

There are seven modes::

  Illumina-Solexa/AB-SOLiD 95% identity
  Illumina-Solexa/AB-SOLiD 85% identity
  Roche-454 98% identity
  Roche-454 95% identity
  Roche-454 90% identity
  Roche-454 85% identity
  Roche-454 75% identity

When deciding which one to use, consider the following: a 36 bp read with two differences will be 34/36 = 94% identical to the reference.  

**Full Parameter List**

This mode gives you fuller control over lastz. The description of these and other parameters is found at the end of this page. Note that not all parameters are included in this interface. If you would like to make additional options available through Galaxy, e-mail us at galaxy-bugs@bx.psu.edu.

------

**Do you want to modify the reference name?**

This option allows you to set the name of the reference sequence manually. This is helpful when, for example, you would like to make the reference name compatible with the UCSC naming conventions to be able to display your lastz results as a custom track at the UCSC Genome Browser.

------

**LASTZ parameter list**

This is an exhaustive list of LASTZ options. Once again, please note that not all options are included in this interface. If you would like to make additional options available through Galaxy, e-mail us at galaxy-bugs@bx.psu.edu::

  target[[s..e]][-]       spec/file containing target sequence (fasta or nib)
                          [s..e] defines a subrange of the file
                          - indicates reverse-complement
                          (use --help=files for more details)
  query[[s..e]][-]        spec/file containing query sequences (fasta or nib)
                          if absent, queries come from stdin (unless they
                          aren't needed, as for --self or --tableonly)
                          (use --help=files for more details)
  --self                  the target sequence is also the query
  --quantum               the query sequence contains quantum DNA
  --seed=match&lt;length&gt;    use a word with no gaps instead of a seed pattern
  --seed=half&lt;length&gt;     use space-free half-weight word instead of seed pattern
  --match=&lt;reward&gt;[,&lt;penalty&gt;]   set the score values for a match (+&lt;reward&gt;)
                          and mismatch (-&lt;penalty&gt;)
  --[no]trans[ition][=2]         allow one or two transitions in a seed hit
                          (by default a transition is allowed)
  --word=&lt;bits&gt;           set max bits for word hash;  use this to trade time for
                          memory, eliminating thrashing for heavy seeds
                          (default is 28 bits)
  --[no]filter=[&lt;T&gt;:]&lt;M&gt;     filter half-weight seed hits, requiring at least M
                          matches and allowing no more than T transversions
                          (default is no filtering)
  --notwins               require just one seed hit
  --twins=[&lt;min&gt;:]&lt;maxgap&gt;   require two nearby seed hits on the same diagonal
                          (default is twins aren't required)
  --notwins               allow single, isolated seeds
  --[no]recoverseeds      avoid losing seeds in hash collisions. Cannot be used with --twins
  --seedqueue=&lt;entries&gt;   set number of entries in seed hit queue
                          (default is 262144)
  --anchors=&lt;file&gt;        read anchors from a file, instead of discovering anchors
                          via seeding
  --recoverhits           recover hash-collision seed hits
                          (default is not to recover seed hits)
  --step=&lt;length&gt;         set step length (default is 1)
  --maxwordcount=&lt;limit&gt;  words occurring more often than &lt;limit&gt; in the target
                          are not eligible for seeds
  --strand=both           search both strands
  --strand=plus           search + strand only (matching strand of query spec)
  --strand=minus          search - strand only (opposite strand of query spec)
                          (by default both strands are searched)
  --ambiguousn            treat N as an ambiguous nucleotide
                          (by default N is treated as a sequence splicing character)
  --[no]gfextend          perform gap-free extension of seed hits to HSPs
                          (by default no extension is performed)
  --[no]chain             perform chaining
  --chain=&lt;diag,anti&gt;     perform chaining with given penalties for diagonal and
                          anti-diagonal
                          (by default no chaining is performed)
  --[no]gapped            perform gapped alignment (instead of gap-free)
                          (by default gapped alignment is performed)
  --score[s]=&lt;file&gt;         read substitution scores from a file
                          (default is HOXD70)
  --unitscore[s]          scores are +1/-1 for match/mismatch
  --gap=&lt;[open,]extend&gt;   set gap open and extend penalties (default is 400,30)
  --xdrop=&lt;score&gt;         set x-drop threshold (default is 10*sub[A][A])
  --ydrop=&lt;score&gt;         set y-drop threshold (default is open+300extend)
  --infer[=&lt;control&gt;]     infer scores from the sequences, then use them
  --inferonly[=&lt;control&gt;]   infer scores, but don't use them (requires --infscores)
                          all inference options are read from the control file
  --infscores[=&lt;file&gt;]    write inferred scores to a file
  --hspthresh=&lt;score&gt;     set threshold for high scoring pairs (default is 3000)
                          ungapped extensions scoring lower are discarded
                          &lt;score&gt; can also be a percentage or base count
  --entropy               adjust for entropy when qualifying HSPs in the x-drop extension 
                          method
  --noentropy             don't adjust for entropy when qualifying HSPs
  --exact=&lt;length&gt;        set threshold for exact matches
                          if specified, exact matches are found rather than high
                          scoring pairs (replaces --hspthresh)
  --inner=&lt;score&gt;         set threshold for HSPs during interpolation
                          (default is no interpolation)
  --gappedthresh=&lt;score&gt;  set threshold for gapped alignments
                          gapped extensions scoring lower are discarded
                          &lt;score&gt; can also be a percentage or base count
                          (default is to use same value as --hspthresh)
  --ball=&lt;score&gt;          set minimum score required of words 'in' a quantum ball
  --[no]entropy           involve entropy in filtering high scoring pairs
                          (default is "entropy")
  --[no]mirror            report/use mirror image of all gap-free alignments
                          (default is "mirror" for self-alignments only)
  --traceback=&lt;bytes&gt;     space for trace-back information
                          (default is 80.0M)
  --masking=&lt;count&gt;       mask any position in target hit this many times
                          zero indicates no masking
                          (default is no masking)
  --targetcapsule=&lt;capsule_file&gt;   the target seed word position table and seed
                          (as well as the target sequence)are read from specified file
  --segments=&lt;segment_file&gt;   read segments from a file, instead of discovering
                          them via seeding. Replaces other seeding or gap-free extension
                          options
  --[no]census[=&lt;file&gt;]     count/report how many times each target base aligns
                          (default is to not report census)
  --identity=&lt;min&gt;[..&lt;max&gt;]   filter alignments by percent identity
                          0&lt;=min&lt;=max&lt;=100;  blocks (or HSPs) outside min..max
                          are discarded
                          (default is no identity filtering)
  --coverage=&lt;min&gt;[..&lt;max&gt;]   filter alignments by percentage pf query covered
                          0&lt;=min&lt;=max&lt;=100;  blocks (or HSPs) outside min..max
                          are discarded
                          (default is no query coverage filtering)
  --notrivial             do not output trivial self-alignment block if the target and query 
                          sequences are identical. Using --self enables this option automatically
  --output=&lt;output_file&gt;  write the alignments to the specified file name instead of stdout
  --code=&lt;file&gt;           give quantum code for query sequence (only for display)
  --format=&lt;type&gt;         specify output format; one of lav, axt, maf, maf+, maf-, text,
                          lav+text, cigar, text, rdplot, general, or general:&lt;fields&gt;
                          (by default output is LAV)
  --rdotplot=&lt;file&gt;       create an additional output file suitable for plotting the alignments 
                          with the R statistical package.
  --markend               Just before normal completion, write "# lastz end-of-file" to output file
  --census[=&lt;output_file&gt;]    count and report how many times each target base aligns, up 
                          to 255. Ns are included in the count
  --census16[=&lt;output_file&gt;]  count and report how many times each target base aligns, up
                          up 65 thousand
  --census32[=&lt;output_file&gt;]  count and report how many times each target bas aligns, up
                          to 4 billion
  --writecapsule=&lt;capsule_file&gt;    just write out a target capsule file and quit; don't 
                          search for seeds or perform subsequent stages
  --verbosity=&lt;level&gt;     set info level (0 is minimum, 10 is everything)
                          (default is 0)
  --[no]runtime           report runtime in the output file
                          (default is to not report runtime)
  --tableonly[=count]     just produce the target position table, don't
                          search for seeds
  --[no]stats[=&lt;file&gt;]    show search statistics (or don't)
                          (not available in this build)
  --version               report the program version and quit
  --help                  list all options
  --help=files            list information about file specifiers
  --help=short[cuts]      list blastz-compatible shortcuts
  --help=yasra            list yasra-specific shortcuts

    </help>
</tool>
