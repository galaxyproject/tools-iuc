<tool id="autobigs-cli" name="autoBIGS.cli" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>Automated MLST typing</description>
    <macros>
        <import>macros.xml</import>
        <token name="@TOOL_VERSION@">0.6.5</token>
        <token name="@VERSION_SUFFIX@">0</token>
        <expand macro="bio_tools"/>
    </macros>

    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">autobigs-cli</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
            #if $mode.operation == "info":
                autoBIGS info --retrieve-bigsdb-schemes '$database_origin.bigsdb' --csv '$info_schemes_out'
            #else if $mode.operation == "st":
                autoBIGS st --scheme-name '$mode.scheme' '$fasta' '$database_origin.bigsdb' '$mlst_profiles_output'
            #end if
    ]]></command>
    <inputs>
        <conditional name="database_origin">
            <param name="origin_select" label="Database Origin" type="select" help="The origin of the database to be accessed" optional="false">
                <option value="pubmlst" selected="true">PubMLST</option>
                <option value="institutpasteur">Institut Pasteur</option>
            </param>
            <when value="pubmlst">
                <param name="bigsdb" label="PubMLST Database" type="select" help="Select from a list of sequence definition databases hosted by pubMLST." optional="false">
                    <options from_url="https://rest.pubmlst.org/db" request_method="GET">
                        <postprocess_expression type="ecma5.1"><![CDATA[${
                            let options = []
                            for (let resourceGroup of inputs) {
                                for (let database of resourceGroup.databases) {
                                    if (database.name.endsWith("seqdef")) {
                                        options.push([database.description, database.name])
                                    }
                                }
                            }
                            return options
                        }]]></postprocess_expression>
                    </options>
                </param>
            </when>
            <when value="institutpasteur">
                <param name="bigsdb" label="PubMLST Database" type="select" help="Select from a list of sequence definition databases hosted by Institut Pasteur." optional="false">
                    <options from_url="https://bigsdb.pasteur.fr/api/db" request_method="GET">
                        <postprocess_expression type="ecma5.1"><![CDATA[${
                            let options = []
                            for (let resourceGroup of inputs) {
                                for (let database of resourceGroup.databases) {
                                    if (database.name.endsWith("seqdef")) {
                                        options.push([database.description, database.name])
                                    }
                                }
                            }
                            return options
                        }]]></postprocess_expression>
                    </options>
                </param>
            </when>
        </conditional>
        <conditional name="mode">
            <param name="operation" label="Operation" type="select" help="The operational mode of the tool.">
                <option value="st" selected="true">Perform sequence typing</option>
                <option value="info">Retrieve available schemes for database</option>
            </param>
            <when value="st">
                <param name="fasta" argument="fastas" label="FASTA file" type="data" format="fasta" multiple="true" help="The FASTA(s) file to perform sequence typing on."/>
                <param name="scheme" argument="--scheme-name" label="BIGSdb SeqDef scheme name" type="text" optional="false"  value="MLST" help="The name of the scheme to be used. Defaults to MLST. See help for more information."/>
            </when>
            <when value="info">
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="mlst_profiles_output" label="${tool.name} on ${on_string}" format="csv">
            <filter>mode['operation'] == 'st'</filter>
        </data>
        <data name="info_schemes_out" label="${tool.name} supported Schemes" format="csv">
            <filter>mode['operation'] == 'info'</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="origin_select" value="institutpasteur"/>
            <param name="bigsdb" value="pubmlst_bordetella_seqdef" />
            <param name="operation" value="st" />
            <param name="fasta" value="tohama_I_bpertussis_minimized_features.fasta" />
            <param name="scheme" value="MLST" />
            <output name="mlst_profiles_output" file="tohama_I_bpertussis_minimized_features_typed.csv" ftype="csv" />
        </test>
        <test expect_num_outputs="1">
            <param name="origin_select" value="institutpasteur"/>
            <param name="bigsdb" value="pubmlst_bordetella_seqdef" />
            <param name="operation" value="st" />
            <param name="fasta" value="B3921_bpertussis_minimized_features.fasta" />
            <param name="scheme" value="MLST" />
            <output name="mlst_profiles_output" file="B3921_bpertussis_minimized_features_typed.csv" ftype="csv" />
        </test>
        <test expect_num_outputs="1">
            <param name="origin_select" value="institutpasteur"/>
            <param name="bigsdb" value="pubmlst_bordetella_seqdef" />
            <param name="operation" value="st" />
            <param name="fasta" value="B3913_bpertussis_minimized_features.fasta" />
            <param name="scheme" value="MLST" />
            <output name="mlst_profiles_output" file="B3913_bpertussis_minimized_features_typed.csv" ftype="csv" />
        </test>
        <test expect_num_outputs="1">
            <param name="origin_select" value="institutpasteur"/>
            <param name="bigsdb" value="pubmlst_bordetella_seqdef" />
            <param name="operation" value="st" />
            <param name="fasta" value="tohama_I_bpertussis_minimized_features.fasta,B3913_bpertussis_minimized_features.fasta,B3921_bpertussis_minimized_features.fasta" />
            <param name="scheme" value="MLST" />
            <output name="mlst_profiles_output">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_text text="id,st,clonal-complex,adk,fumC,glyA,icd,pepA,pgm,tyrB"/>
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="1">
            <param name="origin_select" value="institutpasteur"/>
            <param name="bigsdb" value="pubmlst_bordetella_seqdef" />
            <param name="operation" value="info" />
            <output name="info_schemes_out">
                <assert_contents>
                    <has_text text="Name,ID"/>
                    <has_text text="MLST,3"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
What is autoBIGS
================
autoBIGS is a tool to help automatically performes multi-locus sequence typing (MLST) on given data by performing calls to necessary web BIGS database web APIs.

Support for typing schemes other than MLST
==========================================
AutoBIGS is capable of performing typing for any available schemes given a database. To retrieve a list of available schemes in the form of a spreadsheet (CSV), under operation, select "retrieve available schemes for database" and run the tool.

Performing Sequence Typing
==========================
Simply select "Perform Sequence Typing" for the "Operation" and select your FASTA files. Then, enter your SeqDef Database name (see "Obtaining Database Name and Schema ID" above) and schema ID.

Special behaviour for FASTAs with multiple sequences
====================================================
AutoBIGS will treat multiple sequences in the same FASTA file as part of the same sample. This will result in a fasta with multiple sequences within the same row with the final sequence type being retrieved from the resulting alleles of the individual sequences within the FASTA. This is helpful if the input FASTA was obtained from a targetted form of sequencing for the specific needed regions (e.g., Sanger sequencing of 7 house keeping genes), rather than a whole genome sequence. If your data is a whole genome sequence (WGS) of the entire genome or similar, each WGS should have it's own FASTA.

In the case all sequences in a given FASTA have the same ID, autoBIGS will not repeat these names in the output row.

More Information
================
For more information on the tool being wrapped itself, please see the `autoBIGS.cli Github repository`_. Issues, bugs, and feature requests for the tool itself should be submitted to the `autoBIGS.cli issues`_. If the issue/bug/feature request is solely pertanent to the Galaxy wrapper, please check out the `autoBIGS.galaxy issues`_ tracker on GitHub.


.. _autoBIGS.cli GitHub repository: https://github.com/Syph-and-VPD-Lab/autoBIGS.cli
.. _autoBIGS.cli issues: https://github.com/Syph-and-VPD-Lab/autoBIGS.cli/issues
.. _autoBIGS.galaxy: https://github.com/Syph-and-VPD-Lab/autoBIGS.galaxy
.. _autoBIGS.galaxy issues: https://github.com/Syph-and-VPD-Lab/autoBIGS.galaxy/issues
    ]]></help>
    <citations>
        <citation type="bibtex">
@book{Deng2025RealYHD,
title = {Syph-and-VPD-Lab/autoBIGS.cli},
url = {https://github.com/Syph-and-VPD-Lab/autoBIGS.cli},
author = {Deng, Harrison},
date = {2025-01-24},
year = {2025},
month = {1},
day = {24},
}
        </citation>
    </citations>
</tool>
