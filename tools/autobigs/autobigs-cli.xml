<tool id="autobigs-cli" name="autoBIGS.cli" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01">
    <description>Automated MLST typing</description>
    <macros>
        <import>macros.xml</import>
        <token name="@TOOL_VERSION@">0.6.5</token>
        <token name="@VERSION_SUFFIX@">1</token>
        <expand macro="bio_tools"/>
    </macros>

    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">autobigs-cli</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
            #if $mode.operation == "info":
                #if $mode.select_info.retrieved == "schemes":
                    autoBIGS info --retrieve-bigsdb-schemes
                    #for $scheme in $mode.select_info.schemes_list
                        '${scheme.selected_db}'
                    #end for
                    --csv '$info_schemes_out'
                #else if $mode.select_info.retrieved == "databases":
                    autoBIGS info --retrieve-bigsdbs --csv $info_db_out
                #end if
            #else if $mode.operation == "st":
                autoBIGS st --scheme-name '$mode.scheme_name' '$mode.fasta' '$mode.seqdefdb' '$mlst_profiles_output'
            #end if
    ]]></command>
    <inputs>
        <conditional name="mode">
            <param name="operation" label="Operation" type="select" help="The operational mode of the tool. See help for more info.">
                <option value="info">Retrieve Database Information</option>
                <option value="st">Perform Sequence Typing</option>
            </param>
            <when value="info">
                <conditional name="select_info">
                    <param name="retrieved" label="Retrieve" type="select" help="The type of information should the tool retrieve.">
                        <option value="databases">Available Databases</option>
                        <option value="schemes">Available Schemes for Database</option>
                    </param>
                    <when value="databases">
                        <!-- No parameters needed here. -->
                    </when>
                    <when value="schemes">
                        <repeat name="schemes_list" title="Schemes" min="1">
                            <param name="selected_db" argument="--retrieve-bigsdb-schemes" label="Database Name" type="text" optional="false" help="The name of the database to retrieve schemes for. See help for getting such names."/>
                        </repeat>
                    </when>
                </conditional>
            </when>
            <when value="st">
                <param name="fasta" label="FASTA file" type="data" format="fasta" multiple="true" help="The FASTA(s) file to perform sequence typing on."/>
                <param name="seqdefdb" label="BIGSdb SeqDef Name" type="text" optional="false" help="The database to use for typing. See help for help on obtaining list of names."/>
                <param argument="--scheme-name" label="BIGSdb SeqDef scheme name" type="text" optional="false"  value="MLST" help="The name of the scheme to be used. Defaults to MLST. See help for help on obtaining list of names."/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="mlst_profiles_output" label="${tool.name} on ${on_string}" format="csv">
            <filter>mode['operation'] == 'st'</filter>
        </data>
        <data name="info_db_out" label="${tool.name} supported Databases" format="csv">
            <filter>mode['operation'] == 'info' and mode['select_info']['retrieved'] == 'databases'</filter>
        </data>
        <data name="info_schemes_out" label="${tool.name} supported Schemes" format="csv">
            <filter>mode['operation'] == 'info' and mode['select_info']['retrieved'] == 'schemes'</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <conditional name="mode">
                <param name="operation" value="st" />
                <param name="fasta" value="tohama_I_bpertussis_minimized_features.fasta" />
                <param name="seqdefdb" value="pubmlst_bordetella_seqdef" />
                <param name="scheme_name" value="MLST" />
                <output name="mlst_profiles_output" file="tohama_I_bpertussis_minimized_features_typed.csv" ftype="csv" />
            </conditional>
        </test>
        <test expect_num_outputs="1">
            <conditional name="mode">
                <param name="operation" value="st" />
                <param name="fasta" value="B3921_bpertussis_minimized_features.fasta" />
                <param name="seqdefdb" value="pubmlst_bordetella_seqdef" />
                <param name="scheme_name" value="MLST" />
                <output name="mlst_profiles_output" file="B3921_bpertussis_minimized_features_typed.csv" ftype="csv" />
            </conditional>
        </test>
        <test expect_num_outputs="1">
            <conditional name="mode">
                <param name="operation" value="st" />
                <param name="fasta" value="B3913_bpertussis_minimized_features.fasta" />
                <param name="seqdefdb" value="pubmlst_bordetella_seqdef" />
                <param name="scheme_name" value="MLST" />
                <output name="mlst_profiles_output" file="B3913_bpertussis_minimized_features_typed.csv" ftype="csv" />
            </conditional>
        </test>
        <test expect_num_outputs="1">
            <conditional name="mode">
                <param name="operation" value="st" />
                <param name="fasta" value="tohama_I_bpertussis_minimized_features.fasta,B3913_bpertussis_minimized_features.fasta,B3921_bpertussis_minimized_features.fasta" />
                <param name="seqdefdb" value="pubmlst_bordetella_seqdef" />
                <param name="scheme_name" value="MLST" />
                <output name="mlst_profiles_output">
                    <assert_contents>
                        <has_n_lines n="4"/>
                        <has_text text="id,st,clonal-complex,adk,fumC,glyA,icd,pepA,pgm,tyrB"/>
                    </assert_contents>
                </output>
            </conditional>
        </test>
        <test expect_num_outputs="1">
            <conditional name="mode">
                <param name="operation" value="info" />
                <conditional name="select_info">
                    <param name="retrieved" value="databases" />
                    <output name="info_db_out">
                        <assert_contents>
                            <has_text text="BIGSdb Names,Source"/>
                            <has_text text="pubmlst_bordetella_seqdef,https://bigsdb.pasteur.fr/api"/>
                        </assert_contents>
                    </output>
                </conditional>
            </conditional>
        </test>
        <test expect_num_outputs="1">
            <conditional name="mode">
                <param name="operation" value="info" />
                <conditional name="select_info">
                    <param name="retrieved" value="schemes" />
                    <repeat name="schemes_list">
                        <param name="selected_db" value="pubmlst_bordetella_seqdef" />
                    </repeat>
                    <output name="info_schemes_out">
                        <assert_contents>
                            <has_text text="Name,ID,Database Name"/>
                            <has_text text="MLST,3,pubmlst_bordetella_seqdef"/>
                        </assert_contents>
                    </output>
                </conditional>
            </conditional>
        </test>
    </tests>
    <help><![CDATA[
What is autoBIGS
================
autoBIGS is a tool to help automatically performes multi-locus sequence typing (MLST) on given data by performing calls to necessary web BIGS database web APIs.

Tool Modes
==========
autoBIGS has two modes. Since the tool works with the sequence definition and MLST databases live, it is also able to tell the user the currently available databases, and their associated schemas. See the following sections for more information.

Obtaining Database Name and Schema ID
=====================================
You will need a database name and scheme ID for sequence typing. Follow these steps to check what databases, schemes, and their associated IDs are available.

1. Select "Retrieve Database Information" for "Operation"
2. Then for "Retrieve" select "Available Databases" and run. This will produce a table job output with all possible database names and their database API URL. 
3. Note down the names of the databases you are interested in.
4. Select "Retrieve Database Information" for "Operation"
5. Then, for "Retrieve", select "Available schemes for Database".
6. Enter the noted interested database and run. This will return a CSV with the scheme names and their IDs. Note down interested names or IDs.

Support for typing schemes other than MLST
==========================================
AutoBIGS is capable of performing typing for any available schemes given a database. To retrieve a list of available schemes in the form of a spreadsheet (CSV), under operation, select "retrieve available schemes for database" and run the tool.

Performing Sequence Typing
==========================
Simply select "Perform Sequence Typing" for the "Operation" and select your FASTA files. Then, enter your SeqDef Database name (see "Obtaining Database Name and Schema ID" above) and schema ID.

Special behaviour for FASTAs with multiple sequences
====================================================
AutoBIGS will treat multiple sequences in the same FASTA file as part of the same sample. This will result in a fasta with multiple sequences within the same row with the final sequence type being retrieved from the resulting alleles of the individual sequences within the FASTA. This is helpful if the input FASTA was obtained from a targetted form of sequencing for the specific needed regions (e.g., Sanger sequencing of 7 house keeping genes), rather than a whole genome sequence. If your data is a whole genome sequence (WGS) of the entire genome or similar, each WGS should have it's own FASTA.

In the case all sequences in a given FASTA have the same ID, autoBIGS will not repeat these names in the output row.

More Information
================
For more information on the tool being wrapped itself, please see the `autoBIGS.cli Github repository`_. Issues, bugs, and feature requests for the tool itself should be submitted to the `autoBIGS.cli issues`_. If the issue/bug/feature request is solely pertanent to the Galaxy wrapper, please check out the `autoBIGS.galaxy issues`_ tracker on GitHub.


.. _autoBIGS.cli GitHub repository: https://github.com/Syph-and-VPD-Lab/autoBIGS.cli
.. _autoBIGS.cli issues: https://github.com/Syph-and-VPD-Lab/autoBIGS.cli/issues
.. _autoBIGS.galaxy: https://github.com/Syph-and-VPD-Lab/autoBIGS.galaxy
.. _autoBIGS.galaxy issues: https://github.com/Syph-and-VPD-Lab/autoBIGS.galaxy/issues
    ]]></help>
    <citations>
        <citation type="bibtex">
@book{Deng2025RealYHD,
title = {Syph-and-VPD-Lab/autoBIGS.cli},
url = {https://github.com/Syph-and-VPD-Lab/autoBIGS.cli},
author = {Deng, Harrison},
date = {2025-01-24},
year = {2025},
month = {1},
day = {24},
}
        </citation>
    </citations>
</tool>
