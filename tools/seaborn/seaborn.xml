<tool id="seaborn" name="seaborn" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01" license="MIT">
    <description>seaborn plots</description>

    <macros>
        <token name="@TOOL_VERSION@">0.13.2</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <!-- TODO: please annotate this tool with topics and operations from http://edamontology.org -->
    <!-- TODO: for more information see: https://galaxy-iuc-standards.readthedocs.io/en/latest/best_practices/tool_xml.html#edam-topics-and-operations -->
    <edam_topics>
        <edam_topic>topic_4019</edam_topic>
        <edam_topic>topic_3316</edam_topic>
        <edam_topic>topic_3071</edam_topic>
    </edam_topics>
    <edam_operations>
        <edam_operation>operation_0337</edam_operation>
    </edam_operations>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">seaborn</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        python3 "${run_script}"
    ]]></command>

    <configfiles>
        <configfile name="run_script"><![CDATA[
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

file_name = "$input_data"
file_extension = "$input_data.ext"

index_col = $index_col
transformation = $transformation
plot = $plot
output_format = "png"
output_file = "${output_file}"

# load and transform data
if file_extension == "csv":
    df = pd.read_csv(file_name, index_col=index_col)
elif file_extension in ["tsv", "tabular"]:
    df = pd.read_csv(file_name, sep="\t", index_col=index_col)
elif file_extension == "parquet":
    df = pd.read_parquet(file_name, index_col=index_col)
else:
    raise ValueError(f"Unsupported file format: {file_extension}")
data = df.apply(lambda x: transformation(x) if np.issubdtype(x.dtype, np.number) else x)

fig = plot(
    data,
    #if $x
    x = data.columns.values[$x - 1],
    #end if
    #if $y
    y = data.columns.values[$y - 1],
    #end if
    #if $hue
    hue = data.columns.values[$hue - 1],
    #end if
    #if $legend
    legend = $legend,
    #end if
    #if $kind
    kind = '$kind'
    #end if
)

#if $legend_pos
plt.legend(loc='$legend_pos')
#end if

plt.savefig(f"{output_file}", format=output_format, dpi=300)
        ]]></configfile>
    </configfiles>
    <inputs>
        <param argument="--input_data" type="data" format="tsv,txt,csv,parquet" label="Input data table" help="Input data file" />
        <param argument="index_col" type="boolean" truevalue="0" falsevalue="None" checked="false" label="Is the first column the index?" help="TODO" />
        <conditional name="header">
            <param name="has_header" type="boolean" label="Header?" truevalue="yes" falsevalue="no" checked="true" help="TODO" refresh_on_change="true">
                <option value="yes">TODO: yes</option>
                <option value="no">TODO: no</option>
            </param>
            <when value="yes">
                <param name="x" type="data_column" data_ref="input_data" label="x-axis column" optional="true" use_header_names="true" help="TODO"/>
                <param name="y" type="data_column" data_ref="input_data" label="y-axis column" optional="true" use_header_names="true" help="TODO"/>
                <param name="hue" type="data_column" data_ref="input_data" label="column to use as hue" optional="true" use_header_names="true" help="TODO"/>
            </when>
            <when value="no">
                <param name="x" type="data_column" data_ref="input_data" label="x-axis column" optional="true" help="TODO"/>
                <param name="y" type="data_column" data_ref="input_data" label="y-axis column" optional="true" help="TODO"/>
                <param name="hue" type="data_column" data_ref="input_data" label="column to use as hue" optional="true" help="TODO"/>
            </when>
        </conditional>
        <param name="transformation" type="select" label="Transformation" help="Transformation function to apply to the data">
            <option value="lambda x: x" selected="true">None</option>
            <option value="np.log10">np.log10</option>
            <option value="np.log2">np.log2</option>
        </param>
        <param name="plot" type="select" label="Plot to choose from seaborn" help="TODO">
            <option value="sns.scatterplot">scatterplot</option>
            <option value="sns.displot">displot</option>
            <option value="sns.jointplot">jointplot</option>
            <option value="sns.barplot">barplot</option>
            <option value="sns.boxplot">boxplot</option>
            <option value="sns.violinplot">violinplot</option>
            <option value="sns.lmplot">lmplot</option>
        </param>
        <param name="kind" type="select" label="Kind specification" optional="true" help="TODO">
            <option value="hist">hist</option>
            <option value="kde">kde</option>
            <option value="reg">reg</option>
            <option value="scatter">scatter</option>
            <option value="hex">hex</option>
            <option value="resid">resid</option>
            <option value="ecdf">ecdf</option>
        </param>
        <param name="legend" type="select" label="Legend" help="TODO" optional="true">
            <option value="'auto'">auto</option>
            <option value="'brief'">brief</option>
            <option value="'full'">full</option>
            <option value="False">None</option>
            <sanitizer invalid_char="">
                <valid initial="string.ascii_letters">
                    <add value="'" />
                </valid>
            </sanitizer>
        </param>
        <param name="legend_pos" type="select" optional="true" label="Position for the legend" help="Legend position">
            <option value="center right">center right</option>
            <option value="center left">center left</option>
            <option value="upper right">upper right</option>
            <option value="upper left">upper left</option>
            <option value="lower right">lower right</option>
            <option value="lower left">lower left</option>
        </param>
    </inputs>
    <outputs>
        <data name="output_file" format="png" label="${tool.name} on ${on_string}" />
    </outputs>
    <tests>
        <!-- Hint: You can use [ctrl+alt+t] after defining the inputs/outputs to auto-scaffold some basic test cases. -->
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

TODO: Fill in help in reStructuredText format (https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html)

Usage
.....


**Input**


**Output**


    ]]></help>
    <citations>
        <citation type="doi"> </citation>
    </citations>
</tool>