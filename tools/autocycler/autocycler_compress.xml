<tool id="autocycler_compress" name="AutoCycler Compress" version="@TOOL_VERSION@+galaxy0" profile="@PROFILE@">
    <description>compress multiple assemblies into a compressed representation</description>
    <macros>
          <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
	mkdir -p out_dir &&

        #import re
        #set input_directory = 'assemblies'
        mkdir $input_directory &&

        #for $value, $input_file in enumerate($assemblies_dir):
                #if $input_file.is_of_type("fasta")
                    ln -s $input_file '$input_directory/$(input_file.element_identifier).$(input_file.ext)' &&
                #elif $input_file.ext == 'gfa1'
                    ln -s $input_file '$input_directory/$(input_file.element_identifier).$(input_file.ext)' &&
                #else
                    echo "${input_file} is not a fasta/gfa file"
                #end if
        #end for


        autocycler compress
        --assemblies_dir '$input_directory'
        --autocycler_dir out_dir
        --kmer '$kmer'
        --max_contigs '$max_contigs'
	--threads \${GALAXY_SLOTS:-4}
	&&
	mv out_dir/input_assemblies.yaml out_dir/input_assemblies_yaml.yaml 2>&1
    ]]></command>
    <inputs>
        <!-- Handle both directory input and collection of assemblies -->
        <param name="assemblies_dir" type="data_collection" collection_type="list"  format="fasta,gfa1" label="assembled sequences"/> 
        
        <param name="kmer" type="integer" min="1" value="51" label="K-mer size"
               help="K-mer size for De Bruijn graph construction"/>
        
        <param name="max_contigs" type="integer" min="1" value="25" label="Maximum allowed contigs"
               help="Refuse to run if mean contigs per assembly exceeds this value"/>
        
    </inputs>
    <outputs>
        <collection name="output" type="list" label="${tool.name} on ${on_string}: compress assemblies">
                <discover_datasets pattern="(?P&lt;designation&gt;.+)\.gfa" directory="out_dir" format="gfa1" />
                <discover_datasets pattern="(?P&lt;designation&gt;.+)\.yaml" directory="out_dir" format="yaml" />
        </collection>
    </outputs>
    <tests>
        <test>
            <param name="assemblies_dir">
                <collection type="list">
		    <element name="flye_01" value="flye_01.fasta" ftype="fasta"/>
		    <element name="flye_02" value="flye_02.fasta" ftype="fasta"/>
                    <element name="flye_03" value="flye_03.fasta" ftype="fasta"/>
		    <element name="flye_04" value="flye_04.fasta" ftype="fasta"/>
                </collection>
            </param>
            <param name="kmer" value="51"/>
	    <param name="max_contigs" value="25"/>
            <output_collection name="output" type="list" count="2">
                    <element name="input_assemblies" file="input_assemblies.gfa" ftype="gfa1">
                        <assert_contents>
                             <has_n_lines n="4302"/>
                        </assert_contents>
                    </element>
                    <element name="input_assemblies_yaml" file="input_assemblies_yaml.yaml" ftype="yaml">
			<assert_contents>
			     <has_text text="input_assemblies_count: 4"/>
                             <has_n_lines n="71"/>
                        </assert_contents>
                    </element>
            </output_collection>
        </test>
    </tests>


    <help><![CDATA[
**AutoCycler Compress Tool**
	    
The autocycler compress command uses your input assemblies to build a compacted De Bruijn graph (a.k.a. a unitig graph). This serves a few purposes. First, since the input assemblies are all quite similar (they are alternative assemblies of the same genome), the graph structure compresses them into a much smaller file. Second, the graph remembers the path of each input sequence, which means that the input assemblies can be fully recovered from this graph (see Autocycler decompress). Third, the graph structure provides a convenient way to manipulate the sequences in later steps, e.g. trimming overlap with Autocycler trim or building a consensus with Autocycler resolve. This tool compresses multiple assemblies into a compressed representation using AutoCycler.

**Inputs**
	    
- Input assemblies directory (a collection of FASTA files)


**Parameters**
	    
- K-mer size: Size of k-mers for De Bruijn graph construction (default: 51)
- Maximum contigs: Maximum allowed mean contigs per assembly (default: 25)

**Outputs**
	    
- the compressed representation of the assemblies

**Notes**

- While different k-mer sizes will produce different unitig graphs, the final result of Autocycler is not sensitive to this parameter, so there is usually no need to change it from the default value.
- Since Autocycler decompress can be used to fully restore the input assemblies (with a couple caveats, see the Autocycler decompress page), you can delete the input assemblies after running Autocycler compress.
- The --max_contigs option exists to catch obviously bad input data. If the mean number of contigs per input assemblies exceeds this value (default of 25), Autocycler compress will refuse to run and display an error message. For example, if you give Autocycler 10 input assemblies with a total of 1000 contigs, that is an average of 100 contigs per assembly, which almost certainly means that they are fragmented or contaminated and thus not appropriate for Autocycler.

.. class:: infomark

**More Information**

- `Autocycler compress`: https://github.com/rrwick/Autocycler/wiki/Autocycler-compress

**Citations**

    ]]></help>
        <expand macro="citations"/>
</tool>
