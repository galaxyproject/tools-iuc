
    <tool id='meryl' name='Meryl' version='@TOOL_VERSION@+@GALAXY_TOOL_VERSION@' profile='20.01'>
    <description>build hapmers databases</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='edam_ontology'/>
    <expand macro='requirements'/>
    <version_command>meryl --version</version_command>
    <command detect_errors='exit_code'><![CDATA[
        mkdir -p ./output_files &&
        #from math import log
        export MERQURY=\$(dirname \$(command -v merqury.sh))/../share/merqury/ &&
        #if $mode.options == 'default'
            meryl 
            #if $mode.operation_type.command_type == 'count-kmers'
                #if $mode.operation_type.options_kmer_size.kmer_size == 'estimate'
                    #set $mode.operation_type.options_kmer_size.input_kmer_size = int(log(int($mode.operation_type.options_kmer_size.genome_size)*(1-float($mode.operation_type.options_kmer_size.collision_rate))/float($mode.operation_type.options_kmer_size.collision_rate))/log(4))
                #end if
                $mode.operation_type.count_operations
                k=$mode.operation_type.options_kmer_size.input_kmer_size
                $mode.operation_type.input_reads_01
            #end if
            #if $mode.operation_type.command_type == 'filter-kmers'
                $mode.operation_type.filter_operations
                $mode.operation_type.N
                $mode.operation_type.input_reads_02
            #end if
            #if $mode.operation_type.command_type == 'arithmetic-kmers'
                $mode.operation_type.arithmetic_operations
                $mode.operation_type.X
                $mode.operation_type.input_reads_02
            #end if
            #if $mode.operation_type.command_type == 'group-kmers'
                $mode.operation_type.group_operations
                $mode.operation_type.input_reads_02
                $mode.operation_type.input_reads_02
            #end if
            output read-db.meryl &&
            tar -czvf read-db.meryl.tgz read-db.meryl &&
            meryl histogram read-db.meryl > read-db.hist &&
            echo 'K-mer size: ${$mode.operation_type.options_kmer_size.input_kmer_size}' > $kmer_size_file
        #else
            #for $i, $read in enumerate($paternal_reads):
                mkdir 'paternal{$i}.meryl' &&
                meryl count k=$mode.options_kmer_size.input_kmer_size '${read}' output 'paternal{$i}.meryl' &&
            #end for
            meryl union-sum paternal*.meryl output pat.meryl &&
            #for $i, $read in enumerate($maternal_reads):
                mkdir 'maternal{$i}.meryl' &&
                meryl count k=$mode.options_kmer_size.input_kmer_size '${read}' output 'maternal{$i}.meryl' &&
            #end for
            meryl union-sum maternal*.meryl output mat.meryl &&
            #for $i, $read in enumerate($child_reads):
                mkdir 'child{$i}.meryl' &&
                meryl count k=$mode.options_kmer_size.input_kmer_size '${read}' output 'child{$i}.meryl' &&
            #end for
            meryl union-sum child*.meryl output child.meryl &&

            ## mat specific kmers
            meryl difference mat.meryl pat.meryl output mat.only.meryl &&
            meryl histogram mat.only.meryl > mat.only.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar mat.only.hist > mat.only.ploidy &&
            VAR=`sed -n 2p mat.only.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output mat.only.filt.meryl mat.only.meryl &&

            ## pat specific kmers
            meryl difference pat.meryl mat.meryl output pat.only.meryl &&
            meryl histogram pat.only.meryl > pat.only.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar pat.only.hist > pat.only.ploidy &&
            VAR=`sed -n 2p pat.only.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output pat.only.filt.meryl pat.only.meryl &&

            ## shared kmers
            meryl intersect output shared.meryl mat.meryl pat.meryl &&

            ## mat hapmers
            meryl intersect output mat.inherited.meryl child.meryl mat.only.filt.meryl &&
            meryl histogram mat.inherited.meryl > mat.inherited.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar mat.inherited.hist > mat.inherited.ploidy &&
            VAR=`sed -n 2p mat.inherited.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output mat.hapmer.meryl mat.inherited.meryl &&
            tar -czvf 'mat.meryl.tgz' mat.hapmer.meryl &&

            ## pat hapmers
            meryl intersect output pat.inherited.meryl child.meryl pat.only.filt.meryl &&
            meryl histogram pat.inherited.meryl > pat.inherited.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar pat.inherited.hist > pat.inherited.ploidy &&
            VAR=`sed -n 2p pat.inherited.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output pat.hapmer.meryl pat.inherited.meryl &&
            tar -czvf 'pat.meryl.tgz' pat.hapmer.meryl &&

            ## shared hapmers
            meryl intersect output shared.inherited.meryl child.meryl shared.meryl &&
            meryl histogram shared.inherited.meryl > shared.inherited.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar shared.inherited.hist > shared.inherited.ploidy &&
            VAR=`sed -n 2p shared.inherited.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output shared.filt.meryl shared.inherited.meryl &&
            
            ## child hapmers
            meryl union-sum output child.inherited.meryl mat.inherited.meryl pat.inherited.meryl shared.inherited.meryl &&
            meryl difference output read.only.meryl child.meryl child.inherited.meryl &&
            tar -czvf 'read-db.meryl.tgz' read.only.meryl &&
            echo 'K-mer size: ${$mode.options_kmer_size.input_kmer_size}' > $kmer_size_file
        #end if
    ]]>    </command>
    <inputs>
        <conditional name="mode">
            <param name="options" type="select" label="Build hap-mers mode" help="Meryl allows two operational modes: default and trio mode.">
                <option value="default">Default mode</option>
                <option value="trio">Trio mode</option>
            </param>
            <when value="default">
                <conditional name="operation_type">
                    <param name="command_type" type="select" label="Operation type selector" help="Select a type of operation">
                        <option value="count-kmers">Count operations</option>
                        <option value="filter-kmers">Filter operations</option>
                        <option value="arithmetic-kmers">Arithmetic operations on kmer counts</option>
                        <option value="groups-kmers">Operations on sets of kmers</option>
                    </param>
                    <when value="count-kmers">
                        <param name="count_operations" type="select" label="Count operations" help="Select an operation to be executed">
                            <option value="count">Count: count the occurrences of canonical kmers</option>
                            <option value="count-forward">Count-forward: count the occurreces of forward kmers</option>
                            <option value="count-reverse">Count-reverse: count the occurreces of reverse kmers</option>
                        </param>
                        <param name="input_reads_01" type="data" format="fastq,fasta" label="Input sequences" help="Select your reads in FASTA/FASTQ format."/>
                        <conditional name="options_kmer_size">
                            <param name="kmer_size" type="select" label="K-mer size selector">
                                <option value="provide">Set a k-mer size</option>
                                <option value="estimate">Estimate the best k-mer size</option>
                            </param>
                            <when value="provide">
                                <param name="input_kmer_size" type="integer" min="1" max="50" value="" label="K-mer size" help="Haploid genome size or diploid genome size, depending on what we evaluate. In bp. Only required if the k-mer size is not provided."/>
                            </when>
                            <when value="estimate">
                                <param name="genome_size" type="integer" min="1000" max="70000000000" value="1000" label="Genome size" help="Haploid genome size or diploid genome size, depending on what we evaluate. In bp. Only required if the k-mer size is not provided."/>
                                <param name="collision_rate" type="float" min="0.0001" max="0.01" value="0.001" label="Tolerable collision rate" help="Tolerable collision rate. By default is 0.001."/>
                            </when>
                        </conditional>
                    </when>
                    <when value="filter-kmers">
                        <param name="filter_operations" type="select" label="Filter operations" help="Select an operation to be executed">
                            <option value="less-than">Less-than: return kmers that occur fewer than N times in the input</option>
                            <option value="greater-than">Greater-than: return kmers that occur more than N times in the input</option>
                            <option value="equal-to">Equal-to: return kmers that occur exactly N times in the input</option>
                            <option value="not-equal-to">Not-equal-to: return kmers that do not occur exactly N times in the input</option>
                        </param>
                        <param name="input_reads_02" type="data" format="tgz" label="Input meryldb" help="Select a meryldb dataset"/>
                        <param name="N" type="integer" min="0" max="50000000000" value="" optional="true" label="Filter value"/>      
                    </when>
                    <when value="arithmetic-kmers">
                        <param name="arithmetic_operations" type="select" label="Arithmetic operations" help="Select an operation to be executed">
                                <option value="increase">Increase: add x to the count of each k-mer</option>
                                <option value="decrease">Decrease: subsctract x from the count of each k-mer</option>
                                <option value="multiply">Multiply: multiply the count of each k-mer by x</option>
                                <option value="divide">Divide: divide the count of each k-mer by x</option>
                                <option value="divide-round">Divide-round: divide the count of each k-mer by x and round th results</option>
                                <option value="modulo">Modulo: set the count of each k-mer to the remainder of the count divided by x</option>
                        </param>
                        <param name="input_reads_02" type="data" format="fastq,fasta" label="Input meryldb" help="Select a meryldb dataset"/>
                        <param name="X" type="integer" min="1" max="1000000" value="" optional="true" label="Operand"/>      
                    </when>
                    <when value="groups-kmers">
                        <param name="groups_operations" type="select" label="Operations on sets of kmers" help="Select an operation to be executed">
                            <option value="union">Union: return k-mers that occur in any input</option>
                            <option value="union-min">Union-min: return kmers that occur in any input, set the count to the minimum count</option>
                            <option value="union-max">Union-max: return kmers that occur in any input, set the count to the maximum count</option>
                            <option value="union-sum">Union-sum: return kmers that occur in any input, set the count to the sum of the counts</option>
                            <option value="intersect">Intersect: return kmers that occur in all inputs, set the count to the count in the first input</option>
                            <option value="intersect-min">Intersect-min: return kmers that occur in all inputs, set the count to the minimum count</option>
                            <option value="intersect-max">Intersect-max: return kmers that occur in all inputs, set the count to the maximum count</option>
                            <option value="intersect-sum">Intersect-sum: return kmers that occur in all inputs, set the count to the sum of the counts</option>
                            <option value="subtract">Subtract: return kmers that occur in the first input, subtracting counts from the other inputs</option>
                            <option value="difference">Difference: return kmers that occur in the first input, but none of the other inputs</option>
                            <option value="simmetric-difference">Simmetric-difference: return kmers that occur in exactly one input</option>
                        </param>
                        <param name="input_reads_03" type="data" format="fastq,fasta" label="Input meryldb"/>
                        <param name="input_reads_04" type="data" format="fastq,fasta" optional="true" multiple="true"  label="Input meryldb"/>
                    </when>
                </conditional>
            </when>
            <when value="trio">
                <param name="child_reads" type="data" format="fastq,fasta" multiple="true" label="F1 reads" help="Select F1 reads used for generating the assembly"/>
                <param name="paternal_reads" type="data" format="fastq,fasta" multiple="true" optional="true" label="Paternal reads" help="Select the paternal reads used for generating the assembly"/>
                <param name="maternal_reads" type="data" format="fastq,fasta" multiple="true" optional="true" label="Maternal reads" help="Select the maternal reads used for generating the assembly"/>
                <conditional name="options_kmer_size">
                    <param name="kmer_size" type="select" label="K-mer size selector">
                        <option value="provide">Set a k-mer size</option>
                        <option value="estimate">Estimate the best k-mer size</option>
                    </param>
                    <when value="provide">
                        <param name="input_kmer_size" type="integer" min="1" max="50" value="" label="K-mer size" help="Haploid genome size or diploid genome size, depending on what we evaluate. In bp. Only required if the k-mer size is not provided."/>
                    </when>
                    <when value="estimate">
                        <param name="genome_size" type="integer" min="1000" max="70000000000" value="1000" label="Genome size" help="Haploid genome size or diploid genome size, depending on what we evaluate. In bp. Only required if the k-mer size is not provided."/>
                        <param name="collision_rate" type="float" min="0.0001" max="0.01" value="0.001" label="Tolerable collision rate" help="Tolerable collision rate. By default is 0.001."/>
                    </when>
                </conditional>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="kmer_size_file" format="txt" label="${tool.name} on ${on_string}: k-mer size"/>
        <data name="read_db" format="tgz" from_work_dir="read-db.meryl.tgz" label="${tool.name} on ${on_string}: read-db.meryl" />
        <data name="read_db_hist" format="tabular" from_work_dir="read-db.hist" label="${tool.name} on ${on_string}: read-db histogram" />
        <data name="pat_db" format="tgz" from_work_dir="pat.meryl.tgz" label="${tool.name} on ${on_string}: read-db.meryl">
            <filter>mode["options"] == "trio"</filter>
        </data>
        <data name="pat_db_hist" format="tabular" from_work_dir="pat.inherited.hist" label="${tool.name} on ${on_string}: paternal inherited histogram">
            <filter>mode["options"] == "trio"</filter>
        </data>
        <data name="mat_db" format="tgz" from_work_dir="mat.meryl.tgz" label="${tool.name} on ${on_string}: mat.meryl">
            <filter>mode["options"] == "trio"</filter>
        </data>
        <data name="mat_db_hist" format="tabular" from_work_dir="mat.inherited.hist" label="${tool.name} on ${on_string}: maternal inherited histogram">
            <filter>mode["options"] == "trio"</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="3">
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.gz"/>
            </conditional>
            <param name="kmer_size" value="7"/>
            <output name="kmer_size_file" file="output_01.kmer_size.txt">
                <assert_contents>
                    <has_text text="K-mer size: 7"/>
                </assert_contents>
            </output>
            <output name="read_db" file="output_01.read-db.meryl.tgz" compare="sim_size"/>
            <output name="read_db_hist" file="output_01.read-db.hist"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.gz"/>
            </conditional>
            <param name="kmer_size" value="8"/>
            <output name="kmer_size_file" file="output_02.kmer_size.txt">
                <assert_contents>
                    <has_text text="K-mer size: 8"/>
                </assert_contents>
            </output>
            <output name="read_db" file="output_02.read-db.meryl.tgz" compare="sim_size"/>
            <output name="read_db_hist" file="output_02.read-db.hist"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.gz"/>
            </conditional>
            <param name="genome_size" value="1000"/>
            <param name="collision_rate" value="0.001"/>
            <output name="kmer_size_file" file="output_03.kmer_size.txt">
                <assert_contents>
                    <has_text text="K-mer size: 9"/>
                </assert_contents>
            </output>
            <output name="read_db" file="output_03.read-db.meryl.tgz" compare="sim_size" delta="50000"/>
            <output name="read_db_hist" file="output_03.read-db.hist"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.gz"/>
            </conditional>
            <param name="genome_size" value="2000"/>
            <param name="collision_rate" value="0.001"/>
            <output name="kmer_size_file" file="output_04.kmer_size.txt">
                <assert_contents>
                    <has_text text="K-mer size: 10"/>
                </assert_contents>
            </output>
            <output name="read_db" file="output_04.read-db.meryl.tgz" compare="sim_size" delta="50000"/>
            <output name="read_db_hist" file="output_04.read-db.hist"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.gz"/>
            </conditional>
            <param name="kmer_size" value="8"/>
            <output name="kmer_size_file" file="output_05.kmer_size.txt">
                <assert_contents>
                    <has_text text="K-mer size: 8"/>
                </assert_contents>
            </output>
            <output name="read_db" file="output_05.read-db.meryl.tgz" compare="sim_size"/>
            <output name="read_db_hist" file="output_05.read-db.hist"/>
        </test>
        <test expect_num_outputs="7">
            <conditional name="mode">
                <param name="options" value="trio"/>
                <param name="child_reads" value="child.fasta.gz"/>
                <param name="paternal_reads" value="paternal.fasta.gz"/>
                <param name="maternal_reads" value="maternal.fasta.gz"/>
            </conditional>
            <param name="kmer_size" value="7"/>
            <output name="kmer_size_file" file="output_06.kmer_size.txt">
                <assert_contents>
                    <has_text text="K-mer size: 7"/>
                </assert_contents>
            </output>
            <output name="read_db" file="output_06.read-db.meryl.tgz" compare="sim_size"/>
            <output name="read_db_hist" file="output_06.read-db.hist"/>
            <output name="pat_db" file="output_06.pat.meryl.tgz" compare="sim_size"/>
            <output name="pat_db_hist" file="output_06.pat.hist"/>
            <output name="mat_db" file="output_06.mat.meryl.tgz" compare="sim_size"/>
            <output name="mat_db_hist" file="output_06.mat.hist"/>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**Purpose**

Meryl is the k-mer counter. It is built into the Celera assembler and is also available as a stand-alone application. Meryl uses a sorting-based approach that sorts the k-mers in lexicographical order.

    ]]>    </help>
    <expand macro="citations"/>
</tool>
