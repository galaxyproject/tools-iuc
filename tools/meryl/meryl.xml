<tool id="meryl" name="Meryl" version="@TOOL_VERSION@" profile="20.01">
    <description>build hapmers databases</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="edam_ontology"/>
    <expand macro="requirements"/>
    <version_command>meryl --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
        mkdir -p ./output_files &&
        #from math import log
        export MERQURY=\$(dirname \$(command -v merqury.sh))/../share/merqury/ &&
        #set $kmer_size = $kmer_size
        #if not $kmer_size
            #set $kmer_size = int(log(int($genome_size)*(1-float($collision_rate))/float($collision_rate))/log(4))
        #end if
        echo "Kmer size: $kmer_size" > $kmer_size_file &&
        #if $mode.options == 'default'
            #for $i, $read in enumerate($child_reads):
                mkdir 'child{$i}.meryl' &&
                meryl count k=$kmer_size '${read}' output 'child{$i}.meryl' &&
            #end for
            meryl union-sum child*.meryl output child.meryl &&
            tar -czvf 'read-db.meryl.tgz' child.meryl &&
            meryl histogram child.meryl > read-db.hist
        #else
            #for $i, $read in enumerate($paternal_reads):
                mkdir 'paternal{$i}.meryl' &&
                meryl count k=$kmer_size '${read}' output 'paternal{$i}.meryl' &&
            #end for
            meryl union-sum paternal*.meryl output pat.meryl &&
            #for $i, $read in enumerate($maternal_reads):
                mkdir 'maternal{$i}.meryl' &&
                meryl count k=$kmer_size '${read}' output 'maternal{$i}.meryl' &&
            #end for
            meryl union-sum maternal*.meryl output mat.meryl &&
            #for $i, $read in enumerate($child_reads):
                mkdir 'child{$i}.meryl' &&
                meryl count k=$kmer_size '${read}' output 'child{$i}.meryl' &&
            #end for
            meryl union-sum child*.meryl output child.meryl &&
            ## mat specific kmers
            meryl difference mat.meryl pat.meryl output mat.only.meryl &&
            meryl histogram mat.only.meryl > mat.only.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar mat.only.hist > mat.only.ploidy &&
            VAR=`sed -n 2p mat.only.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output mat.only.filt.meryl mat.only.meryl &&
            ## pat specific kmers
            meryl difference pat.meryl mat.meryl output pat.only.meryl &&
            meryl histogram pat.only.meryl > pat.only.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar pat.only.hist > pat.only.ploidy &&
            VAR=`sed -n 2p pat.only.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output pat.only.filt.meryl pat.only.meryl &&
            ## shared kmers
            meryl intersect output shared.meryl mat.meryl pat.meryl &&
            ## mat hapmers
            meryl intersect output mat.inherited.meryl child.meryl mat.only.filt.meryl &&
            meryl histogram mat.inherited.meryl > mat.inherited.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar mat.inherited.hist > mat.inherited.ploidy &&
            VAR=`sed -n 2p mat.inherited.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output mat.hapmer.meryl mat.inherited.meryl &&
            tar -czvf 'mat.meryl.tgz' mat.hapmer.meryl &&
            ## pat hapmers
            meryl intersect output pat.inherited.meryl child.meryl pat.only.filt.meryl &&
            meryl histogram pat.inherited.meryl > pat.inherited.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar pat.inherited.hist > pat.inherited.ploidy &&
            VAR=`sed -n 2p pat.inherited.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output pat.hapmer.meryl pat.inherited.meryl &&
            tar -czvf 'pat.meryl.tgz' pat.hapmer.meryl &&
            ## shared hapmers
            meryl intersect output shared.inherited.meryl child.meryl shared.meryl &&
            meryl histogram shared.inherited.meryl > shared.inherited.hist &&
            java -jar -Xmx1g \$MERQURY/eval/kmerHistToPloidyDepth.jar shared.inherited.hist > shared.inherited.ploidy &&
            VAR=`sed -n 2p shared.inherited.ploidy | awk '{print \$NF}'` &&
            meryl greater-than \$VAR output shared.filt.meryl shared.inherited.meryl &&
            ## child hapmers
            meryl union-sum output child.inherited.meryl mat.inherited.meryl pat.inherited.meryl shared.inherited.meryl &&
            meryl difference output read.only.meryl child.meryl child.inherited.meryl &&
            tar -czvf 'read-db.meryl.tgz' read.only.meryl
        #end if
    ]]>    </command>
    <inputs>
        <conditional name="mode">
            <param name="options" type="select" label="Build hap-mers mode" help="Meryl allows two operational modes: default and trio mode.">
                <option value="default">default mode</option>
                <option value="trio">Trio mode</option>
            </param>
            <when value="default">
                <param name="child_reads" type="data" format="fastq,fasta,bgzip" multiple="true" label="Input sequences" help="For typical illumina whole genome sequencing, meryl builds the hap-mer dbs for each fastq file and and merge them. It is recommended to pre-process the reads (i.e. adapter removal) before building the meryl dbs."/>
            </when>
            <when value="trio">
                <param name="child_reads" type="data" format="fastq,fasta,bgzip" multiple="true" label="F1 reads" help="Select F1 reads used for generating the assembly"/>
                <param name="paternal_reads" type="data" format="fastq,fasta,bgzip" multiple="true" optional="true" label="Paternal reads" help="Select the paternal reads used for generating the assembly"/>
                <param name="maternal_reads" type="data" format="fastq,fasta,bgzip" multiple="true" optional="true" label="Maternal reads" help="Select the maternal reads used for generating the assembly"/>
            </when>
        </conditional>
        <param name="kmer_size" type="integer" min="5" max="50" value="" optional="true" label="K-mer size" help="If not k-mer size is provided, it will be estimated from the genome size. For a human genome, the best k-mer size is k=21 for both haploid or diploid."/>
        <param name="genome_size" type="integer" min="1000" max="70000000000" value="" label="Genome size" help="Haploid genome size or diploid genome size, depending on what we evaluate. In bp."/>
        <param name="collision_rate" type="float" min="0.0001" max="0.01" value="0.001" label="Tolerable collision rate" help="Tolerable collision rate. By default is 0.001."/>
    </inputs>
    <outputs>
        <data name="kmer_size_file" format="txt" label="${tool.name} on ${on_string}: kmer size"/>
        <data name="read_db" format="tgz" from_work_dir="./read-db.meryl.tgz" label="${tool.name} on ${on_string}: read-db.meryl" />
        <data name="read_db_hist" format="tabular" from_work_dir="./read-db.hist" label="${tool.name} on ${on_string}: read-db histogram" />
        <data name="pat_db" format="tgz" from_work_dir="./pat.meryl.tgz" label="${tool.name} on ${on_string}: read-db.meryl">
            <filter>mode['options'] == "trio"</filter>
        </data>
        <data name="pat_db_hist" format="tabular" from_work_dir="./pat.inherited.hist" label="${tool.name} on ${on_string}: paternal inherited histogram">
            <filter>mode['options'] == "trio"</filter>
        </data>
        <data name="mat_db" format="tgz" from_work_dir="./mat.meryl.tgz" label="${tool.name} on ${on_string}: mat.meryl">
            <filter>mode['options'] == "trio"</filter>
        </data>
        <data name="mat_db_hist" format="tabular" from_work_dir="./mat.inherited.hist" label="${tool.name} on ${on_string}: maternal inherited histogram">
            <filter>mode['options'] == "trio"</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.bgzip"/>
            </conditional>
            <param name="kmer_size" value="7"/>
            <param name="genome_size" value="1000"/>
            <param name="collision_rate" value="0.001"/>
            <output name='kmer_size_file' file='output_01.kmer_size.txt'>
                <assert_contents>
                    <has_text text="Kmer size: 7"/>
                </assert_contents>
            </output>
            <output name="read_db" file='output_01.read-db.meryl.tgz' compare="sim_size"/>
            <output name="read_db_hist" file='output_01.read-db.hist'/>
        </test>
        <test>
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.bgzip"/>
            </conditional>
            <param name="kmer_size" value="8"/>
            <param name="genome_size" value="1000"/>
            <param name="collision_rate" value="0.001"/>
            <output name='kmer_size_file' file='output_02.kmer_size.txt'>
                <assert_contents>
                    <has_text text="Kmer size: 8"/>
                </assert_contents>
            </output>
            <output name="read_db" file='output_02.read-db.meryl.tgz' compare="sim_size"/>
            <output name="read_db_hist" file='output_02.read-db.hist'/>
        </test>
        <test>
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.bgzip"/>
            </conditional>
            <param name="kmer_size" value=""/>
            <param name="genome_size" value="1000"/>
            <param name="collision_rate" value="0.001"/>
            <output name='kmer_size_file' file='output_03.kmer_size.txt'>
                <assert_contents>
                    <has_text text="Kmer size: 9"/>
                </assert_contents>
            </output>
            <output name="read_db" file='output_03.read-db.meryl.tgz' compare="sim_size" delta="50000"/>
            <output name="read_db_hist" file='output_03.read-db.hist'/>
        </test>
        <test>
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.bgzip"/>
            </conditional>
            <param name="kmer_size" value=""/>
            <param name="genome_size" value="2000"/>
            <param name="collision_rate" value="0.001"/>
            <output name='kmer_size_file' file='output_04.kmer_size.txt'>
                <assert_contents>
                    <has_text text="Kmer size: 10"/>
                </assert_contents>
            </output>
            <output name="read_db" file='output_04.read-db.meryl.tgz' compare="sim_size" delta="50000"/>
            <output name="read_db_hist" file='output_04.read-db.hist'/>
        </test>
        <test>
            <conditional name="mode">
                <param name="options" value="default"/>
                <param name="child_reads" value="child.fasta.bgzip"/>
            </conditional>
            <param name="kmer_size" value="8"/>
            <param name="genome_size" value="2000"/>
            <param name="collision_rate" value="0.01"/>
            <output name='kmer_size_file' file='output_05.kmer_size.txt'>
                <assert_contents>
                    <has_text text="Kmer size: 8"/>
                </assert_contents>
            </output>
            <output name="read_db" file='output_05.read-db.meryl.tgz' compare="sim_size"/>
            <output name="read_db_hist" file='output_05.read-db.hist'/>
        </test>
        <test>
            <conditional name="mode">
                <param name="options" value="trio"/>
                <param name="child_reads" value="child.fasta.bgzip"/>
                <param name="paternal_reads" value="paternal.fasta.bgzip"/>
                <param name="maternal_reads" value="maternal.fasta.bgzip"/>
            </conditional>
            <param name="kmer_size" value="7"/>
            <param name="genome_size" value="1000"/>
            <param name="collision_rate" value="0.001"/>
            <output name='kmer_size_file' file='output_06.kmer_size.txt'>
                <assert_contents>
                    <has_text text="Kmer size: 7"/>
                </assert_contents>
            </output>
            <output name="read_db" file='output_06.read-db.meryl.tgz' compare="sim_size"/>
            <output name="read_db_hist" file='output_06.read-db.hist'/>
            <output name="pat_db" file='output_06.pat.meryl.tgz' compare="sim_size"/>
            <output name="pat_db_hist" file='output_06.pat.hist'/>
            <output name="mat_db" file='output_06.mat.meryl.tgz' compare="sim_size"/>
            <output name="mat_db_hist" file='output_06.mat.hist'/>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**Purpose**

Meryl is the k-mer counter. It is built into the Celera assembler and is also available as a stand-alone application. Meryl uses a sorting-based approach that sorts the k-mers in lexicographical order.

    ]]>    </help>
    <expand macro="citations"/>
</tool>
