<tool id="clair3" name="Clair3" version="@TOOL_VERSION@+galaxy0" profile="21.09">
    <macros>
        <token name="@TOOL_VERSION@">0.1.10</token>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">clair3</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        #if $ref_source.source == "history"
            ln -s '$ref_source.ref_fasta' reference.fasta &&
        #elif $ref_source.source == "builtin"
            ln -s '$ref_source.ref_fasta_builtin.path' reference.fasta &&
        #end if
        BIN_PATH=\$(dirname \$(which run_clair3.sh))
        #import os
        #if os.getenv('BIN_DIR') is not None
            #set $model_prefix = os.environ.get('BIN_PATH') + '/models/'
        #end if
        
        run_clair3.sh
            --bam_fn='$bam_input'
            --ref_fn=reference.fasta
            --model_path='${model.fields.path}'
            --platform='ont'
            --output='clair3_output'
            --threads=\${GALAXY_SLOTS:-1}
            #if $adv.bed_fn
                --bed_fn='$adv.bed_fn'
            #end if
            #if $adv.vfc_fn
                --vfc_fn='$adv.vfc_fn'
            #end if
            --qual='$adv.qual'
            #if $adv.chunk_size
                --chunk_size='$adv.chunk_size'
            #end if
            $adv.print_ref_calls
            $adv.include_all_ctgs
    ]]></command>
    <inputs>
        <conditional name="ref_source">
            <param type="select" label="Reference genome source" name="source">
                <option value="history" selected="true">History</option>
                <option value="builtin">Built-in</option>
            </param>
            <when value="history">
                <param type="data" format="fasta" name="ref_fasta" label="Reference genome" />
            </when>
            <when value="builtin">
                <param type="select" name="ref_fasta_builtin" label="Reference genome">
                    <options from_data_table="all_fasta" />
                </param>
            </when>
        </conditional>        
        <param argument="--model_path" type="select" name="model" label="Select model" >
            <options from_data_table="model">
                <validator type="no_options" message="no modles available" />
            </options>
        </param>
        <param type="data" name="bam_input" format="bam" label="BAM file input. The input file must be samtools indexed." />
        <section name="adv" title="Advanced Parameters" expanded="false">
            <param type="data" name="bed_fn" format="bed" label="Call variants only in the provided bed regions." optional="true" />
            <param type="data" name="vfc_fn" format="vfc" label="Candidate sites VCF file input, variants will only be called at the sites in the VCF file if provided." optional="true" />
            <param type="integer" name="qual" value="0" min="0" max="255" label="If set, variants with >qual will be marked PASS, or LowQual otherwise." />
            <param type="integer" name="chunk_size" value="5" min="1" max="255" label="The size of each chuck for parallel processing, default: 5Mbp." optional="true" />
            <param type="boolean" name="print_ref_calls" truevalue="--print_ref_calls" falsevalue="" label="Show reference calls (0/0) in vcf file, default: disable." />
            <param type="boolean" name="include_all_ctgs" truevalue="--include_all_ctgs" falsevalue="" label="Call variants on all contigs, otherwise call in chr{1..22,X,Y} and {1..22,X,Y}, default: disable." />
        </section>
    </inputs>
    <outputs>
        <data name="merge_output" format="vcf_bgzip" />
        <data name="pileup" format="vcf_bgzip" />
        <data name="full_alignment" format="vcf_bgzip" />
    </outputs>
    <tests>
        <test expect_num_outputs="3">
          <param name="model" value="test_model" />
            <param name="bam_input" value="test1.bam" />
            <conditional name="ref_source">
                <param name="source" value="builtin" />
                <param name="ref_fasta_builtin" value="test1" />
            </conditional>
            <param name="bed_fn" value="test1.bed" />
            <output name="full_alignment" value="full_alignment.vcf.gz" />
            <output name="pileup" value="pileup.vcf.gz" />
            <output name="merge_output" value="merge_output.vcf.gz" />
        </test>
    </tests>
    <help><![CDATA[
        Usage: ./run_clair3.sh --bam_fn=BAM --ref_fn=REF --output=OUTPUT_DIR --threads=THREADS --platform=PLATFORM --model_path=MODEL_PREFIX [--bed_fn=BED] [options]

        Required parameters:
          -b, --bam_fn=FILE             BAM file input. The input file must be samtools indexed.
          -f, --ref_fn=FILE             FASTA reference file input. The input file must be samtools indexed.
          -m, --model_path=STR          The folder path containing a Clair3 model (requiring six files in the folder, including pileup.data-00000-of-00002, pileup.data-00001-of-00002 pileup.index, full_alignment.data-00000-of-00002, full_alignment.data-00001-of-00002 and full_alignment.index).
          -t, --threads=INT             Max #threads to be used. The full genome will be divided into small chunks for parallel processing. Each chunk will use 4 threads. The #chunks being processed simultaneously is ceil(#threads/4)*3. 3 is the overloading factor.
          -p, --platform=STR            Select the sequencing platform of the input. Possible options: {ont,hifi,ilmn}.
          -o, --output=PATH             VCF/GVCF output directory.


        Optional parameters (Use "=value" instead of " value". E.g., "--bed_fn=fn.bed" instead of "--bed_fn fn.bed".):
              --bed_fn=FILE             Call variants only in the provided bed regions.
              --vcf_fn=FILE             Candidate sites VCF file input, variants will only be called at the sites in the VCF file if provided.
              --ctg_name=STR            The name of the sequence to be processed.
              --sample_name=STR         Define the sample name to be shown in the VCF file.
              --qual=INT                If set, variants with >$qual will be marked PASS, or LowQual otherwise.
              --samtools=STR            Path of samtools, samtools version >= 1.10 is required.
              --python=STR              Path of python, python3 >= 3.6 is required.
              --pypy=STR                Path of pypy3, pypy3 >= 3.6 is required.
              --parallel=STR            Path of parallel, parallel >= 20191122 is required.
              --whatshap=STR            Path of whatshap, whatshap >= 1.0 is required.
              --chunk_size=INT          The size of each chuck for parallel processing, default: 5000000.
              --pileup_only             Use the pileup model only when calling, default: disable.
              --print_ref_calls         Show reference calls (0/0) in VCF file, default: disable.
              --include_all_ctgs        Call variants on all contigs, otherwise call in chr{1..22,X,Y} and {1..22,X,Y}, default: disable.
              --gvcf                    Enable GVCF output, default: disable.
              --enable_phasing          Output phased variants using whatshap, default: disable.
              --remove_intermediate_dir Remove intermediate directory, including intermediate phased BAM, pileup and full-alignment results. default: disable.
              --snp_min_af=FLOAT        Minimum SNP AF required for a candidate variant. Lowering the value might increase a bit of sensitivity in trade of speed and accuracy, default: ont:0.08,hifi:0.08,ilmn:0.08.
              --indel_min_af=FLOAT      Minimum Indel AF required for a candidate variant. Lowering the value might increase a bit of sensitivity in trade of speed and accuracy, default: ont:0.15,hifi:0.08,ilmn:0.08.
              --var_pct_full=FLOAT      EXPERIMENTAL: Specify an expected percentage of low quality 0/1 and 1/1 variants called in the pileup mode for full-alignment mode calling, default: 0.3.
              --ref_pct_full=FLOAT      EXPERIMENTAL: Specify an expected percentage of low quality 0/0 variants called in the pileup mode for full-alignment mode calling, default: 0.3 for ilmn and hifi, 0.1 for ont.
              --var_pct_phasing=FLOAT   EXPERIMENTAL: Specify an expected percentage of high quality 0/1 variants used in WhatsHap phasing, default: 0.8 for ont guppy5 and 0.7 for other platforms.
              --pileup_model_prefix=STR EXPERIMENTAL: Model prefix in pileup calling, including $prefix.data-00000-of-00002, $prefix.data-00001-of-00002 $prefix.index. default: pileup.
              --fa_model_prefix=STR     EXPERIMENTAL: Model prefix in full-alignment calling, including $prefix.data-00000-of-00002, $prefix.data-00001-of-00002 $prefix.index, default: full_alignment.
              --fast_mode               EXPERIMENTAL: Skip variant candidates with AF <= 0.15, default: disable.
              --haploid_precise         EXPERIMENTAL: Enable haploid calling mode. Only 1/1 is considered as a variant, default: disable.
              --haploid_sensitive       EXPERIMENTAL: Enable haploid calling mode. 0/1 and 1/1 are considered as a variant, default: disable.
              --no_phasing_for_fa       EXPERIMENTAL: Call variants without whatshap phasing in full alignment calling, default: disable.
              --call_snp_only           EXPERIMENTAL: Call candidates pass SNP minimum AF only, ignore Indel candidates, default: disable.
              --enable_long_indel       EXPERIMENTAL: Call long Indel variants(>50 bp), default: disable.

    ]]></help>
    <citations>
        <citation type="doi">10.1101/2021.12.29.474431</citation>
    </citations>
</tool>
