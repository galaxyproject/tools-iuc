<?xml version="1.0"?>
<macros>
    <token name="@TOOL_VERSION@">1.02</token>
    <token name="@VERSION_SUFFIX@">0</token>
    <xml name="hitmap_config_script">
        <configfile name="hitmap_script">
            <![CDATA[

######## helper functions ########

#def text_to_rstringarray($text)
    #set $list = $text.strip().rstrip(',').split(',')

    #set $rstringarray = "c("

    #for $i in range(len($list))
        #set $elem = $list[$i].strip()
        #if $elem != ""
            #set $rstringarray += '"'
            #set $rstringarray += $elem
            #set $rstringarray += '"'
            #if $i != len($list) - 1
                #set $rstringarray += ','
            #end if
        #end if
    #end for

    #set $rstringarray += ')'
    #return $rstringarray
    
#end def


######## PART 1: Data pre-processing and proteomics annotation ########

library(HiTMaP)
datafile = "sample.imzML"
database = "database.fasta"
job_dir = getwd()
wd = paste0(job_dir, "/expdata/")

imaging_identification(
    ##-------- user vars --------##
    ## file inputs
    datafile = paste0(wd,datafile),
    Fastadatabase = database,

    ## input data settings
    threshold = ${advanced.threshold},
    ppm = ${peptide_identification.ppm}, 
    FDR_cutoff = ${peptide_identification.fdr_cutoff}, 

    ## database construction
    Decoy_mode = "${advanced.decoy_mode}",  
    Digestion_site = "${peptide_identification.digestion_site}",  ## passed test
    missedCleavages = 0:${peptide_identification.missed_cleavages},
    adducts = c("${advanced.adducts}"),

    ## modifications (part of database construction)
    Modifications = list(
        #if $modifications.fixed != "":
            fixed = $text_to_rstringarray($modifications.fixed),
        #else:
            fixed = NULL,
        #end if

        #if $modifications.fixmod_position != "None":
            fixmod_position = "${modifications.fixmod_position}",
        #else:
            fixmod_position = NULL,
        #end if

        #if $modifications.variable != "":
            variable = $text_to_rstringarray($modifications.variable),
        #else:
            variable = NULL,
        #end if

        #if $modifications.varmod_position != "None":
            varmod_position = "${modifications.varmod_position}"
        #else:
            varmod_position = NULL
        #end if
    ),

    ## image segmentation
    spectra_segments_per_file=${peptide_identification.spectra_segments_per_file},  

    ##-------- static vars --------##
    Segmentation="spatialKMeans",  

    ## preprocessing
    preprocess=list(
        force_preprocess=TRUE,   
        use_preprocessRDS=TRUE,  
        smoothSignal=list(method="Disable"),    
        reduceBaseline=list(method="Disable"),  
        peakPick=list(method="adaptive"),       
        peakAlign=list(tolerance=${peptide_identification.ppm}, units="ppm"),  
        normalize=list(method=c("rms","tic","reference")[1],mz=1)  
    ),

    ## database construction
    output_candidatelist=T,     ## F on second pass
    use_previous_candidates=F,  ## T on second pass

    ## image segmentation 
    ## TODO future versions: allow user providing manual segmentation data
    Smooth_range=1,  
    Virtual_segmentation=FALSE,  
    Virtual_segmentation_rankfile=NULL,  

    ## Score method for hi-resolution isotopic pattern matching
    score_method="SQRTP",  
    peptide_ID_filter=2,  

    ## protein and peptide feature summary across project
    Protein_feature_summary=TRUE,  
    Peptide_feature_summary=TRUE,  
    Region_feature_summary=TRUE,  
    
    ## cluster imaging. 
    plot_cluster_image_grid=F,  ## T on second pass  
    Rotate_IMG=NULL,  

    ## computation
    Thread=1,
               
    ## operation modes
    IMS_analysis=T             ## F on second pass
 
)


######## PART 2: Re-analysis and cluster image rendering ########

## using .value is the only way I could avoid InputValueWrapper() errors. 
#set $proteins = $cluster_ions.proteins_of_interest.value
#set $proteins = $proteins.rstrip(',')

#if $proteins != ""
    imaging_identification(
        ##-------- user vars --------##

        ## file inputs
        datafile=paste0(wd,datafile),
        Fastadatabase=database,
           
        ## database construction
        ppm = ${peptide_identification.ppm}, 
        Digestion_site = "${peptide_identification.digestion_site}",

        ## cluster ion images
        Protein_desc_of_interest=$text_to_rstringarray($proteins),

        ##-------- static vars --------##

        ## database construction
        use_previous_candidates=T,

        ## IMS analysis
        IMS_analysis=F, 

        ## cluster ion images
        plot_cluster_image_grid=T,
        cluster_rds_path = "sample ID/preprocessed_imdata.RDS",
        export_Header_table=T,
        ClusterID_colname="Protein",  
        componentID_colname="Peptide",  
        plot_cluster_image_overwrite=T,
        remove_score_outlier=T,
        Plot_score_abs_cutoff=-0.1,
        img_brightness=250,
        pixel_size_um = 150,
	    Thread=1

    )  

#end if
            ]]>
        </configfile>
    </xml>
</macros>
