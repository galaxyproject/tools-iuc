<tool id="coverm-genome" name="CoverM-GENOME" version="@TOOL_VERSION@" python_template_version="3.5">
    <macros>
        <import>macros.xml</import>
        <token name="@INPUT_FORMATS@">fa,fna,fasta,fastq,fastq.gz,fq.gz,fasta.gz,fna.gz,fa.gz</token>
        <token name="@TOOL_VERSION@">0.2.1</token>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[

        coverm genome
            #if $reads.read_type == 'paired'
                -1 "${" ".join(map(str, $reads.read1))}"
                -2 "${" ".join(map(str, $reads.read2))}"
            #end if
            #if $reads.read_type == 'paired_collection'
                --coupled $reads.paired_reads.forward $reads.paired_reads.reverse
            #end if
            #if $reads.read_type == 'single'
                --single $reads.single
            #end if
            #if $reads.read_type == 'interleaved'
                --interleaved "{" ".join(map(str, $reads.interleaved))}"
            #end if
            #if $reads.read_type == 'bam'
                -b "{" ".join(map(str, $reads.bam))}"
            #end if

            #if $genome.ref_or_gen == "genomic":
                #if $genome.genomic.source == "history":
                    -f
                    #for $input in $genome.genomic.fasta_history:
                        $input
                    #end for
                #end if
                #if $genome.genomic.source == "builtin":
                    -f
                    #for $input in $genome.genomic.fasta_builtin:
                        $input.fields.path
                    #end for
                #end if
            #end if
            #if $genome.ref_or_gen == "reference":
                #if $genome.ref.ref_genome.ref_source == "history":
                    --reference
                    #for $input in $genome.ref.ref_genome.ref_fasta_history:
                        $input
                    #end for
                #end if
                #if $genome.ref.ref_genome.ref_source == "builtin":
                    --reference
                    #for $input in $genome.ref.ref_genome.ref_fasta_builtin:
                        $input.fields.path
                    #end for
                #end if
                $genome.ref.ref_as_index
                #if $genome.ref.separator:
                    -s "$genome.ref.separator"
                #end if
                $genome.ref.single_genome
                #if $genome.ref.genome_definition
                    --genome-definition $genome.ref.genome_definition
                #end if
            #end if

            $derep.dereplicate
            #if $derep.checkm_tab_table:
                --chekm-tab-table $derep.checkm_tab_table
            #end if
            #if $derep.genome_info:
                --genome-info $derep.genome_info
            #end if
            #if $derep.min_completeness:
                --min-completeness $derep.min_completeness
            #end if
            #if $derep.max_contamination:
                --max-contamination $derep.max_contamination
            #end if
            #if $derep.dereplication_ani:
                --dereplication-ani $derep.dereplication_ani
            #end if
            #if $derep.dereplication_aligned_fraction:
                --dereplication-aligned-fraction $derep.dereplication_aligned_fraction
            #end if
            #if $derep.dereplication_fragment_length:
                --dereplication-fragment-length $derep.dereplication_fragment_length
            #end if
            #if $derep.dereplication_prethreshold_ani:
                --dereplication-prethreshold-ani $derep.dereplication_prethreshold_ani
            #end if
            #if $derep.dereplication_quality_formula:
                --dereplication-quality-formula $derep.dereplication_quality_formula
            #end if
            #if $derep.dereplication_precluster_method:
                --dereplication-precluster-method $derep.dereplication_precluster_method
            #end if
            #if $derep.dereplication_output_cluster_definition:
                --dereplication-output-cluster-definition .
            #end if
            #if $derep.dereplication_output_representative_fasta_directory_copy:
                --dereplication-output-representative-fasta-directory-copy .
            #end if

            $shar.sharded
            $shar.exclude_genoms_from_deshard

            #if $mapping.mapper:
                --mapper $mapping.mapper
            #end if
            $mapping.minimap2_reference_is_index

            #if $al_thresh.min_read_aligned_length:
                --min-read-aligned-length $al_thresh.min_read_aligned_length
            #end if
            #if $al_thresh.min_read_percent_identity:
                --min-read-percent-identity $al_thresh.min_read_percent_identity
            #end if
            #if $al_thresh.min_read_aligned_percent:
                --min-read-aligned-percent $al_thresh.min_read_aligned_percent
            #end if
            #if $al_thresh.min_read_aligned_length_pair:
                --min-read-aligned-length-pair $al_thresh.min_read_aligned_length_pair
            #end if
            #if $al_thresh.min_read_percent_identity_pair:
                --min-read-percent-identity-pair $al_thresh.min_read_percent_identity_pair
            #end if
            #if $al_thresh.min_read_aligned_percent_pair:
                --min-read-aligned-percent-pair $al_thresh.min_read_aligned_percent_pair
            #end if
            $al_thresh.proper_pairs_only
            $al_thresh.exclude_supplementary

            #if $cov.methods:
                --methods ${ str($cov.methods).replace(","," ") }
            #end if
            #if $cov.min_covered_fraction:
                --min-covered-fraction $cov.min_covered_fraction
            #end if
            #if $cov.contig_end_exclusion:
                --contig-end-exclusion $cov.contig_end_exclusion
            #end if
            #if $cov.trim_min:
                --trim-min $cov.trim_min
            #end if
            #if $cov.trim_max:
                --trim_max $cov.trim_max
            #end if

            #if $out.output_format:
                --output-format $out.output_format
            #end if
            $out.no_zeros
            -o output.tsv
            --threads \${GALAXY_SLOTS:-1}

    ]]></command>
    <inputs>
        <expand macro="reads" />
        <conditional name="genome">
            <param name="ref_or_gen" type="select" multiple="true" label="Select if you want to specify genome file(s) or a FASTA reference file or both. NOTE: If genomic FASTA files are specified, then reference is not needed as a reference FASTA file can be derived by concatenating input genomes. However, while not necessary, reference can be specified if an alternate reference sequence set is desired.">
                <option value="genomic" selected="true">genome file(s)</option>
                <option value="reference">reference fasta file(s)</option>
            </param>
            <when value="genomic">
                <conditional name="genomic">
                <param type="select" label="Reference genome source" name="source">
                    <option value="history" selected="true">History</option>
                    <option value="builtin">Built-in</option>
                </param>
                <when value="history">
                    <param type="data" name="fasta_history" multiple="true" label="Single FASTA file of contigs" format="fasta" />
                </when>
                <when value="builtin">
                    <param type="select" name="fasta_builtin" multiple="true" label="Reference genome">
                        <options from_data_table="all_fasta" />
                    </param>
                </when>
                </conditional>
            </when>
            <when value="reference">
                <section name="ref" title="Optional Reference FASTA-file" expanded="false">
                    <conditional name="ref_genome">
                        <param type="select" label="Reference genome source" name="ref_source">
                            <option value="history" selected="true">History</option>
                            <option value="builtin">Built-in</option>
                        </param>
                        <when value="history">
                            <param type="data" name="ref_fasta_history" multiple="true" label="Single FASTA file of contigs" format="fasta" />
                        </when>
                        <when value="builtin">
                            <param type="select" name="ref_fasta_builtin" multiple="true" label="Reference genome">
                                <options from_data_table="all_fasta" />
                            </param>
                        </when>
                    </conditional>
                    <param type="boolean" name="ref_as_index" truevalue="--minimap2-reference-is-index" falsevalue="" optional="true" label="Treat reference as a minimap2 database, not as a FASTA file." />
                    <param type="text" name="separator" optional="true" value="^[.,+*#&quot;&apos;&gt;&lt;§$%&amp;~\\/\\\\\`´ ^°\\-_;:?=|]$" label="Character, that separates genome names from contig names in the reference file." >
                        <sanitizer>
                            <valid initial="string.printable">
                            </valid>
                        </sanitizer>
                    </param>
                    <param type="boolean" name="single_genome" truevalue="--single-genome" falsevalue="" optional="true" label="Treat the reference file as single genome" />
                    <param type="data" name="genome_definition" format="tsv" optional="true" label="File containing newline-separated list of genome_name and contig, separated by tab, to define the genome of each contig." />
                </section>
            </when>
        </conditional>

        <section name="derep" title="Dereplication" expanded="true">
            <param name="dereplicate" label="Do genome dereplication via average nucleotide identity (ANI) - choose a genome to represent all within a small distance, using Dashing for preclustering and FastANI for final ANI calculation. When this flag is used, dereplication occurs transparently through the Galah method (https://github.com/wwood/galah)" type="boolean" truevalue="--dereplication" falsevalue="" optional="true" />
            <param name="checkm_tab_table" type="data" format="tsv" optional="true" label="CheckM tab table (i.e. the output of checkm .. --tab_table -f PATH ..) for defining genome quality, which is used both for filtering and to rank genomes during clustering." />
            <param name="genome_info" type="data" format="tsv" optional="true" label="dRep style genome info table for defining quality." />
            <param name="min_completeness" type="float" optional="true" min="0" max="1" label="Ignore genomes with less completeness than this percentage." />
            <param name="max_contamination" type="float" optional="true" min="0" max="1" label="Ignore genomes with more contamination than this percentage." />
            <param name="dereplication_ani" type="float" optional="true" min="0" label="Overall ANI level to dereplicate at with FastANI. default: 99" />
            <param name="dereplication_aligned_fraction" type="float" optional="true" min="0" label="Min aligned fraction of two genomes for clustering. default: 50" />
            <param name="dereplication_fragment_length" type="float" optional="true" min="0" label="Length of fragment used in FastANI calculation (i.e. --fragLen). default: 3000" />
            <param name="dereplication_prethreshold_ani" type="float" optional="true" min="0" label="Require at least this dashing-derived ANI for preclustering and to avoid FastANI on distant lineages within preclusters. default: 95" />
            <param type="select" name="dereplication_quality_formula" optional="true" label="Scoring function for genome quality [default: Parks2020_reduced]. One of:">
                <option value="Parks2020-reduced">(default) A quality formula described in Parks et. al. 2020 https://doi.org/10.1038/s41587-020-0501-8 (Supplementary Table 19) but only including those scoring criteria that can be calculated from the sequence without homology searching: completeness-5*contamination-5*num_contigs/100-5*num_ambiguous_bases/100000</option>
                <option value="completeness-4contamination">completeness-4*contamination</option>
                <option value="completeness-5contamination">completeness-5*contamination</option>
                <option value="dRep">completeness-5*contamination+contamination*(strain_heterogeneity/100)+0.5*log10(N50)</option>
            </param>
            <param type="select" name="dereplication_precluster_method" optional="true" label="method of calculating rough ANI for dereplication. 'dashing' for HyperLogLog, 'finch' for finch MinHash. default: dashing">
                <option value="dashing">HyperLogLog</option>
                <option value="finch">finch MinHash</option>
            </param>
            <param name="dereplication_output_cluster_definition" type="boolean" optional="true" label="Output a file of representative TAB member lines." />
            <param name="dereplication_output_representative_fasta_directory_copy" type="boolean" optional="true" label="Output representative genomes" />
        </section>
        <section name="shar" title="Sharding" expanded="false">
            <param name="sharded" type="boolean" optional="true" truevalue="--sharded" falsevalue="" label="If -b/--bam-files was used: Input BAM files are read-sorted alignments of a set of reads mapped to multiple reference contig sets. Choose the best hit for each read pair. Otherwise if mapping was carried out: Map reads to each reference, choosing the best hit for each pair." />
            <param name="exclude_genoms_from_deshard" type="boolean" optional="true" truevalue="--exclude-genoms-from-deshard" falsevalue="" label="Ignore genomes whose name appears in this newline-separated file when combining shards." />
        </section>
            <expand macro="mapping"/>
            <expand macro="al_thresh"/>
            <expand macro="coverage"/>
            <expand macro="out"/>
    </inputs>
    <outputs>
        <data name="output1" format="tsv" from_work_dir="./output.tsv"/>
        <data name="cluster-definition" format="tsv" />
    </outputs>
    <tests>
        <test>
            <conditional name="reads">
                <param name="read_type" value="paired"/>
                <param name="read1" value="test1.fastq.gz"/>
                <param name="read2" value="test2.fastq.gz"/>
            </conditional>
            <conditional name="genome">
                <param name="ref_or_gen" value="genomic"/>
                <conditional name="genomic">
                    <param name="source" value="history"/>
                    <param name="fasta_history" value="reference1.fasta,reference2.fasta"/>
                </conditional>
            </conditional>
            <output name="output1" ftype="tsv">
                <assert_contents>
                    <has_text text="unmapped"/>
                    <has_text text="100"/>
                    <has_n_lines n="4"/>
                </assert_contents>
            </output>
        </test>
        <test>
            <conditional name="reads">
                <param name="read_type" value="paired_collection"/>
                <param name="paired_reads">
                    <collection type="paired">
                        <element name="forward" value="reads_for_seq1_and_seq2.1.fq.gz"/>
                        <element name="reverse" value="reads_for_seq1_and_seq2.2.fq.gz"/>
                    </collection>
                </param>
                <param name="single" value="reads_for_seq1_and_seq2.fna"/>
            </conditional>
            <section name="cov">
                <param name="methods" value="relative_abundance,mean,variance"/>
            </section>
            <conditional name="genome">
                <param name="ref_or_gen" value="reference"/>
                <section name="ref">
                    <conditional name="ref_genome">
                        <param name="ref_source" value="history"/>
                        <param name="ref_fasta_history" value="7seqs.fna"/>
                    </conditional>
                    <param name="separator" value="~"/>
                </section>
            </conditional>
            <output name="output1" file="test2.tsv" ftype="tsv"/>
        </test>
    </tests>
    <help><![CDATA[
        TODO: Fill in help.
    ]]></help>
</tool>