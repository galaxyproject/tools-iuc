<macros>
    <token name="@FILTNORM_CHEETAH@"><![CDATA[
## Perform do.filter
use.filtnormconf = TRUE

## Perform do.cluster, do.outlier, do.clustmap, mkgenelist
use.cluster = FALSE

in.table = read.table(
    '${intable}',
    stringsAsFactors = F,
    na.strings=c("NA", "-", "?", "."),
    sep='\t',
    header=TRUE,
    row.names=1
)

## Hidden flag to use test data instead
## see: test-data/use.intestinal

use.test.data = (names(in.table)[1] == "test")

sc = NULL
if (use.test.data) {
  sc = SCseq(intestinalData)
  message("Loading test data from library")
} else {
  sc = SCseq(in.table)
}


filt = formals(filterdata)
filt.ccc = formals(CCcorrect)
filt.use.ccorrect = FALSE
filt.lbatch.regexes = NULL

filt.geqone = as.logical( '$filt.hist_geq_one' )
filt\$mintotal = as.integer( '$filt.mintotal' )
filt\$minexpr = as.integer( '$filt.minexpr' )
filt\$minnumber = as.integer( '$filt.minnumber' )
#if str($filt.use.def) == "no":
filt\$knn = as.integer( '$filt.use.knn' )
filt\$ccor = as.numeric( '$filt.use.ccor' )
filt\$bmode = as.character( '$filt.use.bmode' )
    #if $filt.use.LBatch_regexes:
filt.lbatch.regexes = string2textvector( '$filt.use.LBatch_regexes' )
    #end if
    #if $filt.use.CGenes:
filt\$CGenes = string2textvector( '$filt.use.CGenes' )
    #end if
    #if $filt.use.FGenes:
filt\$FGenes = string2textvector( '$filt.use.FGenes' )
    #end if
    #if str($filt.use.ccc.use) == "yes"
filt.use.ccorrect = TRUE
        #if $filt.use.ccc.vset:
filt.ccc\$vset = string2textvector( '$filt.use.ccc.vset' )
        #end if
        #if $filt.use.ccc.ncomp:
filt.ccc\$nComp = as.integer( '$filt.use.ccc.ncomp' )
        #end if
filt.ccc\$pvalue = as.numeric( '$filt.use.ccc.pvalue' )
filt.ccc\$quant = as.numeric( '$filt.use.ccc.quant' )
filt.ccc\$dimR = as.logical( '$filt.use.ccc.dimr' )
filt.ccc\$mode = as.character( '$filt.use.ccc.mode.value' )
filt.ccc\$logscale = as.logical( '$filt.use.ccc.logscale' )
    #end if
#end if

out.pdf = '${outpdf}'
out.rdat = '${outrdat}'
out.table = '${outtable}'

]]></token>
    <token name="@CLUSTER_CHEETAH@"><![CDATA[

in.rdat = readRDS('${inputrds}')

sc = in.rdat

## Perform do.filter
use.filtnormconf = FALSE

## Perform do.cluster, do.outlier, do.clustmap, mkgenelist
use.cluster = TRUE


clust.compdist = formals(compdist)
clust.clustexp = formals(clustexp)
clust.compdist\$metric = as.character( '$clust.metric' )
clust.clustexp\$FUNcluster = as.character( '$clust.funcluster' )

#if str($clust.use.def) == "no":

clust.compdist\$FSelect = as.logical( '$clust.use.fselect' )
    #if $clust.use.knn:
clust.compdist\$knn = as.integer( '$clust.use.knn' )
    #end if
clust.clustexp\$sat = as.logical( '$clust.use.sat' )
    #if $clust.use.samp:
clust.clustexp\$samp = as.integer( '$clust.use.samp' )
    #end if
    #if $clust.use.cln:
clust.clustexp\$cln = as.integer( '$clust.use.cln' )
clust.clustexp\$clustnr = as.integer( '$clust.use.clustnr' )
clust.clustexp\$bootnr = as.integer( '$clust.use.bootnr' )
##clust.clustexp\$rseed = as.integer( '$clust.use.rseed' )
    #end if
#end if

outlier.use.randomforest = FALSE
outlier.findoutliers = formals(findoutliers)
outlier.clustheatmap = formals(clustheatmap)
outlier.rfcorrect = formals(rfcorrect)

outlier.findoutliers\$outminc = as.integer( '$outlier.outminc' )
outlier.findoutliers\$outlg = as.integer( '$outlier.outlg' )
outlier.rfcorrect\$final = as.logical( '$outlier.final' )

#if str($outlier.use.def) == "no":
    #if $outlier.use.nbtree:
outlier.rfcorrect\$nbtree = as.integer( '$outlier.use.nbtree' )
    #end if
outlier.findoutliers\$probthr = as.numeric( '$outlier.use.probthr' )
outlier.findoutliers\$outdistquant = as.numeric( '$outlier.use.outdistquant' )
##outlier.rfcorrect\$rfseed = as.integer( '$outlier.use.rfseed' )
outlier.rfcorrect\$nbfactor = as.integer( '$outlier.use.nbfactor' )
#end if

cluster.compumap = formals(compumap)
cluster.comptsne = formals(comptsne)
cluster.compfr = formals(compfr)

cluster.comptsne\$perplexity = as.integer( '$tsne.perplexity' )
cluster.compfr\$knn = as.integer( '$tsne.knn' )
cluster.compumap\$n_neighbors = as.integer( '$tsne.umap_nn' )
#if str($tsne.use.def) == "no":
cluster.comptsne\$initial_cmd = as.logical( '$tsne.use.initial_cmd' )
cluster.comptsne\$rseed = as.integer( '$tsne.use.rseed_tsne' )
cluster.compfr\$rseed = as.integer( '$tsne.use.rseed_fr' )
cluster.compumap\$n_epochs = as.integer( '$tsne.use.umap_epochs' )
cluster.compumap\$min_dist = as.numeric( '$tsne.use.umap_min_dist' )
#end if

genelist.tablelim = as.integer( '$extra.tablelim' )
genelist.plotlim = as.integer( '$extra.plotlim' )
genelist.foldchange = as.integer( '$extra.foldchange' )
genelist.pvalue = as.numeric( '$extra.pvalue' )

out.pdf = '${outpdf}'
out.rdat = '${outrdat}'
out.genelist = '${outgenelist}'
out.assignments = '${outassignments}'
out.log = '${outlog}'

]]>
    </token>
    <token name="@INSPECTCLUSTERS_CHEETAH@"><![CDATA[
in.rdat = readRDS('${inputrds}')

perform.plotting = FALSE
perform.symbolmap = FALSE
perform.genesofinterest = FALSE
perform.diffgene = FALSE

#if str($plotgen.do_opt) == "yes":
perform.plotting = TRUE
plotting.cln = string2numericvector( '$plotgen.clusts_plot' )
#end if

#if str($plotsym.do_opt) == "yes":
perform.symbolmap = TRUE
plotsym = formals(plotsymbolsmap)
plotsym.use.typeremoveregex = NULL
plotsym.use.typeremoveregex.subselect = NULL
plotsym.use.typeremoveregex = as.character( '$plotsym.types_regex' )
    #if str($plotsym.use.def) == "no":
plotsym\$fr = as.logical( '$plotsym.use.fr' )
        #if $plotsym.use.subset_regex:
plotsym.use.typeremoveregex.subselect = as.character( '$plotsym.use.subset_regex' )
        #end if
    #end if
#end if

#if str($gois.do_opt) == "yes":
perform.genesofinterest = TRUE
plotexp = formals(plotexpmap)
plotmarkg = formals(plotmarkergenes)

inspect.goi.use.genes = string2textvector( '$gois.inspect_goi_genes' )
plotexp\$g = inspect.goi.use.genes
plotmarkg\$genes = inspect.goi.use.genes

    #if $gois.inspect_goi_cells:
inspect.goi.use.cells = as.character( '$gois.inspect_goi_cells' )
plotexp\$cells = inspect.goi.use.cells
plotmarkg\$cells = inspect.goi.use.cells
    #end if
    #if str($gois.use.def) == "no":
inspect.goi.use.imputed = as.logical( '$gois.use.inspect_goi_imputed' )
plotexp\$imputed = inspect.goi.use.imputed
plotmarkg\$imputed = inspect.goi.use.imputed
        #if $gois.use.plotmarkg_cl
plotmarkg\$cl = string2numericvector( '$gois.use.plotmarkg_cl' )
        #end if
        #if $gois.use.plotmarkg_cap
plotmarkg\$cap = as.integer( '$gois.use.plotmarkg_cap' )
        #end if
        #if $gois.use.plotmarkg_flo
plotmarkg\$flo = as.integer( '$gois.use.plotmarkg_flo' )
        #end if
        #if $gois.use.plotmarkg_samples
plotmarkg\$samples = as.character( '$gois.use.plotmarkg_samples' )
        #end if
        #if $gois.use.plotexp_n
plotexp\$n = as.character( '$gois.use.plotexp_n' )
        #end if
plotmarkg\$cthr = as.integer( '$gois.use.plotmarkg_cthr' )
plotmarkg\$order.cells = as.logical( '$gois.use.plotmarkg_order_cells' )
plotmarkg\$aggr = as.logical( '$gois.use.plotmarkg_aggr' )
plotmarkg\$norm = as.logical( '$gois.use.plotmarkg_norm' )
plotmarkg\$cluster_cols = as.logical( '$gois.use.plotmarkg_cluster_cols' )
plotmarkg\$cluster_rows = as.logical( '$gois.use.plotmarkg_cluster_rows' )
plotmarkg\$cluster_set = as.logical( '$gois.use.plotmarkg_cluster_set' )
    #end if
#end if

#if str($diffgtest.do_opt) == "yes":
plotdiffg = formals(plotdiffgenesnb)

perform.diffgene = TRUE
plotdiffg\$Aname = '$diffgtest.set_a.name_set'
plotdiffg\$Bname = '$diffgtest.set_b.name_set'
plotdiffg\$... = NULL

gfdat.A.use = list()
gfdat.B.use = list()

gfdat.A.use\$manual = NULL
gfdat.A.use\$regex = NULL
gfdat.A.use\$cln = NULL
gfdat.B.use\$manual = NULL
gfdat.B.use\$regex = NULL
gfdat.B.use\$cln = NULL

    #if str($diffgtest.set_a.meth.type) == "cln":
gfdat.A.use\$cln = string2numericvector( '$diffgtest.set_a.meth.selector' )
    #else if str($diffgtest.set_a.meth.type) == "regex":
gfdat.A.use\$regex = as.character( '$diffgtest.set_a.meth.selector' )
    #else if str($diffgtest.set_a.meth.type) == "manual":
gfdat.A.use\$manual = string2textvector( '$diffgtest.set_a.meth.selector' )
    #end if

    #if str($diffgtest.set_b.meth.type) == "cln":
gfdat.B.use\$cln = string2numericvector( '$diffgtest.set_b.meth.selector' )
    #else if str($diffgtest.set_b.meth.type) == "regex":
gfdat.B.use\$regex = as.character( '$diffgtest.set_b.meth.selector' )
    #else if str($diffgtest.set_b.meth.type) == "manual":
gfdat.B.use\$manual = string2textvector( '$diffgtest.set_b.meth.selector' )
    #end if

    #if str($diffgtest.use.def) == "no":
plotdiffg\$pthr = as.numeric( '$diffgtest.use.plotdiffg_pthr' )
plotdiffg\$padj = as.logical( '$diffgtest.use.plotdiffg_padj' )
plotdiffg\$lthr = as.integer( '$diffgtest.use.plotdiffg_lthr' )
plotdiffg\$show_names = as.logical( '$diffgtest.use.plotdiffg_show_names' )
        #if $diffgtest.use.plotdiffg_mthr
plotdiffg\$mthr = as.numeric( '$diffgtest.use.plotdiffg_mthr' )
        #end if
    #end if
#end if

out.pdf='${outpdf}'
    ]]></token>
    <token name="@TRAJECTORY_CHEETAH@"><![CDATA[

in.rdat = readRDS('${inputrds}')

pstc.projc = formals(projcells)
pstc.projc\$knn = as.integer( '$projcell.knn' )
pstc.projc\$cthr = as.integer( '$projcell.cthr' )
#if str($projcell.use.def) == "no":
pstc.projc\$nmode = as.logical( '$projcell.use.nmode' )
pstc.projc\$fr = as.logical( '$projcell.use.fr' )
#end if

pstc.projb = formals(projback)
pstc.projb\$pdishuf = as.integer( '$projback.pdishuf' )
#if str($projback.use.def) == "no":
pstc.projb\$fast = as.logical( '$projback.use.fast' )
pstc.projb\$rseed = as.integer( '$projback.use.rseed' )
#end if

pstc.comppval = formals(comppvalue)
pstc.comppval\$pthr = as.numeric( '$comppval.pthr' )
pstc.comppval\$sensitive = as.logical( '$comppval.sensitive' )

pstc.plotgraph = formals(plotgraph)
pstc.plotgraph\$showCells = as.logical( '$plotgraph.showcells' )
pstc.plotgraph\$scthr = as.numeric( '$plotgraph.scthr' )
#if str($plotgraph.use.def) == "no":
##pstc.plotgraph\$showTsne = as.logical( '$plotgraph.use.showtsne' )
pstc.plotgraph\$tp = as.numeric( '$plotgraph.use.tp' )
#end if

pstc.compscore = formals(compscore)
pstc.compscore\$nn = as.integer( '$compscore.nn' )
pstc.compscore\$scthr = as.numeric( '$compscore.scthr' )

out.pdf='${outpdf}'
out.rdat='${outrdat}'
    ]]></token>
    <token name="@INSPECTTRAJECTORIES_CHEETAH@"><![CDATA[
in.rdat = readRDS('${inputrds}')

perform.stemID = FALSE
perform.fateID = FALSE
perform.fateID.sominspect = FALSE

#if str($trjsid.basic.doit) == "yes"
perform.stemID = TRUE
trjsid.getproj = formals(getproj)

trjsid.numdiffgenes = 10
trjsid.getproj\$i = as.integer( '$trjsid.basic.i' )
trjsid.branchcells.ijk = string2numericvector( '$trjsid.basic.br' )

   #if str($trjsid.basic.use.def) == "no":

trjsid.getproj\$zscore = as.logical( '$trjsid.basic.use.zscore' )
trjsid.numdiffgenes = as.integer( '$trjsid.basic.use.ndiffgenes' )

   #end if
#end if

#if str($trjfid.basic.doit) == "yes":
perform.fateID = TRUE
trjfid.cellsfrom = formals(cellsfromtree)
trjfid.filterset = formals(filterset)
trjfid.getsom = formals(getsom)
trjfid.procsom = formals(procsom)
trjfid.plotheat = list()

trjfid.cellsfrom\$z = string2numericvector( '$trjfid.basic.cellsfromz' )
    #if str($trjfid.basic.use.def) == "no":

trjfid.filterset\$minexpr = as.integer( '$trjfid.basic.use.filterset_minexpr' )
trjfid.filterset\$minnumber = as.integer( '$trjfid.basic.use.filterset_minnumber' )
trjfid.getsom\$nb = as.numeric( '$trjfid.basic.use.getsom_nb' )
trjfid.getsom\$alpha = as.numeric( '$trjfid.basic.use.getsom_alpha' )
trjfid.procsom\$corthr = as.numeric( '$trjfid.basic.use.procsom_corthr' )
trjfid.procsom\$minsom = as.integer( '$trjfid.basic.use.procsom_minsom' )
trjfid.plotheat\$xgrid = as.logical( '$trjfid.basic.use.plotheat_xgrid' )
trjfid.plotheat\$ygrid = as.logical( '$trjfid.basic.use.plotheat_ygrid' )
trjfid.plotheat\$xlab = as.logical( '$trjfid.basic.use.plotheat_xlab' )
    #end if

    #if str($trjfid.basic.som.doit) == "yes":
perform.fateID.sominspect = TRUE

trjfidsomi = list()
        #if str($trjfid.basic.som.use_genes.typer) == "genelist":
trjfidsomi.use.genes = string2textvector( '$trjfid.basic.som.use_genes.use_genes' )
        #else if str($trjfid.basic.som.use_genes.typer) == "cln":
trjfidsomi.use.genes = as.integer( '$trjfid.basic.som.use_genes.use_genes' )
        #end if

trjfidsomi.use.types = '$trjfid.basic.som.use_types'
trjfidsomi\$name = '$trjfid.basic.som.title'

        #if str($trjfid.basic.som.use.def) == "no":
trjfidsomi\$cluster = as.logical( '$trjfid.basic.som.use.cluster' )
trjfidsomi\$alpha = as.numeric( '$trjfid.basic.som.use.alpha' )
        #end if
    #end if
#end if

out.pdf = '${outpdf}'
out.diffgenes = '${outdiffgenes}'

]]></token>
</macros>
