<tool id="raceid_main" name="RaceID differential gene expression analysis" version="@VERSION@.0">
    <description>
 * Perform filtering upon a count matrix and optionally generate an R object
 * Perform k-means clustering and produce a heatmap
 * Detect outlier cells and genes
 * Produces multiple tSNE plots of cell clusters with highlighting for specific features such as genes of interest and known cell types
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
    ## Filter
    Rscript '@SCRIPT_DIR@/raceID_filter.R' '@SCRIPT_DIR@' '$rconf_source_filter' &&

    ## Kmeans
    Rscript '@SCRIPT_DIR@/raceID_kmeans_heatmap.R' '@SCRIPT_DIR@' '$rconf_source_kmeans' &&

    mkdir '${out_html.files_path}' &&
    cp plot_*.png '${out_html.files_path}' &&

    echo '<html><head><title>RaceID k-means</title>
    <body>
    <img src="plot_gap.png" ><br />
    <img src="plot_jaccard.png" ><br />
    <img src="plot_silhouette.png" ><br />
    <img src="plot_clustheatmap.png" ><br />
    </body>
    </html>' > '$out_html';

    ## Outlier -- relies on kmeans
    #if $do_outlier
    Rscript '@SCRIPT_DIR@/raceID_outlierdetect.R' '@SCRIPT_DIR@' '$rconf_source_outlier' &&

    mkdir '${out_html.files_path}' &&
    cp plot_*.png '${out_html.files_path}' &&

    echo '<html><head><title>RaceID Outlier Detection</title>
    <body>
    <img src="plot_background.png" ><br />
    <img src="plot_sensitivity.png" ><br />
    <img src="plot_outlierprobs.png" ><br />
    </body>
    </html>' > '$out_html';
    #end if

    ## tSNE -- relies on kmeans and outlier
    #if $do_outlier and $do_tsne
    Rscript '@SCRIPT_DIR@/raceID_tsne.R' '@SCRIPT_DIR@' '$rconf_source_tsne' &&

    mkdir '${out_html.files_path}' &&
    cp plot_*.png '${out_html.files_path}' &&

    echo '<html><head><title>RaceID tSNE</title>
    <body>
    <h3>Initial k-means clusters</h3>
    <br /><img src="plot_initial.png" >
    <h3>Final clusters</h3>
    <br /><img src="plot_final.png" >
    <h3>Labelled</h3>
    <br /><img src="plot_labels.png" >
    <h3>Symbols</h3>
    <br /><img src="plot_symbols.png" >
    ' > '$out_html';

    #if $genexp_select.use_gexpr == "Yes":
        #for $gene_set in $genexp_select.geneset:
    echo "<h3>Expression for: [${gene_set.genes.value}]</h3>" >> '$out_html';
    echo "<br /><img src=\"plot_${gene_set.genes.value}\" >" >> '$out_html';  ## Comma within filename...
        #end for
    #end if
    echo '</body></html>' >> '$out_html';
    #end if

    ]]></command>

    <configfiles>
        <configfile name="rconf_source_filter">
            count_matrix = '$inp_count'
            filtering = as.logical( '$filtering.do_filter.value' )
            output_table = '$out_table'
            output_rdat = '$out_rdat'

            # Defaults
            control_genes_filter=""
            c_mintotal = 3000; c_minexpr = 5; c_maxexpr = 500; c_minnumber = 1;
            c_downsample = F; c_dsn = 1; c_rseed = 17000;
            
            #if $filtering.do_filter.value == "T":
            control_genes_filter = '$filtering.remove_nonendog.value'
                #if $filtering.default_filtering_select.do_filter_defaults.value == "advanced_options":            
            c_mintotal = as.integer( '$filtering.default_filtering_select.mintotal' )
            c_minexpr = as.integer( '$filtering.default_filtering_select.minexpr' )
            c_maxexpr = as.integer( '$filtering.default_filtering_select.maxexpr' )
            c_minnumber = as.integer( '$filtering.default_filtering_select.minnumber' )
                    #if $filtering.default_filtering_select.dsn:
            c_downsample = T;
            c_dsn = as.integer( '$filtering.default_filtering_select.dsn' )
                    #end if
            c_rseed = as.integer( '$filtering.default_filtering_select.filter_rseed' )
                #end if
            #end if
        </configfile>
        <configfile name="rconf_source_kmeans">
            sc = readRDS( '$inp_rdat' )
            output_rdat = '$out_rdat'
            c_metric = 'pearson'; c_cln = 0; dogap = T; c_clustnr = 20; bgap = 50;
            semethod = 'Tibs2001SEmax'; sefactor = .25; c_bootnr = 50; c_rseed = 17000;

            #if $clustering.use_cluster_defaults == "advanced_options":
            c_metric = '$clustering.metric'
            c_cln = as.integer( '$clustering.cln' )
                #if $clustering.gapstats.dogap.value == "T":
            dogap = as.logical( '$clustering.gapstats.dogap' )
            c_clustnr = as.integer( '$clustering.gapstats.clustnr' )
            bgap = as.integer( '$clustering.gapstats.bgap' )
            semethod = '$clustering.gapstats.semethod.value'
            sefactor = as.numeric( '$clustering.gapstats.sefactor' )
                #end if
            c_bootnr = as.integer( '$clustering.bootnr' )
            c_rseed = as.integer( '$clustering.kmeans_rseed' )
            #end if
            generate_final_rdata = as.logical( '$final_rdata.value' )
        </configfile>        
        <configfile name="rconf_source_tsne" >
            sc = readRDS( '$inp_rdat' )
            output_rdat = '$out_rdat'
            regex_val = ""
            c_rseed = '$tsne_rseed'
            gene_sets = ""
            #if $genexp_select.use_gexpr == 'Yes':
            gene_sets = '#for $gns in $genexp_select.geneset# $gns.genes.value _split_ #end for#'
            regex_val = '$genexp_select.regex'
            #end if
            final_rdata = as.logical( '$final_rdata' )
        </configfile>
        <configfile name="rconf_source_outlier">
            sc = readRDS( '$inp_rdat' )
            output_rdat = '$out_rdat'
            output_table= '$out_table'
            # set defaults
            c_outminc = 5; c_outlg = 2; c_probthr = 1e-3; c_outdistquant = 0.75;

            #if $outliers_select.use_outlier_defaults == 'advanced_options':
            c_outminc = as.integer( '$outliers_select.outminc' )
            c_outlg = as.integer( '$outliers_select.outlg' )
            c_probthr = as.numeric( '$outliers_select.probthr' )
            c_outdistquant = as.numeric( '$outliers_select.probthr' )
            #end if
            generate_final_rdata = as.logical( '$final_rdata.value' )
        </configfile>        
    </configfiles>
    <!-- Filter -->
    <inputs>
        <section name="section_filter" title="Filtering and Normalisation" >
            <param name="inp_count" type="data" format="tsv" label="Count matrix" help="A spreadsheet file with the first row indicating cell IDs, and the first column indicating transcript or gene IDs" />

            <conditional name="filtering" >
                <param name="do_filter" type="select" label="Perform filtering?" help="An R data object will be generated in both cases."  >
                    <option value="T" selected="true" >Yes</option>
                    <option value="F" >No</option>
                </param>
                <when value="F" />
                <when value="T" >
                    <param name="remove_nonendog" type="text" label="Control gene name prefixes" help="If ERCC or other non-endogenous spike-in RNAs are within the data, please specify their prefixes (e.g. 'ERCC, HK00') in order to filter them out. (Leave blank if control genes were not used in the experiment.)" />
                    <conditional name="default_filtering_select" >
                        <param name="do_filter_defaults" type="select" label="Parameters" >
                            <option value="use_defaults" selected="true" >Use Defaults</option>
                            <option value="advanced_options" >Advanced Options</option >
                        </param>
                        <when value="use_defaults" />
                        <when value="advanced_options" >
                            <param name="mintotal" type="integer" value="3000" min="1" label="Minimum total transcripts" help="Discard cells with less than this number of total transcripts before normalisation." />
                            <param name="minexpr" type="integer" value="5" min="1" label="Minimum expressed genes" help="Discard genes that do not express a minimum of this number of transcripts after normalisation."/>
                            <param name="maxexpr" type="integer" value="500" min="0" label="Maximum expressed genes" help="Discard genes that express more than this number of transcripts after normalisation. Useful if genes have oversaturated counts derived from UMI data. Set to 0 to disable this step." />

                            <param name="minnumber" type="integer" value="1" label="Minimum Cells" help="Discard genes that do not have the minimum expressed transcripts in at least this number of cells" />

                            <param name="dsn" type="integer" value="1" min="1" optional="true" label="Downsample counts" help="Average transcripts across this many samples. If this is set to 1, then sampling noise should be comparable across cells. For higher values, the data approximates median normalisation." />
                            <param name="filter_rseed" type="integer" value="17000" min="0" label="Seed value (for reproducibility)" />
                        </when>
                    </conditional>
                </when>
            </conditional>
            <param name="filter_table_output" type="boolean" checked="false" label="Generate output table of filtered matrix?" />
        </section>

        <!-- Kmeans -->
        <section name="section_kmeans" title="Clustering (k-means)" >
            <param name="inp_rdat" type="data" format="rdata" label="Count matrix (R SCseq object)" help="This file can be generated from a spreadsheet via the RaceID filter tool." />
            <conditional name="clustering">
                <param name="use_cluster_defaults" type="select" label="Clustering Parameters" >
                    <option value="use_defaults" selected="true" >Use Defaults</option >
                    <option value="advanced_options">Advanced Options</option>
                </param>
                <when value="use_defaults" />
                <when value="advanced_options" >
                    <param name="metric" type="select" label="Distance metric">
                        <option value="pearson" selected="true" />
                        <option value="spearman" />
                        <option value="kendall" />
                        <option value="euclidean" />
                        <option value="maximum" />
                        <option value="manhattan" />
                        <option value="canberra" />
                        <option value="binary" />
                        <option value="minkowski" />
                    </param>

                    <param name="cln" type="integer" value="0" min="0" label="Number of clusters for k-means" help="Leave as zero to automatically determine the number based on gap statistics" />

                <conditional name="gapstats">
                    <param name="dogap" type="select" label="Use gap statistics to determine clusters" >
                        <option value="T" selected="true" >Yes</option>
                        <option value="F" >No</option>
                    </param>

                    <when value="F" />
                    <when value="T" >
                        <param name="clustnr" type="integer" value="2" min="0" label="Maximum number of clusters for the computation of the gap statistic" help="If more major cell types are expected, a higher number than 2 should bde chosen." />
                        <param name="bgap" type="integer" value="50" min="1" label="Number of bootstraps to run the gap statistic calculation" />
                        <param name="semethod" type="select" label="Method used for determining first local maximum" >
                            <option value="Tibs2001SEmax" selected="true" />
                            <option value="globalmax" />
                            <option value="firstmax" />
                            <option value="firstSEmax" />
                            <option value="globalSEmax" />
                        </param>

                        <param name="sefactor" type="float" value="0.25" min="0.0001" max="1" label="Fraction of the standard deviation that the local maximum must differ from neighbouring points." />
                    </when>
                </conditional>

                <param name="bootnr" type="integer" value="50" min="1" label="Number of bootstraps for clustering" />
                <param name="kmeans_rseed" type="integer" value="17000" min="1" label="Seed value (for reproducibility)" />
                </when>
            </conditional>
        </section>
        <!-- Outlier -->
        <section name="section_outlier" title="Outlier Detection" >
            <param name="inp_rdat" type="data" format="rdata" label="Count matrix (R SCseq object)" help="This file can be generated from a spreadsheet via the RaceID filter tool, but should preferably be the output of the RaceID kmeans tool." />
            <conditional name="outliers_select">
                <param name="use_outlier_defaults" type="select" label="Outlier Parameters" >
                    <option value="use_defaults" selected="true" >Use Defaults</option>
                    <option value="advanced_options" >Advanced Options</option>
                </param>
                <when value="use_defaults" />
                <when value="advanced_options" >
                    <param name="outminc" type="integer" value="5" min="1" label="Expression cutoff threshold for outlier genes"  />
                    <param name="probthr" type="float" value="1e-3" min="1e-8" max="1" label="Probability threshold of observing a given gene expression level in a cell" help="If lower than this cutoff, the cell is considered an outlier for this gene." />
                    <param name="outlg" type="integer" value="2" min="1" label="Minimal number of outlier genes required to flag an outlier cells" />
                    <param name="outdistquant" type="select" label="Merge cells into outlier clusters if their similarity exceeds this quantile in a similarity distribution for all cell pairs" >
                        <option value="0.25">first (0.25)</option>
                        <option value="0.50">second (0.50)</option>
                        <option value="0.75">third (0.75)</option>
                    </param>
                </when>
            </conditional>
        </section>
        <section name="section_tsne" title="tSNE plots" >
            <!-- tSNE -->
            <param name="inp_rdat" type="data" format="rdata" label="Input R SCset object (containing a count matrix with clusters)" help="This object can accept outputs from either the RaceID filter tool, or (more preferably) the RaceID diffgene tool." />
            <conditional name="genexp_select" >
                <param name="use_gexpr" type="select" label="Highlight the expression of a set of (related) genes over all clusters?" >
                    <option value="Yes" />
                    <option value="No" selected="true" />
                </param>
                <when value="No" />
                <when value="Yes" >
                    <repeat name="geneset" title="Gene sets" >
                        <param name="genes" type="text" label="Gene(s) of interest" help="e.g. 'Apoa1__chr9+Apoa1bp__chr6'" >
                            <sanitizer invalid_char="" >
                                <valid initial="string.letters,string.digits">
                                    <add value="+" /><add value="_" /><add value="-" />
                                </valid>
                            </sanitizer>
                        </param>
                    </repeat>
                    <param name="regex" type="text" value="" label="Regular expression to apply over cell labels to identify cell types" help="e.g. for barcodes [ cl_1_ACCAG, cl_1_ACGGA, cl_2_TTAC, ... ] can be grouped into [ cl_1, cl_2, ... ] by the expression: '_[ACTG]+', which removes the last '_' and any following characters belonging to A C T or G." >
                        <sanitizer invalid_char="" >
                            <valid initial="string.printable" />
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <param name="tsne_rseed" type="integer" min="1" value="15555" label="Seed (for reproducibility)" />
            <expand macro="rdata_out" />
        </section>
    </inputs>

    <outputs>
        <!-- Filter -->
        <data name="out_table_filter" format_source="inp_count" label="${tool.name} on ${on_string}: Filtered Table" >
            <filter>filtering['do_filter'] == "T"</filter>
        </data>
        <expand macro="rdata_out_out" />
        <!-- Kmeans -->
        <data name="out_html_kmeans" format="html" label="${tool.name} on ${on_string}: Web Report" />
        <!-- Outlier -->
        <data name="out_html_outlier" format="html" label="${tool.name} on ${on_string}: Web Report" />
        <data name="out_table_outlier" format="tsv" label="${tool.name} on ${on_string}: Outliers" />
        <!-- TSNE -->
        <data name="out_html_tsne" format="html" label="${tool.name} on ${on_string}: Web Report" />
    </outputs>
    
    <tests>
        <!-- Filter -->
        <test>
            <param name="inp_count" value="transcript_counts_intestine_sub.tsv" />
            <param name="do_filter" value="F" />
            <output name="out_rdat" value="trans_filter_none.rds" />
        </test>
        <test>
            <param name="inp_count" value="transcript_counts_intestine_sub.tsv" />
            <param name="do_filter" value="T" />
            <param name="do_filter_defaults" value="advanced_options" />
            <param name="mintotal" value="10" />
            <param name="minexpr" value="1" />
            <param name="maxexpr" value="2000" />
            <param name="dsn" value="3" />
            <output name="out_table_filter" value="transcript_output.tsv" />
            <output name="out_rdat" value="trans_filter_ds.rds" />
        </test>    
        <!-- Kmeans -->
        <test>
            <!-- Auto gap, clustering defaults, produce R obj. -->
            <param name="inp_rdat" value="trans_filter_ds.rds" />
            <output name="out_rdat" value="trans_kmeans.rds" />
            <output name="out_html_kmeans" value="trans_kmeans1.html" />
        </test>
        <test>
            <!-- Set k-value, no gap, no R obj, metrics and bootrepl. -->
            <param name="inp_rdat" value="trans_filter_ds.rds" />
            <param name="genoutrdat" value="F" />
            <param name="use_cluster_defaults" value="advanced_options" />
            <param name="metric" value="manhattan" />
            <param name="cln" value="6" />
            <param name="dogap" value="F" />
            <param name="bootnr" value="10" />
            <output name="out_html_kmeans" value="trans_kmeans2.html" />
        </test>
        <test>
            <!-- Auto gap with gap params -->
            <param name="inp_rdat" value="trans_filter_ds.rds" />
            <param name="use_cluster_defaults" value="advanced_options" />
            <param name="clustnr" value="5" />
            <param name="bgap" value="10" />
            <param name="semethod" value="globalSEmax" />
            <param name="sefactor" value="0.6" />
            <output name="out_html_kmeans" value="trans_kmeans3.html" />
            <output name="out_rdat" value="trans_kmeans_2.rds" />
        </test>

        <!-- Outlier -->
        <test><!-- With reduced minc -->
            <param name="inp_rdat" value="trans_outlier_in.rds" />
            <param name="use_outlier_defaults" value="advanced_options" />
            <param name="outminc" value="1" />
            <output name="out_rdat" value="trans_outlier1.rds" />
            <output name="out_html_outlier" value="trans_outlier1.html" />
            <output name="out_table_outlier" value="trans_outlier1.tsv" />
        </test>
        <test><!-- No R out, other opts-->
            <param name="inp_rdat" value="trans_outlier_in.rds" />
            <param name="use_outlier_defaults" value="advanced_options" />
            <param name="outminc" value="1" />
            <param name="probthr" value="1e-5" />
            <param name="outlg" value="10" />
            <param name="outdistquant" value="0.50" />
            <output name="out_html_outlier" value="trans_outlier2.html" />
            <output name="out_table_outlier" value="trans_outlier2.tsv" />
        </test>

        <!-- TSNE -->
        <!-- <test> -->
        <!--     <param name="inp_rdat" value="trans_diffgene.rds" /> -->
        <!--     <output name="out_rdat" value="trans_tsne1.rds" /> -->
        <!--     <output name="out_html" value="trans_tsne1.html" /> -->
        <!-- </test> -->
        <test>
            <param name="inp_rdat" value="trans_diffgene.rds" />
            <param name="use_gexpr" value="Yes" />
            <repeat name="geneset">
                <param name="genes" value="4930415F15Rik__chr11+4930430F21Rik__chr15+4930429B21Rik__chr3" />
            </repeat>
            <repeat name="geneset">
                <param name="genes" value="4930425O10Rik__chr3+4930444A02Rik__chr8" />
            </repeat>
            <param name="regex" value="[^_]+__" />
            <output name="out_rdat" value="trans_tsne2.rds" />
            <output name="out_html_tsne" value="trans_tsne2.html" />
        </test>
    </tests>    

    <help><![CDATA[
!! Filtering module

This module takes a count matrix/spreadsheet with cellIDs as columns and geneIDs/transcriptIDs as rows, and filters based on standard single-cell RNA pre-processing methods (minimum/maximum transcript expression in a minimum of X number of cells).

A filtered matrix is produced as output, along with an R SCseq data object that can be passed as inputs into other downstream RaceID modules.

!! k-means Clustering
This module performs k-means clustering and plots gap statistics, jaccard similarity, silhoutte plots, and preliminary heatmap.

!! Outlier Detection
This module performs outlier detection by calibrating against a background noise model within each cluster, and searching for cells that fall outside of the transcript count distribution for that gene (modelled as a negative binomial). Cells that are outliers for more than a user-set amount of genes are suspected as being outlier cells.

!! tSNE plots

Generates multiple tSNE plots with custom expression highlighting for gene subsets of interest. A tSNE map can be drawn for original clusters (derived via k-means) and final clustering (derived from outliers).

Any number of genes subsets of interest can be specified to measure expression within clusters for related marker genes or genes characterising a cell type.
    ]]></help>
    <expand macro="citations" />
</tool>
