<tool id="raceid_filter" name="RaceID filter" version="@VERSION@.0">
    <description>Perform filtering upon a count matrix and optionally generate an R object</description>
    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
    Rscript '@SCRIPT_DIR@/raceID_filter.R' '@SCRIPT_DIR@' '$rconf_source'
    ]]></command>

    <configfiles>
        <configfile name="rconf_source">
            count_matrix = "$inp_count"
            filtering = as.logical( $filtering.do_filter.value )
            output_table = "$out_table"
            output_rdat = "$out_rdat"

            # Defaults
            control_genes_filter=""
            c_mintotal = 3000; c_minexpr = 5; c_maxexpr = 500; c_minnumber = 1;
            c_downsample = F; c_dsn = 1; c_rseed = 17000;
            
            #if $filtering.do_filter.value == "T":
            control_genes_filter = "$filtering.remove_nonendog.value"
            c_mintotal = as.integer( $filtering.default_filtering.mintotal )
            c_minexpr = as.integer( $filtering.default_filtering.minexpr )
            c_maxexpr = as.integer( $filtering.default_filtering.maxexpr )
            c_minnumber = as.integer( $filtering.default_filtering.minnumber )
            c_downsample = as.logical( $filtering.default_filtering.downsample.do_downsample.value )
            #if $filtering.default_filtering.downsample.do_downsample.value == "T":
            c_dsn = as.integer( $filtering.default_filtering.downsample.dsn )
            #end if
            c_rseed = $filtering.default_filtering.rseed
            #end if
        </configfile>
    </configfiles>
    <inputs>

        <param name="inp_count" type="data" format="tsv" label="Count matrix" help="A spreadsheet file with the first row indicating cell IDs, and the first column indicating transcript or gene IDs" />

        <conditional name="filtering" >
            <param name="do_filter" type="select" label="Perform filtering?" help="An R data object will be generated in both cases."  >
                <option value="T" selected="true" >Yes</option>
                <option value="F" >No</option>
            </param>
            <when value="F" />
            <when value="T" >
                <param name="remove_nonendog" type="text" label="Control gene name prefixes" help="If ERCC or other non-endogenous spike-in RNAs are within the data, please specify their prefixes (e.g. 'ERCC, HK00') in order to filter them out. (Leave blank if control genes were not used in the experiment.)" />
                <conditional name="default_filtering" >
                    <param name="do_filter_defaults" type="select" label="Parameters" >
                        <option value="Use Defaults" selected="true" />
                        <option value="Advanced Options" />
                    </param>
                    <when value="Use Defaults" />
                    <when value="Advanced Options" >
                        <param name="mintotal" type="integer" value="3000" min="1" label="Minimum total transcripts" help="Discard cells with less than this number of total transcripts before normalisation." />

                        <param name="minexpr" type="integer" value="5" min="1" label="Minimum expressed genes" help="Discard genes that do not express a minimum of this number of transcripts after normalisation."/>
                        <param name="maxexpr" type="integer" value="500" min="0" label="Maximum expressed genes" help="Discard genes that express more than this number of transcripts after normalisation. Useful if genes have oversaturated counts derived from UMI data. Set to 0 to disable this step." />

                        <param name="minnumber" type="integer" value="1" label="Minimum Cells" help="Discard genes that do not have the minimum expressed transcripts in at least this number of cells" />

                        <conditional name="downsample" >
                            <param name="do_downsample" type="select" label="Perform downsampling?" >
                                <option value="T" >Yes</option>
                                <option value="F" selected="true" >No</option>
                            </param>
                            <when value="F" />
                            <when value="T" >
                                <param name="dsn" type="integer" value="1" min="1" label="Average transcripts across this many samples" help="If this is set to 1, then sampling noise should be comparable across cells. For higher values, the data approximates median normalisation." />
                            </when>
                        </conditional>
                        <param name="rseed" type="integer" value="17000" min="0" label="Seed value (for reproducibility)" />
                    </when>
                </conditional>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="out_table" format_source="inp_count" label="${tool.name} on ${on_string}: Filtered Table" >
            <filter>filtering['do_filter'] == "T"</filter>
        </data>
        <data name="out_rdat" format="rdata" label="${tool.name} on ${on_string}: RData" />
    </outputs>
    <tests>
        <test>
            <param name="inp_count" value="transcript_counts_intestine_sub.tsv" />
            <param name="do_filter" value="F" />
            <output name="out_rdat" value="trans_filter_none.rds" />
        </test>
        <test>
            <param name="inp_count" value="transcript_counts_intestine_sub.tsv" />
            <param name="do_filter" value="T" />
            <param name="do_filter_defaults" value="Advanced Options" />
            <param name="mintotal" value="10" />
            <param name="minexpr" value="1" />
            <param name="maxexpr" value="2000" />
            <param name="do_downsample" value="T" />
            <output name="out_table" value="transcript_output.tsv" />
            <output name="out_rdat" value="trans_filter_ds.rds" />
        </test>
    </tests>
    <help><![CDATA[

    This module takes a count matrix/spreadsheet with cellIDs as columns and geneIDs/transcriptIDs as rows, and filters based on standard single-cell RNA pre-processing methods (minimum/maximum transcript expression in a minimum of X number of cells).

    A filtered matrix is produced as output, along with an R SCseq data object that can be passed as inputs into other downstream RaceID modules.    
    
    ]]></help>
    <expand macro="citations" />
</tool>
