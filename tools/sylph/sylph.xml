<tool id="sylph" name="sylph" version="0.1.0+galaxy0" python_template_version="3.5" profile="21.05">
    <expand macro='description'/>
    <macros>
       <import>macros.xml</import> 
    </macros>
    <expand macro='requirements'/>
    <command detect_errors="exit_code"><![CDATA[
#import re
##SYMLINK SYLPH DB
        ln -s '$sylph_database.fields.path' 'input.syldb' &&

##Single input
        #if $sketch.type == "single":
            #if $sketch.input.ext == "fastqsanger"
                #set $ext = "fastq"
            #else if $sketch.input.ext == "fastqsanger.gz":
                #set $ext = "fastq.gz"
            #else:
                #set $ext = str($sketch.input.ext)
            #end if
            #if $sketch.input.element_identifier.endswith(".fastq") or $sketch.input.element_identifier.endswith(".fastq.gz"):
                #set $input = $sketch.input.element_identifier
            #else:
                #set $input = $sketch.input.element_identifier + "." + str($ext)
            #end if
            ln -s '$sketch.input' '$input' &&

##Single group
        #else if $sketch.type == "single_group":
            #set input = ""
            #for $number, $current_file in enumerate($sketch.input):
                #if $current_file.ext == "fastqsanger"
                    #set $ext = "fastq"
                #else if $current_file.ext == "fastqsanger.gz":
                    #set $ext = "fastq.gz"
                #else:
                    #set $ext = str($current_file.ext)
                #end if
                #if $current_file.element_identifier.endswith(".fastq") or $current_file.element_identifier.endswith(".fastq.gz"):
                    #set $current_input = $current_file.element_identifier
                #else:
                    #set $current_input = $current_file.element_identifier + "." + str($ext)
                #end if
                ln -s '${current_file}' '$current_input' &&
                #set input = str($input) + " " + str($current_input)
            #end for

##Paired input
        #else if $sketch.type == "paired":

            #if $sketch.input_1.ext == "fastqsanger"
                #set $ext_1 = "fastq"
            #else if $sketch.input_1.ext == "fastqsanger.gz":
                #set $ext_1 = "fastq.gz"
            #else:
                #set $ext_1 = str($sketch.input_1.ext)
            #end if

            #if $sketch.input_2.ext == "fastqsanger"
                #set $ext_2 = "fastq"
            #else if $sketch.input_2.ext == "fastqsanger.gz":
                #set $ext_2 = "fastq.gz"
            #else:
                #set $ext_2 = str($sketch.input_2.ext)
            #end if

            #if $sketch.input_1.element_identifier.endswith(".fastq") or $sketch.input_1.element_identifier.endswith(".fastq.gz"):
                #set $read1 = $sketch.input_1.element_identifier
            #else:
                #set $read1 = str($sketch.input_1.element_identifier) + "." + str($ext_1)
            #end if
            #if $sketch.input_2.element_identifier.endswith(".fastq") or $sketch.input_2.element_identifier.endswith(".fastq.gz"):
                #set $read2 = $sketch.input_2.element_identifier
            #else:
                #set $read2 = str($sketch.input_2.element_identifier) + "." + str($ext_2)
            #end if
            ln -s '$sketch.input_1' '$read1' &&
            ln -s '$sketch.input_2' '$read2' &&

##Paired  group
        #else if $sketch.type == "paired_group":
            #if $sketch.input.forward.ext == "fastqsanger"
                #set $ext_1 = "fastq"
            #else if $sketch.input.forward.ext == "fastqsanger.gz":
                #set $ext_1 = "fastq.gz"
            #else:
                #set $ext_1 = str($sketch.input.forward.ext)
            #end if

            #if $sketch.input.reverse.ext == "fastqsanger"
                #set $ext_2 = "fastq"
            #else if $sketch.input.reverse.ext == "fastqsanger.gz":
                #set $ext_2 = "fastq.gz"
            #else:
                #set $ext_2 = str($sketch.input.reverse.ext)
            #end if
            
            #set $read1 = str($sketch.input.element_identifier) + "." + str($ext_1)
            #set $read2 = str($sketch.input.element_identifier) + "_r2." + str($ext_2)
            ln -s '$sketch.input.forward' '$read1' &&
            ln -s '$sketch.input.reverse' '$read2' &&
        #end if
##SKETCHING
        sylph sketch
        #if $sketch.type == "single":
            $input
        #else if $sketch.type == "single_group":
            -r $input
        #else if $sketch.type == "paired": 
            -1 $read1
            -2 $read2
        #else if $sketch.type == "paired_group": 
            -1 $read1
            -2 $read2
        #end if
        -t \${GALAXY_SLOTS:-4}
        -d sylph_sketches &&

##OPTION FOR PROFILE
        #if $function.functions == "profile"
            sylph profile
            input.syldb
            sylph_sketches/*.sylsp
            #if $function.min_num_kmers:
                --min-number-kmers ${function.min_num_kmers}
            #end if
            -t \${GALAXY_SLOTS:-4}
            -o output.tsv
##OPTION FOR QUERY
        #else
            sylph query
            -t \${GALAXY_SLOTS:-4}
            input.syldb
            sylph_sketches/*.sylsp
            -o output.tsv
        #end if
    ]]></command>
    <inputs>
        <expand macro="input_database"/>
        <conditional name="sketch">
            <param name="type" type="select" label="Select the type of reads used">
                <option value="single">Individual single-end reads</option>
                <option value="single_group">Group of single-ended reads</option>
                <option value="paired">One set of paired-end reads</option>
                <option value="paired_group"> Group of paired-ended reads</option>
            </param>
        <!-- Only permitting fastq as tool input only allows fastq and fastq.gz as file ext -->
            <when value="single">
                <param name="input" type="data" format="fastq,fastq.g,fastqsanger,fastqsanger.gz" label="Single-end input reads"/>
            </when>
            <when value="single_group">
                <param name="input" type="data" format="fastq,fastq.gz,fastqsanger,fastqsanger.gz" label="Single-end input reads" multiple="true"/>
            </when>            
            <when value="paired">
                <param name="input_1" type="data" format="fastq,fastq.gz,fastqsanger,fastqsanger.gz" label="Paired-end input reads 1"/>
                <param name="input_2" type="data" format="fastq,fastq.gz,fastqsanger,fastqsanger.gz" label="Paired-end input reads 2"/>
            </when>
            <when value="paired_group">
                <param name="input" type="data_collection" collection_type="paired" format="fastq,fastq.gz,fastqsanger,fastqsanger.gz" label="Paired-end input reads"/>
            </when>
        </conditional>
        <conditional name="function" >
            <param name="functions" type="select" label="ANI querying or taxonomic profiling" help="ANI(Average Nucleotide Identity) is a measure of nucleotide-level similarity between the genomes of two microogranisms. Profile querying involves comparing functional or sequence profiles derived from the genomic data.">
                <option value="profile">Taxanomic Profile</option>
                <option value="ani">ANI Query</option>
            </param>
            <when value="profile">
                <param name="min_num_kmers" type="integer" value="50" label="Minimum number of k-mers for Sylph to output a result." min="1" help="States the minimum number of k-mers needed for sylph to output a result.This is (approximately) the contig length divided by -c. With default settings, --min-number-kmers 10 can work with contigs ~2500 bp. For smaller contigs, consider -c 100."/>
            </when>
            <when value="ani"/>
        </conditional>
        <!-- To add to next version -->
        <!-- <param name="metaphlan" label="Create a MetaPhlAn style output" type="boolean" truevalue="true" falsevalue=""/> -->
    </inputs>
    <outputs>
        <data format="tabular" name="output" label="${tool.name} on ${on_string}" from_work_dir="output.tsv"/>
    </outputs>
    <tests>
        <!-- Test 1 Individual Single-end Inputs and Taxonamy-->
        <test expect_num_outputs="1">
            <param name="sylph_database" value="sylph_db"/>
            <conditional name="sketch">
                <param name="type" value="single"/>
                <param name="input" ftype="fastq" value="test_single_reads_1.fastq.gz"/>
            </conditional>
            <conditional name="function">
                <param name="functions" value="profile"/>
            </conditional>
            <output name="output" value="output_1.tabular"/>
        </test>
        <!--Test 2  Group of Single-end Inputs-->
        <test expect_num_outputs="1">
            <param name="sylph_database" value="sylph_db"/>
            <conditional name="sketch">
                <param name="type" value="single_group"/>
                <param name="input" ftype="fastq" value="test_single_reads_1.fastq.gz,test_single_reads_2.fastq.gz"/>
            </conditional>
            <conditional name="function">
                <param name="functions" value="profile"/>
                <param name="min_num_kmers" value="49"/>
            </conditional>
            <output name="output" value="output_2.tabular"/>
        </test>
        <!-- Test 3 Paired-end reads -->
        <test expect_num_outputs="1">
            <param name="sylph_database" value="sylph_db"/>
            <conditional name="sketch">
                <param name="type" value="paired"/>
                <param name="input_1" value="test_R1.fq" ftype="fastq"/>
                <param name="input_2" value="test_R2.fq" ftype="fastqsanger"/>
            </conditional>
            <conditional name="function">
                <param name="functions" value="profile"/>
            </conditional>
            <output name="output" value="output_3.tabular"/>
        </test>
        <!-- Test 4 Collection of Paired-end Reads -->
        <test expect_num_outputs="1">
            <param name="sylph_database" value="sylph_db"/>
            <conditional name="sketch">
                <param name="type" value="paired"/>
                <param name="input_1" ftype="fastq" value="test_R1.fq"/>
                <param name="input_2" ftype="fastq" value="test_R2.fq"/>
            </conditional>
            <conditional name="function">
                <param name="functions" value="profile"/>
            </conditional>
            <output name="output" value="output_4.tabular"/>
        </test>
        <!-- Test 5 Single-end Read ANI -->
        <test expect_num_outputs="1">
            <param name="sylph_database" value="sylph_db"/>
            <conditional name="sketch">
                <param name="type" value="single"/>
                <param name="input" ftype="fastq" value="test_single_reads_1.fastq.gz"/>
            </conditional>
            <conditional name="function">
                <param name="functions" value="ani"/>
            </conditional>
            <output name="output" value="output_5.tabular"/>
        </test>
    </tests>
    <help><![CDATA[
**What is sylph?**

Sylph is an extremely fast and memory efficient program for profiling and searching metagenomic samples against databases. It is 10-100x faster than other popular software such as MetaPhlAn or Kraken and more memory efficient too. 

**What can sylph do?**

- Profile metagenomes: sylph can calculate the abundances of genomes in a sample using a reference database. This is the same type of output as Kraken or MetaPhlAn. 
- Search genomes against metagenomes: sylph can check if a genome is contained in your sample (e.g. is this E. coli genome in my sample?).
- ANI querying: sylph can estimate the containment average nucleotide identity (ANI) of a reference genome to the genomes in your sample.
- Use custom reference databases: Eukaryotes, viruses, and any collections of fasta files are ok.
- Long-reads are usable: sylph is primarily optimized for short-reads, but it can utilize nanopore or PacBio reads with high precision.
- Calculate coverage: sylph can estimate the coverage (not just the abundance) of genomes in your database.

`See here for more information on what sylph can and can not do. <https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F>`_

----

**Output**

Sylph outputs a TSV (tab-separated values) file. Each row is one genome detected in the metagenome sample.

- Sample_file: the filename of the reads/sample.
- Genome_file: the filename of the detected genome.
- Taxonomic_abundance: normalized taxonomic abundance as a percentage. Coverage-normalized - same as MetaPhlAn abundance
    - Not present for sylph query
- Sequence_abundance: normalized sequence abundance as a percentage. The "number of reads" assigned to each genome - same as Kraken abundance
    - Not present for sylph query
- Adjusted_ANI: adjusted containment ANI estimate.
    - If coverage adjustment is possible (cov is < 3x cov): returns coverage-adjusted ANI
    - If coverage is too low/high: returns Naive_ANI (see below)
- Eff_cov/True_cov: an estimate of the effective, or if -u specified, the true coverage. Always a decimal number.
- ANI_5-95_percentile: [5%,95%] confidence intervals. Not always a decimal number.
    - If coverage adjustment is possible: float-float e.g. 98.52-99.55
    - If coverage is too low/high: NA-NA is given.
- Eff_lambda: estimate of the effective coverage parameter. Not always a decimal number.
    - If coverage adjustment is possible: lambda estimate is given
    - If coverage is too low/high: LOW or HIGH is output
- Lambda_5-95_percentile: [5%, 95%] confidence intervals for lambda. Same format rules as ANI_5-95_percentile.
- Median_cov: median k-mer multiplicity for k-mers with >= 1 multiplicity.
- Mean_cov_geq1: mean k-mer multiplicity for k-mers with >= 1 multiplicity.
- Containment_ind: int/int showing the containment index (number of k-mers found in sample divided by total k-mers), e.g. 959/1053.
- Naive_ANI: containment ANI without coverage adjustment.
- kmers_reassigned: the number of k-mers reassigned away from the genome.
    - Not present for sylph query
- Contig_name: name of the first contig in the genome

    ]]></help>
    <expand macro="citation"/>
</tool>
