<<<<<<< HEAD
<tool id="spades" name="SPAdes" version="@TOOL_VERSION@+galaxy1">
    <description>genome assembler for regular and single-cell projects</description>
    <xrefs>
        <xref type="bio.tools">spades</xref>
    </xrefs>
=======
<tool id="spades_spades" name="SPAdes" version="@TOOL_VERSION@+galaxy0">
    <description>genome assembler for genomes of regular and single-cell projects</description>
>>>>>>> 1bf83e19283daad0865ed86ff2e0c034c743cf94
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## libcount: single library|multiple libraries
## filetype: interlaced|separate|merged|unpaired files
## readtype: s (single-read)|pe (paired-end)|mp (mate-pair)|hqmp (high quality mate-pair)|nxmate (lucigen) reads
## _rep = <repeat>, _cond = <conditional>, _sel = <select>

<<<<<<< HEAD
    if [ -n "\$GALAXY_MEMORY_MB" ]; then
        GALAXY_MEMORY_GB=\$(( GALAXY_MEMORY_MB / 1024 ));
    fi &&

    spades.py -o . --tmp-dir "\${TMPDIR:-.}" --disable-gzip-output $sc $onlyassembler $careful -t \${GALAXY_SLOTS:-16} -m \${GALAXY_MEMORY_GB:-250}
    #if not $kmer_choice.auto_kmer_choice:
        -k "$kmer_choice.kmers"
    #end if
    #if $cov.state == "auto":
        --cov-cutoff 'auto'
    #elif $cov.state == "value":
        --cov-cutoff '$cov.cutoff'
    #end if
    $iontorrent
    ## Sequence files, libraries
    #for $i, $library in enumerate( $libraries, start=1 )
        #if str( $library.lib_type ) == "paired_end":
            #set prefix = 'pe'
        #elif str( $library.lib_type ) == "mate_paired":
            #set prefix = 'mp'
        #elif str( $library.lib_type ) == "nxmate_paired":
            #set prefix = 'nxmate'
        #else:
            #set prefix = 'hqmp'
        #end if
        --$prefix$i-$library.orientation
        #for $file in $library.files
            #if $file.file_type.type == "separate"
                --$prefix$i-1 $file.file_type.fwd_reads.extension.replace('fastqsanger', 'fastq'):$file.file_type.fwd_reads
                --$prefix$i-2 $file.file_type.fwd_reads.extension.replace('fastqsanger', 'fastq'):$file.file_type.rev_reads
            #elif $file.file_type.type == "interleaved"
                --$prefix$i-12 $file.file_type.interleaved_reads.extension.replace('fastqsanger', 'fastq'):$file.file_type.interleaved_reads
            #elif $file.file_type.type == "merged"
                --$prefix$i-m $file.file_type.merged_reads.extension.replace('fastqsanger', 'fastq'):$file.file_type.merged_reads
            #elif $file.file_type.type == "unpaired"
                --$prefix$i-s $file.file_type.unpaired_reads.extension.replace('fastqsanger', 'fastq'):$file.file_type.unpaired_reads
            #elif $file.file_type.type == "paired-collection"
                --$prefix$i-1 $file.file_type.fastq_collection.forward.extension.replace('fastqsanger', 'fastq'):$file.file_type.fastq_collection.forward
                --$prefix$i-2 $file.file_type.fastq_collection.reverse.extension.replace('fastqsanger', 'fastq'):$file.file_type.fastq_collection.reverse
=======
## libcount_cond
##  libcount_sel (single|multiple)
##  ## single
##  file_rep -> file
##   filetype_cond
##    filetype_sel (interlaced|separate|merged|unpaired)
##    fwd_reads,rev_reads|reads ## fwd_reads, rev_reads only for separate
##  ## multiple
##  lib_rep -> library
##   (pe|mp|hqmp)_orientation
##   file_rep -> file
##    readtype_cond
##     readtype_sel -> (s (single-read)|pe (paired-end)|mp (mate-pair)|hqmp (high quality mate-pair)|nxmate (lucigen))
##     reads ## only s
##     fwd_reads,rev_reads ## only nxmate
##     filetype_cond ## only pe, mp, hqmp
##      filetype_sel (interlaced|separate|merged|unpaired) ## merged only for pe
##      fwd_reads,rev_reads|reads ## fwd_reads, rev_reads only for separate

## init
#set $concat = ''
#set $currentParam = ''
#set $currentFile = ''
#if $libcount_cond.libcount_sel == 'single'
    #for $i, $file in enumerate($libcount_cond.file_rep, 1)
        #if $file.filetype_cond.filetype_sel == 'separate'
            #set $currentParam = '-1'
            #set $currentFile = $file.filetype_cond.fwd_reads
            @SET_FILENAME_SINGLE@
            #set $currentParam = '-2'
            #set $currentFile = $file.filetype_cond.rev_reads
            #@SET_FILENAME_SINGLE@
        #else
            #if $file.filetype_cond.filetype_sel == 'interlaced'
                #set $currentParam = '--12'
            #elif $file.filetype_cond.filetype_sel == 'merged'
                #set $currentParam = '--merged'
            #elif $file.filetype_cond.filetype_sel == 'unpaired'
                #set $currentParam = '-s'
>>>>>>> 1bf83e19283daad0865ed86ff2e0c034c743cf94
            #end if
            #set $currentFile = $file.filetype_cond.reads
            @SET_FILENAME_SINGLE@
        #end if
    #end for
#elif $libcount_cond.libcount_sel == 'multiple'
    #for $i, $library in enumerate($libcount_cond.lib_rep, 1)
        #set $concat += '--pe' + str($i) + str($library.pe_orientation) + ' '
        #set $concat += '--mp' + str($i) + str($library.mp_orientation) + ' '
        #set $concat += '--hqmp' + str($i) + str($library.hqmp_orientation) + ' '
        #for $j, $file in enumerate($library.file_rep, 1)
            #set $currentPrefix = '--' + str($file.readtype_cond.readtype_sel) ## s, pe, mp, hqmp, nxmate
            #if $currentPrefix == '--s'
                #set $currentParam = ''
                #set $currentFile = $file.readtype_cond.reads
                @SET_FILENAME_MULTIPLE@
            #elif $currentPrefix == '--pe' or $currentPrefix == '--mp' or $currentPrefix == '--hqmp'
                #if $file.readtype_cond.filetype_cond.filetype_sel == 'separate'
                    #set $currentParam = '-1'
                    #set $currentFile = $file.readtype_cond.filetype_cond.fwd_reads
                    @SET_FILENAME_MULTIPLE@
                    #set $currentParam = '-2'
                    #set $currentFile = $file.readtype_cond.filetype_cond.rev_reads
                    @SET_FILENAME_MULTIPLE@
                #else
                    #if $file.readtype_cond.filetype_cond.filetype_sel == 'interlaced'
                        #set $currentParam = '-12'
                    #elif $file.readtype_cond.filetype_cond.filetype_sel == 'merged'
                        #set $currentParam = '-m'
                    #elif $file.readtype_cond.filetype_cond.filetype_sel == 'unpaired'
                        #set $currentParam = '-s'
                    #end if
                    #set $currentFile = $file.readtype_cond.filetype_cond.reads
                    @SET_FILENAME_MULTIPLE@
                #end if
            #elif $currentPrefix == '--nxmate'
                #set $currentParam = '-1'
                #set $currentFile = $file.readtype_cond.fwd_reads
                @SET_FILENAME_MULTIPLE@
                #set $currentParam = '-2'
                #set $currentFile = $file.readtype_cond.rev_reads
                @SET_FILENAME_MULTIPLE@
            #end if
        #end for
    #end for
#end if

## run
spades.py
    @O@
    @T@
    @M@
    ## reads
    $concat
    @NANOPORE@
    @PACBIO@
    @SANGER@
    @TRUSTEDCONTIGS@
    @TSLR@
    @UNTRUSTEDCONTIGS@
    ## parameter
    @COVCUTOFF@
    $disablerr
    $iontorrent
    @KMER@
    @MODE@
    @PHREDOFFSET@    

## postprocessing
@STATS@
@CORRECTED@
    ]]></command>
    <configfiles>
        <!-- parse config.fasta and scaffolds.fasta and create $out_configstats and $out_scaffoldstats -->
        <expand macro="config_script"/>
    </configfiles>
    <inputs>
        <conditional name="libcount_cond">
            <param name="libcount_sel" type="select" label="Select number of libraries">
                <option value="single">Single</option>
                <option value="multiple">Multiple</option>
            </param>
            <when value="single">
                <repeat name="file_rep" min="1" title="Read file">
                    <conditional name="filetype_cond">
                        <expand macro="filetype_sel">
                            <option value="merged">Merged (--merged)</option>
                        </expand>
                        <expand macro="filetype_sel_when">
                            <when value="merged">
                                <expand macro="reads" label="merged" help="(--merged)"/>
                            </when>
                        </expand>
                    </conditional>
                </repeat>
            </when>
            <when value="multiple">
                <repeat name="lib_rep" min="1" max="9" title="Library">
                    <!-- ignored if no corresponding read files are used -->
                    <expand macro="orientation" type="pe" label="paired-end" fr="true"/>
                    <expand macro="orientation" type="mp" label="mate-pair" rf="true"/>
                    <expand macro="orientation" type="hqmp" label="high-quality mate-pair" fr="true"/>
                    <repeat name="file_rep" min="1" title="Files">
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" type="select" label="Select read type">
                                <option value="s">Single-read (--s)</option>
                                <option value="pe">Paired-end (--pe)</option>
                                <option value="mp">Mate-pair (--mp)</option>
                                <option value="hqmp">High-quality mate-pair (--hqmp)</option>
                                <option value="nxmate">Lucigen NxSeq long-mate-pair (--nxmate)</option>
                            </param>
                            <when value="s">
                                <expand macro="reads" label="single" help="(--s)"/>
                            </when>
                            <when value="pe">
                                <conditional name="filetype_cond">
                                    <expand macro="filetype_sel">
                                        <option value="merged">Merged (-m)</option>
                                    </expand>
                                    <expand macro="filetype_sel_when">
                                        <when value="merged">
                                            <expand macro="reads" label="merged" help="(-m)"/>
                                        </when>
                                    </expand>
                                </conditional>
                            </when>
                            <when value="mp">
                                <conditional name="filetype_cond">
                                    <expand macro="filetype_sel"/>
                                    <expand macro="filetype_sel_when"/>
                                </conditional>
                            </when>
                            <when value="hqmp">
                                <conditional name="filetype_cond">
                                    <expand macro="filetype_sel"/>
                                    <expand macro="filetype_sel_when"/>
                                </conditional>
                            </when>
                            <when value="nxmate">
                                <expand macro="reads" paramname="fwd_reads" label="forward" help="(-1)"/>
                                <expand macro="reads" paramname="rev_reads" label="reverse" help="(-2)"/>
                            </when>
                        </conditional>
                    </repeat>
                </repeat>
            </when>
        </conditional>
        <section name="arf" title="Additional read files">
            <expand macro="nanopore"/>
            <expand macro="pacbio"/>
            <expand macro="sanger"/>
            <expand macro="trusted_contigs"/>
            <expand macro="tslr"/>
            <expand macro="untrusted_contigs"/>
        </section>
        <param name="mode_sel" type="select" label="Select mode(s)" help="Error correction requires FASTQ input files. (--careful, --isolate, --only-assembler, --only-error-correction, --sc)">
            <option value="x" selected="true">None</option>
            <option value="c">--careful</option>
            <option value="ca">--careful, --only-assembler</option>
            <option value="cas">--careful, --only-assembler, --sc</option>
            <option value="ce">--careful, --only-error-correction</option>
            <option value="ces">--careful, --only-error-correction, --sc</option>
            <option value="cs">--careful, --sc</option>
            <option value="i">--isolate</option>
            <option value="a">--only-assembler</option>
            <option value="as">--only-assembler, --sc</option>
            <option value="e">--only-error-correction</option>
            <option value="es">--only-error-correction, --sc</option>
            <option value="s">--sc</option>
        </param>
        <expand macro="covcutoff"/>
        <expand macro="disablerr"/>
        <expand macro="iontorrent"/>
        <expand macro="kmer" help="If --sc is set the default values are 21,33,55. For multicell datasets K values are automatically selected using maximum read length."/>        
        <expand macro="phred"/>
        <param name="oo" type="select" multiple="true" optional="false" label="Select optional output file(s)" help="Only shown in history if selected here and generated by the specific run.">
            <option value="ag" selected="true">Assembly graph</option>
            <option value="ags" selected="true">Assembly graph with scaffolds</option>
            <option value="c" selected="true">Contigs</option>
            <option value="cp">Contigs paths</option>
            <option value="cr">Corrected reads</option>
            <option value="cs">Contigs stats</option>
            <option value="l">Log</option>
            <option value="s" selected="true">Scaffolds</option>
            <option value="sp">Scaffolds paths</option>
            <option value="ss">Scaffolds stats</option>            
        </param>
    </inputs>
    <outputs>
        <expand macro="out_ag"/>
        <expand macro="out_ags"/>
        <expand macro="out_c"/>
        <expand macro="out_cp"/>
        <expand macro="out_cr"/>
        <expand macro="out_cs"/>
        <expand macro="out_l"/>
        <expand macro="out_s"/>
        <expand macro="out_sp"/>
        <expand macro="out_ss"/>        
    </outputs>
    <tests>
        <!--
        used in a test:
            single library: 12, 1, 2
            multiple libraries: s, pe#-12, pe#-1, pe#-2, pe#-<or>
            k, phred-offset, disablerr, iontorrent, careful, isolate, only-assembler, only-error-correction, sc

        not used in a test:
            single library: merged, s
            multiple libraries: pe#-m, pe#-s, mp#-12, mp#-1, mp#-2, mp#-<or>, mp#-s, hqmp#-12, hqmp#-1, hqmp#-2, hqmp#-s, hqmp#-<or>, nxmate#-1, nxmate-#2
            pacbio, nanopore, sanger, trusted-contigs, untrusted-contigs, tslr
        -->

        <!-- #1 single, interlaced, fastq.gz, default parameters -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_3\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 single, separate, fastq, custom parameters -->
        <test expect_num_outputs="10">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="separate"/>
                        <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                        <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="i"/>
            <conditional name="kmer_cond">
                <param name="kmer_sel" value="manual"/>
                <param name="manual" value="33"/>
            </conditional>
            <conditional name="cov_cond">
                <param name="cov_sel" value="auto"/>
            </conditional>
            <param name="disablerr" value="true"/>
            <param name="iontorrent" value="true"/>
            <param name="phredoffset" value="33"/>
            <param name="oo" value="ag,ags,c,cp,cs,cr,s,sp,ss,l"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_5\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="1"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_cp">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output_collection name="out_cr" type="list" count="3">
                <element name="1-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="511264" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="2-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="510194" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="_unpaired.00.0_0.cor">
                    <assert_contents>
                        <has_size value="0"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_cs">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="#name&#009;length&#009;coverage"/>
                    <has_text_matching expression="NODE_1&#009;1000.+"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_sp">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_ss">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 single, separate, fasta, default parameters -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="separate"/>
                        <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                        <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="a"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_11\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 multiple, single & paired-end within same library -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="multiple"/>
                <repeat name="lib_rep">
                    <repeat name="file_rep">
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="s"/>
                            <param name="reads" value="ecoli_1K.fastq.gz"/>
                        </conditional>
                    </repeat>
                    <repeat name="file_rep">
                        <param name="pe_orientation" value="-fr"/>
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="pe"/>
                            <conditional name="filetype_cond">
                                <param name="filetype_sel" value="separate"/>
                                <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                                <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                            </conditional>
                        </conditional>
                    </repeat>
                </repeat>
            </conditional>
            <param name="mode_sel" value="c"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_7\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 multiple, single & paired-end in different libraries -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="multiple"/>
                <repeat name="lib_rep">
                    <repeat name="file_rep">
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="s"/>
                            <param name="reads" value="ecoli_1K.fastq.gz"/>
                        </conditional>
                    </repeat>
                </repeat>
                <repeat name="lib_rep">
                    <repeat name="file_rep">
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="pe"/>
                            <conditional name="filetype_cond">
                                <param name="filetype_sel" value="separate"/>
                                <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                                <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                            </conditional>
                        </conditional>
                    </repeat>
                </repeat>
            </conditional>
            <param name="mode_sel" value="ca"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_11\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #6 only corrected reads are created as an output -->
        <test expect_num_outputs="2">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="ce"/>
            <param name="oo" value="cr,l"/>
            <output_collection name="out_cr" type="list" count="3">
                <element name="1-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="511264" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="2-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="510194" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="_unpaired.00.0_0.cor">
                    <assert_contents>
                        <has_size value="0"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #7 only corrected reads are created as an output -->
        <test expect_num_outputs="2">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="ces"/>
            <param name="oo" value="cr,l"/>
            <output_collection name="out_cr" type="list" count="3">
                <element name="1-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="511264" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="2-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="510194" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="_unpaired.00.0_0.cor">
                    <assert_contents>
                        <has_size value="0"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #8 -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="as"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_11\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #9 only corrected reads are created as an output -->
        <test expect_num_outputs="2">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="e"/>
            <param name="oo" value="cr,l"/>
            <output_collection name="out_cr" type="list" count="3">
                <element name="1-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="511264" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="2-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="510194" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="_unpaired.00.0_0.cor">
                    <assert_contents>
                        <has_size value="0"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #10 only corrected reads are created as an output -->
        <test expect_num_outputs="2">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="es"/>
            <param name="oo" value="cr,l"/>
            <output_collection name="out_cr" type="list" count="3">
                <element name="1-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="511264" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="2-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="510194" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="_unpaired.00.0_0.cor">
                    <assert_contents>
                        <has_size value="0"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #11 -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="s"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_7\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #12 -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="separate"/>
                        <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                        <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="cs"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_7\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #13 -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="separate"/>
                        <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                        <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <param name="mode_sel" value="cas"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@HELP_WID@

**Input**

@HELP_IN@

**Output**

@HELP_OUT_AG@
@HELP_OUT_AGS@
@HELP_OUT_C@
@HELP_OUT_CP@
@HELP_OUT_CR@
@HELP_OUT_CS@
@HELP_OUT_L@
@HELP_OUT_S@
@HELP_OUT_SP@
@HELP_OUT_SS@

.. class:: infomark

**References**

More information are available on `github <https://github.com/ablab/spades>`_, in the `manual <https://github.com/ablab/spades/blob/spades_@TOOL_VERSION@/README.md>`_ and on the `project website <http://cab.spbu.ru/software/spades>`_.
    ]]></help>
    <expand macro="citations"/>
</tool>