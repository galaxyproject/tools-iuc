<tool id="spades_biosyntheticspades" name="biosyntheticSPAdes" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>genome assembler for biosynthetic gene clusters</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## init
#set $concat = ''
#set $currentParam = ''
#set $currentFile = ''
#for $i, $file in enumerate($file_rep, 1)
    #if $file.filetype_cond.filetype_sel == 'separate'
        #set $currentParam = '-1'
        #set $currentFile = $file.filetype_cond.fwd_reads
        @SET_FILENAME_SINGLE@
        #set $currentParam = '-2'
        #set $currentFile = $file.filetype_cond.rev_reads
        #@SET_FILENAME_SINGLE@
    #else
        #if $file.filetype_cond.filetype_sel == 'interlaced'
            #set $currentParam = '--12'
        #elif $file.filetype_cond.filetype_sel == 'merged'
            #set $currentParam = '--merged'
        #elif $file.filetype_cond.filetype_sel == 'unpaired'
            #set $currentParam = '-s'
        #end if
        #set $currentFile = $file.filetype_cond.reads
        @SET_FILENAME_SINGLE@
    #end if
#end for

## run
spades.py --bio
    @O@
    @T@
    @M@
    ## reads
    $concat
    @NANOPORE@
    @PACBIO@
    @TRUSTEDCONTIGS@
    @TSLR@
    @UNTRUSTEDCONTIGS@
    ## parameter
    $disablerr
    $iontorrent
    @KMER@
    @MODE@
    @PHREDOFFSET@

## postprocessing
@STATS@
@CORRECTED@
    ]]></command>
    <configfiles>
        <!-- parse config.fasta and scaffolds.fasta and create $out_configstats and $out_scaffoldstats -->
        <expand macro="config_script"/>
    </configfiles>
    <inputs>
        <repeat name="file_rep" min="1" title="Read file">
            <conditional name="filetype_cond">
                <expand macro="filetype_sel">
                    <option value="merged">Merged (--merged)</option>
                </expand>
                <expand macro="filetype_sel_when">
                    <when value="merged">
                        <expand macro="reads" label="merged" help="(--merged)"/>
                    </when>
                </expand>
            </conditional>
        </repeat>
        <section name="arf" title="Additional read files">
            <expand macro="nanopore"/>
            <expand macro="pacbio"/>
            <expand macro="trusted_contigs"/>
            <expand macro="tslr"/>
            <expand macro="untrusted_contigs"/>
        </section>
        <param name="mode_sel" type="select" label="Select mode(s)" help="Error correction requires FASTQ input files. (--only-assembler, --only-error-correction)">
            <option value="x" selected="true">None</option>
            <option value="a">--only-assembler</option>
            <option value="e">--only-error-correction</option>
        </param>
        <expand macro="disablerr"/>
        <expand macro="iontorrent"/>
        <expand macro="kmer"/>
        <expand macro="phred"/>
        <param name="oo" type="select" multiple="true" optional="false" label="Select optional output file(s)" help="Only shown in history if selected here and generated by the specific run.">
            <option value="ag" selected="true">Assembly graph</option>
            <option value="ags" selected="true">Assembly graph with scaffolds</option>
            <option value="b" selected="true">BGC statistics"></option>
            <option value="c" selected="true">Contigs</option>
            <option value="cp">Contigs paths</option>
            <option value="cs">Contigs stats</option>
            <option value="cr">Corrected reads</option>
            <option value="dg" selected="true">Domain graph</option>
            <option value="gc" selected="true">Gene clusters</option>
            <option value="s" selected="true">Scaffolds</option>
            <option value="sp">Scaffolds paths</option>
            <option value="ss">Scaffolds stats</option>
            <option value="l">Log</option>
        </param>
    </inputs>
    <outputs>
        <expand macro="out_ag"/>
        <expand macro="out_ags"/>
        <data name="out_b" format="txt" from_work_dir="output/bgc_statistics.txt" label="${tool.name} on ${on_string}: BGC statistics">
            <filter>'b' in oo</filter>
        </data>
        <expand macro="out_c"/>
        <expand macro="out_cp"/>
        <expand macro="out_cr"/>
        <expand macro="out_cs"/>
        <data name="out_dg" format="fasta" from_work_dir="output/domain_graph.dot" label="${tool.name} on ${on_string}: Domain graph">
            <filter>'dg' in oo</filter>
        </data>
        <data name="out_gc" format="fasta" from_work_dir="output/gene_clusters.fasta" label="${tool.name} on ${on_string}: Gene clusters">
            <filter>'gc' in oo</filter>
        </data>
        <expand macro="out_l"/>
        <expand macro="out_s"/>
        <expand macro="out_sp"/>
        <expand macro="out_ss"/>
    </outputs>
    <tests>
        <!--
        used in a test:
            single library: 12, 1, 2
            k, phred-offset, disablerr, iontorrent, only-assembler, only-error-correction

        not used in a test:
            single library: merged, s
            pacbio, nanopore, sanger, trusted-contigs, untrusted-contigs, tslr
        -->

        <!-- #1 single, interlaced, fastq.gz, default parameters -->
        <test expect_num_outputs="7">
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="interlaced"/>
                    <param name="reads" value="ecoli_1K.fastq.gz"/>
                </conditional>
            </repeat>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_b">
                <assert_contents>
                    <!-- 6 + 2 empty lines at the end of the file -->
                    <has_n_lines n="8"/>
                    <has_text_matching expression="A.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_dg">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="digraph.+"/>
                </assert_contents>
            </output>
            <output name="out_gc">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 single, separate, fastq, custom parameters -->
        <test expect_num_outputs="13">
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="separate"/>
                    <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                    <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                </conditional>
            </repeat>
            <param name="disablerr" value="true"/>
            <param name="iontorrent" value="true"/>
             <conditional name="kmer_cond">
                <param name="kmer_sel" value="manual"/>
                <param name="manual" value="33"/>
            </conditional>
            <param name="phredoffset" value="33"/>           
            <param name="oo" value="ag,ags,b,c,cp,cs,cr,dg,gc,s,sp,ss,l"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="1"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_b">
                <assert_contents>
                    <!-- 6 + 2 empty lines at the end of the file -->
                    <has_n_lines n="8"/>
                    <has_text_matching expression="A.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_cp">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output_collection name="out_cr" type="list" count="3">
                <element name="1-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="511264" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="2-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="510194" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="_unpaired.00.0_0.cor">
                    <assert_contents>
                        <has_size value="0"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_cs">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="#name&#009;length&#009;coverage"/>
                    <has_text_matching expression="NODE_1&#009;1000.+"/>
                </assert_contents>
            </output>
            <output name="out_dg">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="digraph.+"/>
                </assert_contents>
            </output>
            <output name="out_gc">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_sp">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_ss">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 single, separate, fasta, default parameters -->
        <test expect_num_outputs="7">
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="separate"/>
                    <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                    <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                </conditional>
            </repeat>
            <param name="mode_sel" value="a"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_b">
                <assert_contents>
                    <!-- 6 + 2 empty lines at the end of the file -->
                    <has_n_lines n="8"/>
                    <has_text_matching expression="A.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_dg">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="digraph.+"/>
                </assert_contents>
            </output>
            <output name="out_gc">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 multiple inputs -->
        <test expect_num_outputs="7">
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="interlaced"/>
                    <param name="reads" value="ecoli_1K.fastq.gz"/>
                </conditional>
            </repeat>
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="separate"/>
                    <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                    <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                </conditional>
            </repeat>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_b">
                <assert_contents>
                    <!-- 6 + 2 empty lines at the end of the file -->
                    <has_n_lines n="8"/>
                    <has_text_matching expression="A.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_dg">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="digraph.+"/>
                </assert_contents>
            </output>
            <output name="out_gc">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5, only corrected reads are created as an output -->
        <test expect_num_outputs="2">
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="interlaced"/>
                    <param name="reads" value="ecoli_1K.fastq.gz"/>
                </conditional>
            </repeat>
            <param name="mode_sel" value="e"/>
            <param name="oo" value="cr,l"/>
            <output_collection name="out_cr" type="list" count="3">
                <element name="1-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="511264" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="2-1.00.0_0.cor">
                    <assert_contents>
                        <has_size value="510194" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="_unpaired.00.0_0.cor">
                    <assert_contents>
                        <has_size value="0"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #6 -->
        <test expect_num_outputs="7">
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="interlaced"/>
                    <param name="reads" value="ecoli_1K.fastq.gz"/>
                </conditional>
            </repeat>
            <repeat name="file_rep">
                <conditional name="filetype_cond">
                    <param name="filetype_sel" value="separate"/>
                    <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                    <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                </conditional>
            </repeat>
            <param name="mode_sel" value="a"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_b">
                <assert_contents>
                    <!-- 6 + 2 empty lines at the end of the file -->
                    <has_n_lines n="8"/>
                    <has_text_matching expression="A.+"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_dg">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="digraph.+"/>
                </assert_contents>
            </output>
            <output name="out_gc">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_s">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@HELP_WID@

biosyntheticSPAdes is a subtool for biosynthetic gene cluster assembly with paired-end reads.

**Input**

biosyntheticSPAdes works with Illumina or IonTorrent reads in a single paired-end library and is capable of providing hybrid assemblies using PacBio, Oxford Nanopore and TSLR reads.

Input data can be provided as interlaced, forward and reverse, merged and unpaired files.

A detailed description can be found in the `input section <https://github.com/ablab/spades/#sec3.1>`_ of the manual.

**Output**

@HELP_OUT_AG@
@HELP_OUT_AGS@
- BGC statistics about biosynthetic gene clusters (BGC) composition in the sample
@HELP_OUT_C@
@HELP_OUT_CP@
@HELP_OUT_CS@
@HELP_OUT_CR@
- Domain graph can be used to assess complexity of the sample and structure of biosynthetic gene clusters
- Gene clusters contains DNA sequences from putative biosynthetic gene clusters
@HELP_OUT_L@
@HELP_OUT_S@
@HELP_OUT_SP@
@HELP_OUT_SS@

A detailed description can be found in the `output section <https://github.com/ablab/spades/#bgc>`_ of the manual.

.. class:: infomark

**References**

More information can be found on `github <https://github.com/ablab/spades>`_  and on the `project website <http://cab.spbu.ru/software/biosyntheticspades>`_.
    ]]></help>
    <expand macro="citations">
        <citation type="doi">10.1101/gr.243477.118</citation>
    </expand>
</tool>
