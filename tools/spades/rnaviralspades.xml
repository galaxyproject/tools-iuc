<tool id="spades_rnaviralspades" name="rnaviralSPAdes" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>de novo assembler for transcriptomes, metatranscriptomes and metaviromes</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[

@PREPROCESS_INPUT_FILES@
#if $additional_reads.selector == 'true'
    @PREPROCESS_INPUT_FILES_ADDITIONAL@
#end if
@PREPROCESS_NANOPORE_PACBIO_FILES@
@PREPROCESS_CONTIGS_FILES@

## run
spades.py --rnaviral
    -o 'output'    
    @RESOURCES@
    @INPUT_READS@
    #if $additional_reads.selector == 'true'
        @INPUT_READS_ADDITIONAL@
    #end if
    ## additional reads
    @NANOPORE_PACBIO@
    @SANGER@
    @CONTIGS@
    ## parameter
    @KMER@
    @PIPELINE_OPTIONS@
    @PHREDOFFSET@    

    ## postprocessing
    @STATS@
    @CORRECTED@
    ]]></command>
    <inputs>
        <expand macro="input_files" format="fastq,fasta,fastq.gz,fastqsanger.gz,fasta.gz">
            <option value="single" selected="true">Single-end</option>
        </expand>
        <section name="arf" title="Additional read files">
            <expand macro="nanopore_pacbio"/>
            <expand macro="sanger"/>
            <expand macro="contigs"/>
        </section>
        <expand macro="pipeline_options">
            <option value="--iontorrent">Iontorrent: required when assembling IonTorrent data (--iontorrent)</option>
        </expand>
        <expand macro="kmer"/>        
        <expand macro="phred"/>
        <expand macro="optional_output"/>
    </inputs>
    <outputs>
        <expand macro="out_ag"/>
        <expand macro="out_ags"/>
        <expand macro="out_cn"/>
        <expand macro="out_cp"/>
        <expand macro="out_cr"/>
        <expand macro="out_cs"/>
        <expand macro="out_l"/>
        <expand macro="out_sc"/>
        <expand macro="out_sp"/>
        <expand macro="out_ss"/>        
    </outputs>
    <tests>
        <!--
        used in a test:
            single library: 12, 1, 2
            multiple libraries: s, pe#-12, pe#-1, pe#-2, pe#-<or>
            k, phred-offset, disablerr, iontorrent, careful, isolate, only-assembler, only-error-correction, sc

        not used in a test:
            single library: merged, s
            multiple libraries: pe#-m, pe#-s, mp#-12, mp#-1, mp#-2, mp#-<or>, mp#-s, hqmp#-12, hqmp#-1, hqmp#-2, hqmp#-s, hqmp#-<or>, nxmate#-1, nxmate-#2
            pacbio, nanopore, sanger, trusted-contigs, untrusted-contigs, tslr
        -->

        <!-- #1 single, interlaced, fastq.gz, default parameters -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="interlaced"/>
                        <param name="reads" value="ecoli_1K.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE\_3\_length.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_cn">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_sc">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 single, separate, fastq, all outputs -->
        <test expect_num_outputs="10">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="separate"/>
                        <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                        <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <conditional name="cov_cond">
                <param name="cov_cutoff" value="auto"/>
            </conditional>
            <param name="mode_sel" value="--disable-rr,--iontorrent"/>
            <param name="phred_offset" value="33"/>
            <param name="optional_output" value="ag,ags,cn,cp,cs,cr,sc,sp,ss,l"/>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="1"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_cn">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE.+"/>
                </assert_contents>
            </output>
            <output name="out_cp">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output_collection name="out_cr" type="list" count="2">
                <element name="1-1.fastq0_0.cor">
                    <assert_contents>
                        <has_size value="34468" delta="1000"/>
                    </assert_contents>
                </element>
                <element name="1-1.fastq0_0.cor">
                    <assert_contents>
                        <has_size value="34468" delta="1000"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_cs">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="#name&#009;length&#009;coverage"/>
                    <has_text_matching expression="NODE_1&#009;1000.+"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression="Thank you for using SPAdes!"/>
                </assert_contents>
            </output>
            <output name="out_sc">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_sp">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_ss">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 single, separate, fasta, default parameters -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="single"/>
                <repeat name="file_rep">
                    <conditional name="filetype_cond">
                        <param name="filetype_sel" value="separate"/>
                        <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                        <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                    </conditional>
                </repeat>
            </conditional>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE_3_length_1000_cov_163.370137"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_cn">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_sc">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 multiple, single & paired-end within same library -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="multiple"/>
                <repeat name="lib_rep">
                    <repeat name="file_rep">
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="s"/>
                            <param name="reads" value="ecoli_1K.fastq.gz"/>
                        </conditional>
                    </repeat>
                    <repeat name="file_rep">
                        <param name="pe_orientation" value="-fr"/>
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="pe"/>
                            <conditional name="filetype_cond">
                                <param name="filetype_sel" value="separate"/>
                                <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                                <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                            </conditional>
                        </conditional>
                    </repeat>
                </repeat>
            </conditional>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE_.+"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_cn">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_sc">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 multiple, single & paired-end in different libraries -->
        <test expect_num_outputs="4">
            <conditional name="libcount_cond">
                <param name="libcount_sel" value="multiple"/>
                <repeat name="lib_rep">
                    <repeat name="file_rep">
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="s"/>
                            <param name="reads" value="ecoli_1K.fastq.gz"/>
                        </conditional>
                    </repeat>
                </repeat>
                <repeat name="lib_rep">
                    <repeat name="file_rep">
                        <conditional name="readtype_cond">
                            <param name="readtype_sel" value="pe"/>
                            <conditional name="filetype_cond">
                                <param name="filetype_sel" value="separate"/>
                                <param name="fwd_reads" value="ecoli_1K_1.fastq.gz"/>
                                <param name="rev_reads" value="ecoli_1K_2.fastq.gz"/>
                            </conditional>
                        </conditional>
                    </repeat>
                </repeat>
            </conditional>
            <output name="out_ag">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_text_matching expression=">EDGE_3_length_1000_cov_326.740273"/>
                </assert_contents>
            </output>
            <output name="out_ags">
                <assert_contents>
                    <has_n_lines n="2"/>
                    <has_text_matching expression="S.+"/>
                </assert_contents>
            </output>
            <output name="out_cn">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000\_cov\_.+"/>
                </assert_contents>
            </output>
            <output name="out_sc">
                <assert_contents>
                    <has_n_lines n="18"/>
                    <has_text_matching expression=">NODE\_1\_length\_1000.+"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@HELP_WID@

rnaviralSPAdes is a pipeline specially designed for de novo assembler tailored for RNA viral datasets (transcriptome, metatranscriptome and metavirome).

**Input**

@HELP_IN@

**Output**

@HELP_OUT_AG@
@HELP_OUT_AGS@
@HELP_OUT_C@
@HELP_OUT_CP@
@HELP_OUT_CR@
@HELP_OUT_CS@
@HELP_OUT_L@
@HELP_OUT_S@
@HELP_OUT_SP@
@HELP_OUT_SS@


-------------------

.. class:: infomark

**IonTorrent data**

@IONTORRENT@

-------------------

.. class:: infomark

**References**

More information are available on `github <https://github.com/ablab/spades>`_ and on the `project website <http://cab.spbu.ru/software/spades>`_.
    ]]></help>
    <expand macro="citations"/>
</tool>
