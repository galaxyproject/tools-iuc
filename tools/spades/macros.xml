<macros>
    <token name="@TOOL_VERSION@">3.14.1</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">spades</requirement>
            <requirement type="package" version="3.0">zip</requirement>
            <yield/>
        </requirements>
    </xml>
    <xml name="stdio">
        <stdio>
            <exit_code range="1:"/>
            <regex match="Cannot allocate memory"
               source="stdout"
               level="fatal_oom"
               description="Out of memory error occurred"/>
            <regex match="The reads contain too many k-mers to fit into available memory"
               source="stdout"
               level="fatal_oom"
               description="Out of memory error occurred"/>
        </stdio>
    </xml>
    <xml name="version_command">
        <version_command><![CDATA[spades.py --version 2>&1 | awk -F 'v' '{print $2}']]></version_command>
    </xml>
    <token name="@INTYPES@">
        fasta,fasta.gz,fastq,fastq.gz
    </token>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1089/cmb.2012.0021</citation>
            <citation type="doi">10.1007/978-3-642-37195-0_13</citation>
            <citation type="doi">10.1093/bioinformatics/btv688</citation>
            <citation type="doi">10.1093/bioinformatics/btu266</citation>
            <citation type="doi">10.1093/bioinformatics/btv337</citation>
            <yield/>
          </citations>
    </xml>

    <!--
        command
    -->

    <token name="@CORRECTED@"><![CDATA[
#if 'corrected' in $oo
    && test -d 'output/corrected' && zip -q -r 'corrected.zip' 'output/corrected/*.fastq.gz' || echo 'No output files for corrected reads.'
#end if
    ]]></token>
    <token name="@COVCUTOFF@"><![CDATA[
#if $cov_cond.cov_sel == 'auto'
    --cov-cutoff 'auto'
#elif $cov_cond.cov_sel == 'value'
    --cov-cutoff '$select_cov.manual'
#end if
    ]]></token>
    <token name="@KMER@"><![CDATA[
#if $kmer_cond.kmer_sel != 'auto'
    -k '$kmer_cond.manual'
#end if
    ]]></token>
    <token name="@M@"><![CDATA[
-m \${GALAXY_MEMORY_GB:-8}
    ]]></token>
    <token name="@MODE@"><![CDATA[
#if 'a' in str($mode_sel)
    --only-assembler
#end if
#if 'c' in str($mode_sel)
    --careful
#end if
#if 'e' in str($mode_sel)
    --only-error-correction
#end if
#if 'i' in str($mode_sel)
    --isolate
#end if
#if 's' in str($mode_sel)
    --sc
#end if
    ]]></token>
    <token name="@NANOPORE@"><![CDATA[
#for $read in $arf.nanopore
    #if $read
        --nanopore $read.datatype.file_ext.replace('fastqsanger', 'fastq')
    #end if
#end for
    ]]></token>
    <token name="@O@"><![CDATA[
-o 'output'
    ]]></token>
    <token name="@PACBIO@"><![CDATA[
#for $read in $arf.pacbio
    #if $read
        --pacbio $read.datatype.file_ext.replace('fastqsanger', 'fastq')
    #end if
#end for
    ]]></token>
    <token name="@PHREDOFFSET@"><![CDATA[
#if $phredoffset != 'auto'
    --phred-offset $phredoffset
#end if
    ]]></token>
    <token name="@SANGER@"><![CDATA[
#for $read in $arf.sanger
    #if $read
        --sanger $read.datatype.file_ext.replace('fastqsanger', 'fastq')
    #end if
#end for
    ]]></token>
    <!-- i: file repeat number, e.g. -1 1-1.fastq -->
    <token name="@SET_FILENAME_SINGLE@"><![CDATA[
#set $currentName = $currentParam.replace('-','') + '-' + str($i) + '.' + $currentFile.datatype.file_ext.replace('fastqsanger', 'fastq')
#set $concat += $currentParam + ' "' + $currentName + '" '
ln -s '${currentFile}' '$currentName' &&
    ]]></token>
    <!-- i: library repeat number, j: file repeat number, e.g. - -mp1-1 mp1-1-1.fastq -->
    <token name="@SET_FILENAME_MULTIPLE@"><![CDATA[
#set $currentName = $currentPrefix.replace('-','') + str($i) + $currentParam + '-' + str($j) + '.' + $currentFile.datatype.file_ext.replace('fastqsanger', 'fastq')
#set $concat += $currentPrefix + $currentParam + ' ' + str($i) + ' "' + $currentName + '" '
ln -s '${currentFile}' '$currentName' &&
    ]]></token>
    <token name="@STATS@"><![CDATA[
#if 'cs' in $oo
    && test -f 'output/contigs.fasta' && python '$write_tsv_script' < 'output/contigs.fasta' > '$out_cs' || echo 'No contigs.fasta.'
#end if
#if 'ss' in $oo
    && test -f 'output/scaffolds.fasta' && python '$write_tsv_script' < 'output/scaffolds.fasta' > '$out_ss' || echo 'No scaffolds.fasta.'
#end if
    ]]></token>
    <token name="@T@"><![CDATA[
-t \${GALAXY_SLOTS:-4}
    ]]></token>
    <token name="@TRUSTEDCONTIGS@"><![CDATA[
#for $read in $arf.trustedcontigs
    #if $read
        --trustedcontigs $read.datatype.file_ext.replace('fastqsanger', 'fastq')
    #end if
#end for
    ]]></token>
    <token name="@TSLR@"><![CDATA[
#for $read in $arf.tslr
    #if $read
        --tslr $read.datatype.file_ext.replace('fastqsanger', 'fastq')
    #end if
#end for
    ]]></token>
    <token name="@UNTRUSTEDCONTIGS@"><![CDATA[
#for $read in $arf.untrustedcontigs
    #if $read
        --untrustedcontigs $read.datatype.file_ext.replace('fastqsanger', 'fastq')
    #end if
#end for
    ]]></token>

    <!--
        config_file
    -->

    <xml name="config_script">
        <configfile name="write_tsv_script"><![CDATA[
#!/usr/bin/env python
import sys,re
search_str = r'^>(NODE|\S+)_(\d+)(?:_|\s)length_(\d+)_cov_(\d+\.*\d*).*\$'
replace_str = r'\1_\2\t\3\t\4'
cmd = re.compile(search_str)
sys.stdout.write('#name\tlength\tcoverage\n')
for i,line in enumerate(sys.stdin):
    if cmd.match(line):
        sys.stdout.write(cmd.sub(replace_str,line))
        ]]></configfile>
    </xml>

    <!--
      input
    -->

    <xml name="covcutoff">
        <conditional name="cov_cond">
            <param name="cov_sel" type="select" label="Set coverage cutoff option" help="(--cov-cutoff)">
                <option value="off">Off</option>
                <option value="auto">Auto</option>
                <option value="value">User specific</option>
            </param>
            <when value="off"/>
            <when value="auto"/>
            <when value="value">
                <param name="manual" type="float" min="0.0" value="" label="Set value"/>
            </when>
        </conditional>
    </xml>
    <xml name="disablerr">
        <param argument="--disable-rr" name="disablerr" type="boolean" truevalue="--disable-rr" falsevalue="" label="Disable repeat resolution stage of assembling?"/>
    </xml>
    <xml name="filetype_sel">
        <param name="filetype_sel" type="select" label="Select read file type">
            <option value="interlaced">Interlaced (-12)</option>
            <option value="separate">Separate (-1, -2)</option>
            <yield/>
            <option value="unpaired">Unpaired (-s)</option>
        </param>
    </xml>
    <xml name="filetype_sel_when">
        <when value="interlaced">
            <expand macro="reads" label="interlaced" help="(--12|-12)"/>
        </when>
        <when value="separate">
            <expand macro="reads" paramname="fwd_reads" label="forward" help="(-1)"/>
            <expand macro="reads" paramname="rev_reads" label="reverse" help="(-2)"/>
        </when>
        <yield/>
        <when value="unpaired">
            <expand macro="reads" label="unpaired" help="(-s)"/>
        </when>
    </xml>
    <xml name="iontorrent" token_help="">
        <param argument="--iontorrent" type="boolean" truevalue="--iontorrent" falsevalue="" label="Does the dataset contain IonTorrent data?" help="@HELP@"/>
    </xml>
    <xml name="kmer" token_help="" token_default="">
        <conditional name="kmer_cond">
            <param name="kmer_sel" type="select" label="Select k-mer detection option" help="Comma-separated list, all values must be odd, less than 128 and listed in ascending order. @HELP@ (-k)">
                <option value="auto">Auto</option>
                <option value="manual">User specific</option>
            </param>
            <when value="auto"/>
            <when value="manual">
                <param name="manual" type="text" value="@DEFAULT@" label="Set values"/>
            </when>
        </conditional>
    </xml>
    <xml name="nanopore">
        <param argument="--nanopore" type="data" format="@INTYPES@" multiple="true" optional="true" label="Select file with Nanopore reads"/>
    </xml>
    <xml name="orientation" token_type="" token_label="" token_fr="false" token_rf="false">
        <param name="@TYPE@_orientation" type="select" label="Select orientation of @LABEL@ reads" help="Option is ignored if no corresponding reads are applied in this library number.">
            <option value="-fr" selected="@FR@"><![CDATA[-> <- (fr)]]></option>
            <option value="-rf" selected="@RF@"><![CDATA[<- -> (rf)]]></option>
            <option value="-ff"><![CDATA[-> -> (ff)]]></option>
        </param>
    </xml>
    <xml name="pacbio">
        <param argument="--pacbio" type="data" format="@INTYPES@" multiple="true" optional="true" label="Select file with PacBio CLR reads"/>
    </xml>
    <xml name="phred">
        <param argument="--phred-offset" name="phredoffset" type="select" label="Set PHRED quality offset">
            <option value="auto" selected="true">Auto</option>
            <option value="33">33 (Sanger)</option>
            <option value="64">64 (Illumina)</option>
        </param>
    </xml>
    <xml name="reads" token_paramname="reads" token_help="" token_label="">
        <param name="@PARAMNAME@" type="data" format="@INTYPES@" label="Select file with @LABEL@ reads" help="@HELP@"/>
    </xml>
    <xml name="sanger">
        <param argument="--sanger" type="data" format="@INTYPES@" multiple="true" optional="true" label="Select file with Sanger reads"/>
    </xml>
    <xml name="trusted_contigs">
        <param argument="--trusted-contigs" name="trustedcontigs" type="data" format="@INTYPES@" multiple="true" optional="true" label="Select file with trusted contigs" help="Reliable contigs of the same genome, which are likely to have no misassemblies and small rate of other errors (e.g. mismatches and indels). This option is not intended for contigs of the related species."/>
    </xml>
    <xml name="tslr">
        <param argument="--tslr" type="data" format="@INTYPES@" multiple="true" optional="true" label="Select file with TSLR contigs"/>
    </xml>
    <xml name="untrusted_contigs">
        <param argument="--untrusted-contigs" name="untrustedcontigs" type="data" format="@INTYPES@" multiple="true" optional="true" label="Select file with untrusted contigs" help="Contigs of the same genome, quality of which is average or unknown. Contigs of poor quality can be used but may introduce errors in the assembly. This option is also not intended for contigs of the related species."/>
    </xml>

    <!--
      output
    -->

    <xml name="out_ag">
        <data name="out_ag" format="fastg" from_work_dir="output/assembly_graph.fastg" label="${tool.name} on ${on_string}: Assembly graph">
            <filter>'ag' in oo</filter>
        </data>
    </xml>
    <xml name="out_ags">
        <data name="out_ags" format="txt" from_work_dir="output/assembly_graph_with_scaffolds.gfa" label="${tool.name} on ${on_string}: Assembly graph with scaffolds">
            <filter>'ags' in oo</filter>
        </data>
    </xml>
    <xml name="out_c">
        <data name="out_c" format="fasta" from_work_dir="output/contigs.fasta" label="${tool.name} on ${on_string}: Contigs">
            <filter>'c' in oo</filter>
        </data>
    </xml>
    <xml name="out_cp">
        <data name="out_cp" format="txt" from_work_dir="output/contigs.paths" label="${tool.name} on ${on_string}: Contigs paths">
            <filter>'cp' in oo</filter>
        </data>
    </xml>
    <xml name="out_cr">
        <!-- some mode combinations create fastq, some fasta -->
        <collection name="out_cr" type="list" label="${tool.name} on ${on_string}: Corrected reads">
            <filter>'cr' in oo</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.fastq\.gz" format="fastq" directory="output/corrected"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.fasta\.gz" format="fasta" directory="output/corrected"/>
        </collection>
    </xml>
    <xml name="out_cs">
        <data name="out_cs" format="tabular" label="${tool.name} on ${on_string}: Contigs stats">
            <actions>
                <action name="column_names" type="metadata" default="name,length,coverage"/>
            </actions>
            <filter>'cs' in oo</filter>
        </data>
    </xml>
    <xml name="out_l">
        <data name="out_l" format="txt" from_work_dir="output/spades.log" label="${tool.name} on ${on_string}: Log">
            <filter>'l' in oo</filter>
        </data>
    </xml>
    <xml name="out_s">
        <data name="out_s" format="fasta" from_work_dir="output/scaffolds.fasta" label="${tool.name} on ${on_string}: Scaffolds">
            <filter>'s' in oo</filter>
        </data>
    </xml>
    <xml name="out_sp">
        <data name="out_sp" format="txt" from_work_dir="output/scaffolds.paths" label="${tool.name} on ${on_string}: Scaffolds paths">
            <filter>'sp' in oo</filter>
        </data>
    </xml>
    <xml name="out_ss">
        <data name="out_ss" format="tabular" label="${tool.name} on ${on_string}: Scaffolds stats">
            <actions>
                <action name="column_names" type="metadata" default="name,length,coverage"/>
            </actions>
            <filter>'ss' in oo</filter>
        </data>
    </xml>

    <!--
      help
    -->

    <token name="@HELP_IN@"><![CDATA[
SPAdes works with Illumina or IonTorrent reads and is capable of providing hybrid assemblies using PacBio, Oxford Nanopore and Sanger reads. You can also provide additional contigs that will be used as long reads.

- Illumina paired-end/high-quality mate-pairs/unpaired reads
- IonTorrent paired-end/high-quality mate-pairs/unpaired reads
- PacBio CCS reads

SPAdes takes as input

- Single-read
- Paired-end
- Mate-pair
- High-quality mate-pair
- Lucigen NxSeq® Long Mate Pair

Depending on the read type, input can be provided as interlaced, forward and reverse, merged and unpaired files.

A detailed description can be found in the `input section <https://github.com/ablab/spades/blob/spades_@TOOL_VERSION@/README.md#sec3.1>`_ of the manual.
    ]]></token>
    <token name="@HELP_OUT_AG@"><![CDATA[
- Assembly graph
    ]]></token>
    <token name="@HELP_OUT_AGS@"><![CDATA[
- Assembly graph with scaffolds
    ]]></token>
    <token name="@HELP_OUT_C@"><![CDATA[
- Contigs
    ]]></token>
    <token name="@HELP_OUT_CP@"><![CDATA[
- Contigs paths in the assembly graph
    ]]></token>
    <token name="@HELP_OUT_CS@"><![CDATA[
- Contigs stats
]]></token>
    <token name="@HELP_OUT_CR@"><![CDATA[
- Corrected reads by BayesHammer
    ]]></token>
    <token name="@HELP_OUT_L@"><![CDATA[
- Log file
    ]]></token>
    <token name="@HELP_OUT_S@"><![CDATA[
- Scaffolds (recommended for use as resulting sequences)
    ]]></token>
    <token name="@HELP_OUT_SP@"><![CDATA[
- Scaffolds paths in the assembly graph
    ]]></token>
    <token name="@HELP_OUT_SS@"><![CDATA[
- Scaffolds stats
]]></token>
    <token name="@HELP_WID@"><![CDATA[
SPAdes - St. Petersburg genome assembler - is an assembly toolkit containing various assembly pipelines.
    ]]></token>
</macros>