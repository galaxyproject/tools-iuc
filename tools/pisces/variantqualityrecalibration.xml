<?xml version="1.0"?>
<tool id="pisces_variantqualityrecalibration" name="Pisces VariantQualityRecalibration" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>for gVCF file processing</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize 
mkdir data &&
ln -s '${vcf}' 'data/variants.vcf' &&

## run
/home/stephan/Projects/tools/pisces/All_5.3.0.0/VariantQualityRecalibration ## TODO
## required
--vcf 'data/variants.vcf'
## common
--outfolder 'results' ## -o, --out
#if $co.locicount != '' ## TODO
    --locicount $co.locicount
#end if
-b $co.b
-f $co.f
-z $co.z
-q $co.q
$co.dobasicchecks
$co.doampliconpositionchecks
--extentofedgeregion $co.extentofedgeregion
--alignmentwarningthreshold $co.alignmentwarningthreshold

&& ls results -lisa
    ]]></command>
    <inputs>
        <expand macro="vcf"/>
        <section name="co" title="Common options" expanded="true">
            <param argument="--locicount" type="integer" value="" optional="true" label="Set loci count" help="When using a vcf instead of a genome.vcf, the user should input the estimated number of loci."/>
            <param argument="-b" type="integer" value="20" label="Set baseline noise level" help="The new noise level is never recalibrated to lower than this value."/>
            <param argument="-f" type="integer" value="30" label="Set filter Q score" help="If a variant gets recalibrated, when we apply the 'LowQ' filter"/>
            <param argument="-z" type="float" value="2.0" label="Set thresholding parameter" help="How many std devs above averge observed noise will the algorithm tolerate, before deciding a mutation type is likely to be artifact."/>
            <param argument="-q" type="integer" value="100" label="Set maximum Q score" help="If a variant gets recalibrated, when capping the new Q score."/>
            <param argument="--dobasicchecks" type="boolean" truevalue="--dobasicchecks true" falsevalue="--dobasicchecks false" checked="true" label="Look for over represented mutations across all positions?"/>
            <param argument="--doampliconpositionchecks" type="boolean" truevalue="--doampliconpositionchecks true" falsevalue="--doampliconpositionchecks false" label="Do amplicon position checks" help="Look for over represented mutations within 'N' bases of edges? To set N, see 'extentofedgeregion'. This is still experimental, only meant to roughly quantify if specific variants are amassing near coverage edges."/>
            <param argument="--extentofedgeregion" type="integer" value="4" label="Set extent of edge region" help="Set number of bases around a detected edge constitute an edge region. The 'N' defining the region size when doing amplicon position checks."/>
            <param argument="--alignmentwarningthreshold" type="integer" value="10" label="Set alignment warning threshold" help="If variants are X times more frequent around amplicon edges (approximated by coverage discontinuities), consider lowering their Q scores."/>
        </section>
        <section name="oo" title="VCF writer and output options" expanded="true">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="ao">Applied options</option>                
                <option value="c" selected="true">Counts</option>
                <option value="l">Log</option>
                <option value="vr" selected="true">VCF recal</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <expand macro="out_ao" tool="VQR"/>
        <data name="out_c" format="txt" from_work_dir="results/variants.counts" label="${tool.name} on ${on_string}: Counts">
            <filter>'c' in oo['out']</filter>
        </data>
        <expand macro="out_l" filename="VQRLogs/VQRLog.txt"/>
        <data name="out_vr" format="txt" from_work_dir="results/variants.vcf.recal" label="${tool.name} on ${on_string}: VCF recal">
            <filter>'vr' in oo['out']</filter>
        </data>   
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="4">
            <param name="vcf" value="control.vcf"/>
            <section name="oo">
                <param name="out" value="ao,c,l,vr"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="2991"/>
                </assert_contents>
            </output>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="22"/>
                    <has_line line="AllPossibleVariants&#009;16057"/>
                </assert_contents>
            </output>        
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_vr">
                <assert_contents>
                    <has_n_lines n="16080"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
        </test>                                                   
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

Pisces VariantQualityRecalibration (VQR) is used to post-process (g)VCF files. VQR recalibrates the variant quality scores (Q scores) given to variants within a sample, simply based on if the particular variants are over represented in the given sample. This tool was specifically developed to facilitate the filtering of FFPE artifacts on highly degraded samples, but is not limited to these types of signature events. VQR self-discovers which types of variants are over represented, and may be used to filter out a range of system artifacts or upstream sample issues. VQR requires a (g)VCF as input, and outputs an adjusted (g)VCF, where variant Q scores have been downgraded accordingly.

**Input**

- (g)VCF file that should be formatted such that each variant allele has its own line in the (g)VCF file

**Output**

- Applied options
- Log
- Counts
- VCF recal

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>