<?xml version="1.0"?>
<tool id="pisces_vennvcf" name="Pisces VennVcf" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>intersection and disjoint segmentation</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## skipped --help/-h, --version/-v, --repeatfilter_toberetired

## initialize
mkdir data &&
ln -s '${if1}' 'data/A.vcf' &&
ln -s '${if2}' 'data/B.vcf' &&
#if $co.consensus
    ln -s '${co.consensus}' 'data/consensus.vcf' &&
#end if

## run
/home/stephan/Projects/tools/pisces/All_5.3.0.0/VennVcf ## TODO
## required
--if 'data/A.vcf,data/B.vcf'
## common
--outfolder 'results' ## -o, --out
#if $co.consensus
    --consensus 'data/consensus.vcf'
#end if
--debug false
## bam filtering
@BAM_FILTERNG@
## variant calling
@VARIANT_CALLING@
## vcf writer and output
$oo.gvcf
$oo.crushvcf
$oo.reportnocalls
$oo.reportrccounts
$oo.reporttscounts
$oo.reportsuspiciouscoveragefraction

## TODO
&& ls results -lisa
&& ls data -lisa
    ]]></command>
    <inputs>
        <param name="if1" type="data" format="vcf" label="Select first variant file (A)" help="(--if)"/>
        <param name="if2" type="data" format="vcf" label="Select second variant file (B)" help="(--if)"/>
        <section name="co" title="Common options" expanded="true">
            <param argument="--consensus" type="data" format="vcf" optional="true" label="Select consensus file"/>
        </section>
        <expand macro="bamfilteringoptions"/>
        <expand macro="variantcallingoptions"/>
        <section name="oo" title="VCF writer and output options" expanded="true">
            <expand macro="gvcf"/>
            <expand macro="crushvcf"/>
            <expand macro="reportnocalls"/>
            <expand macro="reportrccounts"/>
            <expand macro="reporttscounts"/>
            <expand macro="reportsuspiciouscoveragefraction"/>
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="ao">Applied options</option>
                <option value="c">Consensus</option>
                <option value="l">Log</option>
                <option value="AandB" selected="true">AandB</option>
                <option value="AnotB" selected="true">AnotB</option>
                <option value="BandA" selected="true">BandA</option>
                <option value="BnotA" selected="true">BnotA</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <expand macro="out_ao" tool="VennVcf"/>
        <data name="out_c" format="vcf" from_work_dir="results/data/consensus.vcf" label="${tool.name} on ${on_string}: Consensus">
            <filter>'c' in oo['out'] and co['consensus'] != null</filter>
        </data>
        <expand macro="out_l" tool="VennVcf"/>
        <data name="out_AandB" format="vcf" from_work_dir="results/A_and_B.vcf" label="${tool.name} on ${on_string}: A and B">
            <filter>'AandB' in oo['out']</filter>
        </data>
        <data name="out_AnotB" format="vcf" from_work_dir="results/A_not_B.vcf" label="${tool.name} on ${on_string}: A not B">
            <filter>'AnotB' in oo['out']</filter>
        </data>
        <data name="out_BandA" format="vcf" from_work_dir="results/B_and_A.vcf" label="${tool.name} on ${on_string}: B and A">
            <filter>'BandA' in oo['out']</filter>
        </data>
        <data name="out_BnotA" format="vcf" from_work_dir="results/B_not_A.vcf" label="${tool.name} on ${on_string}: B not A">
            <filter>'BnotA' in oo['out']</filter>
        </data>
    </outputs>
    <tests>
        <!-- no test implemented for adaptivegenotypeparameters_fromfile -->

        <!-- #1 default -->
        <test expect_num_outputs="6">
            <param name="if1" value="a.vcf"/>
            <param name="if2" value="b.vcf"/>
            <section name="oo">
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="3904"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="43"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="41"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="47"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="44"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 -->
        <test expect_num_outputs="6">
            <param name="if1" value="a.vcf"/>
            <param name="if2" value="b.vcf"/>
            <section name="bfo">
                <param name="minbasecallquality" value="19"/>
                <param name="minmapquality" value="2"/>
                <param name="filterduplicates" value="false"/>
                <param name="pp" value="false"/>
            </section>
            <section name="vco">
                <param name="minvq" value="21"/>
                <param name="mindp" value="9"/>
                <param name="vqfilter" value="31"/>
                <param name="vffilter" value="0.1"/>
                <param name="gqfilter" value="1"/>
                <param name="mindpfilter" value="31"/>
                <param name="ssfilter" value="false"/>
                <param name="nl" value="1"/>
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="somatic"/>
                    <param name="targetlodfrequency" value="0.02"/>
                    <param name="minvf" value="0.02"/>
                </conditional>
                <param name="sbmodel" value="poisson"/>
                <param name="maxvq" value="101"/>
                <param name="maxgq" value="101"/>
                <param name="maxgp" value="3001"/>
                <param name="mingq" value="1"/>
                <param name="sbfilter" value="0.6"/>
                <param name="noisemodel" value="window"/>
                <param name="gender" value="true"/>
                <param name="rmxnfilter" value="6,10,0.21"/>
                <param name="ncfilter" value="0.7"/>
                <param name="abfilter" value="0.01"/>
            </section>
            <section name="oo">
                <param name="gvcf" value="false"/>
                <param name="crushvcf" value="false"/>
                <param name="reportnocalls" value="true"/>
                <param name="reportrccounts" value="true"/>
                <param name="reporttscounts" value="true"/>
                <param name="reportsuspiciouscoveragefraction" value="true"/>
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="4146"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="47"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="43"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="55"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="50"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="6">
            <param name="if1" value="a.vcf"/>
            <param name="if2" value="b.vcf"/>
            <section name="vco">
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="diploid"/>
                    <param name="diploidsnvgenotypeparameters" value="0.3,0.8,0.9"/>
                    <param name="diploidindelgenotypeparameters" value="0.3,0.8,0.9"/>
                </conditional>
                <param name="gender" value="false"/>
            </section>
            <section name="oo">
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="4047"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="45"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="42"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="51"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="47"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 -->
        <test expect_num_outputs="6">
            <param name="if1" value="a.vcf"/>
            <param name="if2" value="b.vcf"/>
            <section name="vco">
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="DiploidByAdaptiveGT"/>
                    <param name="adaptivegenotypeparameters_snvmodel" value="0.038,0.438,0.975"/>
                    <param name="adaptivegenotypeparameters_indelmodel" value="0.038,0.442,0.904"/>
                    <param name="adaptivegenotypeparameters_snvprior" value="0.756,0.153,0.0918"/>
                    <param name="adaptivegenotypeparameters_indelprior" value="0.963,0.0265,0.0113"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="4340"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="47"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="43"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="55"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="50"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 -->
        <test expect_num_outputs="1">
            <param name="if1" value="a.vcf"/>
            <param name="if2" value="b.vcf"/>
            <section name="co">
                <param name="consensus" value="a.vcf"/>
            </section>
            <section name="oo">
                <param name="out" value="c"/>
            </section>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="46"/>
                    <has_text_matching expression="chr12.+"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

Pisces VennVcf is a tool to sort variants and create intersection / disjoint segmentation of two input (g)VCF files.

**Input**

@HELP_AGP@
- Two sorted variant files (uncrushed for somatic VCF, crushed for diploid VCF) ((g)VCF)
- Consensus file (VCF, optional)

**Output**

@HELP_AO@
- Consensus file, e.g. to gain confident calls for a set of replicates (VCF)
- A not B: all variants from file A that were also found in file B (VCF)
- A and B: all variants from file A that were not found in file B (VCF)
- B not A: all variants from file B that were also found in file A (VCF)
- B and A: all variants from file B that were also found in file A (VCF)
@HELP_L@

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>