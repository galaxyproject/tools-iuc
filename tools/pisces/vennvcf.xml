<?xml version="1.0"?>
<tool id="pisces_vennvcf" name="Pisces VennVcf" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>intersection and disjoint segmentation</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize
## variants
mkdir data &&
ln -s '${if1}' 'data/A.vcf' &&
ln -s '${if2}' 'data/B.vcf' &&
## consensus
#if $co.consensus
    ln -s '${co.consensus}' 'data/consensus.vcf' &&
#end if

## run
/home/stephan/Projects/tools/pisces/All_5.3.0.0/VennVcf ## TODO
## required
--if 'data/A.vcf,data/B.vcf'
## common
--outfolder 'results' ## -o, --out
#if $co.consensus
    --consensus 'data/consensus.vcf'
#end if
## bam filtering
--minbasecallquality $bfo.minbasecallquality ## --minbq
--minmapquality $bfo.minmapquality ## --minmq
$bfo.filterduplicates ## --duplicatereadfilter
$bfo.pp ## --onlyuseproperpairs
## variant calling
--minvq $vco.minvq ## --minvariantqscore
--mindp $vco.mindp ## -c, --mindepth, --mincoverage
--vqfilter $vco.vqfilter ## --variantqualityfilter
#if $vco.vffilter != ''
    --vffilter $vco.vffilter ## --minvariantfrequencyfilter
#end if
#if $vco.gqfilter != ''
    --gqfilter $vco.gqfilter ## --genotypequalityfilter
#end if
#if $vco.mindpfilter != ''
    --mindpfilter $vco.mindpfilter ## --mindepthfilter
#end if
$vco.ssfilter ## --enablesinglestrandfilter
#if $vco.nl != ''
    --nl $vco.nl ## --noiselevelforqmodel
#end if
--ploidy $vco.ploidy_cond.ploidy_sel
#if $vco.ploidy_cond.ploidy_sel == 'somatic'
    --minvf $vco.ploidy_cond.minvf ## --minimumvariantfrequency, --minimumfrequency
    --targetlodfrequency $vco.ploidy_cond.targetlodfrequency ## --targetvf
#elif $vco.ploidy_cond.ploidy_sel == 'diploid'
    --diploidsnvgenotypeparameters '$vco.ploidy_cond.diploidsnvgenotypeparameters'
    --diploidindelgenotypeparameters '$vco.ploidy_cond.diploidindelgenotypeparameters'
#elif $vco.ploidy_cond.ploidy_sel == 'DiploidByAdaptiveGT'
    #if $vco.ploidy_cond.adaptivegenotypeparameters_fromfile
        --adaptivegenotypeparameters_fromfile '$vco.ploidy_cond.adaptivegenotypeparameters_fromfile'
    #end if
    --adaptivegenotypeparameters_snvmodel '$vco.ploidy_cond.adaptivegenotypeparameters_snvmodel'
    --adaptivegenotypeparameters_indelmodel '$vco.ploidy_cond.adaptivegenotypeparameters_indelmodel'
    --adaptivegenotypeparameters_snvprior '$vco.ploidy_cond.adaptivegenotypeparameters_snvprior'
    --adaptivegenotypeparameters_indelprior '$vco.ploidy_cond.adaptivegenotypeparameters_indelprior'
#end if
--sbmodel $vco.sbmodel
--maxvq $vco.maxvq ## --maxvariantqscore
--mingq $vco.mingq ## --maxgenotypeqscore
--maxgq $vco.maxgq ## --maxgenotypeposteriorscore
--maxgp $vco.maxgp ## --mingenotypeqscore
--sbfilter $vco.sbfilter ## --maxacceptablestrandbiasfilter
--noisemodel $vco.noisemodel
#if $vco.gender != ''
    --gender $vco.gender
#end if
#if $vco.rmxnfilter == ''
    --rmxnfilter false
#else
    --rmxnfilter '$vco.rmxnfilter'
#end if
--ncfilter $vco.ncfilter
#if $vco.abfilter != ''
    --abfilter $vco.abfilter
#end if
## vcf writer and output
$oo.gvcf
$oo.crushvcf
$oo.reportnocalls
$oo.reportrccounts
$oo.reporttscounts
$oo.reportsuspiciouscoveragefraction
    ]]></command>
    <inputs>
        <param name="if1" type="data" format="vcf" label="Select first variant file (A)" help="(--if)"/>
        <param name="if2" type="data" format="vcf" label="Select second variant file (B)" help="(--if)"/>
        <section name="co" title="Common options" expanded="true">
            <param argument="--consensus" type="data" format="vcf" optional="true" label="Select consensus file"/>
        </section>
        <section name="bfo" title="BAM filtering options" expanded="true">
            <expand macro="minbasecallquality" help="(--minbq, --minbasecallquality)"/>
            <expand macro="minmapquality" help="(--minmq, --minmapquality)"/>
            <expand macro="filterduplicates"/>
            <expand macro="pp"/>
        </section>
        <section name="vco" title="Variant calling options" expanded="true">
            <expand macro="minvq"/>
            <expand macro="mindp"/>
            <expand macro="vqfilter"/>
            <expand macro="vffilter"/>
            <expand macro="gqfilter"/>
            <expand macro="mindpfilter"/>
            <expand macro="ssfilter"/>
            <expand macro="nl"/>
            <expand macro="ploidy"/>
            <expand macro="sbmodel"/>
            <expand macro="maxvq"/>
            <expand macro="maxgq"/>
            <expand macro="maxgp"/>
            <expand macro="mingq"/>
            <expand macro="sbfilter"/>
            <expand macro="noisemodel"/>
            <expand macro="gender"/>
            <expand macro="rmxnfilter"/>
            <expand macro="ncfilter"/>
            <expand macro="abfilter"/>
        </section>
        <section name="oo" title="VCF writer and output options" expanded="true">
            <expand macro="gvcf"/>
            <param argument="--crushvcf" type="boolean" truevalue="--crushvcf true" falsevalue="--crushvcf false" label="Crush vcf output to one line per loci?"/>
            <expand macro="reportnocalls"/>
            <expand macro="reportrccounts"/>
            <expand macro="reporttscounts"/>
            <expand macro="reportsuspiciouscoveragefraction"/>
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="ao">Applied options</option>
                <option value="c">Consensus</option>
                <option value="l">Log</option>
                <option value="AandB" selected="true">AandB</option>
                <option value="AnotB" selected="true">AnotB</option>
                <option value="BandA" selected="true">BandA</option>
                <option value="BnotA" selected="true">BnotA</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <expand macro="out_ao" tool="VennVcf"/>
        <data name="out_c" format="vcf" from_work_dir="results/data/consensus.vcf" label="${tool.name} on ${on_string}: Consensus">
            <filter>'c' in oo['out'] and co['consensus'] != null</filter>
        </data>
        <expand macro="out_l" filename="VennVcfLogs/VennVcfLog.txt"/>
        <data name="out_AandB" format="vcf" from_work_dir="results/A_and_B.vcf" label="${tool.name} on ${on_string}: A and B">
            <filter>'AandB' in oo['out']</filter>
        </data>
        <data name="out_AnotB" format="vcf" from_work_dir="results/A_not_B.vcf" label="${tool.name} on ${on_string}: A not B">
            <filter>'AnotB' in oo['out']</filter>
        </data>
        <data name="out_BandA" format="vcf" from_work_dir="results/B_and_A.vcf" label="${tool.name} on ${on_string}: B and A">
            <filter>'BandA' in oo['out']</filter>
        </data>
        <data name="out_BnotA" format="vcf" from_work_dir="results/B_not_A.vcf" label="${tool.name} on ${on_string}: B not A">
            <filter>'BnotA' in oo['out']</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="6">
            <param name="if1" value="control.vcf"/>
            <param name="if2" value="tumor.vcf"/>
            <section name="oo">
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="3953"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="54"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="39"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="54"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="27"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 -->
        <test expect_num_outputs="6">
            <param name="if1" value="control.vcf"/>
            <param name="if2" value="tumor.vcf"/>
            <section name="bfo">
                <param name="minbasecallquality" value="19"/>
                <param name="minmapquality" value="2"/>
                <param name="filterduplicates" value="false"/>
                <param name="pp" value="false"/>
            </section>
            <section name="vco">
                <param name="minvq" value="21"/>
                <param name="mindp" value="9"/>
                <param name="vqfilter" value="31"/>
                <param name="vffilter" value="0.1"/>
                <param name="gqfilter" value="1"/>
                <param name="mindpfilter" value="31"/>
                <param name="ssfilter" value="false"/>
                <param name="nl" value="1"/>
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="somatic"/>
                    <param name="targetlodfrequency" value="0.02"/>
                    <param name="minvf" value="0.02"/>
                </conditional>
                <param name="sbmodel" value="poisson"/>
                <param name="maxvq" value="101"/>
                <param name="maxgq" value="101"/>
                <param name="maxgp" value="3001"/>
                <param name="mingq" value="1"/>
                <param name="sbfilter" value="0.6"/>
                <param name="noisemodel" value="window"/>
                <param name="gender" value="true"/>
                <param name="rmxnfilter" value="6,10,0.21"/>
                <param name="ncfilter" value="0.7"/>
                <param name="abfilter" value="0.01"/>
            </section>
            <section name="oo">
                <param name="gvcf" value="false"/>
                <param name="crushvcf" value="false"/>
                <param name="reportnocalls" value="true"/>
                <param name="reportrccounts" value="true"/>
                <param name="reporttscounts" value="true"/>
                <param name="reportsuspiciouscoveragefraction" value="true"/>
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="4195"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="62"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="43"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="70"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="39"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="6">
            <param name="if1" value="control.vcf"/>
            <param name="if2" value="tumor.vcf"/>
            <section name="vco">
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="diploid"/>
                    <param name="diploidsnvgenotypeparameters" value="0.3,0.8,0.9"/>
                    <param name="diploidindelgenotypeparameters" value="0.3,0.8,0.9"/>
                </conditional>
                <param name="gender" value="false"/>
            </section>
            <section name="oo">
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="4096"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="56"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="40"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="58"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="30"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 -->
        <test expect_num_outputs="6">
            <param name="if1" value="control.vcf"/>
            <param name="if2" value="tumor.vcf"/>
            <section name="vco">
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="DiploidByAdaptiveGT"/>
                    <param name="adaptivegenotypeparameters_snvmodel" value="0.038,0.438,0.975"/>
                    <param name="adaptivegenotypeparameters_indelmodel" value="0.038,0.442,0.904"/>
                    <param name="adaptivegenotypeparameters_snvprior" value="0.756,0.153,0.0918"/>
                    <param name="adaptivegenotypeparameters_indelprior" value="0.963,0.0265,0.0113"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="out" value="ao,l,AandB,AnotB,BandA,BnotA"/>
            </section>
            <output name="out_ao">
                <assert_contents>
                    <has_size value="4389"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output name="out_AandB">
                <assert_contents>
                    <has_n_lines n="58"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_AnotB">
                <assert_contents>
                    <has_n_lines n="41"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BandA">
                <assert_contents>
                    <has_n_lines n="62"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
            <output name="out_BnotA">
                <assert_contents>
                    <has_n_lines n="33"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 -->
        <test expect_num_outputs="1">
            <param name="if1" value="control.vcf"/>
            <param name="if2" value="tumor.vcf"/>
            <section name="co">
                <param name="consensus" value="control.vcf"/>
            </section>
            <section name="oo">
                <param name="out" value="c"/>
            </section>
            <output name="out_c">
                <assert_contents>
                    <has_n_lines n="16271"/>
                    <has_text_matching expression="chrM.+"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

Pisces VennVcf is a tool to sort variants and create intersection / disjoint segmentation of two input (g)VCF files.

**Input**

- two sorted (g)VCF files (uncrushed for somatic VCF, crushed for diploid VCF)
- consensus VCF.

**Output**

- A not B: all variants from file A that were also found in file B (VCF)
- A and B: all variants from file A that were not found in file B (VCF)
- B not A: all variants from file B that were also found in file A (VCF)
- B and A: all variants from file B that were also found in file A (VCF)
- applied options (JSON)
- log
- consensus (VCF)

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>