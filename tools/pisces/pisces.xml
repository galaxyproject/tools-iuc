<?xml version="1.0"?>
<tool id="pisces_pisces" name="Pisces" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>variant caller for somatic and germline NGS Data</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[ 
## preprocessing
## genome
@GENOMESIZE@
## samples
mkdir data &&
#for $i, $current in enumerate($bam)
    ln -s '${current}' 'data/sample_${i}.bam' &&
    ln -s '${current.metadata.bam_index}' 'data/sample_${i}.bam.bai' &&
#end for
## interval
mkdir interval &&
#if $co.intervalpaths
    #for $i, $current in enumerate($intervalpaths)
        ln -s '${current}' 'interval/interval_${i}.txt' &&
    #end for
#end if

## run
/home/stephan/Projects/tools/pisces/All_5.3.0.0/Pisces ## TODO
## required parameters
--genomepaths 'genome'
--bampaths 'data'
## common
#if $co.intervalpaths
    --intervalpaths 'interval'
#end if
$co.mode_cond.mode_sel ## --forcedalleles | --crushvcf true
#if $co.mode_cond.mode_sel == '--forcedalleles'
    '$co.mode_cond.forcedalleles'
#end if
$co.callmnvs_cond.callmnvs_sel
#if $co.callmnvs_cond.callmnvs_sel == '--callmnvs true'    
    --maxmnvlength $co.callmnvs_cond.maxmnvlength
    --maxgapbetweenmnv $co.callmnvs_cond.maxgapbetweenmnv
#end if
#if 'ab' in $oo.out or 'rsb' in $oo.out
    --outputsbfiles true
#end if
#if $co.chrfilter == ''
    --threadbychr true ## also splits *.AmpliconBias.csv and *.ReadStrandBias.txt by chromosome (via --outputsbfiles true, --collapse true, --insidesubprocess false), not compatible with --chrfilter
#end if
$co.collapse_cond.collapse_sel
#if $co.collapse_cond.collapse_sel == '--collapse true'    
    --collapsefreqthreshold $co.collapse_cond.collapsefreqthreshold
    --collapsefreqratiothreshold $co.collapse_cond.collapsefreqratiothreshold    
    #if $co.collapse_cond.priorspath
        --priorspath '$co.collapse_cond.priorspath'
    #end if    
    $co.collapse_cond.trimmnvpriors
#end if
--coveragemethod $co.coveragemethod
--baselogname 'log.txt'
--debug true
$co.usestitchedxd
--trackedanchorsize $co.trackedanchorsize
##--insidesubprocess true ## TODO required?
--multiprocess true
#if $co.chrfilter != ''
    --chrfilter '$co.chrfilter'
#end if
--outfolder 'results'
--maxthreads \${GALAXY_SLOTS:-4}

## bam filtering
--minbasecallquality $bfo.minbasecallquality
--minmapquality $bfo.minmapquality
$bfo.filterduplicates
$bfo.pp

## variant calling
--minvq $vco.minvq
--mindp $vco.mindp
--vqfilter $vco.vqfilter
#if $vco.vffilter != '' ## TODO
    --vffilter $vco.vffilter
#end if
#if $vco.gqfilter != ''
    --gqfilter $vco.gqfilter
#end if
#if $vco.mindpfilter != '' ## TODO
    --mindpfilter $vco.mindpfilter
#end if
$vco.ssfilter
#if $vco.nl != '' ## TODO
    --nl $vco.nl
#end if
--ploidy $vco.ploidy_cond.ploidy_sel
#if $vco.ploidy_cond.ploidy_sel == 'somatic'
    --minvf $vco.ploidy_cond.minvf
    --targetlodfrequency $vco.ploidy_cond.targetlodfrequency
#elif $vco.ploidy_cond.ploidy_sel == 'diploid'
    --diploidsnvgenotypeparameters '$vco.ploidy_cond.diploidsnvgenotypeparameters'
    --diploidindelgenotypeparameters '$vco.ploidy_cond.diploidindelgenotypeparameters'
#elif $vco.ploidy_cond.ploidy_sel == 'DiploidByAdaptiveGT'
    #if $vco.ploidy_cond.adaptivegenotypeparameters_fromfile
        --adaptivegenotypeparameters_fromfile '$vco.ploidy_cond.adaptivegenotypeparameters_fromfile'
    #end if
    --adaptivegenotypeparameters_snvmodel '$vco.ploidy_cond.adaptivegenotypeparameters_snvmodel'
    --adaptivegenotypeparameters_indelmodel '$vco.ploidy_cond.adaptivegenotypeparameters_indelmodel'
    --adaptivegenotypeparameters_snvprior '$vco.ploidy_cond.adaptivegenotypeparameters_snvprior'
    --adaptivegenotypeparameters_indelprior '$vco.ploidy_cond.adaptivegenotypeparameters_indelprior'
#end if
--sbmodel $vco.sbmodel
--maxvq $vco.maxvq
--mingq $vco.mingq
--maxgq $vco.maxgq
--maxgp $vco.maxgp
--sbfilter $vco.sbfilter
--noisemodel $vco.noisemodel          
#if $vco.gender != ''
    --gender $vco.gender
#end if
#if $vco.rmxnfilter == ''
    --rmxnfilter false
#else           
    --rmxnfilter '$vco.rmxnfilter'
#end if
--ncfilter $vco.ncfilter
#if $vco.abfilter != ''
    --abfilter $vco.abfilter
#end if

## vcf writer
$oo.gvcf
$vcfo.reportnocalls
$vcfo.reportrccounts
$vcfo.reporttscounts
$vcfo.reportsuspiciouscoveragefraction

## postprocessing
## merge AmpliconBias and include header only once
#for $i, $current in enumerate($bam)
    && find 'results' -name 'sample_${i}*AmpliconBias*' -print0 | xargs -0 awk 'NR==1 {header=\$_} FNR==1 && NR!=1 { \$_ ~ \$header getline; } {print}' > 'results/sample_${i}.ab.csv'
#end for
## merge ReadStrandBias and include header only once
#for $i, $current in enumerate($bam)
    && find 'results' -name 'sample_${i}*ReadStrandBias*' -print0 | xargs -0 awk 'NR==1 {header=\$_} FNR==1 && NR!=1 { \$_ ~ \$header getline; } {print}' > 'results/sample_${i}.rsb.txt'
#end for
    ]]></command>
    <inputs>
        <!-- CreateGenomeSizeFile.dll -->
        <expand macro="genome" help="; Pisces -g, --genomepaths, --genomefolders"/>
        <expand macro="genome_description"/>
        <!-- GeminiMulti.dll -->
        <expand macro="bam" multiple="true" label="Select sample file(s)" help="(-b, --bam, --bampaths)"/>
        <section name="co" title="Common options" expanded="true">
            <param name="intervalpaths" type="data" format="text" multiple="true" optional="true" label="Select interval file" help="(-i, --intervalpaths)"/> <!-- TODO not tested -->            
            <conditional name="mode_cond">
                <param name="mode_sel" type="select" label="Select mode">
                    <option value="" selected="true">None</option>
                    <option value="--crushvcf true">Crush VCF to one line per loci (--crushvcf)</option>
                    <option value="--forcedalleles">Select file with forced alleles (--forcedalleles)</option>
                </param>
                <when value=""/>
                <when value="--crushvcf true"/>
                <when value="--forcedalleles">
                    <param argument="--forcedalleles" type="data" format="vcf" label="Select file with alleles that are forced to report"/>  <!-- TODO not tested -->  
                </when>
            </conditional>
            <conditional name="callmnvs_cond">
                <param name="callmnvs_sel" type="select" label="Call multiple nucleotide variants?" help="MNVs a.k.a. phased SNPs (--callmnvs)">
                    <option value="--callmnvs false" selected="true">No</option>
                    <option value="--callmnvs true">Yes</option>
                </param>
                <when value="--callmnvs false"/>
                <when value="--callmnvs true">
                    <param argument="--maxmnvlength" type="integer" min="1" max="1000" value="3" label="Set maximum length for MNVs"/>
                    <param name="maxgapbetweenmnv" type="integer" min="0" value="1" label="Set maximum allowed gap between phased SNPs that can be called" help="Maximum length of reference span contained in MNV. (--maxgapbetweenmnv, --maxrefgapinmnv)"/>
                </when>
            </conditional>
            <conditional name="collapse_cond">
                <param name="collapse_sel" type="select" multiple="false" label="Collapse variants together?">
                    <option value="--collapse true" selected="true">Yes</option>
                    <option value="--collapse false">No</option>
                </param>
                <when value="--collapse true">
                    <param argument="--collapsefreqthreshold" type="float" min="0.0" max="1.0" value="0.0" label="Set minimum frequency required for target variants"/>
                    <param argument="--collapsefreqratiothreshold" type="float" min="0.0" max="1.0" value="0.5" label="Set minimum ratio required of target variant frequency to collapsible variant frequency"/>
                    <param argument="--priorspath" type="data" format="vcf" optional="true" label="Select file containing known variants" help="To preferentially reconcile variants."/>
                    <param argument="--trimmnvpriors" type="boolean" truevalue="--trimmnvpriors true" falsevalue="--trimmnvpriors false" label="Trim preceeding base from MNVs in priors file?" help="COSMIC convention is to include preceeding base for MNV, which is NOT the Pisces convention. So, if you are using -collapse and -priorsFile and your file defies Pisces MNV convention you need this."/>
                </when>
                 <when value="--collapse false"/>
            </conditional>
            <param argument="--coveragemethod" type="select" label="Select coverage method">
                <option value="approximate" selected="true">approximate</option>
                <option value="exact">exact</option>
            </param>
            <param argument="--usestitchedxd" type="boolean" truevalue="--usestitchedxd true" falsevalue="--usestitchedxd false" label="Use stitched XD?" help="Make use of the consensus read-direction information (the XD tag) from stitched reads. This is on by default when using Stitcher output BAM, but must be deliberately set for Gemini output."/>
            <param argument="--trackedanchorsize" type="integer" min="0" value="5" label="Set tracked anchor size" help="Maximum size of anchor to granularly track, when collecting reference coverage at insertion sites. If zero, all coverage counts equally. Higher values will yield more precise spanning coverage results but require more memory and compromise speed."/>
            <param argument="--chrfilter" type="text" value="" optional="true" label="Set chromosomes to process" help="Comma-separated list, e.g. Chr1,Chr2."/>
        </section>
        <section name="bfo" title="BAM filtering options" expanded="true">
            <expand macro="minbasecallquality"/>
            <expand macro="minmapquality"/>
            <expand macro="filterduplicates"/>
            <expand macro="pp"/>
        </section>
        <section name="vco" title="Variant calling options" expanded="true">
            <expand macro="minvq"/>
            <expand macro="mindp"/>
            <expand macro="vqfilter"/>
            <expand macro="vffilter"/>
            <expand macro="gqfilter"/>
            <expand macro="mindpfilter"/>
            <expand macro="ssfilter"/>
            <expand macro="nl"/>
            <expand macro="ploidy"/>
            <expand macro="sbmodel"/>
            <expand macro="maxvq"/>
            <expand macro="maxgq"/>
            <expand macro="maxgp"/>
            <expand macro="mingq"/>
            <expand macro="sbfilter"/>
            <expand macro="noisemodel"/>
            <expand macro="gender"/>
            <expand macro="rmxnfilter"/>
            <expand macro="ncfilter"/>
            <expand macro="abfilter"/>
        </section>
        <section name="vcfo" title="VCF writer options">
            <param argument="--reportnocalls" type="boolean" truevalue="--reportnocalls true" falsevalue="--reportnocalls false" label="Report no calls?"/>
            <param argument="--reportrccounts" type="boolean" truevalue="--reportrccounts true" falsevalue="--reportrccounts false" label="Report collapsed read counts?" help="When BAM files contain X1 and X2 tags, output read counts for duplex-stitched, duplex-nonstitched, simplex-stitched, and simplex-nonstitched."/>
            <param argument="--reporttscounts" type="boolean" truevalue="--reporttscounts true" falsevalue="--reporttscounts false" label="Report collapsed read count by different template strands?" help="Conditional on ReportRcCounts, output read counts for duplex-stitched, duplex-nonstitched, simplex-forward-stitched, simplex-forward-nonstitched, simplex-reverse-stitched, simplex-reverse-nonstitched."/>
            <param argument="--reportsuspiciouscoveragefraction" type="boolean" truevalue="--reportsuspiciouscoveragefraction true" falsevalue="--reportsuspiciouscoveragefraction false" label="Report fraction of total coverage?" help="For spanning variants, this is start + end coverage, so up to double the reported coverage that is 'suspicious' i.e. unanchored and bearing some resemblance to an insertion at that site."/>
        </section>
        <section name="oo" title="Output options" expanded="true">
            <param argument="--gvcf" type="boolean" truevalue="--gvcf true" falsevalue="--gvcf false" label="Create gVCF instead of VCF variant output?" help="E.g. include reference calls."/>
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="v" selected="true">Variants</option>
                <option value="ab">AmpliconBias</option>
                <option value="rsb">ReadStrandBias</option>
                <option value="l">Log</option>
                <option value="ao">Applied options</option>
                <option value="gs">GenomeSize</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <collection name="out_ab" type="list" label="${tool.name} on ${on_string}: AmpliconBias">
            <filter>'ab' in oo['out']</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.ab\.csv" format="tabular" directory="results"/>
        </collection>
        <data name="out_ao" format="json" from_work_dir="results/PiscesLogs/PiscesOptions.used.json" label="${tool.name} on ${on_string}: Applied options">
            <filter>'ao' in oo['out']</filter>
        </data>
        <data name="out_gs" format="xml" from_work_dir="genome/GenomeSize.xml" label="${tool.name} on ${on_string}: GenomeSize">
            <filter>'gs' in oo['out']</filter>
        </data>
        <data name="out_l" format="tabular" from_work_dir="results/PiscesLogs/log.txt" label="${tool.name} on ${on_string}: Log">
            <filter>'l' in oo['out']</filter>
        </data>
        <collection name="out_rsb" type="list" label="${tool.name} on ${on_string}: ReadStrandBias">
            <filter>'rsb' in oo['out']</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.rsb\.txt" format="txt" directory="results"/>
        </collection>
        <collection name="out_v" type="list" label="${tool.name} on ${on_string}: Variants">
            <filter>'v' in oo['out']</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.vcf" format="vcf" directory="results"/>
        </collection>
    </outputs>
    <tests>
        <!-- no test implemented for intervalpaths, priorspath, forcedalleles, adaptivegenotypeparameters_fromfile -->

        <!-- #1 default -->
        <test expect_num_outputs="6">
            <param name="genome" value="genome.fasta"/>
            <param name="genome_description" value="Human (hg19) "/>
            <param name="bam" value="control.bam,tumor.bam"/>
            <section name="oo">
                <param name="out" value="ab,ao,gs,l,rsb,v"/>
            </section>
            <output_collection name="out_ab" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_line line="Chr,Position,Reference,Alternate,Name,freq,obs support, expected support, prob its real, confidence Qscore, bias detected?, Filter Variant?"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_line line="Chr,Position,Reference,Alternate,Name,freq,obs support, expected support, prob its real, confidence Qscore, bias detected?, Filter Variant?"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_ao">
                <assert_contents>
                    <has_n_lines n="204"/>
                </assert_contents>
            </output>
            <output name="out_gs">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_text_matching expression=".+chromosome.+"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output_collection name="out_rsb" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="29"/>
                        <has_line line="Chr&#009;Position&#009;Reference&#009;Alternate&#009;Overall_ChanceFalsePos&#009;Forward_ChanceFalsePos&#009;Reverse_ChanceFalsePos&#009;Overall_ChanceFalseNeg&#009;Forward_ChanceFalseNeg&#009;Reverse_ChanceFalseNeg&#009;Overall_Freq&#009;Forward_Freq&#009;Reverse_Freq&#009;Overall_Support&#009;Forward_Support&#009;Reverse_Support&#009;Overall_Coverage&#009;Forward_Coverage&#009;Reverse_Coverage&#009;RawCoverageCountByReadType_0&#009;RawCoverageCountByReadType_1&#009;RawCoverageCountByReadType_2&#009;RawSupportCountByReadType_0&#009;RawSupportCountByReadType_1&#009;RawSupportCountByReadType_2&#009;BiasScore&#009;BiasAcceptable?&#009;VarPresentOnBothStrands?&#009;CoverageAvailableOnBothStrands?&#009;"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="2"/>
                        <has_line line="Chr&#009;Position&#009;Reference&#009;Alternate&#009;Overall_ChanceFalsePos&#009;Forward_ChanceFalsePos&#009;Reverse_ChanceFalsePos&#009;Overall_ChanceFalseNeg&#009;Forward_ChanceFalseNeg&#009;Reverse_ChanceFalseNeg&#009;Overall_Freq&#009;Forward_Freq&#009;Reverse_Freq&#009;Overall_Support&#009;Forward_Support&#009;Reverse_Support&#009;Overall_Coverage&#009;Forward_Coverage&#009;Reverse_Coverage&#009;RawCoverageCountByReadType_0&#009;RawCoverageCountByReadType_1&#009;RawCoverageCountByReadType_2&#009;RawSupportCountByReadType_0&#009;RawSupportCountByReadType_1&#009;RawSupportCountByReadType_2&#009;BiasScore&#009;BiasAcceptable?&#009;VarPresentOnBothStrands?&#009;CoverageAvailableOnBothStrands?&#009;"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="out_v" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="48"/>
                        <has_line line="##fileformat=VCFv4.1"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="21"/>
                        <has_line line="##fileformat=VCFv4.1"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- #2 -->
        <test expect_num_outputs="6">
            <param name="genome" value="genome.fasta"/>
            <param name="genome_description" value="Human (hg19) "/>
            <param name="bam" value="control.bam,tumor.bam"/>
            <section name="co">
                <conditional name="mode_cond">
                    <param name="mode_sel" value="--crushvcf true"/>
                </conditional>
                <conditional name="callmnvs_cond">
                    <param name="callmnvs_sel" value="--callmnvs true"/>
                    <param name="maxmnvlength" value="4"/>
                    <param name="maxgapbetweenmnv" value="2"/>
                </conditional>
                <conditional name="collapse_cond">
                    <param name="collapse_sel" value="--collapse true"/>
                    <param name="collapsefreqthreshold" value="0.1"/>
                    <param name="collapsefreqratiothreshold" value="0.6"/>
                    <param name="trimmnvpriors" value="true"/>
                </conditional>
                <param name="coveragemethod" value="exact"/>
                <param name="usestitchedxd" value="true"/>
                <param name="trackedanchorsize" value="6"/>
                <param name="chrfilter" value="chrM,chrB"/>
            </section>
            <section name="bfo">
                <param name="minbasecallquality" value="19"/>
                <param name="minmapquality" value="2"/>
                <param name="filterduplicates" value="false"/>
                <param name="pp" value="false"/>
            </section>
            <section name="vco">
                <param name="minvq" value="21"/>
                <param name="mindp" value="9"/>
                <param name="vqfilter" value="31"/>
                <param name="vffilter" value="0.1"/> <!-- TODO -->
                <param name="gqfilter" value="1"/> <!-- TODO -->
                <param name="mindpfilter" value="31"/>
                <param name="ssfilter" value="false"/>
                <param name="nl" value="1"/> <!-- TODO -->
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="somatic"/>
                    <param name="targetlodfrequency" value="0.02"/>
                    <param name="minvf" value="0.02"/>
                </conditional>
                <param name="sbmodel" value="poisson"/>
                <param name="maxvq" value="101"/>
                <param name="maxgq" value="101"/>
                <param name="maxgp" value="3001"/>
                <param name="mingq" value="1"/>
                <param name="sbfilter" value="0.6"/>
                <param name="noisemodel" value="window"/>
                <param name="gender" value="true"/>
                <param name="rmxnfilter" value="6,10,0.21"/>
                <param name="ncfilter" value="0.7"/>
                <param name="abfilter" value="0.01"/>
            </section>
            <section name="vcfo">
                <param name="reportnocalls" value="true"/>
                <param name="reportrccounts" value="true"/>
                <param name="reporttscounts" value="true"/>
                <param name="reportsuspiciouscoveragefraction" value="true"/>
            </section>
            <section name="oo">
                <param name="out" value="ab,ao,gs,l,rsb,v"/>
            </section>
            <output_collection name="out_ab" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_line line="Chr,Position,Reference,Alternate,Name,freq,obs support, expected support, prob its real, confidence Qscore, bias detected?, Filter Variant?"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_ao">
                <assert_contents>
                    <has_n_lines n="222"/>
                </assert_contents>
            </output>
            <output name="out_gs">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_text_matching expression=".+chromosome.+"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output_collection name="out_rsb" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_line line="Chr&#009;Position&#009;Reference&#009;Alternate&#009;Overall_ChanceFalsePos&#009;Forward_ChanceFalsePos&#009;Reverse_ChanceFalsePos&#009;Overall_ChanceFalseNeg&#009;Forward_ChanceFalseNeg&#009;Reverse_ChanceFalseNeg&#009;Overall_Freq&#009;Forward_Freq&#009;Reverse_Freq&#009;Overall_Support&#009;Forward_Support&#009;Reverse_Support&#009;Overall_Coverage&#009;Forward_Coverage&#009;Reverse_Coverage&#009;RawCoverageCountByReadType_0&#009;RawCoverageCountByReadType_1&#009;RawCoverageCountByReadType_2&#009;RawSupportCountByReadType_0&#009;RawSupportCountByReadType_1&#009;RawSupportCountByReadType_2&#009;BiasScore&#009;BiasAcceptable?&#009;VarPresentOnBothStrands?&#009;CoverageAvailableOnBothStrands?&#009;"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="out_v" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="26"/>
                        <has_line line="##fileformat=VCFv4.1"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="6">
            <param name="genome" value="genome.fasta"/>
            <param name="genome_description" value="Human (hg19) "/>
            <param name="bam" value="control.bam"/>
            <section name="co">
                <conditional name="collapse_cond">
                    <param name="collapse_sel" value="--collapse false"/>
                </conditional>
            </section>
            <section name="vco">
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="diploid"/>
                    <param name="diploidsnvgenotypeparameters" value="0.3,0.8,0.9"/>
                    <param name="diploidindelgenotypeparameters" value="0.3,0.8,0.9"/>
                </conditional>
                <param name="gender" value="false"/>
            </section>
            <section name="oo">
                <param name="out" value="ab,ao,gs,l,rsb,v"/>
            </section>
            <output_collection name="out_ab" count="1">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_line line="Chr,Position,Reference,Alternate,Name,freq,obs support, expected support, prob its real, confidence Qscore, bias detected?, Filter Variant?"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="2"/>
                        <has_line line="Chr,Position,Reference,Alternate,Name,freq,obs support, expected support, prob its real, confidence Qscore, bias detected?, Filter Variant?"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_ao">
                <assert_contents>
                    <has_n_lines n="199"/>
                </assert_contents>
            </output>
            <output name="out_gs">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_text_matching expression=".+chromosome.+"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output_collection name="out_rsb" count="1">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="5"/>
                        <has_line line="Chr&#009;Position&#009;Reference&#009;Alternate&#009;Overall_ChanceFalsePos&#009;Forward_ChanceFalsePos&#009;Reverse_ChanceFalsePos&#009;Overall_ChanceFalseNeg&#009;Forward_ChanceFalseNeg&#009;Reverse_ChanceFalseNeg&#009;Overall_Freq&#009;Forward_Freq&#009;Reverse_Freq&#009;Overall_Support&#009;Forward_Support&#009;Reverse_Support&#009;Overall_Coverage&#009;Forward_Coverage&#009;Reverse_Coverage&#009;RawCoverageCountByReadType_0&#009;RawCoverageCountByReadType_1&#009;RawCoverageCountByReadType_2&#009;RawSupportCountByReadType_0&#009;RawSupportCountByReadType_1&#009;RawSupportCountByReadType_2&#009;BiasScore&#009;BiasAcceptable?&#009;VarPresentOnBothStrands?&#009;CoverageAvailableOnBothStrands?&#009;"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="6"/>
                        <has_line line="Chr&#009;Position&#009;Reference&#009;Alternate&#009;Overall_ChanceFalsePos&#009;Forward_ChanceFalsePos&#009;Reverse_ChanceFalsePos&#009;Overall_ChanceFalseNeg&#009;Forward_ChanceFalseNeg&#009;Reverse_ChanceFalseNeg&#009;Overall_Freq&#009;Forward_Freq&#009;Reverse_Freq&#009;Overall_Support&#009;Forward_Support&#009;Reverse_Support&#009;Overall_Coverage&#009;Forward_Coverage&#009;Reverse_Coverage&#009;RawCoverageCountByReadType_0&#009;RawCoverageCountByReadType_1&#009;RawCoverageCountByReadType_2&#009;RawSupportCountByReadType_0&#009;RawSupportCountByReadType_1&#009;RawSupportCountByReadType_2&#009;BiasScore&#009;BiasAcceptable?&#009;VarPresentOnBothStrands?&#009;CoverageAvailableOnBothStrands?&#009;"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="out_v" count="1">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="7"/>
                        <has_line line="##fileformat=VCFv4.1"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="8"/>
                        <has_line line="##fileformat=VCFv4.1"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- #4 -->
        <test expect_num_outputs="6">
            <param name="genome" value="genome.fasta"/>
            <param name="genome_description" value="Human (hg19) "/>
            <param name="bam" value="control.bam,tumor.bam"/>
            <section name="vco">
                <conditional name="ploidy_cond">
                    <param name="ploidy_sel" value="DiploidByAdaptiveGT"/>
                    <param name="adaptivegenotypeparameters_snvmodel" value="0.038,0.438,0.975"/>
                    <param name="adaptivegenotypeparameters_indelmodel" value="0.038,0.442,0.904"/>
                    <param name="adaptivegenotypeparameters_snvprior" value="0.756,0.153,0.0918"/>
                    <param name="adaptivegenotypeparameters_indelprior" value="0.963,0.0265,0.0113"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="out" value="ab,ao,gs,l,rsb,v"/>
            </section>
            <output_collection name="out_ab" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="1"/>
                        <has_line line="Chr,Position,Reference,Alternate,Name,freq,obs support, expected support, prob its real, confidence Qscore, bias detected?, Filter Variant?"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="2"/>
                        <has_line line="Chr,Position,Reference,Alternate,Name,freq,obs support, expected support, prob its real, confidence Qscore, bias detected?, Filter Variant?"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="out_ao">
                <assert_contents>
                    <has_n_lines n="208"/>
                </assert_contents>
            </output>
            <output name="out_gs">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_text_matching expression=".+chromosome.+"/>
                </assert_contents>
            </output>
            <output name="out_l">
                <assert_contents>
                    <has_text_matching expression=".+Ending.+"/>
                </assert_contents>
            </output>
            <output_collection name="out_rsb" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="5"/>
                        <has_line line="Chr&#009;Position&#009;Reference&#009;Alternate&#009;Overall_ChanceFalsePos&#009;Forward_ChanceFalsePos&#009;Reverse_ChanceFalsePos&#009;Overall_ChanceFalseNeg&#009;Forward_ChanceFalseNeg&#009;Reverse_ChanceFalseNeg&#009;Overall_Freq&#009;Forward_Freq&#009;Reverse_Freq&#009;Overall_Support&#009;Forward_Support&#009;Reverse_Support&#009;Overall_Coverage&#009;Forward_Coverage&#009;Reverse_Coverage&#009;RawCoverageCountByReadType_0&#009;RawCoverageCountByReadType_1&#009;RawCoverageCountByReadType_2&#009;RawSupportCountByReadType_0&#009;RawSupportCountByReadType_1&#009;RawSupportCountByReadType_2&#009;BiasScore&#009;BiasAcceptable?&#009;VarPresentOnBothStrands?&#009;CoverageAvailableOnBothStrands?&#009;"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="6"/>
                        <has_line line="Chr&#009;Position&#009;Reference&#009;Alternate&#009;Overall_ChanceFalsePos&#009;Forward_ChanceFalsePos&#009;Reverse_ChanceFalsePos&#009;Overall_ChanceFalseNeg&#009;Forward_ChanceFalseNeg&#009;Reverse_ChanceFalseNeg&#009;Overall_Freq&#009;Forward_Freq&#009;Reverse_Freq&#009;Overall_Support&#009;Forward_Support&#009;Reverse_Support&#009;Overall_Coverage&#009;Forward_Coverage&#009;Reverse_Coverage&#009;RawCoverageCountByReadType_0&#009;RawCoverageCountByReadType_1&#009;RawCoverageCountByReadType_2&#009;RawSupportCountByReadType_0&#009;RawSupportCountByReadType_1&#009;RawSupportCountByReadType_2&#009;BiasScore&#009;BiasAcceptable?&#009;VarPresentOnBothStrands?&#009;CoverageAvailableOnBothStrands?&#009;"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="out_v" count="2">
                <element name="sample_0">
                    <assert_contents>
                        <has_n_lines n="7"/>
                        <has_line line="##fileformat=VCFv4.1"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
                <element name="sample_1">
                    <assert_contents>
                        <has_n_lines n="8"/>
                        <has_line line="##fileformat=VCFv4.1"/>
                        <has_text_matching expression="chrM.+"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

Pisces is a variant calling application, tuned for amplicons and enrichment panels. By default, it calls low frequency somatic variants, but it also supports germline calling.

**Input**

Pisces requires one or more BAM files as input. These BAM files are assumed to be sorted, i.e. alignment reads should be sorted by mapped reference position. Positions in BAM files are expected to use 0-based coordinate system.

Pisces does not perform denovo variant calling. Therefore, it also requires a reference genome for each BAM file.

Optionally, the user can specify genomic regions of interest for which Pisces should produce allele calls. This is done by providing Picard-style interval files. This format lists intervals defined as a chromosome, and start and end positions, inclusive. Positions in interval files are expected to use 1-based coordinate system. An example of a line in an interval file is as follows, where the entries between brackets describe typical hidden characters.

... list optional input files ... there are a lot of optional PATH variables

::

    chr1    11299989    11300989

**Output**

- AmpliconBias
- PiscesOptions.used.json
- GenomeSize.xml
- log.txt
- ReadStrandBias
- Variants

.. class:: infomark

**References**

More information are available on `GitHub <https://github.com/Illumina/Pisces/>`_ and the `user guide <https://github.com/Illumina/Pisces/wiki>`_.
    ]]></help>
    <expand macro="citations"/>
</tool>