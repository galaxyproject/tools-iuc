<?xml version="1.0"?>
<tool id="pisces" name="Pisces" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>...</description>
    <macros>
        <token name="@TOOL_VERSION@">5.2.10.49</token>
        <token name="@VERSION_SUFFIX@">0</token>         
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">pisces</requirement>
    </requirements>
    
    <stdio></stdio>
    <version_command><![CDATA[dotnet Pisces.dll -v 2>&1 | grep 'Pisces' | cut -f 2 -d ' ' ]]></version_command>
    <command detect_errors="exit_code"><![CDATA[
## preprocessing

## process genome file to create GenomeSize.xml
mkdir genome &&
ln -s '$genome' 'genome/genome.fasta' &&
dotnet CreateGenomeSizeFile.dll
-g 'genome'
-s '$genome_description' &&

## process samples
mkdir data &&
#for $i, $current in enumerate($b)
    ln -s '${current}' 'data/sample_${i}.bam' &&
    ln -s '${current.metadata.bam_index}' 'data/sample_${i}.bam.bai' &&
#end for

## run
dotnet Pisces.dll
## required parameters
-g 'genome'
-b 'data'



## VCF writer parameters
$vp.gvcf
$vp.crushvcf
$vp.reportnocalls
$vp.reportrccounts
$vp.reporttscounts
$vp.reportsuspiciouscoveragefraction



## initialize 
        
## run

## optional files are transfered ans 'None' therefore the following is needed
#if $file
    --param '$file'
#end if

|& tee '$out_log' ## stdout
2>&1 | tee -a '$out_log' ## stdout and stderr                              
       
\${GALAXY_SLOTS:-4}
\$GALAXY_MEMORY_MB
\$GALAXY_MEMORY_MB_PER_SLOT
    ]]></command>
    <inputs>
        <!-- CreateGenomeSizeFile.dll -->
        <param name="genome" type="data" format="fasta" label="Select file with genome" help="(CreateGenomeSizeFile.dll -g)"/>
        <!-- TODO seem to accept specific format only, e.g. "Human (hg19) " works; "Human (hg19)" not -->
        <param name="genome_description" type="data" format="fasta" label="Select genome description" help="Species name and build, e.g. 'Rattus norvegicus (UCSC rn4)' (CreateGenomeSizeFile.dll -s)"/>

        <!-- Pisces.dll -->
        <param argument="-b" type="data" format="bam" multiple="true" label="Select samples"/>



        <section name="vp" title="VCF writer parameters">
            <param argument="--gvcf" type="boolean" truevalue="--gvcf" falsevalue="" checked="true" label="Create gVCF outputs?" help="Include reference calls."/>
            <!-- TODO implement conditional with ploidy? -->
            <param argument="--crushvcf" type="boolean" truevalue="--crushvcf" falsevalue="" label="Create crushed VCF?" help="Normally gVcfs are output in the 'somatic' format, which has one line per allele. A crushed vcf is more standard in the germline world, with one line per genomic loci. Note: typically set to true in conjunction with the '-Ploidy diploid' option."/>
            <param argument="--reportnocalls" type="boolean" truevalue="--reportnocalls" falsevalue="" label="Report fraction no calls?"/>
            <param argument="--reportrccounts" type="boolean" truevalue="--reportrccounts" falsevalue="" label="Report collapsed read count?" help="When BAM files contain X1 and X2 tags, output read counts for duplex-stitched, duplex-nonstitched, simplex-stitched, and simplex-nonstitched."/>
            <!-- TODO check parameter description -->
            <param argument="--reporttscounts" type="boolean" truevalue="--reporttscounts" falsevalue="" label="Report collapsed read count by different template strands?"/>
            <param argument="--reportsuspiciouscoveragefraction" type="boolean" truevalue="--reportsuspiciouscoveragefraction" falsevalue="" label="Report fraction of total coverage?" help="That is 'suspicious' i.e. unanchored and bearing some resemblance to an insertion at that site. For spanning variants, this is start + end coverage, so up to double the reported coverage."/>
        </section>



















            <param argument="" type="boolean" truevalue="" falsevalue="" checked="true" label="" help=""/>
            <param argument="" type="integer" value="" min="" max="" label="" help=""/>
            <param argument="" type="float" value="" min="" max="" label="" help=""/>
            <param argument="" type="text" value="" label="" help=""/>
            <param argument="" type="data" format="" multiple="true" label="" help=""/>
            <param argument="" type="select" multiple="false" label="" help="">
                <option value="" selected="true"></option>
                <option value=""></option>
            </param>

            <section name="" title="">
            </section>

            <conditional name="_cond" label="">
                <param name="_sel" type="select" multiple="false" label="" help="">
                    <option value=""></option>
                    <option value=""></option>
                </param>
            </conditional>

        <section name="ap" title="Advanced parameters">
        </section>
        
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="">
                <option value="" selected="true"></option>
                <option value=""></option>
                <option value="log">Log</option>
            </param>            
        </section>
    </inputs>
    <outputs>
        <data name="" format="tabular" from_work_dir="" label="${tool.name} on ${on_string}: "/>
                                                                                              
        <data name="" format="tabular" from_work_dir="" label="${tool.name} on ${on_string}: ">
            <filter>'' in out</filter>
        </data>
        
        <data name="out_log" format="txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in oo['out']</filter>            
        </data>    
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="">
            <param name="" value=""/>
            <section name="ap">
                <param name="" value=""/>
            </section>
            <output name="">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>            
        </test>                                                   
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

...

**Input**

...

::

    Courier new text

**Output**

...

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <citations>
        <expand macro="citations"/>
    </citations>

    <expand macro="citations"/>
</tool>
