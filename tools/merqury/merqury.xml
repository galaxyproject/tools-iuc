<tool id='merqury' name='Merqury' version='@TOOL_VERSION@' profile='20.01'>
    <description>evaluate the assembly quality</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='edam_ontology'/>
    <expand macro='requirements'/>
    <version_command>merqury --version</version_command>
    <command detect_errors='exit_code'><![CDATA[
        ##mkdir -p output_merqury &&
        #from math import log
        #set $kmer_size = $meryl_options.kmer_size
        #if not $meryl_options.kmer_size
            #set $kmer_size = int(log(int($meryl_options.genome_size)*(1-float($meryl_options.collision_rate))/float($meryl_options.collision_rate))/log(4))
        #end if
        #if $mode.options == 'default'
            #for $i, $read in enumerate($child_reads):
                mkdir "child{$i}.meryl" &&
                meryl count k=$kmer_size $read output "child{$i}.meryl" &&
            #end for
            meryl union-sum child*.meryl output child.meryl &&
            merqury.sh child.meryl $assembly $label
        #else
            #for $i, $read in enumerate($paternal_reads):
                mkdir "paternal{$i}.meryl" &&
                meryl count k=$kmer_size $read output "paternal{$i}.meryl" &&
            #end for
            meryl union-sum paternal*.meryl output pat.meryl &&
            #for $i, $read in enumerate($maternal_reads):
                mkdir "maternal{$i}.meryl" &&
                meryl count k=$kmer_size $read output "maternal{$i}.meryl" &&
            #end for
            meryl union-sum maternal*.meryl output mat.meryl &&
            #for $i, $read in enumerate($child_reads):
                mkdir "child{$i}.meryl" &&
                meryl count k=$kmer_size $read output "child{$i}.meryl" &&
            #end for
            meryl union-sum child*.meryl output child.meryl &&
            ## mat specific kmers
            meryl difference mat.meryl pat.meryl output mat.only.meryl &&
            meryl histogram mat.only.meryl > mat.only.hist &&
            java -jar -Xmx1g '$__tool_directory__'/kmerHistToPloidyDepth.jar mat.only.hist > mat.only.ploidy &&
            VAR=sed -n 2p mat.only.ploidy | awk '{print \$NF}' &&
            meryl greater-than \$VAR output mat.only.filt.meryl mat.only.meryl &&
            ## pat specific kmers
            meryl difference pat.meryl mat.meryl output pat.only.meryl &&
            meryl histogram pat.only.meryl > pat.only.hist &&
            java -jar -Xmx1g '$__tool_directory__'/kmerHistToPloidyDepth.jar pat.only.hist > pat.only.ploidy &&
            VAR=sed -n 2p pat.only.ploidy | awk '{print \$NF}' &&
            meryl greater-than \$VAR output pat.only.filt.meryl pat.only.meryl &&
            ## shared kmers
            meryl intersect output shared.meryl mat.meryl pat.meryl &&
            ## mat hapmers
            meryl intersect output mat.inherited.meryl child.meryl mat.only.filt.meryl &&
            meryl histogram mat.inherited.meryl > mat.inherited.hist &&
            java -jar -Xmx1g '$__tool_directory__'/kmerHistToPloidyDepth.jar mat.inherited.hist > mat.inherited.ploidy &&
            VAR=sed -n 2p mat.inherited.ploidy | awk '{print \$NF}' &&
            meryl greater-than \$VAR output mat.hapmer.meryl mat.inherited.meryl &&
            ## pat hapmers
            meryl intersect output pat.inherited.meryl child.meryl pat.only.filt.meryl &&
            meryl histogram pat.inherited.meryl > pat.inherited.hist &&
            java -jar -Xmx1g '$__tool_directory__'/kmerHistToPloidyDepth.jar pat.inherited.hist > pat.inherited.ploidy &&
            VAR=sed -n 2p pat.inherited.ploidy | awk '{print \$NF}' &&
            meryl greater-than \$VAR output pat.hapmer.meryl pat.inherited.meryl &&
            ## shared hapmers
            meryl intersect output shared.inherited.meryl child.meryl shared.meryl &&
            meryl histogram shared.inherited.meryl > shared.inherited.hist &&
            java -jar -Xmx1g '$__tool_directory__'/kmerHistToPloidyDepth.jar shared.inherited.hist > shared.inherited.ploidy &&
            VAR=sed -n 2p shared.inherited.ploidy | awk '{print \$NF}' &&
            meryl greater-than \$VAR output shared.filt.meryl shared.inherited.meryl &&
            ## child hapmers
            meryl union-sum output child.inherited.meryl mat.inherited.meryl pat.inherited.meryl shared.inherited.meryl &&
            meryl difference output read.only.meryl child.meryl child.inherited.meryl &&
            merqury.sh read.only.meryl mat.hapmer.meryl pat.hapmer.meryl $assembly $label
        #end if
    ]]></command>
    <inputs>
        <conditional name='mode'>
            <param name="options" type="select" 
                label="Evaluation mode" help="Merqury allows two operational modes: default and trio mode.">
                <option value="default">Default mode</option>
                <option value="trio">Trio mode</option>
            </param>
            <when value='default'>
                <param name="child_reads" type="data" format="fastq,fasta" multiple='true'
                    label="F1 reads"
                    help="Select F1 reads used for generating the assembly"/>
                <param name="assembly" type="data" format="fasta" 
                    label="Genome assembly" 
                    help="Select the assembled genome." />
            </when>
            <when value='trio'>
                <param name="child_reads" type="data" format="fastq,fasta" multiple='true'
                    label="F1 reads"
                    help="Select F1 reads used for generating the assembly"/>
                <param name="paternal_reads" type="data" format="fastq,fasta" multiple='true'
                    optional='true' label="Paternal reads"
                    help="Select the paternal reads used for generating the assembly" />
                <param name="maternal_reads" type="data" format="fastq,fasta" multiple='true'
                    optional='true' label="Maternal reads"
                    help="Select the maternal reads used for generating the assembly" />
                <param name="assembly" type="data" format="fasta" 
                    multiple='true' label="Genome assemblies" 
                    help="Select the assembled genome/s" />
            </when>
        </conditional>
        <param name='label' type="text" value="output" label="Identification label" help="Assign an identification label.">
            <sanitizer invalid_char="">
                <valid initial="string.letters,string.digits">
                    <add value="_" />
                </valid>
            </sanitizer>
        </param>
        <section name='meryl_options'
            title='Meryl options'
            expanded='true'>
            <param name="kmer_size" type="integer" 
                min="5" max="50" value="" optional='true' label="K-mer size" 
                help="If not k-mer size is provided, it will be estimated from the genome size. For a human genome, the best k-mer size is k=21 for both haploid or diploid." />
            <param name="genome_size" type="integer" 
                min="10000" max="70000000000" value="" label="Genome size" 
                help="Haploid genome size or diploid genome size, depending on what we evaluate. In bp." />
            <param name="collision_rate" type="float" 
                min="0.0001" max="0.01" value="0.001" label="Tolerable collision rate." 
                help="Tolerable collision rate. By default is 0.01." />
        </section>
    </inputs>
    <outputs>

        <collection name='bed_files' type='list' label='${tool.name} on ${on_string}'>
            <discover_datasets pattern='__designation_and_ext__' ext='bed' directory='./' visible='true'/>
        </collection>
        <collection name='png_files' type='list' label='${tool.name} on ${on_string}'>
            <discover_datasets pattern='__designation_and_ext__' ext='png' directory='./' visible='true'/>
        </collection>
    </outputs>
    <tests>
        <test>
            <param name='mode|options' value='default'/>
            <param name='mode|child_reads' value='child.fasta'/>
            <param name='assembly' value='assembly.fasta'/>
            <param name='label' value='output_01'/>
            <section name='meryl_options'>
                <param name='kmer_size' value='15'/>
                <param name='genome_size' value='4600000'/>
                <param name='collision_rate' value='0.001'/>
            </section>
            <output_collection name='bed_files' type='list'>
                <element name='assembly' file='assembly_only.bed' ftype='bed'/>
            </output_collection>
            <output_collection name='pngthuna_files' type='list'>
                <element name='png_01' file='output_01.assembly.spectra-cn.fl.png' ftype='png'/>
                <element name='png_02' file='output_01.assembly.spectra-cn.ln.png' ftype='png'/>
                <element name='png_03' file='output_01.assembly.spectra-cn.st.png' ftype='png'/>
                <element name='png_04' file='output_01.spectra-asm.fl.png' ftype='png'/>
                <element name='png_05' file='output_01.spectra-asm.ln.png' ftype='png'/>
                <element name='png_06' file='output_01.spectra-asm.st.png' ftype='png'/>
            </output_collection>
        </test>
        <test>
            <param name='mode|options' value='trio'/>
            <param name='mode|child_reads' value='child.fasta'/>
            <param name='mode|paternal_reads' value='paternal.fasta'/>
            <param name='mode|maternal_reads' value='paternal.fasta'/>
            <param name='assembly' value='assembly.fasta'/>
            <param name='label' value='output_02'/>
            <section name='meryl_options'>
                <param name='kmer_size' value='15'/>
                <param name='genome_size' value='4600000'/>
                <param name='collision_rate' value='0.001'/>
            </section>
            <output_collection name='bed_files' type='list'>
                <element name='assembly_phased' file='output_02.assembly.100_20000.phased_block.bed' ftype='bed'/>
                <element name='assembly_switch' file='output_02.assembly.100_20000.switch.bed' ftype='bed'/>
                <element name='assembly' file='output_02.assembly.bed' ftype='bed'/>
                <element name='assembly_mat' file='output_02.assembly.mat.bed' ftype='bed'/>
                <element name='assembly_pat' file='output_02.assembly.pat.bed' ftype='bed'/>
                <element name='assembly_sort' file='output_02.assembly.osrt.bed' ftype='bed'/>
            </output_collection>
            <output_collection name='pngthuna_files' type='list'>
                <element name='png_01' file='output_02.assembly.spectra-cn.fl.png' ftype='png'/>
                <element name='png_02' file='output_02.assembly.spectra-cn.ln.png' ftype='png'/>
                <element name='png_03' file='output_02.assembly.spectra-cn.st.png' ftype='png'/>
                <element name='png_04' file='output_02.spectra-asm.fl.png' ftype='png'/>
                <element name='png_05' file='output_02.spectra-asm.ln.png' ftype='png'/>
                <element name='png_06' file='output_02.spectra-asm.st.png' ftype='png'/>
                <element name='png_07' file='output.assembly.100_20000.phased_block.blob.png' ftype='png'/>
                <element name='png_08' file='output.assembly.block.N.png' ftype='png'/>
                <element name='png_09' file='output.assembly.continuity.N.png' ftype='png'/>
                <element name='png_10' file='output.assembly.mat.spectra-cn.fl.png' ftype='png'/>
                <element name='png_11' file='output.assembly.mat.spectra-cn.ln.png' ftype='png'/>
                <element name='png_12' file='output.assembly.mat.spectra-cn.st.png' ftype='png'/>
                <element name='png_13' file='output.assembly.pat.spectra-cn.fl.png' ftype='png'/>
                <element name='png_14' file='output.assembly.pat.spectra-cn.ln.png' ftype='png'/>
                <element name='png_15' file='output.assembly.pat.spectra-cn.st.png' ftype='png'/>
                <element name='png_16' file='output.hapmers.blob.png' ftype='png'/>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**Purpose**

Merqury allows a reference-free assembly evaluation based on efficient k-mer set operations. By comparing k-mers in a de novo assembly to those found in unassembled high-accuracy reads, Merqury estimates base-level accuracy and completeness. 

For trios, Merqury can also evaluate haplotype-specific accuracy, completeness, phase block continuity, and switch errors.                    

----
                    
.. class:: infomark
                    
**Input**

Merqury requires two types of inputs: the rna-seq reads used for generating the assembly, and the assemblies itself. There is no need to run merqury per-assemblies. If two assemblies areprovided, Merqury generates stats for each and combined.

----
                    
.. class:: infomark
                    
**Output**

The generated metrics include consensus quality and k-mer completeness, and when parental genomic sequences are available (either assembled or unassembled), Merqury can output haplotype completeness, phase block statistics, switch error rates, and visual representations of phase consistency for the child’s genome. This includes TDF (or BED) features that can be displayed in a genome browser for visualizing the presence of k-mer classes across a genome (e.g., the k-mers inherited from a parental genome).                    

    ]]></help>
    <expand macro='citations'/>
</tool>
