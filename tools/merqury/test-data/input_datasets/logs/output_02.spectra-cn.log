
Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opLessThan
    pat.hapmer.meryl
    print to (stdout)
om i.e. illumina wgs reads
	<asm1.fasta>	: haplotype 1 assembly. gzipped or not
	[asm2.fasta]	: haplotype 2 assembly. gzipped or not
	<out-prefix>: output prefix. Required.
		When only <asm1.fasta> is given, results will be generated in haploid mode.
		When <asm2.fasta> is given, results will be generated for each asm1 asm2 haploid assembly and asm1+asm2 diploid assembly.

Detected k-mer size 12

No modules available..
# Get solid k-mers
Generate pat.hapmer.hist

java -jar -Xmx1g /home/laptop/miniconda3/envs/merqury_update/share/merqury/eval/kmerHistToPloidyDepth.jar pat.hapmer.hist

ploidy	depth	boundary
0	0	2
1	5	9

Filter out kmers <= 2

meryl greater-than 2 output pat.hapmer.gt2.meryl pat.hapmer.meryl

=== Generate spectra-cn plots per assemblies and get QV, k-mer completeness ===

# Generate meryl db for assembly

# Collect read counts per asm copies
# Read only
# Copy 1 ~ 4
Copy = 1 ..

Copy = 2 ..

Copy = 3 ..

Copy = 4 ..

Copy >4 ..

# Copy numbers in k-mers found only in asm

# Plot output_02.assembly.spectra-cn.hist
  Rscript /home/laptop/miniconda3/envs/merqury_update/share/merqury/plot/plot_spectra_cn.R -f output_02.assembly.spectra-cn.hist -o output_02.assembly.spectra-cn -z output_02.assembly.only.hist
[1] "x_max: 12.5"
[1] "y_max: 3170682.9"
[1] "## Line graph"
[1] "## Area under the curve filled"
[1] "## Stacked"

# QV statistics

# Per seq QV statistics

# k-mer completeness (recoveray rate) with solid k-mers for assembly with > 2 counts

# Generate assembly_only.wig
assembly_only.wig generated.

No asm2_fa given. Done.
# assembly only
# Write output
# Get asm only for spectra-asm
#	Plot output_02.spectra-asm.hist
  Rscript /home/laptop/miniconda3/envs/merqury_update/share/merqury/plot/plot_spectra_cn.R -f output_02.spectra-asm.hist -o output_02.spectra-asm -z output_02.dist_only.hist
[1] "x_max: 12.5"
[1] "y_max: 2155622.7"
[1] "## Line graph"
[1] "## Area under the curve filled"
[1] "## Stacked"

# Clean up
Done!
12 kM     7  S   512 kB  3584 kB  3995 kB
     8   256  P   816 kB  6145  M     4  S  1024 kB  4096 kB  4912 kB
     9   512  P  1624 kB  3073  M     2  S  2048 kB  4096 kB  5720 kB
    10  1024  P  3240 kB  1537  M     1  S  4096 kB  4096 kB  7336 kB  Best Value!
    11  2048  P  6480 kB   769  M     1  S  8192 kB  8192 kB    14 MB
    12  4096  P    12 MB   385  M     1  S    16 MB    16 MB    28 MB
    13  8192  P    25 MB   193  M     1  S    32 MB    32 MB    57 MB
    14    16 kP    50 MB    97  M     1  S    64 MB    64 MB   114 MB
    15    32 kP   101 MB    49  M     1  S   128 MB   128 MB   229 MB


FINAL CONFIGURATION
-------------------

Estimated to require 11 MB memory out of 15 GB allowed.
Estimated to require 2 batches.

Configured complex mode for 0.011 GB memory per batch, and up to 2 batches.

Start counting with THREADED method.
Used 0.266 GB / 15.225 GB to store      2097103 kmers; need 0.002 GB to sort        15506 kmers

Input complete.  Writing results to 'assembly.meryl', using 8 threads.
finishIteration()--

Finished counting.

Cleaning up.

Bye.

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opDifference
    pat.hapmer.meryl
    assembly.meryl
    output to read.k12.assembly.0.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opIntersect
    pat.hapmer.meryl
    opEqualTo
      threshold=1
      assembly.meryl
    output to read.k12.assembly.1.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opIntersect
    pat.hapmer.meryl
    opEqualTo
      threshold=2
      assembly.meryl
    output to read.k12.assembly.2.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opIntersect
    pat.hapmer.meryl
    opEqualTo
      threshold=3
      assembly.meryl
    output to read.k12.assembly.3.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opIntersect
    pat.hapmer.meryl
    opEqualTo
      threshold=4
      assembly.meryl
    output to read.k12.assembly.4.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opIntersect
    pat.hapmer.meryl
    opGreaterThan
      threshold=4
      assembly.meryl
    output to read.k12.assembly.gt4.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opDifference
    assembly.meryl
    pat.hapmer.meryl
    output to assembly.0.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.
Loading required package: argparse
Loading required package: ggplot2
Loading required package: scales

Found 1 command tree.

Found 1 command tree.
--
-- Estimating memory usage for 'assembly.0.meryl/'.
--

 p       prefixes             bits gigabytes (allowed: 15 GB)
-- -------------- ---------------- ---------
11           2048         39324212     0.005
12           4096         37495627     0.004
13           8192         35798114     0.004
14          16384         34362745     0.004
15          32768         33451664     0.004 (smallest)
16          65536         33589159     0.004
17         131072         35823806     0.004
18         262144         42252757     0.005 (faster)
19         524288         57070316     0.007
20        1048576         88665091     0.010
21        2097152        153814298     0.018
22        4194304        286072369     0.033
-- -------------- ---------------- ---------
          1959657 total kmers

--
-- Minimal memory needed: 0.004 GB
-- Optimal memory needed: 0.005 GB  enabled
-- Memory limit           15.287 GB
--
--
-- Loading kmers from 'assembly.0.meryl/' into lookup table.
--

For 1959657 distinct 12-mers (with 18 bits used for indexing and 6 bits for tags):
    0.002 GB memory for kmer indices -       262144 elements 64 bits wide)
    0.001 GB memory for kmer tags    -      1959657 elements  6 bits wide)
    0.002 GB memory for kmer values  -      1959657 elements  7 bits wide)
    0.005 GB memory

Will load 1959657 kmers.  Skipping 0 (too low) and 0 (too high) kmers.
Allocating space for 1975785 suffixes of 6 bits each -> 11854710 bits (0.001 GB) in blocks of 32.000 MB
                     1975785 values   of 7 bits each -> 13830495 bits (0.002 GB) in blocks of 32.000 MB
Loaded 1959657 kmers.  Skipped 0 (too low) and 0 (too high) kmers.
-- Opening input sequences 'assembly.fasta'.
-- Opening output file '-'.
Bye!

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opIntersect
    assembly.meryl
    pat.hapmer.gt2.meryl
    output to assembly.solid.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.
--
-- Estimating memory usage for 'assembly.0.meryl'.
--

 p       prefixes             bits gigabytes (allowed: 15 GB)
-- -------------- ---------------- ---------
11           2048         39324212     0.005
12           4096         37495627     0.004
13           8192         35798114     0.004
14          16384         34362745     0.004
15          32768         33451664     0.004 (smallest)
16          65536         33589159     0.004
17         131072         35823806     0.004
18         262144         42252757     0.005 (faster)
19         524288         57070316     0.007
20        1048576         88665091     0.010
21        2097152        153814298     0.018
22        4194304        286072369     0.033
-- -------------- ---------------- ---------
          1959657 total kmers

--
-- Minimal memory needed: 0.004 GB
-- Optimal memory needed: 0.005 GB  enabled
-- Memory limit           15.287 GB
--
--
-- Loading kmers from 'assembly.0.meryl' into lookup table.
--

For 1959657 distinct 12-mers (with 18 bits used for indexing and 6 bits for tags):
    0.002 GB memory for kmer indices -       262144 elements 64 bits wide)
    0.001 GB memory for kmer tags    -      1959657 elements  6 bits wide)
    0.002 GB memory for kmer values  -      1959657 elements  7 bits wide)
    0.005 GB memory

Will load 1959657 kmers.  Skipping 0 (too low) and 0 (too high) kmers.
Allocating space for 1975785 suffixes of 6 bits each -> 11854710 bits (0.001 GB) in blocks of 32.000 MB
                     1975785 values   of 7 bits each -> 13830495 bits (0.002 GB) in blocks of 32.000 MB
Loaded 1959657 kmers.  Skipped 0 (too low) and 0 (too high) kmers.
-- Opening input sequences 'assembly.fasta'.
-- Opening output file '-'.
Bye!
--
-- Estimating memory usage for 'assembly.0.meryl'.
--

 p       prefixes             bits gigabytes (allowed: 15 GB)
-- -------------- ---------------- ---------
11           2048         39324212     0.005
12           4096         37495627     0.004
13           8192         35798114     0.004
14          16384         34362745     0.004
15          32768         33451664     0.004 (smallest)
16          65536         33589159     0.004
17         131072         35823806     0.004
18         262144         42252757     0.005 (faster)
19         524288         57070316     0.007
20        1048576         88665091     0.010
21        2097152        153814298     0.018
22        4194304        286072369     0.033
-- -------------- ---------------- ---------
          1959657 total kmers

--
-- Minimal memory needed: 0.004 GB
-- Optimal memory needed: 0.005 GB  enabled
-- Memory limit           15.287 GB
--
--
-- Loading kmers from 'assembly.0.meryl' into lookup table.
--

For 1959657 distinct 12-mers (with 18 bits used for indexing and 6 bits for tags):
    0.002 GB memory for kmer indices -       262144 elements 64 bits wide)
    0.001 GB memory for kmer tags    -      1959657 elements  6 bits wide)
    0.002 GB memory for kmer values  -      1959657 elements  7 bits wide)
    0.005 GB memory

Will load 1959657 kmers.  Skipping 0 (too low) and 0 (too high) kmers.
Allocating space for 1975785 suffixes of 6 bits each -> 11854710 bits (0.001 GB) in blocks of 32.000 MB
                     1975785 values   of 7 bits each -> 13830495 bits (0.002 GB) in blocks of 32.000 MB
Loaded 1959657 kmers.  Skipped 0 (too low) and 0 (too high) kmers.
-- Opening input sequences 'assembly.fasta'.
-- Opening output file '-'.
Bye!

Found 1 command tree.

PROCESSING TREE #1 using 8 threads.
  opIntersect
    pat.hapmer.meryl
    assembly.meryl
    output to read.k12.assembly.meryl

Cleaning up.

Bye.

Found 1 command tree.

Found 1 command tree.

Found 1 command tree.
Loading required package: argparse
Loading required package: ggplot2
Loading required package: scales
