<tool id="cd_hit_dup" name="CD-HIT dup" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>remove duplicates and detect chimaeras in sequencing reads</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <version_command><![CDATA[cd-hit | grep "CD-HIT version" | cut -d" " -f 4]]></version_command>
    <command detect_errors="exit_code"><![CDATA[
cd-hit-dup
-i '$input_cond.i'
-o 'result1'
#if $input_cond.input_sel == 'pe'
    -i2 '$input_cond.i2'
    -o2 'result2'
#else if $input_cond.input_sel == 's'
    -f $input_cond.f_cond.f_sel
    -a $input_cond.f_cond.a
    #if $input_cond.f_cond.f_sel == 'true'
        -b $input_cond.f_cond.b
        -p $input_cond.f_cond.p
        -s $input_cond.f_cond.s
    #end if
#end if
#if $e_cond.e_sel != ''
    -e $e_cond.e
#end if
-d $d
-m $m
-u $u
@LOG@
    ]]></command>
    <inputs>
        <conditional name="input_cond">
            <param name="input_sel" type="select" label="Select read type" help="For joined paired-end reads choose 'Single'.">
                <option value="s" selected="true">Single</option>
                <option value="pe">Paired-end (PE)</option>
            </param>
            <when value="s">
                <param argument="-i" type="data" format="fasta" label="Select file with single reads"/>
                <conditional name="f_cond">
                    <param name="f_sel" type="select" label="Filter out chimeric clusters?" help="(-f)">
                        <option value="false" selected="true">No</option>
                        <option value="true">Yes</option>
                    </param>
                    <when value="false">
                        <expand macro="a" default="1"/>
                    </when>
                    <when value="true">
                        <expand macro="a" default="2"/>
                        <param argument="-b" type="float" value="1.0" label="Set abundance ratio between a parent read and a chimeric read"/>
                        <param argument="-p" type="float" value="0.0" label="Set dissimilarity control for chimeric filtering"/>
                        <param argument="-s" type="integer" min="20" value="30" label="Set minimum length of common sequence shared between a chimeric read and each of its parents"/>
                    </when>
                </conditional>
            </when>
            <when value="pe">
                <param argument="-i" type="data" format="fasta" label="Select file with R1 reads"/>
                <param argument="-i2" type="data" format="fasta" label="Select file with R2 reads"/>
            </when>
        </conditional>
        <expand macro="d"/>
        <param argument="-m" type="boolean" truevalue="true" falsevalue="false" checked="true" label="Use match length?"/>
        <param argument="-u" type="integer" value="0" label="Set length of prefix" help="0 for full/maximum length"/>
        <conditional name="e_cond">
            <param name="e_sel" type="select" label="Select limitation of allowed mismatches" help="(-e)">
                <option value="none" selected="true">None</option>
                <option value="percentage">By percentage</option>
                <option value="number">By number</option>
            </param>
            <when value="none"/>
            <when value="percentage">
                <param argument="-e" type="float" min="0.0" max="1.0" value="1.0" label="Set maximum percentage of allowed mismatches"/>
            </when>
            <when value="number">
                <param argument="-e" type="integer" value="1" label="Set maximum number of allowed mismatches"/>
            </when>
        </conditional>
        <section name="out" title="Output options">
            <expand macro="log"/>
        </section>
    </inputs>
    <outputs>
        <data name="out_chimeric" format="txt" from_work_dir="result12.clstr" label="${tool.name} on ${on_string}: Chimeric clusters"/>
        <data name="out_clusters1" format="txt" from_work_dir="result1" label="${tool.name} on ${on_string}: Cluster representatives (single or forward reads)"/>
        <data name="out_clusters2" format="txt" from_work_dir="result2" label="${tool.name} on ${on_string}: Cluster representatives (reverse reads)"/>
        <expand macro="out_log"/>
        <data name="out_relation" format="txt" from_work_dir="result1.clstr" label="${tool.name} on ${on_string}: Cluster relations"/>
    </outputs>
    <tests>
        <!-- #1 paired-end, default -->
        <test expect_num_outputs="5">
            <conditional name="input_cond">
                <param name="input_sel" value="pe"/>
                <param name="i" value="reads_1.fasta"/>
                <param name="i2" value="reads_2.fasta"/>
            </conditional>
            <param name="out" value="chimeric,clusters,relation,log"/>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="TTCGACGCCAAACGCGGCAGCGGCAGCGGCGTCCTGGC"/>
                </assert_contents>
            </output>
            <output name="out_clusters2">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="EHHHHHHGHHGEHHHHGHFGHHEHHHBG@GHFHFFH8HHFHHFHBFHH=@H.HEA>#;CFHHEFFE>HH;EFHFHB/*B3;E@3?CG5>08#@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="2002"/>
                    <has_line line=">Cluster 1000"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 paired-end, custom -->
        <test expect_num_outputs="5">
            <conditional name="input_cond">
                <param name="input_sel" value="pe"/>
                <param name="i" value="reads_1.fasta"/>
                <param name="i2" value="reads_2.fasta"/>
            </conditional>
            <param name="d" value="1"/>
            <param name="u" value="0"/>
            <param name="m" value="true"/>
            <conditional name="e_cond">
                <param name="e_sel" value="percentage"/>
                <param name="e" value="1.0"/>
            </conditional>
            <param name="out" value="chimeric,clusters,relation,log"/>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="TTCGACGCCAAACGCGGCAGCGGCAGCGGCGTCCTGGC"/>
                </assert_contents>
            </output>
            <output name="out_clusters2">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="EHHHHHHGHHGEHHHHGHFGHHEHHHBG@GHFHFFH8HHFHHFHBFHH=@H.HEA>#;CFHHEFFE>HH;EFHFHB/*B3;E@3?CG5>08#@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="2002"/>
                    <has_line line=">Cluster 1000"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 single-read, default -->
        <test expect_num_outputs="3">
            <conditional name="input_cond">
                <param name="input_sel" value="s"/>
                <param name="i" value="reads_1.fasta"/>
            </conditional>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="3956"/>
                    <has_line line="GGGEEGGG?DDGGGDGFGGGGG.F,A&lt;4A@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="1990"/>
                    <has_line line=">Cluster 988"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 single-read, custom -->
        <test expect_num_outputs="3">
            <conditional name="input_cond">
                <param name="input_sel" value="s"/>
                <param name="i" value="reads_1.fasta"/>
                <conditional name="f_cond">
                    <param name="f_sel" value="false"/>
                    <param name="a" value="3"/>
                </conditional>
            </conditional>
            <conditional name="e_cond">
                <param name="e_sel" value="number"/>
                <param name="e" value="1"/>
            </conditional>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="3956"/>
                    <has_line line="GGGEEGGG?DDGGGDGFGGGGG.F,A&lt;4A@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="1990"/>
                    <has_line line=">Cluster 988"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 single-read, custom -->
        <test expect_num_outputs="3">
            <conditional name="input_cond">
                <param name="input_sel" value="s"/>
                <param name="i" value="reads_1.fasta"/>
                <conditional name="f_cond">
                    <param name="f_sel" value="true"/>
                    <param name="a" value="1"/>
                    <param name="b" value="1.1"/>
                    <param name="p" value="0.1"/>
                    <param name="s" value="21"/>
                </conditional>
            </conditional>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="3956"/>
                    <has_line line="GGGEEGGG?DDGGGDGFGGGGG.F,A&lt;4A@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="1990"/>
                    <has_line line=">Cluster 988"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

*CD-HIT-DUP* is part of *CD-HIT* and removes duplicates from sequencing reads, with an optional step to detect and remove chimeric reads. When two files of paired end reads are used as inputs, each pair of reads will be concatenated into a single one. Visit the `project wiki <https://github.com/weizhongli/cdhit/wiki/3.-User's-Guide#cd-hit-dup>`_ for a detailed description.

**Input**

Single-read or paired-end reads in FASTQ or FASTA format.

**Output**

- Cluster representatives (FASTA)
- Cluster representatives for reverse reads (FASTA)
- Cluster relations of each duplicate to its representative (CLSTR), e.g.

::

    251 166nt, >MISEQ-1639_50_00000... *
    183 249nt, >MISEQ-1639_51_00000... *
    45  322nt, >MISEQ-1639_78_00000... *
    218 240nt, >MISEQ-1639_51_00000... *

- Chimeric clusters (CLSTR)

.. class:: infomark

**References**

@HELP_REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>