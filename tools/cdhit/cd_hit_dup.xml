<tool id="cd_hit_dup" name="CD-HIT dup" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>remove duplicates and detect chimaeras in sequencing reads</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <version_command><![CDATA[cd-hit | grep "CD-HIT version" | cut -d" " -f 4]]></version_command>
    <command detect_errors="exit_code"><![CDATA[
##run
cd-hit-dup
## optional parameters
-d $d
-u $u
-m $m
-b $b
-p $p
## required parameters
-i '$input_cond.i'
-o 'result1'
#if $input_cond.input_sel == "pe"
    -i2 '$input_cond.i2'
    -o2 'result2'
    -a $input_cond.a
#else if $input_cond.input_sel == "s"
    -f $input_cond.f_cond.f_sel
    -a $input_cond.f_cond.a
    -s $input_cond.s
#end if

## postprocessing
#if 'log' in $out
    |& tee -a '$out_log'
#end if
    ]]></command>
    <inputs>
        <conditional name="input_cond">
            <param name="input_sel" type="select" label="Select read type">
                <option value="s" selected="true">Single</option>
                <option value="pe">Paired-end (PE)</option>
            </param>
            <when value="s">
                <param argument="-i" type="data" format="fasta,fastq" label="Select file with single-reads"/>
                <conditional name="f_cond">
                    <param name="f_sel" type="select" label="Filter out chimeric clusters?" help="(-f)">
                        <option value="false" selected="true">No</option>
                        <option value="true">Yes</option>
                    </param>
                    <when value="false">
                        <expand macro="a" default="1"/>
                    </when>
                    <when value="true">
                        <expand macro="a" default="2"/>
                    </when>
                </conditional>
                <param argument="-s" type="integer" min="20" value="30" label="Set minimum length of common sequence shared between a chimeric read and each of its parents"/>
            </when>
            <when value="pe">
                <param argument="-i" type="data" format="fasta,fastq" label="Select file with forward reads"/>
                <param argument="-i2" type="data" format="fasta,fastq" label="Select file with reverse reads"/>
                <expand macro="a" default="1"/>
            </when>
        </conditional>
        <expand macro="d"/>
        <param argument="-u" type="integer" value="0" label="Set length of prefix" help="0 for full/maximum length"/>
        <param argument="-m" type="boolean" truevalue="true" falsevalue="false" checked="true" label="Use match length?"/>
        <param argument="-e" type="float" value="1.0" label="Set maximum number/percentage of allowed mismatches" help="Lower than 1.0 means percentage and higher than 1 means absolute number of mismatches."/>
        <param argument="-b" type="float" value="1.0" label="Set abundance ratio between a parent read and a chimeric read"/>
        <param argument="-p" type="float" value="0.0" label="Set dissimilarity control for chimeric filtering"/>
        <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="Only added to history if selected here and generated by the specific run.">
            <option value="chimeric" selected="true">Chimeric clusters</option>
            <option value="clusters" selected="true">Cluster representatives</option>
            <option value="relation" selected="true">Cluster relations</option>
            <option value="log">Log</option>
        </param>
    </inputs>
    <outputs>
        <data name="out_chimeric" format="txt" from_work_dir="result12.clstr" label="${tool.name} on ${on_string}: Chimeric clusters">
            <filter>'chimeric' in out</filter>
        </data>
        <data name="out_clusters1" format="txt" from_work_dir="result1" label="${tool.name} on ${on_string}: Cluster representatives (single or forward reads)">
            <filter>'clusters' in out</filter>
        </data>
        <data name="out_clusters2" format="txt" from_work_dir="result2" label="${tool.name} on ${on_string}: Cluster representatives (reverse reads)">
            <filter>'clusters' in out and input_cond['input_sel'] == 'pe'</filter>
        </data>
        <data name="out_log" format="txt" label="${tool.name} on $(on_string) Log">
            <filter>'log' in out</filter>
        </data>
        <data name="out_relation" format="txt" from_work_dir="result1.clstr" label="${tool.name} on ${on_string}: Cluster relations">
            <filter>'relation' in out</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default, single-read -->
        <test expect_num_outputs="3">
            <conditional name="input_cond">
                <param name="input_sel" value="s"/>
                <param name="i" value="reads_1.fastq"/>
            </conditional>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="3956"/>
                    <has_line line="GGGEEGGG?DDGGGDGFGGGGG.F,A&lt;4A@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="1990"/>
                    <has_line line=">Cluster 988"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 custom, single-read -->
        <test expect_num_outputs="3">
            <conditional name="input_cond">
                <param name="input_sel" value="s"/>
                <param name="i" value="reads_1.fastq"/>
                <conditional name="f_cond">
                    <param name="f_sel" value="true"/>
                </conditional>
                <param name="s" value="21"/>
            </conditional>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="3956"/>
                    <has_line line="GGGEEGGG?DDGGGDGFGGGGG.F,A&lt;4A@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="1990"/>
                    <has_line line=">Cluster 988"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 default, paired-end -->
        <test expect_num_outputs="4">
            <conditional name="input_cond">
                <param name="input_sel" value="pe"/>
                <param name="i" value="reads_1.fastq"/>
                <param name="i2" value="reads_2.fastq"/>
            </conditional>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="HHFHEHHHFHHGFEHHHHHHFHHE=H/FF;D.A?358:"/>
                </assert_contents>
            </output>
            <output name="out_clusters2">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="EHHHHHHGHHGEHHHHGHFGHHEHHHBG@GHFHFFH8HHFHHFHBFHH=@H.HEA>#;CFHHEFFE>HH;EFHFHB/*B3;E@3?CG5>08#@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="2002"/>
                    <has_line line=">Cluster 1000"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 custom, paired-end -->
        <test expect_num_outputs="5">
            <conditional name="input_cond">
                <param name="input_sel" value="pe"/>
                <param name="i" value="reads_1.fastq"/>
                <param name="i2" value="reads_2.fastq"/>
            </conditional>
            <param name="d" value="1"/>
            <param name="u" value="0"/>
            <param name="m" value="true"/>
            <param name="e" value="0.1"/>
            <conditional name="f_cond">
                <param name="a" value="3"/>
            </conditional>            
            <param name="b" value="2"/>
            <param name="p" value="1"/>
            <param name="out" value="chimeric,clusters,relation,log"/>
            <output name="out_chimeric">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_clusters1">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="TTCGACGCCAAACGCGGCAGCGGCAGCGGCGTCCTGGC"/>
                </assert_contents>
            </output>
            <output name="out_clusters2">
                <assert_contents>
                    <has_n_lines n="4004"/>
                    <has_line line="EHHHHHHGHHGEHHHHGHFGHHEHHHBG@GHFHFFH8HHFHHFHBFHH=@H.HEA>#;CFHHEFFE>HH;EFHFHB/*B3;E@3?CG5>08#@"/>
                </assert_contents>
            </output>
            <output name="out_relation">
                <assert_contents>
                    <has_n_lines n="2002"/>
                    <has_line line=">Cluster 1000"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="Done!"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

*cd-hit-dup* is part of CD-HIT and removes duplicates from sequencing reads, with an optional step to detect and remove chimeric reads. When two files of paired end reads are used as inputs, each pair of reads will be concatenated into a single one. Visit the `project wiki <https://github.com/weizhongli/cdhit/wiki/3.-User's-Guide#cd-hit-dup>`_ for a detailed description.

**Input**

Single-read or paired-end reads in FASTQ or FASTA format.

**Output**

- Cluster representatives (FASTA)
- Cluster relations of each duplicate to its representative (CLSTR)
- Cluster representatives for reverse reads (FASTA)
- chimeric clusters (CLSTR)

.. class:: infomark

**References**

@HELP_REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>