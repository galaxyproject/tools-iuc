<tool id="cd_hit" name="CD-HIT -2d/-est/-est-2d" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@">
    <description>cluster/compare peptide/nucleotide sequences</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <version_command><![CDATA[cd-hit | grep "CD-HIT version" | cut -d" " -f 4]]></version_command>
    <command detect_errors="exit_code"><![CDATA[
cd-hit$mode_cond.mode_sel

## mode specific
#if $mode_cond.mode_sel == ''
    -i '$mode_cond.i'
    -t $mode_cond.t
#else if $mode_cond.mode_sel == '-est'
    $mode_cond.ap
    -cx $mode_cond.cx
    -cy $mode_cond.cy
    -gap $mode_cond.gap
    -gap-ext $mode_cond.gapext
    -i '$mode_cond.input_cond.i'
    #if $mode_cond.mask != ''
        -mask '$mode_cond.mask'
    #end if
    -match $mode_cond.match
    -mismatch $mode_cond.mismatch
    $mode_cond.r
    #if $mode_cond.input_cond.input_sel == 'pe'        
        -j '$mode_cond.input_cond.j'
        -op 'result2'
        -P 1
    #end if
#else if $mode_cond.mode_sel == '-2d'
    -i '$mode_cond.i'
    -i2 '$mode_cond.i2'
    -t $mode_cond.t
#else if $mode_cond.mode_sel == '-est-2d'
    -cx $mode_cond.cx
    -cy $mode_cond.cy
    -gap $mode_cond.gap
    -gap-ext $mode_cond.gapext
    -i '$mode_cond.input_cond.i'
    -i2 '$mode_cond.input_cond.i2'
    #if $mode_cond.mask != ''
        -mask '$mode_cond.mask'
    #end if
    -match $mode_cond.match
    -mismatch $mode_cond.mismatch
    $mode_cond.r
    #if $mode_cond.input_cond.input_sel == 'pe'        
        -j '$mode_cond.input_cond.j'
        -j2 '$mode_cond.input_cond.j2'
        -op 'result2'
        -P 1
    #end if
#end if

## global and local alignment
$mode_cond.G_cond.G_sel ## -G
#if $mode_cond.G_cond.G_sel == '-G 0' ## local alignment
    -A $mode_cond.G_cond.A
    -aL $mode_cond.G_cond.aL
    -AL $mode_cond.G_cond.AL
    -aS $mode_cond.G_cond.aS
    -AS $mode_cond.G_cond.AS    
    -s $mode_cond.G_cond.s
    -S $mode_cond.G_cond.S
    #if $mode_cond.mode_sel == '-2d' or $mode_cond.mode_sel == '-est-2d'
        -s2 $mode_cond.G_cond.s2
        -S2 $mode_cond.G_cond.S2
    #end if
#end if

## general
-b $b
-c $c
$g
-l $l
-M \${GALAXY_MEMORY_MB:-0}
-n $mode_cond.n
-o 'result'
-T \${GALAXY_SLOTS:-1}
-U $U
-uL $uL
-uS $uS

## output
$out.bak
-d $out.d
$out.p
$out.sc
$out.sf
@LOG@
    ]]></command>
    <inputs>
        <conditional name="mode_cond">
            <param name="mode_sel" type="select" label="Select CD-HIT mode?">
                <option value="" selected="true">CD-HIT</option>
                <option value="-est">CD-HIT-EST</option>
                <option value="-2d">CD-HIT-2D</option>
                <option value="-est-2d">CD-HIT-EST-2D</option>
            </param>
            <when value="">
                <param argument="-i" type="data" format="fasta" label="Select file with sequences"/>
                <expand macro="G"/>
                <expand macro="n" default="5" help="Suggested word size: 5 for thresholds 0.7 ~ 1.0; 4 for thresholds 0.6 ~ 0.7; 3 for thresholds 0.5 ~ 0.6; 2 for thresholds 0.4 ~ 0.5"/>
                <expand macro="t"/>
            </when>
            <when value="-est">
                <conditional name="input_cond">
                    <param name="input_sel" type="select" label="Select input type">
                        <option value="s">Single</option>
                        <option value="pe">Paired-end (PE)</option>
                    </param>
                    <when value="s">
                        <param argument="-i" type="data" format="fasta" label="Select file with sequences"/>
                    </when>
                    <when value="pe">
                        <param argument="-i" type="data" format="fasta" label="Select file with R1 reads"/>
                        <param argument="-j" type="data" format="fasta" label="Select file with R2 reads"/>
                    </when>
                </conditional>
                <expand macro="G"/>
                <expand macro="n" default="10" help="Suggested word size: 10,11 for threshold in 0.95 ~ 1.0; 8,9 for threshold in 0.9 ~ 0,95; 7 for threshold in 0.88 ~ 0.9; 6 for threshold in 0.85 ~ 0.88; 5 for threshold in 0.80 ~ 0.85; 4 for threshold in 0.75 ~ 0.8"/>
                <expand macro="est"/>
                <param argument="-ap" type="boolean" truevalue="-ap 1" falsevalue="" checked="false" label="Use alignment position constrains?" help="Will force sequences to align at beginings and only does +/+ alignment."/>
            </when>
            <when value="-2d">
                <param argument="-i" type="data" format="fasta" label="Select file with first sequence database"/>
                <param argument="-i2" type="data" format="fasta" label="Select file with second sequence database"/>
                <expand macro="G">
                    <expand macro="s2"/>
                    <expand macro="S2"/>
                </expand>
                <expand macro="n" default="5" help="Suggested word size: 5 for thresholds 0.7 ~ 1.0; 4 for thresholds 0.6 ~ 0.7; 3 for thresholds 0.5 ~ 0.6; 2 for thresholds 0.4 ~ 0.5"/>
                <expand macro="t"/>
            </when>
            <when value="-est-2d">
                <conditional name="input_cond">
                    <param name="input_sel" type="select" label="Select input type">
                        <option value="s">Single</option>
                        <option value="pe">Paired-end (PE)</option>
                    </param>
                    <when value="s">
                        <param argument="-i" type="data" format="fasta" label="Select file with first sequence database"/>
                        <param argument="-i2" type="data" format="fasta" label="Select file with second sequence database"/>
                    </when>
                    <when value="pe">
                        <param argument="-i" type="data" format="fasta" label="Select file with R1 reads of first sequence database"/>
                        <param argument="-j" type="data" format="fasta" label="Select file with R2 reads of first sequence database"/>
                        <param argument="-i2" type="data" format="fasta" label="Select file with R1 reads of second sequence database"/>
                        <param argument="-j2" type="data" format="fasta" label="Select file with R2 reads of second sequence database"/>
                    </when>
                </conditional>
                <expand macro="G">
                    <expand macro="s2"/>
                    <expand macro="S2"/>
                </expand>
                <expand macro="n" default="10" help="Suggested word size: 10,11 for threshold in 0.95 ~ 1.0; 8,9 for threshold in 0.9 ~ 0,95; 7 for threshold in 0.88 ~ 0.9; 6 for threshold in 0.85 ~ 0.88; 5 for threshold in 0.80 ~ 0.85; 4 for threshold in 0.75 ~ 0.8"/>
                <expand macro="est"/>
            </when>
        </conditional>
        <expand macro="c" default="0.9"/>
        <expand macro="b" default="20"/>
        <param argument="-l" type="integer" min="1" value="10" label="Set length of sequences to throw away"/>
        <param argument="-uL" type="float" min="0.0" max="1.0" value="1.0" label="Set maximum unmatched percentage for the shorter sequence" help="If set to 0.1, the unmatched region (excluding leading and tailing gaps) must not be more than 10% of the sequence."/>
        <param argument="-uS" type="float" min="0.0" max="1.0" value="1.0" label="Set maximum unmatched percentage for the shorter sequence" help="If set to 0.1, the unmatched region (excluding leading and tailing gaps) must not be more than 10% of the sequence."/>
        <param argument="-U" type="integer" min="0" value="99999999" label="Set maximum unmatched length" help="If set to 10, the unmatched region (excluding leading and tailing gaps) must not be more than 10 bases."/>
        <param argument="-g" type="boolean" truevalue="-g 1" falsevalue="" label="Activate accurate but slow mode?" help="By cd-hit's default algorithm, a sequence is clustered to the first cluster that meet the threshold (fast cluster). If set to true, the program will cluster it into the most similar cluster that meet the threshold (accurate but slow mode)"/>
        <section name="out" title="Output options">
            <param argument="-d" type="integer" min="0" value="20" label="Set length of description in cluster output file" help="If set to 0, it takes the FASTA defline and stops at first space."/>
            <param argument="-p" type="boolean" truevalue="-p 1" falsevalue="" label="Print alignment overlap in cluster output file?"/>
            <param argument="-sc" type="boolean" truevalue="-sc 1" falsevalue="" label="Sort clusters by decreasing size (number of sequences) in cluster output file?"/>
            <param argument="-sf" type="boolean" truevalue="-sf 1" falsevalue="" label="Sort fasta by cluster size (number of sequences) in cluster output file?"/>
            <expand macro="bak"/>
            <expand macro="log"/>
        </section>
    </inputs>
    <outputs>
        <expand macro="out_clusters"/>
        <expand macro="out_clusters_backup"/>
        <expand macro="out_sequences"/>
        <!-- only for paired-end inputs in cd-hit-est and cd-hit-est-2d -->
        <data name="out_sequences_r2" format="fasta" from_work_dir="result2" label="${tool.name} on ${on_string}: Representative sequences (R2)">
            <filter>'-est' in mode_cond['mode_sel'] and mode_cond['input_cond']['input_sel'] == 'pe'</filter>
        </data>
        <expand macro="out_log"/>
    </outputs>
    <tests>
        <!-- #1 cd-hit, default -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value=""/>
                <param name="i" value="protein_sequences.fasta"/>
            </conditional>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="log" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="12"/>
                    <has_line line=">Cluster 4"/>
                    <has_text_matching expression="0.+274aa.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="7"/>
                    <has_text_matching expression="3.+332aa.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="36"/>
                    <has_line line=">sp|P19858|LDHA_BOVIN L-lactate dehydrogenase A chain OS=Bos taurus GN=LDHA PE=2 SV=2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 cd-hit, custom -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value=""/>
                <param name="i" value="protein_sequences.fasta"/>
                <conditional name="G_cond">
                    <param name="G_sel" value="-G 0"/>
                    <param name="A" value="1"/>
                    <param name="aL" value="1.0"/>
                    <param name="AL" value="99999998"/>
                    <param name="aS" value="1.0"/>
                    <param name="AS" value="99999998"/>
                    <param name="s" value="1.0"/>
                    <param name="S" value="999998"/>
                </conditional>
                <param name="n" value="4"/>
                <param name="t" value="3"/>
            </conditional>
            <param name="b" value="21"/>
            <param name="c" value="0.8"/>
            <param name="g" value="true"/>
            <param name="l" value="5"/>
            <param name="uL" value="0.9"/>
            <param name="uS" value="0.9"/>
            <param name="U" value="99999998"/>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="d" value="21"/>
                <param name="log" value="true"/>
                <param name="p" value="true"/>
                <param name="sc" value="true"/>
                <param name="sf" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="12"/>
                    <has_line line=">Cluster 4"/>
                    <has_text_matching expression="0.+332aa.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="7"/>
                    <has_text_matching expression="2.+332aa.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="34"/>
                    <has_line line=">sp|P19858|LDHA_BOVIN L-lactate dehydrogenase A chain OS=Bos taurus GN=LDHA PE=2 SV=2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 cd-hit-est, single, default -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="s"/>
                    <param name="i" value="nucleotide_sequences.fasta"/>
                </conditional>
            </conditional>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="log" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="39"/>
                    <has_line line=">Cluster 1"/>
                    <has_text_matching expression="10.+241nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="37"/>
                    <has_text_matching expression="1.+241nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="4"/>
                    <has_line line=">F23Fcsw_133990"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 cd-hit-est, single, custom -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="s"/>
                    <param name="i" value="nucleotide_sequences.fasta"/>
                </conditional>
                <conditional name="G_cond">
                    <param name="G_sel" value="-G 0"/>
                    <param name="A" value="1"/>
                    <param name="aL" value="1.0"/>
                    <param name="AL" value="99999998"/>
                    <param name="aS" value="1.0"/>
                    <param name="AS" value="99999998"/>
                    <param name="s" value="1.0"/>
                    <param name="S" value="999998"/>
                </conditional>
                <param name="ap" value="true"/>
                <param name="cx" value="100"/>
                <param name="cy" value="80"/>
                <param name="gap" value="-5"/>
                <param name="gapext" value="-2"/>
                <param name="mask" value="NX"/>
                <param name="match" value="3"/>
                <param name="mismatch"  value="-3"/>
                <param name="n" value="11"/>
                <param name="r" value="true"/>
            </conditional>
            <param name="b" value="21"/>
            <param name="c" value="0.8"/>
            <param name="g" value="true"/>
            <param name="l" value="11"/>
            <param name="uL" value="0.9"/>
            <param name="uS" value="0.9"/>
            <param name="U" value="99999998"/>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="d" value="21"/>
                <param name="log" value="true"/>
                <param name="p" value="true"/>
                <param name="sc" value="true"/>
                <param name="sf" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="56"/>
                    <has_line line=">Cluster 4"/>
                    <has_text_matching expression="0.+100nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="37"/>
                    <has_text_matching expression="0.+100nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="38"/>
                    <has_line line=">M42Fcsw_225418"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 cd-hit-est, pe, default -->
        <test expect_num_outputs="5">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="pe"/>
                    <param name="i" value="reads_r1.fasta"/>
                    <param name="j" value="reads_r2.fasta"/>
                </conditional>
            </conditional>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="log" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="1623"/>
                    <has_line line=">Cluster 621"/>
                    <has_text_matching expression="0.+70nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1001"/>
                    <has_text_matching expression="595.+131nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="1244"/>
                    <has_line line=">EAS20_8_6_4_311_628/1"/>
                </assert_contents>
            </output>
            <output name="out_sequences_r2">
                <assert_contents>
                    <has_n_lines n="1244"/>
                    <has_line line=">EAS20_8_6_4_311_628/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #6 cd-hit-est, pe, custom -->
        <test expect_num_outputs="5">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="pe"/>
                    <param name="i" value="reads_r1.fasta"/>
                    <param name="j" value="reads_r2.fasta"/>
                </conditional>
                <conditional name="G_cond">
                    <param name="G_sel" value="-G 0"/>
                    <param name="A" value="1"/>
                    <param name="aL" value="1.0"/>
                    <param name="AL" value="99999998"/>
                    <param name="aS" value="1.0"/>
                    <param name="AS" value="99999998"/>
                    <param name="s" value="1.0"/>
                    <param name="S" value="999998"/>
                </conditional>
                <param name="ap" value="true"/>
                <param name="cx" value="100"/>
                <param name="cy" value="80"/>
                <param name="gap" value="-5"/>
                <param name="gapext" value="-2"/>
                <param name="mask" value="NX"/>
                <param name="match" value="3"/>
                <param name="mismatch"  value="-3"/>
                <param name="n" value="11"/>
                <param name="r" value="true"/>
            </conditional>
            <param name="b" value="21"/>
            <param name="c" value="0.8"/>
            <param name="g" value="true"/>
            <param name="l" value="11"/>
            <param name="uL" value="0.9"/>
            <param name="uS" value="0.9"/>
            <param name="U" value="99999998"/>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="d" value="21"/>
                <param name="log" value="true"/>
                <param name="p" value="true"/>
                <param name="sc" value="true"/>
                <param name="sf" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="2002"/>
                    <has_line line=">Cluster 1000"/>
                    <has_text_matching expression="0.+180nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1001"/>
                    <has_text_matching expression="973.+118nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="2002"/>
                    <has_line line=">EAS20_8_6_3_179_1794/1"/>
                </assert_contents>
            </output>
            <output name="out_sequences_r2">
                <assert_contents>
                    <has_n_lines n="2002"/>
                    <has_line line=">EAS20_8_6_3_179_1794/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #7 cd-hit-2d, default -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-2d"/>
                <param name="i" value="reads_r1.fasta"/>
                <param name="i2" value="reads_r2.fasta"/>
            </conditional>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="log" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="2606"/>
                    <has_line line=">Cluster 1000"/>
                    <has_text_matching expression="0.+30aa.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1605"/>
                    <has_text_matching expression="313.+93aa.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="794"/>
                    <has_line line=">EAS20_8_6_4_311_2022/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #8 cd-hit-2d, custom -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-2d"/>
                <param name="i" value="reads_r1.fasta"/>
                <param name="i2" value="reads_r2.fasta"/>
                <conditional name="G_cond">
                    <param name="G_sel" value="-G 0"/>
                    <param name="A" value="1"/>
                    <param name="aL" value="1.0"/>
                    <param name="AL" value="99999998"/>
                    <param name="aS" value="1.0"/>
                    <param name="AS" value="99999998"/>
                    <param name="s" value="1.0"/>
                    <param name="S" value="999998"/>
                    <param name="s2" value="0.9"/>
                    <param name="S2" value="1"/>
                </conditional>
                <param name="n" value="4"/>
                <param name="t" value="3"/>
            </conditional>
            <param name="b" value="21"/>
            <param name="c" value="0.8"/>
            <param name="g" value="true"/>
            <param name="l" value="11"/>
            <param name="uL" value="0.9"/>
            <param name="uS" value="0.9"/>
            <param name="U" value="99999998"/>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="d" value="21"/>
                <param name="log" value="true"/>
                <param name="p" value="true"/>
                <param name="sc" value="true"/>
                <param name="sf" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="2034"/>
                    <has_line line=">Cluster 1000"/>
                    <has_text_matching expression="0.+30aa.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1033"/>
                    <has_text_matching expression="504.+100aa.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="1938"/>
                    <has_line line=">EAS20_8_6_4_311_628/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #9 cd-hit-est-2d, single, default -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est-2d"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="s"/>
                    <param name="i" value="reads_r1.fasta"/>
                    <param name="i2" value="reads_r2.fasta"/>
                </conditional>
            </conditional>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="log" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="2606"/>
                    <has_line line=">Cluster 1000"/>
                    <has_text_matching expression="0.+30nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1605"/>
                    <has_text_matching expression="313.+93nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="794"/>
                    <has_line line=">EAS20_8_6_4_311_2022/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #10 cd-hit-est-2d, single, custom -->
        <test expect_num_outputs="4">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est-2d"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="s"/>
                    <param name="i" value="reads_r1.fasta"/>
                    <param name="i2" value="reads_r2.fasta"/>
                </conditional>
                <conditional name="G_cond">
                    <param name="G_sel" value="-G 0"/>
                    <param name="A" value="1"/>
                    <param name="aL" value="1.0"/>
                    <param name="AL" value="99999998"/>
                    <param name="aS" value="1.0"/>
                    <param name="AS" value="99999998"/>
                    <param name="s" value="1.0"/>
                    <param name="S" value="999998"/>
                    <param name="s2" value="0.9"/>
                    <param name="S2" value="1"/>
                </conditional>
                <param name="cx" value="100"/>
                <param name="cy" value="80"/>
                <param name="gap" value="-5"/>
                <param name="gapext" value="-2"/>
                <param name="mask" value="NX"/>
                <param name="match" value="3"/>
                <param name="mismatch"  value="-3"/>
                <param name="n" value="11"/>
                <param name="r" value="true"/>
            </conditional>
            <param name="b" value="21"/>
            <param name="c" value="0.8"/>
            <param name="g" value="true"/>
            <param name="l" value="11"/>
            <param name="uL" value="0.9"/>
            <param name="uS" value="0.9"/>
            <param name="U" value="99999998"/>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="d" value="21"/>
                <param name="log" value="true"/>
                <param name="p" value="true"/>
                <param name="sc" value="true"/>
                <param name="sf" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="2048"/>
                    <has_line line=">Cluster 1000"/>
                    <has_text_matching expression="0.+30nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1047"/>
                    <has_text_matching expression="504.+100nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="1910"/>
                    <has_line line=">EAS20_8_6_4_311_628/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #11 cd-hit-est-2d, pe, default -->
        <test expect_num_outputs="5">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est-2d"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="pe"/>
                    <param name="i" value="reads_r1.fasta"/>
                    <param name="j" value="reads_r1.fasta"/>
                    <param name="i2" value="reads_r2.fasta"/>
                    <param name="j2" value="reads_r2.fasta"/>
                </conditional>
            </conditional>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="log" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="2502"/>
                    <has_line line=">Cluster 1000"/>
                    <has_text_matching expression="0.+60nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1501"/>
                    <has_text_matching expression="313.+186nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="1002"/>
                    <has_line line=">EAS20_8_6_4_311_2022/2"/>
                </assert_contents>
            </output>
            <output name="out_sequences_r2">
                <assert_contents>
                    <has_n_lines n="1002"/>
                    <has_line line=">EAS20_8_6_4_311_2022/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
        <!-- #12 cd-hit-est-2d, pe, custom -->
        <test expect_num_outputs="5">
            <conditional name="mode_cond">
                <param name="mode_sel" value="-est-2d"/>
                <conditional name="input_cond">
                    <param name="input_sel" value="pe"/>
                    <param name="i" value="reads_r1.fasta"/>
                    <param name="j" value="reads_r1.fasta"/>
                    <param name="i2" value="reads_r2.fasta"/>
                    <param name="j2" value="reads_r2.fasta"/>
                </conditional>
                <conditional name="G_cond">
                    <param name="G_sel" value="-G 0"/>
                    <param name="A" value="1"/>
                    <param name="aL" value="1.0"/>
                    <param name="AL" value="99999998"/>
                    <param name="aS" value="1.0"/>
                    <param name="AS" value="99999998"/>
                    <param name="s" value="1.0"/>
                    <param name="S" value="999998"/>
                    <param name="s2" value="0.9"/>
                    <param name="S2" value="1"/>
                </conditional>
                <param name="cx" value="100"/>
                <param name="cy" value="80"/>
                <param name="gap" value="-5"/>
                <param name="gapext" value="-2"/>
                <param name="mask" value="NX"/>
                <param name="match" value="3"/>
                <param name="mismatch"  value="-3"/>
                <param name="n" value="11"/>
                <param name="r" value="true"/>
            </conditional>
            <param name="b" value="21"/>
            <param name="c" value="0.8"/>
            <param name="g" value="true"/>
            <param name="l" value="11"/>
            <param name="uL" value="0.9"/>
            <param name="uS" value="0.9"/>
            <param name="U" value="99999998"/>
            <section name="out">
                <param name="bak" value="true"/>
                <param name="d" value="21"/>
                <param name="log" value="true"/>
                <param name="p" value="true"/>
                <param name="sc" value="true"/>
                <param name="sf" value="true"/>
            </section>
            <output name="out_clusters">
                <assert_contents>
                    <has_n_lines n="2034"/>
                    <has_line line=">Cluster 1000"/>
                    <has_text_matching expression="0.+60nt.+"/>
                </assert_contents>
            </output>
            <output name="out_clusters_backup">
                <assert_contents>
                    <has_n_lines n="1033"/>
                    <has_text_matching expression="504.+180nt.+"/>
                </assert_contents>
            </output>
            <output name="out_sequences">
                <assert_contents>
                    <has_n_lines n="1938"/>
                    <has_line line=">EAS20_8_6_4_311_2022/2"/>
                </assert_contents>
            </output>
            <output name="out_sequences_r2">
                <assert_contents>
                    <has_n_lines n="1938"/>
                    <has_line line=">EAS20_8_6_2_146_1311/2"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="program completed !"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

This wrapper implements four variants:

- *CD-HIT* clusters proteins into clusters that meet a user-defined similarity threshold, usually a sequence identity. Each cluster has one representative sequence.
- *CD-HIT-2D* compares 2 protein datasets. It identifies the sequences in (-i2) that are similar to (-i) at a certain threshold.
- *CD-HIT-EST* clusters a nucleotide dataset into clusters that meet a user-defined similarity threshold, usually a sequence identity. Since eukaryotic genes usually have long introns, which cause long gaps, it is difficult to make full-length alignments for these genes. So, *CD-HIT-EST* is good for non-intron containing sequences like EST.
- *CD-HIT-EST-2D* compares 2 nucleotide datasets. It identifies the sequences in (-i2) that are similar to (-i) at a certain threshold. For same reason as *CD-HIT-EST*, *CD-HIT-EST-2D* is good for non-intron containing sequences like EST.


**Inputs**

- *CD-HIT*: a protein dataset in FASTA format
- *CD-HIT-EST*: a DNA/RNA dataset in FASTA format (single or paired-end reads)
- *CD-HIT-2D*: two protein datasets in FASTA format
- *CD-HIT-EST-2D*: two DNA/RNA datasets in FASTA format (single or paired-end reads)

**Outputs**

- Representative sequences in FASTA format
@CLUSTER@
@CLUSTER_BACKUP@
- Log file

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>