<tool id="metawrapmg_binning" name="MetaWRAP" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" license="MIT">
    <description>metagenome binning</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>

    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">metawrap-binning</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
        ## set memory usage
        if [ -n "\${GALAXY_MEMORY_MB}" ] ; then
            export GALAXY_MEMORY_GB="\$((GALAXY_MEMORY_MB / 1024))" ;
        fi ;

        ##################
        ## SET UP FILES ##
        ##################

        ## only plain FASTA and FASTQ
        ln -s '$metagenome' metagenome.fasta &&
        ## Metawrap checks for files named _1.fastq and _2.fastq.
        ln -s '$input.forward' reads_1.fastq &&
        ln -s '$input.reverse' reads_2.fastq &&

        #####################
        ## INITIAL BINNING ##
        #####################

        metawrap binning 
        --metabat2 --maxbin2 --concoct 
        -a metagenome.fasta
        -m "\${GALAXY_MEMORY_GB:-16}"
        -o INITIAL_BINNING
        -t "\${GALAXY_SLOTS:-4}"
        reads_1.fastq
        reads_2.fastq
    ]]></command>
    <inputs>
        <param name="metagenome" format="fasta" type="data" label="Metagenome" help="Metagenome co-assembly for binning"/>
        <param name="input" type="data_collection" collection_type="paired" label="Reads" help="Original reads that were used for the assembly"/>
        <!-- <section name="binning" title="Binning parameters" expanded="false">
            <param argument="-c" type="integer" value="70" min="50" max="100" label="Percent completion" help="Minimum % completion of bins"/>
            <param argument="-x" type="integer" value="10" min="0" max="100" label="Percent contamination" help="Maximum % contamination of bins that is acceptable"/>
        </section> -->
        <!-- the pplacer component requires 40 GB per thread. Skip pplacer for
         testing by setting this to "quick" -->
        <!-- <param name="hidden_quick" type="hidden" value=""/> -->
    </inputs>
    <outputs>
        <collection name="concoct_bins" type="list" label="${tool.name} on ${on_string}: concoct bins">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.fa" format="fasta" directory="INITIAL_BINNING/concoct_bins" recurse="true" match_relative_path="true"/>
        </collection>
        <collection name="maxbin2_bins" type="list" label="${tool.name} on ${on_string}: maxbin2 bins">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.fa" format="fasta" directory="INITIAL_BINNING/maxbin2_bins" recurse="true" match_relative_path="true"/>
        </collection>
        <collection name="metabat_bins" type="list" label="${tool.name} on ${on_string}: metabat2 bins">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.fa" format="fasta" directory="INITIAL_BINNING/metabat2_bins" recurse="true" match_relative_path="true"/>
        </collection>
    </outputs>
    <tests>
        <!-- 01: basic function -->
        <test>
            <param name="metagenome" value="subset.fasta.gz"/>
            <param name="input">
                <collection type="paired">
                    <element name="forward" value="mapped_reads.r1.fastq.gz"/>
                    <element name="reverse" value="mapped_reads.r2.fastq.gz"/>
                </collection>
            </param>
            <output_collection name="concoct_bins" type="list" count="27">
                <element name="bin.1" ftype="fasta">
                    <assert_contents>
                        <has_text text=">NODE_"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="maxbin2_bins" type="list" count="2">
                <element name="bin.1" ftype="fasta">
                    <assert_contents>
                        <has_text text="NODE_"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output_collection name="metabat_bins" type="list" count="0"/>
        </test>
    </tests>
    <help><![CDATA[
MetaWRAP
--------

MetaWRAP aims to be an easy-to-use metagenomic wrapper suite that
accomplishes the core tasks of metagenomic analysis. Additionally,
metaWRAP takes bin extraction and analysis to the next level. metaWRAP
is meant to be a fast and simple approach before you delve deeper into
parameterization of your analysis. MetaWRAP can be applied to a variety
of environments, including gut, water, and soil microbiomes (see
metaWRAP paper for benchmarks).

MetaWRAP binning module
~~~~~~~~~~~~~~~~~~~~~~~

The metaWRAP::Binning module is meant to be a convenient wrapper around
three metagenomic binning software: MaxBin2, metaBAT2, and CONCOCT.
First the metagenomic assembly is indexed with bwa-index, and then
paired end reads from any number of samples are aligned to it. The
alignments are sorted and compressed with samtools, and library insert
size statistics are also gathered at the same time (insert size average
and standard deviation). metaBAT2's jgi_summarize_bam_contig_depths
function is used to generate contig adundance table, and it is then
converted into the correct format for each of the three binners to take
as input. After MaxBin2, metaBAT2, and CONCOCT finish binning the
contigs with default settings, the final bins folders are created with
formatted bin fasta files. CheckM's lineage_wf function is used to
predict essential genes and estimate the completion and contamination of
each bin.

--------------

MetaWRAPâ€™s home page is
`bxlab/metaWRAP <https://github.com/bxlab/metaWRAP>`__.

This tool was wrapped by the Galaxy Australia team.
        ]]></help>
    <expand macro="citations"/>
</tool>
