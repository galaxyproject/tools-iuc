<tool id="orfipy" name="ORFipy" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>a versatile ORF finder</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">orfipy</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
orfipy 
--procs "\${GALAXY_SLOTS:-1}"
--outdir ./ 
#if 'BED' in $out_files or $longest:
    --bed '$out_bed'
#end if
#if 'BED12' in $out_files:
    --bed12 '$out_bed12'
#end if
#if 'DNA' in $out_files:
    --dna '$out_dna'
#end if
#if 'RNA' in $out_files:
    --rna '$out_rna'
#end if
#if 'PEP' in $out_files:
    --pep '$out_pep'
#end if
--strand $strand
#if $min:
    --min $min
#end if
#if $max:
    --max $max
#end if
--table $table
#if $start:
    --start '$start'
#end if
#if $stop:
    --stop '$stop'
#end if
$ignore_case
$partial_3
$partial_5
$between_stops
$include_stop
$longest
'$input1'
    ]]></command>
    <inputs>
        <param name="input1" type="data" format="fasta,fasta.gz" label="Find ORFs in:" help="ORFs will be detected in this sequence"/>
        <param argument="--table" type="select" label="Specify genetic code">
            <option value="1" selected="true">1 Standard</option>
            <option value="2">2 Vertebrate mitochondrial</option>
            <option value="3">3 Yeast mitochondrial</option>
            <option value="4">4 Mold, Protozoan, Coelenterate, Mycoplasma, Spiroplasma mitochondrial</option>
            <option value="5">5 Invertebrate Mitochondrial</option>
            <option value="6">6 Ciliate, Dasycladacean, Hexamita Nuclear</option>
            <option value="7">7 Echinoderm and Flatworm Mitochondrial</option>
            <option value="8">8 Euplotid Nuclear</option>
            <option value="9">9 Bacterial, Archaeal and Plant Plastid</option>
            <option value="10">10 Alternative Yeast nuclear</option>
            <option value="11">11 Ascidian mitochondrial</option>
            <option value="12">12 Alternative Flatworm mitochondrial</option>
            <option value="13">13 Chlorophycean mitochondrial</option>
            <option value="14">14 Trematode mitochondrial</option>
            <option value="15">15 Scenedesmus obliquus mitochondrial</option>
            <option value="16">16 Thraustochytrium mitochondrial code</option>
            <option value="17">17 Pterobranchia mitochondrial</option>
            <option value="18">18 Candidate Division SR1 and Gracilibacteria</option>
            <option value="19">19 Pachysolen tannophilus Nuclear Code</option>
            <option value="20">20 Karyorelict nuclear</option>
            <option value="21">21 Condylostoma nuclear</option>
            <option value="22">22 Mesodinium nuclear</option>
            <option value="23">23 Peritrich nuclear</option>
        </param>
        <param name="out_files" type="select" label="Select outputs" help="DNA, RNA, and Peptide options will produce FASTA outputs" multiple="true" display="checkboxes">
          <option value="BED" selected="true">BED</option>
          <option value="BED12">BED12</option>
          <option value="DNA">DNA</option>
          <option value="RNA">RNA</option>
          <option value="PEP">Peptides</option>
        </param>
        <param argument="--strand" type="select" label="Select strand" help="Identify ORFs on which strand" display="radio">
            <option value="b" selected="true">Both</option>
            <option value="f">Forward</option>
            <option value="r">Reverse</option>
        </param>
        <param argument="--min" type="integer" min="0" optional="true" label="Minimum length of ORFs"
               help="No ORFs below this value will be reported. All ORFs will be reported if this parameter is not set. Default is 30"/>
        <param argument="--max" type="integer" min="0" optional="true" label="Maximum length of ORFs"
               help="This value doesn't take in account the STOP codon. No ORFs over this value will be reported. Default is 1.000.000.000."/>
        <param argument="--start" type="text" optional="true" label="Start codon(s) to use"
               help="A comma-separated list without spaces. Only ATCG and comma are allowed">
            <validator type="regex" message="Only 'ATCGatcg' and ',' are allowed in this field">^[ATGCatcg,]*$</validator>
        </param>
        <param argument="--stop" type="text" optional="true" label="Stop codon(s) to use"
               help="A commma separated list without spaces. Only ATCG and comma are allowed">
            <validator type="regex" message="Only 'ATCGatcg' and ',' are allowed in this field">^[ATGCatcg,]*$</validator>
        </param>
        <param argument="--ignore-case" type="boolean" truevalue="--ignore-case" falsevalue="" label="Ignore case?" help="Ignore case and find ORFs in lower case sequences too. NO = do not ignore (use upper case only). YES = ignore" display="radio"/>
        <param argument="--partial-3" type="boolean" truevalue="--partial-3" falsevalue="" label="Output ORFs with Start but no Stop?" help="Output ORFs with a start codon but lacking an inframe stop codon. NO = do not output. YES = do output" display="radio"/>
        <param argument="--partial-5" type="boolean" truevalue="--partial-5" falsevalue="" label="Output ORFs with Stop but no Start?" help="Output ORFs with an inframe stop codon lacking an inframe start codon. NO = do not output. YES = do output" display="radio"/>
        <param argument="--between-stops" type="boolean" truevalue="--between-stops" falsevalue="" label="Output ORFs bound by Stop codons?" help="Output ORFs defined as regions between stop codons (regions free of stop codon). This will set --partial-3 and --partial-5 true" display="radio"/>
        <param argument="--include-stop" type="boolean" truevalue="--include-stop" falsevalue="" label="Include stop codon in the results?" help="Output ORFs with an inframe stop codon lacking an inframe start codon. NO = do not include. YES = include" display="radio"/>
        <param argument="--longest" type="boolean" truevalue="--longest" falsevalue="" label="Output separate BED file with longest ORFs per sequence" help="Setting this option will automatically enable the BED option."/>
    </inputs>
    <outputs>
        <data name="out_bed" format="bed6" label="ORFs on ${on_string} (BED format)">
            <filter>"BED" in out_files or longest</filter>
        </data>
        <data name="out_bed12" format="bed12" label="ORFs on ${on_string} (BED12 format)">
            <filter>"BED12" in out_files</filter>
        </data>
        <data name="out_dna" format="fasta" label="ORFs on ${on_string} (FASTA DNA)">
            <filter>"DNA" in out_files</filter>
        </data>
        <data name="out_rna" format="fasta" label="ORFs on ${on_string} (FASTA RNA)">
            <filter>"RNA" in out_files</filter>
        </data>
        <data name="out_pep" format="fasta" label="ORFs on ${on_string} (FASTA Protein)">
            <filter>"PEP" in out_files</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="input1" value="orfipy.fa"/>
            <param name="out_files" value="BED"/>
            <output name="out_bed" file="test1.bed"/>
        </test>
        <test expect_num_outputs="1">
            <param name="input1" value="orfipy.fa"/>
            <param name="out_files" value="DNA"/>
            <param name="min" value="100"/>
            <param name="partial_5" value="true"/>
            <output name="out_dna" file="test2.fa"/>
        </test>
        <test expect_num_outputs="1">
            <param name="input1" value="orfipy.fa.gz"/>
            <param name="out_files" value="DNA"/>
            <param name="min" value="100"/>
            <param name="partial_5" value="true"/>
            <output name="out_dna" file="test2.fa"/>
        </test>
        <test expect_num_outputs="1">
            <param name="input1" value="orfipy.fa.gz"/>
            <param name="out_files" value="DNA"/>
            <param name="max" value="100000000"/>
            <output name="out_dna" file="test3.fa"/>
        </test>
        <test expect_num_outputs="2">
            <param name="input1" value="orfipy.fa.gz"/>
            <param name="out_files" value="DNA"/>
            <param name="max" value="100000000"/>
            <param name="longest" value="true"/>
            <output name="out_dna" file="test3.fa"/>
            <output name="out_bed" file="test1.bed"/>
        </test>
        <test expect_num_outputs="1">
            <param name="input1" value="orfipy.fa"/>
            <param name="out_files" value="BED"/>
            <param name="longest" value="true"/>
            <output name="out_bed" file="test1.bed"/>
        </test>
    </tests>
    <help><![CDATA[
**What it does**

Orfipy is a tool for finding open reading frames (ORFs) in sequences (FASTA files). 


    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btab090</citation>
    </citations>
</tool>
