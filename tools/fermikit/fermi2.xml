<tool id="fermi2" name="fermi2" version="0.14.dev1">
    <description>assembles Illumina reads into unitigs</description>
    <requirements>
        <requirement type="package" version="r193">fermi2</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
        fermi2.pl unitig
        -s$genome_size
        -t\${GALAXY_SLOTS:-4}
        -l$readlength
        -p prefix "cat
        #for fastq in $input1:
            '$fastq'
        #end for
        "
        -T $T
        $two_pass_error
        $E
        > prefix.mak &&
        make -f prefix.mak
    ]]></command>
    <inputs>
        <param type="data" multiple="true" name="input1" format="fastqsanger,fastqsanger.gz"/>
        <param argument="-l" name="readlength" type="integer" label="primary read length" value="101" min="70"/>
        <param argument="-s" name="genome_size" type="integer" value="180000" min="1" label="approximate genome size in kilobases" help="Enter approximate genome size in kilobases. For a human genome of 3.2 gigabases enter 3200000"/>
        <param argument="-T" type="integer" value="61" label="use INT-mer for post-trimming/filtering" min="10"/>
        <param argument="-2" name="two_pass_error" type="boolean" checked="false" truevalue="-2" falsevalue="" label="Use 2-pass error correction"/>
        <param argument="-E" type="boolean" checked="false" truevalue="-E" falsevalue="" label="Do not apply error correction"/>
    </inputs>
    <outputs>
        <data name="unitigs" format="fastqsanger.gz" from_work_dir="prefix.mag.gz"/>
    </outputs>
    <tests>
        <test>
            <param name="input1" value="test.fastq.gz,test.fastq.gz"/>
            <param name="readlength" value="150"/>
            <param name="genome_size" value="1"/>
            <output name="unitigs" file="unitigs.gz" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[
fermi2 can assemble reads into unitigs.
Unitig output can be further analysed by alignment to a reference genome using bwa-mem,
and based on the alignment variants can be called using the fermi-variants tool.

::

  Usage:   fermi2.pl unitig [options] <in.fq>

  Options: -p STR    output prefix [fmdef]
           -s STR    approximate genome size [100m]
           -2        2-pass error correction
           -l INT    primary read length [101]
           -T INT    use INT-mer for post-trimming/filtering [61]
           -k INT    min overlap length during unitig construction [based on -l]
           -o INT    min overlap length during graph cleaning [based on -l]
           -m INT    min overlap length for unambiguous merging [based on -l]
           -t INT    number of threads [4]
           -E        don't apply error correction

    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btv440</citation>
    </citations>
</tool>
