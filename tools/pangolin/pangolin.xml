<tool id="pangolin" name="Pangolin" version="@TOOL_VERSION@+galaxy0" profile="20.01">
    <description>Phylogenetic Assignment of Outbreak Lineages</description>
    <macros>
        <token name="@TOOL_VERSION@">4.0.4</token>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">pangolin</requirement>
        <requirement type="package" version="0.3.16">scorpio</requirement>
        <requirement type="package" version="0.23.0">csvtk</requirement>
    </requirements>
    <version_command><![CDATA[pangolin --version]]></version_command>
    <command detect_errors="exit_code"><![CDATA[
        #if str($db.source) == "download"
            # Pangolin version 4 tries to update from an existing directory
            mkdir datadir &&
            pangolin --update-data --datadir datadir &&
        #else if str($db.source) == "builtin"
            ln -s $db.db_release.fields.path datadir &&
        #end if
        pangolin
        --threads \${GALAXY_SLOTS:-1}
        #if str($db.source) == "download" or str($db.source) == "builtin"
            --datadir 'datadir'
        #end if
        --analysis-mode $engine.analysis_mode
        #if str($engine.analysis_mode) == 'usher':
            $engine.use_assignment_cache
        #end if
        $alignment
        --outfile report.csv 
        --max-ambig $max_ambig
        --min-length $min_length
        '$input1'
        && csvtk csv2tab report.csv
        #if not $include_header:
            | tail -n+2 
        #end if
        > '$output1'
        #if $alignment
            && mv sequences.aln.fasta '$align1'
        #end if 
    ]]></command>
    <inputs>
        <param type="data" name="input1" format="fasta" label="Input FASTA File(s)" />
        <conditional name="engine">
            <param argument="--analysis-mode" type="select" label="Analysis mode"
            help="The analysis engine to use for lineage assignment. UShER is considered more accurate, but pangoLEARN is faster">
                <option value="usher">UShER</option>
                <option value="pangolearn">pangoLEARN</option>
            </param>
            <when value="usher">
                <param argument="--use-assignment-cache" type="boolean" truevalue="--add-assignment-cache --use-assignment-cache" falsevalue=""
                label="Use latest UShER assignment cache"
                help="Get the latest UShER assignment cache from the pangolin-assignment online repository and use it to speed up UShER lineage assignment. Note: Downloading the cached assignments will only pay off for large numbers of input samples. Also note that using the latest assignment cache in combination with the built-in or a cached pangolin-data source (see option below), will make your otherwise reproducible results dependent on an external data source." />
            </when>
            <when value="pangolearn" />
        </conditional>
        <conditional name="db">
            <param type="select" name="source" label="pangolin-data source" help="Where to find the pangolin-data to use for the tool run. While 'Download latest from web' is recommended, if errors occur see the warning in the main help text below.">
                <option value="download">Download latest from web</option>
                <option value="builtin">Use cached data from Galaxy server</option>
                <option value="default">Use default data shipped with this build of pangolin (not recommended)</option>
            </param>
            <when value="download">
                <!-- these are currently not supported by the pangolin downloader -->
                <!-- <param name="max_retries" label="Max download retries" help="How many times to retry downloading the pangoLEARN database" type="integer" value="5" /> -->
                <!-- <param name="timeout" label="Download timeout" help="How many seconds to wait when downloading the pangoLEARN database" type="float" value="60.0" /> -->
            </when>
            <when value="builtin">
                <param name="db_release" label="pangoLEARN release" type="select">
                    <options from_data_table="pangolearn">
                        <column name="value" index="0" />
                        <column name="name" index="1" />
                        <column name="path" index="3" />
                        <filter type="sort_by" column="0" />
                        <filter type="static_value" column="2" value="4.0" />
                        <validator type="no_options" message="No cached pangolin-data release available" />
                    </options>
                </param>
            </when>
            <when value="default" />
        </conditional>
        <param argument="--alignment" type="boolean" truevalue="--alignment" falsevalue=""
        label="Output multiple sequence alignment of input sequences" />
        <param argument="--max-ambig" type="float" value="0.5" min="0" max="1"
        label="Maximum proportion of Ns allowed"
        help="Maximum proportion of Ns allowed for pangolin to attempt assignment" />
        <param argument="--min-length" type="integer" value="10000" min="0"
        label="Minimum query length allowed"
        help="Minimum query length allowed for pangolin to attempt assignment" />
        <param name="include_header" type="boolean" truevalue="true" falsevalue="false"
        label="Include header line in output file" />
    </inputs>
    <outputs>
        <data name="output1" format="tabular" label="pangolin on ${on_string}">
            <actions>
                <action name="column_names" type="metadata" default="taxon,lineage,conflict,ambiguity_score,scorpio_call,scorpio_support,scorpio_conflict,version,pangolin_version,pangoLEARN_version,pango_version,status,note" />
            </actions>
        </data>
        <data name="align1" format="fasta" label="pangolin alignment on ${on_string}">
            <filter>alignment</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="input1" value="test1.fasta"/>
            <conditional name="engine">
                <param name="analysis_mode" value="pangolearn" />
            </conditional>
            <conditional name="db">
                <param name="source" value="download" />
            </conditional>
            <output name="output1" ftype="tabular">
                <assert_contents>
                    <has_text_matching expression="B\.1\.1\t\d\.\d" />
                    <has_text text="passed_qc" />
                    <has_n_lines n="1" />
                </assert_contents>
            </output>
        </test>
        <!-- test UShER mode -->
        <test expect_num_outputs="1">
            <param name="input1" value="test1.fasta"/>
            <conditional name="db">
                <param name="source" value="download" />
            </conditional>
            <output name="output1" ftype="tabular">
                <assert_contents>
                    <has_text_matching expression="B\.1\.1.*\t\d\.\d\t*PUSHER" />
                    <has_text text="passed_qc" />
                    <has_n_lines n="1" />
                </assert_contents>
            </output>
        </test>
        <test expect_num_outputs="2">
            <param name="input1" value="test1.fasta" />
            <conditional name="engine">
                <param name="analysis_mode" value="pangolearn" />
            </conditional>
            <conditional name="db">
                <param name="source" value="download" />
            </conditional>
            <param name="alignment" value="--alignment" />
            <output name="output1" ftype="tabular">
                <assert_contents>
                    <has_text_matching expression="B\.1\.1\t\d\.\d" />
                    <has_text text="passed_qc" />
                    <has_n_lines n="1" />
                </assert_contents>
            </output>
            <output name="align1" file="aln1.fasta" ftype="fasta">
                <assert_contents>
                    <has_text text="Consensus_EB232-crude-prep_S297" />
                    <has_n_lines n="2" />
                </assert_contents>
            </output>
        </test>
        <!-- test include-header option -->
        <test expect_num_outputs="1">
            <param name="input1" value="multiple_alignment.fasta.gz"/>
            <conditional name="engine">
                <param name="analysis_mode" value="pangolearn" />
            </conditional>
            <conditional name="db">
                <param name="source" value="download" />
            </conditional>
            <param name="include_header" value="true" />
            <output name="output1" ftype="tabular">
                <assert_contents>
                    <has_text text="pangoLEARN_version" />
                    <has_text text="lineage" />
                    <has_text text="Serbia" />
                    <has_text text="Poland" />
                    <has_text text="USA" />
                    <has_n_lines n="35" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

`Pangolin <https://cov-lineages.org/pangolin.html>`_ (Phylogenetic Assignment of Named Global Outbreak LINeages) 
is used to assign a SARS-CoV-2 genome sequence the most likely lineage based on the PANGO nomenclature system.

Pangolin uses the `pangolin-data <https://github.com/cov-lineages/pangolin-data>`_ repository as a source of its required model, protobuf, designation hash and alias files. The tool ships with a copy of this data, but the data gets updated more frequently than the tool! In general one should use the most recent model for lineage assignment, and the default option for this tool is to download the latest version of the model before performing the analysis.
A pangoLEARN data manager exists so that the Galaxy admin can download specific versions of the pangoLEARN model as required. Finally the pangolin tool can use its default built-in model, but this is **not recommended** as the
default model rapidly becomes out of date.

.. class:: warningmark

   The "Download latest from web" updates the *pangolin-data* and
   *constellations* packages but not the software (pangolin and scorpio) using
   these data packages.
   If the data package format changes upstream, this can cause the tool run to
   fail. Cached data packages (or, in the worst case, the built-in data) can
   serve as a fallback until switching to an updated pangolin tool
   version.
    ]]></help>
    <citations>
      <citation type="doi">10.1093/ve/veab064</citation>
    </citations>
</tool>
