<tool id="yahs" name="YAHS" version="@VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01">
    <macros>
        <token name="@VERSION@">1.1a.2</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <requirements>
        <requirement type="package" version="@VERSION@">yahs</requirement>
        <requirement type="package" version="1.11">samtools</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        #if $function.function_select == "yahs":
            ln -s '$function.fasta' input.fasta
            samtools faidx input.fasta &&
            mkdir initial_break &&
            mkdir agp_out &&
            mkdir agp_break &&
            mkdir final_outs &&
            yahs input.fasta $function.bamfile
            #if $agp:
                -a $$function.agp
            #end if
            #if $function.res:
                -r $function.res
            #end if
            #if $function.enzyme:
                -e '$function.enzyme'
            #end if
            #if $function.length:
                -l $function.length
            #end if
            #if $function.quality:
                -q $function.quality
            #end if
            $no_contig_ec
            $no_scaffold_ec
            -o yahs_out &&
            mv *final* final_outs/ &&
            mv *initial_break*.agp initial_break/ &&
            #if $function.no_scaffold_ec == "":
                mv *._break.agp agp_break/ &&
            #end if
            mv *.agp agp_out
        #else:
            agp_to_fasta $function.agp $function.fasta
            #if $function.length:
                -l $function.length
            #end if
        #end if
    ]]></command>
    <inputs>
        <conditional name="function">
            <param name="function_select" type="select" label="Which function would you like to run?">
                <option value="yahs">YAHS</option>
                <option value="agp_to_fasta">AGP to fasta</option>
            </param>
            <when value="yahs">
                <param name="fasta" type="data" format="fasta" label="Input contig sequences"/>
                <param name="bamfile" type="data" format="bam,bed" label="Alighment file of Hi-C reads to contigs"/>
                <param name="agp" argument="-a" type="data" format="agp" optional="true" label="Input agp file to use a base for scaffolding"/>
                <param name="res" argument="-r" type="text" label="Resolutions" optional="true" help="Comma separated, ascending list of range of resolutions with no spaces. Ex. `50000,100000,200000,500000,1000000,2000000,5000000...`"/>
                <param name="enzyme" argument="-e" type="text" label="Restriction enzyme used in Hi-C experiment" optional="true" help="Comma-separated list of restriction enzyme sequences"/>
                <param name="length" argument="-l" type="integer" label="Minimum contig length included for scaffolding" min="1" optional="true"/>
                <param name="quality" argument="-q" type="integer" label="Minimum read mapping quality (for BAM input only)" min="1" optional="true"/>
                <param name="no_contig_ec" type="boolean" label="Skip assembly error correction step" truevalue="--no-contig-ec" falsevalue="" help="Automatically active if AGP output is set."/>
                <param name="no_scaffold_ec" type="boolean" label="Skip assemblyscaffolding error check each round" truevalue="--no-scaffold-ec" falsevalue="" help="Will also prevent any break.agp output files."/>
            </when>
            <when value="agp_to_fasta">
                <param name="agp" type="data" format="agp" label="Input AGP file"/>
                <param name="fasta" type="data" format="fasta" label="Contig fasta file"/>
                <param name="length" type='integer' label="Output fasta line length" value="60" min="1"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <!-- INITIAL ROUNDS -->
        <collection name="initial_agp_break" type="list" label="${tool.name} on $on_string}: AGP initial break files">
            <discover_datasets directory="initial_break" ext="agp"/>
        </collection>
        <collection name="agp_break" type="list" label="${tool.name} on $on_string}: AGP break files">
            <discover_datasets directory="agp_break" ext="agp"/>
        </collection>
        <collection name="agp_out" type="list" label="${tool.name} on $on_string}: AGP scaffolding results files">
            <discover_datasets directory="agp_out" pattern="(?P&lt;identifier_0&gt;[^_]+)_(?P&lt;identifier_1&gt;[^_]+)\.agp" ext="agp"/>
        </collection>
        <!-- FINAL FILES -->
        <data format="agp" name="final_agp_out" label="${tool.name} on $on_string}: Final scaffolds agp output" from_work_dir="final_out/yahs_out_scaffolds_final.agp"/>
        <data format="fasta" name="fasta_out" label="${tool.name} on $on_string}: Final scaffolds fasta output" from_work_dir="final_out/yahs_out_scaffolds_final.fa"/>
    </outputs>
    <tests>
        <test>
            <!-- COMMAND:   yahs test.fasta test.bed -r 50000,100000,150000,2000000,1000000 -a test.agp -o test_1 -->
        </test>
        <test>
            <!-- COMMAND:  yahs test.fasta test.bed no-contig-ec no-scaffold-ec -o test_2 -->
        </test>
        <test>
            <!-- COMMAND:  yahs test.fasta test.bed -o test_3 -->
        </test>
        <test>
            <!-- agp_to_fasta test.agp -l50 -o test_4.fasta -->
        </test>
    </tests>
    <help><![CDATA[
        YaHS is scaffolding tool using Hi-C data. It relies on a new algothrim for contig joining detection which considers the topological distribution of Hi-C signals aiming to distingush real interaction signals from mapping nosies. YaHS has been tested in a wide range of genome assemblies. Compared to other Hi-C scaffolding tools, it usually generates more contiguous scaffolds - especially with a higher N90 and L90 statistics. It is also super fast - takes less than 5 minutes to reconstruct the human genome from an assembly of 5,483 contigs with ~45X Hi-C data.
    ]]></help>
    <citations>
        <citation type="doi">10.5281/zenodo.5848772</citation>
    </citations>
</tool>