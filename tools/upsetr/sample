planemo tool_init --force \
                    --id 'r-upsetr' \
                    --name 'upsetr' \
                    --requirement r-upsetr \
                  
                  movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"), header = T, sep = ";")



if(!is.null(${input_type.input_selector.tabular})){
    input <- read.csv(system.file("extdata", "$inputFile", package = "UpSetR"), header = T, sep = ";")   
}

if(!is.null(${input_type.input_selector.list})){
   listInput <- list("$listInput")
   upset(fromList(listInput), order.by = "freq")
   png("$output_png")
   dev.off()
}

if(!is.null(${input_type.input_selector.expression})){
   expressionInput <- c("$expressionInput")
}

if(!is.null(${input_type.input_selector.inputFile})){
    input <- read.csv(system.file("extdata", "$inputFile", package = "UpSetR"), header = T, sep = ";")   
}

if(!is.null(${input_type.input_selector.listInput})){
   listInput <- list("$listInput")
   upset(fromList(listInput), order.by = "freq")
   png("$output_png")
   dev.off()
}

if(!is.null(${input_type.input_selector.expressionInput})){
   expressionInput <- c("$expressionInput")
}

        ]]></configfile>
    </configfiles>

    <inputs>
        <conditional name="input_type">
            <param name="input_selector" type="select" label="Input Type">
                <option value="tabular" selected="true">Tabular File</option>
                <option value="list">A list of named vectors</option>
                <option value="expression">An vector (expression)</option>
            </param>
            <when value="tabular">
                <param name="inputFile" type="data" format="txt" label="Input File" />
            </when>
            <when value="list">
                 <param name="listInput" type="text" label="A list of named vectors to be converted to a data frame" />
            </when>
            <when value="expression">
                 <param name="expressionInput" type="text" label="An vector (expression) to be converted to an input" />
            </when>
        </conditional> 
    </inputs>

    <outputs>
        <data name="output_png" format="png" label="${tool.name} on ${on_string}: UpSetR Plot" />
    </outputs>

    <tests>
        <test>
            <param name="input" value="movie.csv"/>
            <param name="listInput" value="one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13)" />
            <param name="expressionInput" value="one = 2, two = 1, three = 2" />
        </test>

        if (!is.null("${output_png}")) {
    listInput <- list("$listInput")
    upset(fromList(listInput), order.by = "freq")
    png("$output_png")
    dev.off()
}

point.size = '$point_size', line.size = '$line_size', mainbar.y.label = '$mainbar_y_label', sets.x.label = '$sets_x_label'

, line.size = "${line_size}", mainbar.y.label = "${mainbar_y_label}", sets.x.label = "${sets_x_label}"

Action, Adventure, Comedy, Drama, Mystery, Thriller, Romance, War, Western

c("Action", "Adventure", "Comedy", "Drama", "Mystery", "Thriller", "Romance", "War", "Western")

upset(movies, sets = c("Action", "Adventure", "Comedy", "Drama", "Mystery", "Thriller", "Romance", "War", "Western"), mb.ratio = c(0.55, 0.45))


#if str($nintersects_select.nintersects_selector) == 'yes'
    nintersects <- NA
#else if str($nintersects_select.nintersects_selector) == 'no'
    nintersects <- "${nintersects_select.nintersects"
#end if

<conditional name="nintersects_select">
            <param name="nintersects_selector" type="select" label="Plot all intersections?">
                <option name="yes">Yes</option>
                <option name="no" selected="true">No</option>
            </param>
            <when value="yes"> </when>
            <when value="no">
                <param name="nintersects" type="integer" value="40" label="Number of intersections to plot" />
            </when>
        </conditional>

upset(movies, nsets = 5, nintersects = 70, sets = NULL, keep.order = F, number.angles = 0, group.by = "sets", point.size = 2.2, line.size = 0.7, mb.ratio = c(0.7, 0.3), order.by =  c("freq", "degree"), mainbar.y.label = "Intersection Size", sets.x.label = "Set Size", text.scale = 1, cutoff = 7)

 <param name="empty_intersections" value="boolean" truevalue="true" falsevalue="" checked="false" label="Additionally display empty intersections?" help="An intersection may not be present in the matrix due to not showing enough intersections or the intersection contains no elements" />

 upset(movies, main.bar.color = "black", queries = list(list(query = intersects, params = list("Drama"), active = F), list(query = intersects, params = list("Action", "Drama"), active = T), list(query = intersects, params = list("Drama", "Comedy", "Action"), active = T)), attribute.plots = list(gridrows = 45, plots = list(list(plot = myplot, x = "ReleaseDate", y = "AvgRating", queries = T), list(plot = another.plot, x = "AvgRating", y = "ReleaseDate", queries = F)), ncols = 2), color.pal = 1)

 one = 2, two = 1, three = 2, one&two = 1, one&three = 4, two&three = 1, one&two&three = 2

 upset(movies, queries = list(list(query = intersects, params = list(), color = "orange"), list(query = intersects, params = list("Drama"), color = "red", active = F), list(query = intersects, params = list("Action", "Drama"), active = T)))

 ------------------------------

b <- lapply(a, function(x) strsplit(x, " "))

for (i in seq(b)){x <- list(list(query="a", color="red", active = T), list(query="b", active = F), list(query="c", color="blue", active = F))
  names(b[[i]]) <- c("query")}

for (i in seq(c)){
  if (c[[i]] != ""){
    names(c[[i]]) <- c("color")
  }
}

for (i in seq(b)){
  if (c[[i]] != ""){
    b[[i]] <- append(b[[i]], c[[i]])
  }
}

for (i in seq(d)){
  if (d[[i]] == "true"){
    d[[i]] <- T
  }
  else {
    d[[i]] <- F
  }
  names(d[[i]]) <- c("active")
}

for (i in seq(b)){ 
  b[[i]] <- append(b[[i]], d[[i]])
}


x <- list(list(query="a"), list(query="b"), list(query="c"))

x <- list(list(query="a", color="red"), list(query="b"), list(query="c", color="blue"))

x <- list(list(query="a", color="red", active = T), list(query="b", active = F), list(query="c", color="blue", active = F))