planemo tool_init --force \
                    --id 'r-upsetr' \
                    --name 'upsetr' \
                    --requirement r-upsetr \
                  
                  movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"), header = T, sep = ";")



if(!is.null(${input_type.input_selector.tabular})){
    input <- read.csv(system.file("extdata", "$inputFile", package = "UpSetR"), header = T, sep = ";")   
}

if(!is.null(${input_type.input_selector.list})){
   listInput <- list("$listInput")
   upset(fromList(listInput), order.by = "freq")
   png("$output_png")
   dev.off()
}

if(!is.null(${input_type.input_selector.expression})){
   expressionInput <- c("$expressionInput")
}

if(!is.null(${input_type.input_selector.inputFile})){
    input <- read.csv(system.file("extdata", "$inputFile", package = "UpSetR"), header = T, sep = ";")   
}

if(!is.null(${input_type.input_selector.listInput})){
   listInput <- list("$listInput")
   upset(fromList(listInput), order.by = "freq")
   png("$output_png")
   dev.off()
}

if(!is.null(${input_type.input_selector.expressionInput})){
   expressionInput <- c("$expressionInput")
}

        ]]></configfile>
    </configfiles>

    <inputs>
        <conditional name="input_type">
            <param name="input_selector" type="select" label="Input Type">
                <option value="tabular" selected="true">Tabular File</option>
                <option value="list">A list of named vectors</option>
                <option value="expression">An vector (expression)</option>
            </param>
            <when value="tabular">
                <param name="inputFile" type="data" format="txt" label="Input File" />
            </when>
            <when value="list">
                 <param name="listInput" type="text" label="A list of named vectors to be converted to a data frame" />
            </when>
            <when value="expression">
                 <param name="expressionInput" type="text" label="An vector (expression) to be converted to an input" />
            </when>
        </conditional> 
    </inputs>

    <outputs>
        <data name="output_png" format="png" label="${tool.name} on ${on_string}: UpSetR Plot" />
    </outputs>

    <tests>
        <test>
            <param name="input" value="movie.csv"/>
            <param name="listInput" value="one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13)" />
            <param name="expressionInput" value="one = 2, two = 1, three = 2" />
        </test>

        if (!is.null("${output_png}")) {
    listInput <- list("$listInput")
    upset(fromList(listInput), order.by = "freq")
    png("$output_png")
    dev.off()
}

point.size = '$point_size', line.size = '$line_size', mainbar.y.label = '$mainbar_y_label', sets.x.label = '$sets_x_label'

, line.size = "${line_size}", mainbar.y.label = "${mainbar_y_label}", sets.x.label = "${sets_x_label}"

Action, Adventure, Comedy, Drama, Mystery, Thriller, Romance, War, Western
