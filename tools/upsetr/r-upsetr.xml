<tool id="r-upsetr" name="UpSetR" version="@VERSION@.0">
    <description>visualize set intersections</description>
     <macros>
        <token name="@VERSION@">1.3.3</token>
    </macros>

    <requirements>
        <requirement type="package" version="@VERSION@">r-upsetr</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library("UpSetR")

## File Input
#if str($input_type.input_type_selector) == 'file'
    input <- read.csv('$input_type.inputFile', header=T, sep=";")
#end if


## List Input
#if str($input_type.input_type_selector) == 'list'
    listInput <- list()
    #for $i in $input_type.lists
        listInput <- append(listInput, strsplit("${i.listInput}", ":"))
    #end for

    listNames <- list()
    listElements <- list()
    for(i in seq(listInput)){
        listNames <- append(listNames, listInput[[i]][1])
        listElements <- append(listElements, listInput[[i]][2])
    }

    listElements <- lapply(listElements, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
    names(listElements) <- listNames
    input <- fromList(listElements)
#end if

## Expression Input
#if str($input_type.input_type_selector) == 'expression'
    expressionInput <- as.list(unlist(strsplit("$input_type.expressionInput", ",")))
    expressionInput <- lapply(expressionInput, function(x){x <- unlist(strsplit(x, "="))})
    expressionName <- list()
    expression <-list()

    for(i in seq(expressionInput)){
        expressionName <- append(expressionName, expressionInput[[i]][1])
        expression <- append(expression, expressionInput[[i]][2])
    }

    expression <- lapply(expression, as.numeric)
    names(expression) <- expressionName
    input <- fromExpression(expression)   
#end if

## Plot

#if str($text_scale_select.text_scale_selector) == 'universal'
    text_scale <- as.numeric("${text_scale_select.text_scale}")
#else if str($text_scale_select.text_scale_selector) == 'individual'
    text_scale <- as.numeric(unlist(strsplit("${text_scale_select.text_scale}", ",")))
#end if

set <- as.character(unlist(strsplit(gsub(" ", "", "${sets}"), ",")))
mb_ratio <- as.numeric(unlist(strsplit("${mb_ratio}", ",")))

#if str($order_by) == 'freq' or str($order_by) == 'degree'
    order <- "${order_by}"
#else if str($order_by) == 'freq_degree' or str($order_by) == 'degree_freq'
    order <- as.character(unlist(strsplit(gsub(" ", "", "${order_by}"), ",")))
#end if

print(order)

png("$output")
upset(input, nsets = "${nsets}", sets = set, number.angles = "${number_angles}", point.size = as.numeric("${point_size}"),
    line.size = as.numeric("${line_size}"), mb.ratio = mb_ratio, order.by = order, mainbar.y.label = "${mainbar_y_label}", sets.x.label = "${sets_x_label}",
    text.scale = text_scale)
dev.off()



        ]]></configfile>
    </configfiles>

    <inputs>
        <conditional name="input_type">
            <param name="input_type_selector" type="select" label="Input Options" >
                <option value="file">File</option>
                <option value="list">List</option>
                <option value="expression">Expression</option>
            </param>
            <when value="file">
                <param name="inputFile" type="data" format="txt" label="Input File" />
            </when>
            <when value="list">
                <repeat name="lists" title="List of named vectors to be converted to a data frame" >
                    <param name="listInput" type="text" label="Named list" help="The list name is followed by a colon and the elements are seperated are by a comma, e.g. List1: 1, 2, 3, 4, 5" />
                </repeat>
            </when>
            <when value="expression">
                <param name="expressionInput" type="text" label="An vector (expression) to be converted to an input" help="The elements of the expression vector are the names of the sets in an intersection, seperated by an amerpsand (&#38;), and the number elements in that intersection." >
                    <sanitizer invalid_char="">
                        <valid initial="string.ascii_letters,string.digits">
                            <add value="&#38;" />
                            <add value="=" />
                            <add value="," />
                        </valid>
                    </sanitizer>   
                </param>
            </when>
        </conditional>

        <param name="nsets" type="integer" value="5" label="Number of sets to look at" help="Selects the n largest sets from the data when not specifying specific sets" />
        <param name="number_angles" type="integer" min="0" max="360" value="0" label="The angle of the numbers atop the intersection size bars" help="Determines the angle (in degrees) of the numbers above the intersection size bars" />
        <param name="point_size" type="float" value="2.2" label="Size of points in matrix plot" help="changes the size of the circles in the matrix" />
        <param name="line_size" type="float" value="0.7" label="Width of lines in matrix plot" help="changes the size of the lines connecting the circles in the matrix" />
        <param name="mainbar_y_label" type="text" value="Intersection Size" label="The y-axis label of the intersection size bar plot" />
        <param name="sets_x_label" type="text" value="Set Size" label="The x-axis label of the set size bar plot" />
        <conditional name="text_scale_select">
            <param name="text_scale_selector" type="select" label="Text Scale" help="Allows scaling of all axis titles, tick labels, and numbers above the intersection size bars. Can be a universal scale, or a vector containing individual scales in the following order: intersection size title, intersection size tick labels, set size title, set size tick labels, set names, numbers above bars">
                <option value="universal">Universal Scale</option>
                <option value="individual">Individual Scale</option>
            </param>
            <when value="universal">
                <param name="text_scale" type="integer" value="1" label="Universal Scale" />
            </when>
            <when value="individual">
                <param name="text_scale" type="text" label="Individual Scale" />
            </when>
        </conditional>

        <param name="sets" type="text" optional="true" label="Specific sets to look at" help="Include as combinations. e.g. Name1, Name2" />

        <param name="mb_ratio" type="text" value="0.7, 0.3" label="Ratio between matrix and intersection size bar plot" help="Enter as percentages in hundreths" />

        <param name="order_by" type="select" label="How the intersections in the matrix should be ordered by" >
            <option value="degree">Degree</option>
            <option value="freq">Frequency</option>
            <option value="freq_degree" selected="true">Degree then frequency</option>
            <option value="degree_freq" selected="true">Frequency then Degree</option>
        </param>

 
    </inputs>

    <outputs>
        
        <data name="output" format="png" label="${tool.name} on ${on_string}: Plot" />
    </outputs>

    <tests>
        <test>
            <conditional name="input_type">
                <param name="input_type_selector" value="list" />
                <repeat name="lists">
                    <param name="listInput" value="one: 1, 2, 3, 5, 7, 8, 11, 12, 13" />
                </repeat>
                <repeat name="lists">
                    <param name="listInput" value="two: 1, 2, 4, 5, 10" />
                </repeat>
                <repeat name="lists">
                    <param name="listInput" value="three: 1, 5, 6, 7, 8, 9, 10, 12, 13" />
                </repeat>
            </conditional>
        </test>

        <test>
            <param name="sets" value="Action, Adventure, Comedy, Drama, Mystery, Thriller, Romance, War, Western" />
            <param name="mb_ratio" value="0.55, 0.45" />
        </test>
    </tests>

    <help><![CDATA[
        UpSetR generates static UpSet plots. The UpSet technique visualizes set intersections in a matrix layout and introduces aggregates based on groupings and queries. The matrix layout enables the effective representation of associated data, such as the number of elements in the aggregates and intersections, as well as additional summary statistics derived from subset or element attributes.
    ]]></help>

    <citations>
          <citation type="doi">/10.1093/bioinformatics/btx364</citation>
    </citations>

</tool>