<?xml version="1.0" ?>
<tool id="1-9_split_libraries" name="split libraries" version="1.9.0">
	<description>Split libraries according to barcodes specified in mapping file</description>
	<requirements>
		<requirement type="package">qiime</requirement>
	</requirements>
	<command>
	
split_libraries.py -m $map
#def list_dict_to_string(list_dict):
	#set $file_list = list_dict[0]['additional_input'].__getattr__('file_name')
	#for d in list_dict[1:]:
		#set $file_list = $file_list + ',' + d['additional_input'].__getattr__('file_name')
	#end for
	#return $file_list
#end def
 -f $list_dict_to_string($input_files_fasta)
#if $input_files_qual:
 -q $list_dict_to_string($input_files_qual)
#end if

#if $min_seq_length:
 -l $min_seq_length
#end if

#if $max_seq_length:
 -L $max_seq_length
#end if

#if $trim_seq_length:
 -t
#end if

#if $min_qual_score:
 -s $min_qual_score
#end if

#if str($barcode_type):
 -b $barcode_type
#end if

#if $reverse_primer_mismatches:
 --reverse_primer_mismatches=$reverse_primer_mismatches
#end if
;
</command>
	<inputs>
		<param label="-m/--map: name of mapping file. NOTE: Must contain a header line indicating SampleID in the first column and BarcodeSequence in the second, LinkerPrimerSequence in the third." name="map" optional="False" type="data"/>
		<repeat name="input_files_fasta" optional="False" title="fasta">
			<param label="-f/--fasta: names of fasta files, comma-delimited" name="additional_input" type="data"/>
		</repeat>
		<repeat name="input_files_qual" optional="True" title="qual">
			<param label="-q/--qual: names of qual files, comma-delimited [default: None]" name="additional_input" type="data"/>
		</repeat>
		<param default="200" label="-l/--min_seq_length: minimum sequence length, in nucleotides [default: 200]" name="min_seq_length" optional="True" type="integer"/>
		<param default="1000" label="-L/--max_seq_length: maximum sequence length, in nucleotides [default: 1000]" name="max_seq_length" optional="True" type="integer"/>
		<param label="-t/--trim_seq_length: calculate sequence lengths after trimming primers and barcodes [default: False]" name="trim_seq_length" selected="False" type="boolean"/>
		<param default="None" label="-s/--min_qual_score: min average qual score allowed in read [default: 25]" name="min_qual_score" optional="True" type="integer"/>
		<param default="golay_12" label="-b/--barcode_type: barcode type, hamming_8, golay_12, variable_length (will disable any barcode correction if variable_length set), or a number representing the length of the barcode, such as -b 4.  [default: golay_12]" name="barcode_type" optional="True" type="text"/>
		<param default="0" label="--reverse_primer_mismatches: Set number of allowed mismatches for reverse primers (option -z). [default: 0]" name="reverse_primer_mismatches" optional="True" type="integer"/>
	</inputs>
	<outputs>
		<data format="fasta" name="sequences" from_work_dir="seqs.fna" label="seqs.fasta"/>
		<data format="txt" name="log" from_work_dir="split_library_log.txt" label="split_library_log.txt"/>
		<data format="txt" name="histograms" from_work_dir="histograms.txt" label="histograms.txt"/>
	</outputs>
	<help>Since newer sequencing technologies provide many reads per run (e.g. the 454 GS FLX Titanium series can produce 400-600 million base pairs with 400-500 base pair read lengths) researchers are now finding it useful to combine multiple samples into a single 454 run. This multiplexing is achieved through the application of a pyrosequencing-tailored nucleotide barcode design (described in (Parameswaran et al., 2007)). By assigning individual, unique sample specific barcodes, multiple sequencing runs may be performed in parallel and the resulting reads can later be binned according to sample. The script %prog performs this task, in addition to several quality filtering steps including user defined cut-offs for: sequence lengths; end-trimming; minimum quality score. To summarize, by using the fasta, mapping, and quality files, the program %prog will parse sequences that meet user defined quality thresholds and then rename each read with the appropriate Sample ID, thus formatting the sequence data for downstream analysis. If a combination of different sequencing technologies are used in any particular study, %prog can be used to perform the quality-filtering for each library individually and the output may then be combined.

Sequences from samples that are not found in the mapping file (no corresponding barcode) and sequences without the correct primer sequence will be excluded. Additional scripts can be used to exclude sequences that match a given reference sequence (e.g. the human genome; exclude_seqs_by_blast.py) and/or sequences that are flagged as chimeras (identify_chimeric_seqs.py).

Three files are generated by %prog:

1. .fna file (e.g. seqs.fna) - This is a FASTA file containing all sequences which meet the user-defined parameters, where each sequence identifier now contains its corresponding sample id from mapping file.

2. histograms.txt- This contains the counts of sequences with a particular length.

3. split_library_log.txt - This file contains a summary of the %prog analysis. Specifically, this file includes information regarding the number of sequences that pass quality control (number of seqs written) and how these are distributed across the different samples which, through the use of bar-coding technology, would have been pooled into a single 454 run. The number of sequences that pass quality control will depend on length restrictions, number of ambiguous bases, max homopolymer runs, barcode check, etc. All of these parameters are summarized in this file. If raw sequences do not meet the specified quality thresholds they will be omitted from downstream analysis. Since we never see a perfect 454 sequencing run, the number of sequences written should always be less than the number of raw sequences. The number of sequences that are retained for analysis will depend on the quality of the 454 run itself in addition to the default data filtering thresholds in the %prog script. The default parameters (minimum quality score = 25, minimum/maximum length = 200/1000, no ambiguous bases allowed, no mismatches allowed in primer sequence) can be adjusted to meet the user's needs.
</help>
</tool>
