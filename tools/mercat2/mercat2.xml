<tool id="mercat2" name="Mercat2" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Versatile k-mer counter for DIPA</description>
    <macros>
        <token name="@TOOL_VERSION@">1.4.1</token>
        <token name="@VERSION_SUFFIX@">0</token>
        <token name="@PROFILE@">24.1</token>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">mercat2</requirement>
    </requirements>
    <command detect_errors="exit_code">
        <![CDATA[

            mkdir -p input &&

            #if $file_type.is_select == 'reads':
                #for $file in $read_files:
                    ln -s '$file' 'input/$file.element_identifier' &&
                #end for
            #else if $file_type.is_select == 'amino':
                #for $file in $amino_files:
                    ln -s '$file' 'input/$file.element_identifier' &&
                #end for
            #else:
                #for $file in $fasta_files:
                    ln -s '$file' 'input/$file.element_identifier' &&
                #end for
            #end if

            mercat2.py
            -f 'input'
            -k ${k}
            -n "\${GALAXY_SLOTS:-8}"
            -c ${c}
            #if $file_type.is_select != 'amino':
                $prod
            #end if                 
            -s ${s}
            ${pca}
            -o 'outputs'

            && ls outputs

            #if $file_type.is_select == 'amino':
                &&
                cp 'outputs/combined_protein.tsv' '$combined_output'
            #else:
                &&
                cp 'outputs/combined_Nucleotide.tsv' '$combined_output'
                #if $prod:
                    &&
                    cp 'outputs/combined_prodigal.tsv' '$prodigal_combined'
                #end if
            #end if

        ]]>
    </command>
    <inputs>
        <conditional name="file_type">
            <param name="is_select" type="select" label="Set which file type should be used as input"
                help="Every file can also be inputted compressed, as x.gz!">
                <option value="reads">Raw .fastq/.fq files</option>
                <option value="nucleotide">.fa/.fna/.ffn/.fasta files</option>
                <option value="amino">.faa files</option>
            </param>
            <when value="reads">
                <param name="read_files" type="data" format="fastqsanger, fastqsanger.gz" multiple="true" label="Input read file(s)"/>
                <param argument="-prod" type="boolean" falsevalue="" truevalue="-prod" label="Run Prodigal on Input"/>
            </when>
            <when value="nucleotide">
                <param name="fasta_files" type="data" format="fasta,fasta.gz" multiple="true" label="Input nucleotide fasta file(s)"/>
                <param argument="-prod" type="boolean" falsevalue="" truevalue="-prod" label="Run Prodigal on Input"/>
            </when>
            <when value="amino">
                <param name="amino_files" type="data" format="fasta,fasta.gz" multiple="true" label="Input amino acid fasta file(s)"/>
            </when>
        </conditional>
        <param argument="-k" type="integer" value="3" min="1" optional="false" label="Kmer length"
            help="Set the kmer size to split the inputted sequences into this size"/>
        <param argument="-c" type="integer" value="10" label="Minimum kmer count"/>
        <param argument="-s" type="integer" value="100" min="1" label="Set size file (in MB) for splitting"/>
        <param argument="-pca" type="boolean" falsevalue="" truevalue="-pca" label="Create pca file"
            help="This option only works if there are at least 4 files as input! This means it this is toggled and there are less then 4 files inputted then the collections will be empty!"/>
    </inputs>
    <outputs>
        <collection name="clean_html" type="list" format="html" label="${tool.name} on ${on_string}: CLEAN OUTPUTS (HTML)">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.html" directory="outputs/clean"/>
            <filter>file_type['is_select'] == 'reads'</filter>
        </collection>
        <collection name="clean_zip" type="list" format="zip" label="${tool.name} on ${on_string}: CLEAN OUTPUTS (ZIP)">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.zip" directory="outputs/clean"/>
            <filter>file_type['is_select'] == 'reads'</filter>
        </collection>
        <collection name="clean_fastq" type="list" format="fastqsanger" label="${tool.name} on ${on_string}: CLEAN OUTPUTS (FASTQ)">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.fastq" directory="outputs/clean"/>
            <filter>file_type['is_select'] == 'reads'</filter>
        </collection>
        <collection name="clean_fasta" type="list" format="fasta.gz" label="${tool.name} on ${on_string}: CLEAN OUTPUTS (FASTA.GZ)">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.fna.gz" directory="outputs/clean"/>
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide')</filter>
        </collection>
        <collection name="htmls" type="list" format="html" label="${tool.name} on ${on_string}: HTML OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.html" directory="outputs/report"/>
        </collection>
        <collection name="diversity" type="list" format="tabular" label="${tool.name} on ${on_string}: DIVERSITY OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/report/diversity"/>
        </collection>
        <data name="combined_output" format="tabular" label="${tool.name} on ${on_string}: COMBINED OUTPUT"/>
        <collection name="nucleotide_files" type="list" format="tabular" label="${tool.name} on ${on_string}: NUCLEOTIDE COUNT OUTPUTS">
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide')</filter>
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/tsv_nucleotide"/>
        </collection>
        <collection name="prodigal_faa" format="fasta" type="list" label="${tool.name} on ${on_string}: PRODIGAL FAA OUTPUTS">
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and file_type['prod']</filter>
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.faa" directory="outputs/prodigal"/>
        </collection>
        <collection name="prodigal_fna" format="fasta" type="list" label="${tool.name} on ${on_string}: PRODIGAL FNA OUTPUTS">
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and file_type['prod']</filter>
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.fna" directory="outputs/prodigal"/>
        </collection>
        <collection name="prodigal_gbk" format="genbank" type="list" label="${tool.name} on ${on_string}: PRODIGAL GBK OUTPUTS">
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and file_type['prod']</filter>
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.gbk" directory="outputs/prodigal"/>
        </collection>
        <collection name="prodigal_gff" format="gff" type="list" label="${tool.name} on ${on_string}: PRODIGAL GFF OUTPUTS">
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and file_type['prod']</filter>
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.gff" directory="outputs/prodigal"/>
        </collection>
        <collection name="prodigal_tsv" format="tabular" type="list" label="${tool.name} on ${on_string}: PRODIGAL TSV OUTPUTS">
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and file_type['prod']</filter>
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/tsv_prodigal"/>
        </collection>
        <data name="prodigal_combined" format="tabular" label="${tool.name} on ${on_string}: PRODIGAL COMBINED OUTPUT">
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and file_type['prod']</filter>
        </data>
        <collection name="diversity_combined" format="tabular" type="list" label="${tool.name} on ${on_string}: DIVERSITY COMBINED OUTPUT(S)">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/report"/>
        </collection>
        <collection name="fasta_pca_tsv" type="list" format="tabular" label="${tool.name} on ${on_string}: PCA TSV OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/pca_Nucleotide"/>
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and pca</filter>
        </collection>
        <collection name="fasta_pca_png" type="list" format="png" label="${tool.name} on ${on_string}: PCA PNG OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.png" directory="outputs/pca_Nucleotide"/>
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and pca</filter>
        </collection>
        <collection name="faa_pca_tsv" type="list" format="tabular" label="${tool.name} on ${on_string}: AMINO ACID PCA TSV OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/pca_protein"/>
            <filter>file_type['is_select'] == 'amino' and pca</filter>
        </collection>
        <collection name="faa_pca_png" type="list" format="png" label="${tool.name} on ${on_string}: AMINO ACID PCA PNG OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.png" directory="outputs/pca_protein"/>
            <filter>file_type['is_select'] == 'amino' and pca</filter>
        </collection>
        <collection name="prodigal_pca_tsv" type="list" format="tabular" label="${tool.name} on ${on_string}: PRODIGAL PCA TSV OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/pca_prodigal"/>
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and pca and file_type['prod']</filter>
        </collection>
        <collection name="prodigal_pca_png" type="list" format="png" label="${tool.name} on ${on_string}: PRODIGAL PCA PNG OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.png" directory="outputs/pca_prodigal"/>
            <filter>(file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and pca and file_type['prod']</filter>
        </collection>
        <collection name="fasta_stats" type="list" format="tabular" label="${tool.name} on ${on_string}: STATS OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.txt" directory="outputs/stats"/>
            <filter>file_type['is_select'] == 'nucleotide'</filter>
        </collection>
        <collection name="beta_diversity" type="list" format="tabular" label="${tool.name} on ${on_string}: BETA DIVERSITY OUTPUTS">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/report/beta_diversity"/>
            <filter>file_type['is_select'] == 'amino' or ((file_type['is_select'] == 'reads' or file_type['is_select'] == 'nucleotide') and file_type['prod'])</filter>
        </collection>
        <collection name="protein_files" type="list" format="tabular" label="${tool.name} on ${on_string}: PROTEIN COUNT OUTPUTS">
            <filter>file_type['is_select'] == 'amino'</filter>
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)\.tsv" directory="outputs/tsv_protein"/>
        </collection>
    </outputs>
    <tests>
        <test expect_num_outputs="11">
            <conditional name="file_type">
                <param name="is_select" value="reads"/>
                <param name="read_files" value="Test_R1.fastq" ftype="fastqsanger"/> 
            </conditional>
            <param name="c" value="5"/>
            <param name="k" value="4"/>
            <param name="s" value="110"/>
            <param name="pca" value="true"/>
            <output name="combined_output" ftype="tabular" value="fastq_combined.tsv"/>
            <output_collection name="fasta_pca_png" type="list" count="0"/>
            <output_collection name="fasta_pca_tsv" type="list" count="0"/>
            <output_collection name="diversity_combined" type="list" count="0"/>
            <output_collection name="nucleotide_files" type="list" count="1"/>
            <output_collection name="diversity" type="list" count="22"/>
            <output_collection name="htmls" type="list" count="1"/>
            <output_collection name="clean_fasta" type="list" count="1"/>
            <output_collection name="clean_fastq" type="list" count="1"/>
            <output_collection name="clean_zip" type="list" count="2"/>
            <output_collection name="clean_html" type="list" count="2"/> 
        </test>
        <test expect_num_outputs="16">
            <conditional name="file_type">
                <param name="is_select" value="reads"/>
                <param name="read_files" value="Test_R1.fastq" ftype="fastqsanger"/> 
                <param name="prod" value="true"/>
            </conditional>
            <param name="c" value="5"/>
            <param name="k" value="4"/>
            <param name="s" value="110"/>
            <output name="combined_output" ftype="tabular" value="fastq_combined.tsv"/>
            <output name="prodigal_combined" ftype="tabular" value="fastq_combined_prod.tsv"/>
            <output_collection name="beta_diversity" type="list" count="21"/> 
            <output_collection name="diversity_combined" type="list" count="1"/>
            <output_collection name="prodigal_tsv" type="list" count="1"/>
            <output_collection name="prodigal_gff" type="list" count="0"/>
            <output_collection name="prodigal_gbk" type="list" count="1"/>
            <output_collection name="prodigal_fna" type="list" count="0"/>
            <output_collection name="prodigal_faa" type="list" count="1"/>
            <output_collection name="nucleotide_files" type="list" count="1"/>
            <output_collection name="diversity" type="list" count="23"/>
            <output_collection name="htmls" type="list" count="2"/>
            <output_collection name="clean_fasta" type="list" count="1"/>
            <output_collection name="clean_fastq" type="list" count="1"/>
            <output_collection name="clean_zip" type="list" count="2"/>
            <output_collection name="clean_html" type="list" count="2"/> 
        </test>
        <test expect_num_outputs="18">
            <conditional name="file_type">
                <param name="is_select" value="nucleotide"/>
                <param name="fasta_files" value="DJ.fna,GIC31.fna,Rleg.fna,RW1.fna,RW2.fna" ftype="fasta"/> 
                <param name="prod" value="true"/>
            </conditional>
            <param name="c" value="10"/>
            <param name="k" value="3"/>
            <param name="s" value="100"/>
            <param name="pca" value="true"/>
            <output name="combined_output" ftype="tabular" value="fasta_combined.tsv"/>
            <output name="prodigal_combined" ftype="tabular" value="fasta_combined_prod.tsv"/>
            <output_collection name="beta_diversity" type="list" count="20"/> 
            <output_collection name="diversity_combined" type="list" count="3"/>
            <output_collection name="fasta_stats" type="list" count="5"/>
            <output_collection name="prodigal_pca_png" type="list" count="1"/>
            <output_collection name="prodigal_pca_tsv" type="list" count="1"/>
            <output_collection name="fasta_pca_png" type="list" count="1"/>
            <output_collection name="fasta_pca_tsv" type="list" count="1"/>
            <output_collection name="prodigal_tsv" type="list" count="5"/>
            <output_collection name="prodigal_gff" type="list" count="0"/>
            <output_collection name="prodigal_gbk" type="list" count="5"/>
            <output_collection name="prodigal_fna" type="list" count="0"/>
            <output_collection name="prodigal_faa" type="list" count="5"/>
            <output_collection name="nucleotide_files" type="list" count="5"/>
            <output_collection name="diversity" type="list" count="30"/>
            <output_collection name="htmls" type="list" count="2"/>
            <output_collection name="clean_fasta" type="list" count="5"/>
        </test>
        <test expect_num_outputs="6">
            <conditional name="file_type">
                <param name="is_select" value="amino"/>
                <param name="amino_files" value="DJ_pro.faa,GIC31_pro.faa,Rleg_pro.faa,RW1_pro.faa,RW2_pro.faa" ftype="fasta"/>
            </conditional>
            <param name="c" value="10"/>
            <param name="k" value="3"/>
            <param name="s" value="100"/>
            <output name="combined_output" ftype="tabular" value="faa_combined.tsv"/>
            <output_collection name="protein_files" type="list" count="5"/>
            <output_collection name="beta_diversity" type="list" count="20"/> 
            <output_collection name="diversity_combined" type="list" count="2"/>
            <output_collection name="diversity" type="list" count="5"/>
            <output_collection name="htmls" type="list" count="2"/>
        </test>
    </tests>
    <help>
        <![CDATA[

        **Input**

        Mercat assumes the input file format based on the extension provided

        - raw fastq file: ['.fastq', '.fq']

        - nucleotide fasta: ['.fa', '.fna', '.ffn', '.fasta']

        - amino acid fasta: ['.faa']

        It also accepts gzipped versions of these filetypes with the added '.gz' suffix

        **Outputs**
        
        - the 'report' folder contains an html report with interactive plotly figures
            - If at least 4 samples are provided a PCA plot will be included in the html report
        
        - the 'tsv' folder contains counts tables in tab separated format
            - if protein files are given, or the -prod option, a .tsv file is created for each sample containing k-mer count, pI, Molecular Weight, and Hydrophobicity metrics
            - if nucleotide files are given a .tsv file is created for each sample containing k-mer count and GC content

        - if .fastq raw reads files are used, a 'clean' folder is created with the clean fasta file and other files.
        
        - if the -prod option is used, a 'prodigal' folder is created with the amino acid .faa an other filse

        **Diversity estimation**

        Alpha and Beta diversity metrics provided by MerCat2 are experimental. They are currently working on the robustness of these measures.

        Alpha diversity metrics provided:

        - shannon
        - simpson
        - simpson_e
        - goods_coverage
        - fisher_alpha
        - dominance
        - chao1
        - chao1_ci
        - ace
        
        Beta diversity metrics provided:

        - euclidean
        - cityblock
        - braycurtis
        - canberra
        - chebyshev
        - correlation
        - cosine
        - dice
        - hamming
        - jaccard
        - mahalanobis
        - manhattan (same as City Block in this case)
        - matching
        - minkowski
        - rogerstanimoto
        - russellrao
        - seuclidean
        - sokalmichener
        - sokalsneath
        - sqeuclidean
        - yule

        ]]>
    </help>
    <citations>
        <citation type="doi">10.1101/2022.11.22.517562</citation>
        <citation type="doi">10.1093/bioadv/vbae061</citation>
    </citations>
</tool> 