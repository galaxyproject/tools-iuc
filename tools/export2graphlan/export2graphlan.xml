<tool id="export2graphlan" name="Export to GraPhlAn" version="@VERSION@+@GALAXY_VERSION@">
    <macros>
        <token name="@VERSION@">0.20</token>
        <token name="@GALAXY_VERSION@">galaxy0</token>
    </macros>
    <requirements>
        <requirement type="package" version="@VERSION@">export2graphlan</requirement>
    </requirements>
    <version_command>
<![CDATA[
export2graphlan.py -h | grep "ver."
]]>
    </version_command>
    <command detect_errors="exit_code">
<![CDATA[
        export2graphlan.py
            --lefse_input '$lefse_input'
            #if $input_lefse_output.input_lefse_output_test == "true"
                --lefse_output '$input_lefse_output.lefse_output'
            #end if
            -t '$tree'
            -a '$annotation'
            #if str($annotations) != ''
                --annotations $annotations
            #end if
            #if str($external_annotations) != ''
                --external_annotations $external_annotations
            #end if
            #if str($background_levels) != ''
                --background_levels $background_levels
            #end if
            #if str($background_clades) != ''
                --background_clades '$background_clades'
            #end if
            #if str($background_colors) != ''
                --background_colors '$background_colors'
            #end if
            #if str($title) != ''
                --title '$title'
            #end if
            #if str($title_font_size) != ''
                --title_font_size $title_font_size
            #end if
            #if str($def_clade_size) != ''    
                --def_clade_size $def_clade_size
            #end if
            #if str($min_clade_size) != ''
                --min_clade_size $min_clade_size
            #end if
            #if str($max_clade_size) != ''
                --max_clade_size $max_clade_size
            #end if
            #if str($def_font_size) != ''
                --def_font_size $def_font_size
            #end if
            #if str($min_font_size) != ''
                --min_font_size $min_font_size
            #end if
            #if str($max_font_size) != ''
                --max_font_size $max_font_size
            #end if
            #if str($annotation_legend_font_size) != ''
                --annotation_legend_font_size $annotation_legend_font_size
            #end if
            #if str($abundance_threshold) != ''
                --abundance_threshold $abundance_threshold
            #end if
            #if str($most_abundant) != ''
                --most_abundant $most_abundant
            #end if
            #if str($least_biomarkers) != ''
                --least_biomarkers $least_biomarkers
            #end if
            #if str($title_font_size) != ''
                --fname_row $fname_row
            #end if
            #if str($title_font_size) != ''
                --sname_row $sname_row
            #end if
            #if str($metadata_rows) != ''
                --metadata_rows $metadata_rows
            #end if
            #if str($skip_rows) != ''
                --skip_rows $skip_rows
            #end if
            #if str($sperc) != ''
                --sperc $sperc
            #end if
            #if str($fperc) != ''
                --fperc $fperc
            #end if
            #if str($stop) != ''
                --stop $stop
            #end if
            #if str($ftop) != ''
                --ftop $ftop
            #end if
]]>
    </command>
    <inputs>
        <param argument="--lefse_input" type="data" format="tabular,txt,tsv" label="Input file" help="Identical to LEfSe input file"/>
        <conditional name="input_lefse_output">
            <param name="input_lefse_output_test" type="select" label="Use a LEfSe output file as input?" help="">
                <option value="true">Yes</option>
                <option value="false" selected="true">No</option>
            </param>
            <when value="true">
                <param argument="--lefse_output" type="data" format="tabular" label="Input file corresponding to LEfSe output file"/>
            </when>
            <when value="false"/>
        </conditional>
        <param argument="--annotations" type="text" optional="True" label="List which levels should be annotated in the tree" help="The levels must be in comma-separated form"/>
        <param argument="--external_annotations" type="text" optional="True" label="List which levels should use the external legend for the annotation" help="The levels must be in comma-separated form"/>
        <param argument="--background_levels" type="text" optional="True" label="List which levels should be highlight with a shaded background" help="The levels must be in comma-separated form"/>
        <param argument="--background_clades" type="text" optional="True" label="List of the clades that should be highlight with a shaded background" help="The clades must be in comma-separated form"/>
        <param argument="--background_colors" type="text" optional="True" label="List of color to use for the shaded background" help="Colors can be either in RGB or HSV (using a semi-colon to separate values, surrounded with ()). The different colors must be in comma-separated form"/>
        <param argument="--title" type="text" optional="True" label="Title of the GraPhlAn plot" />
        <param argument="--title_font_size" type="integer" optional="True" label="Title font size"/>
        <param argument="--def_clade_size" type="integer" optional="True" label="Default size for clades that are not found as biomarkers"/>
        <param argument="--min_clade_size" type="integer" optional="True" label="Minimum value of clades that are biomarkers"/>
        <param argument="--max_clade_size" type="integer" optional="True" label="Maximum value of clades that are biomarkers"/>
        <param argument="--def_font_size" type="integer" optional="True" label="Default font size"/>
        <param argument="--min_font_size" type="integer" optional="True" label="Minimum font size"/>
        <param argument="--max_font_size" type="integer" optional="True" label="Maximum font size"/>
        <param argument="--annotation_legend_font_size" type="integer" optional="True" label="Font size for the annotation legend"/>
        <param argument="--abundance_threshold" type="float" optional="True" label="Minimun abundance value for a clade to be annotated"/>
        <param argument="--most_abundant" type="integer" optional="True" label="Number of clades to highlight"/>
        <param argument="--least_biomarkers" type="integer" optional="True" label="Minimum number of biomarkers to extract" help=" The taxonomy is parsed, and the level is choosen in order to have at least the specified number of biomarkers"/>
        <param argument="--fname_row" type="integer" optional="True" label="Row number containing the names of the features" help="-1 specifies that no names are present in the matrix"/>
        <param argument="--sname_row" type="integer" optional="True" label="Row number containing the names of the samples" help="-1 specifies that no names are present in the matrix"/>
        <param argument="--metadata_rows" type="integer" optional="True" label="Row number to use as metadata"/>
        <param argument="--skip_rows" type="text" optional="True" label="Row number to skip from the input file" help="The row numbers are indexed to 0 and comma separated"/>
        <param argument="--sperc" type="float" optional="True" label="Percentile of sample value distribution for sample selection"/>
        <param argument="--fperc" type="float" optional="True" label="Percentile of feature value distribution for sample selection"/>
        <param argument="--stop" type="integer" optional="True" label="Number of top samples to select" help="The order is based on percentile specified by --sperc"/>
        <param argument="--ftop" type="integer" optional="True" label="Number of top features to select" help="The order is based on percentile specified by --fperc"/>
    </inputs>
    <outputs>
        <data format="txt" name="tree" label="${tool.name} on ${on_string}: Tree" />
        <data format="txt" name="annotation" label="${tool.name} on ${on_string}: Annotation" />
    </outputs>
    <tests>
        <test>
            <param name="lefse_input" value="input_profile.tabular"/>
            <param name="input_lefse_output_test" value="no" />
            <param name="annotations" value=""/>
            <param name="external_annotations" value=""/>
            <param name="background_levels" value=""/>
            <param name="background_clades" value=""/>
            <param name="background_colors" value=""/>
            <param name="title" value=""/>
            <param name="title_font_size" value="15"/>
            <param name="def_clade_size" value="10"/>
            <param name="min_clade_size" value="20"/>
            <param name="max_clade_size" value="200"/>
            <param name="def_font_size" value="10"/>
            <param name="min_font_size" value="8"/>
            <param name="max_font_size" value="12"/>
            <param name="annotation_legend_font_size" value="10"/>
            <param name="abundance_threshold" value="20.0"/>
            <param name="fname_row" value="0"/>
            <param name="sname_row" value="0" />
            <output name="annotation" file="annotation_output.txt"/>
            <output name="tree" file="tree_output.txt"/>
        </test>
    </tests>
    <help><![CDATA[

**What it does**

export2graphlan is a conversion software tool to produce both annotation and tree file for GraPhlAn. It can convert MetaPhlAn, LEfSe, and/or HUMAnN output to GraPhlAn input format

In particular, the annotation file tries to highlight specific sub-trees deriving automatically from input file what nodes are important.

For more information, check the `user manual <https://bitbucket.org/CibioCM/export2graphlan/overview/>`_.

    ]]></help>
    <citations>
    </citations>
</tool>
