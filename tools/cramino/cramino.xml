<tool id="cramino" name="Cramino" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.2">
	<description>Extract QC metrics from CRAM or BAM files</description>
	<macros>
		<token name="@TOOL_VERSION@">1.1.0</token>
		<token name="@VERSION_SUFFIX@">0</token>
	</macros>
	<requirements>
		<requirement type="package" version="@TOOL_VERSION@">cramino</requirement>
	</requirements>
	<version_command>cramino --version</version_command>
	<command detect_errors="exit_code"><![CDATA[
 #set $in_name = $inputs.input_file.name
 ln -sf '$inputs.input_file' '$in_name' &&

 cramino $in_name

 #if $inputs.reference
   --reference $inputs.reference
 #end if

 ## add boolean parameters
 $option_params.ubam
 $option_params.spliced
 $option_params.phased
 $option_params.karyotype

 #if $option_params.min_read_len
   --min-read-len $option_params.min_read_len.value
 #end if

 ## add output format of metrics
 --format $output_params.outfmt.value

 #if $output_params.arrow
   --arrow $arrow_output
 #end if

 #if $output_params.hist_out.hist.value == 'yes'
   --hist $hist_output
   $output_params.hist_out.scaled
 #end if

 ##output capture
 > $metrics 

	]]></command>
	<inputs>
		<section name="inputs" title="Input Data" expanded="True">
			<param name="input_file" type="data" label="CRAM or BAM file to check" format="bam,cram"/>
			<param argument="--reference" type="data" format="fasta" optional="true" label="Reference FASTA" help="Reference FASTA file needed for decompressing CRAM (should be the one used to generate the CRAM file)."/>
		</section>
		<section name="option_params" title="Optional Parameters" expanded="False">
			<param argument="--ubam" type="boolean" checked="true" truevalue="--ubam" falsevalue="" label="Provide metrics for all reads." help="Provide metrics for all the reads in the file, regardless of whether they are aligned or not. Setting it to 'No' will report metrics for aligned reads only."/>
			<param argument="--spliced" type="boolean" checked="false" truevalue="--spliced" falsevalue="" label="Provide metrics for spliced data" help="Provide information about number of splice sites (when activated)."/>
			<param argument="--phased" type="boolean" checked="false" truevalue="--phased" falsevalue="" label="Calculate metrics for phased reads" help="Information about the phase blocks."/>
			<param argument="--karyotype" type="boolean" checked="false" truevalue="--karyotype" falsevalue="" label="Provide normalized number of reads per chromosome" help="Calculating a normalised number of reads per chromosome, e.g. to determine the sex or aneuploidies."/>
			<param argument="--min-read-len" type="integer" optional="True" label="Minimal length of read to be considered" min="0" help="Minimal length of read to be considered."/>
		</section>
		<section name="output_params" title="Output Parameters" expanded="True">
			<param name="outfmt" type="select" label="Output format of the metrics">
				<option value="text" selected="true">Plain text (TXT)</option>
				<option value="json">JSON (JSON)</option>
				<option value="tsv">Tabular (TSV)</option>
			</param>
			<param argument="--arrow" type="boolean" checked="false" truevalue="true" falsevalue="false" label="Write data to an arrow format file" help="An arrow file can be used with NanoPlot and NanoComp."/>
			<conditional name="hist_out">
				<param argument="--hist" type="select" label="Generate histograms" help="Histograms of read lengths and read identities.">
					<option value="yes">Yes</option>
					<option value="no" selected="true">No</option>
				</param>
				<when value="yes">
					<param argument="--scaled" type="boolean" checked="false" truevalue="--scaled" falsevalue="" label="Scale histogram" help="Scale histogram bins by total basepairs in each bin (not just read count)." />
				</when>
				<when value="no"/>
			</conditional>
		</section>
	</inputs>
	<outputs>
		<data name="metrics" auto_format="true" label="${tool.name} on ${input_file.name} ($on_string): Metrics"/>
		<data name="arrow_output" format="binary"  label="${tool.name} on ${input_file.name}: Arrow Output">
			<filter>output_params['arrow'] is True</filter>
		</data>
		<data name="hist_output" format="txt"  label="${tool.name} on ${input_file.name}: Histogram Output">
			<filter>output_params['hist_out']['hist'] == "yes"</filter>
		</data>
	</outputs>
	<tests>
		<test expect_num_outputs="1">
			<section name="inputs">
				<param name="input_file" value="basecalls.bam"/> 
			</section>
			<output name="metrics">
				<assert_contents>
				<has_text text="File name"/>	
				<has_text text="Creation time"/>	
				</assert_contents>
			</output>
		</test>
		<test expect_num_outputs="2">
			<section name="inputs">
				<param name="input_file" value="small_test.bam"/> 
			</section>
			<section name="output_params">
				<conditional name="hist_out">
					<param name="hist" value="yes"/> 
				</conditional>
			</section>
			<output name="metrics">
				<assert_contents>
					<has_text text="File name"/>	
					<has_text text="Creation time"/>	
				</assert_contents>
			</output>
			<output name="hist_output" file="hist.txt"/>
		</test>
		<test expect_num_outputs="3">
			<section name="inputs">
				<param name="input_file" value="test_in.cram"/> 
			</section>
			<section name="output_params">
				<conditional name="hist_out">
					<param name="hist" value="yes"/> 
				</conditional>
			</section>
			<section name="output_params">
				<param name="arrow" value="true"/> 
			</section>
			<output name="metrics">
				<assert_contents>
					<has_text text="File name"/>	
					<has_text text="Creation time"/>	
				</assert_contents>
			</output>
			<output name="hist_output" file="hist2.txt"/>
			<output name="arrow_output" file="out.arrow"/>
		</test>
		<test expect_num_outputs="1">
			<section name="inputs">
				<param name="input_file" value="small_test.bam"/> 
			</section>
			<section name="option_params">
				<param name="min_read_len" value="500"/> 
			</section>
			<section name="output_params">
				<param name="outfmt" value="json"/> 
			</section>
			<output name="metrics">
				<assert_contents>
					<has_text text="read_stats"/>	
					<has_text_matching expression=".num_reads.: 5"/>	
				</assert_contents>
			</output>
				
		</test>
	</tests>
	<help><![CDATA[
**Cramino - BAM/CRAM Inspector for Nanopore Data** 
Cramino is a tool for quick quality assessment of cram and bam files, intended for long read sequencing.
It generates **summary statistics**, and assess **data quality**.  

**Usage Instructions**  

1. **Input File**: Upload a **BAM/CRAM file** as input.  
2. **Reference Genome (Optional)**: Provide a **FASTA file** if required for alignment validation.  
3. **Optional Parameters**: Adjust any optional settings such as modification detection thresholds.  
4. **Output Parameters**: Set parameters controlling the output behaviour.  

**Output Files**  

- **Summary Statistics** (`metrics`): General BAM/CRAM data insights  
- **Histograms** : histograms of read lengths and read identities (--hist). With --phased, also a histogram of phase block lengths.
- **Arrow output** : an arrow file for use within for instance NanoPlot or NanoComp (--arrow)

The % from total reads output field contains the percentage of reads used for this report, depending on the --min-read-len and --ubam settings. Without both of those, this indicates the % of reads that are mapped, primary or supplementary.

**More Information**  

- **Official Repository**: `Cramino on GitHub`_

.. _Cramino on GitHub: https://github.com/wdecoster/cramino

	]]></help>
	<citations>
		<citation type="doi">10.1093/bioinformatics/btad311</citation>
	</citations>
</tool>
