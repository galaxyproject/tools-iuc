<tool id="scvis_train" name="SCVIS train" version="@VERSION@+@GALAXY_VERSION@">
    <description>Parametric alternative to t-SNE for use in high-dimensional data analysis.</description>
    <macros>
        <import>scvis_macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="0.1.1">scvis_galaxy</requirement>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
scvis train --data_matrix_file '${datafile}'
#if $datalabel:
    --data_label_file '${datalabel}'
#end if
#if $plots:
    --show_plot
#end if
#if $configfile:
    --config_file '${configfile}'
#end if
#if $norm.normalize == "Yes":
    --normalize '${norm.normal}'
#end if
--verbose
&& mkdir plots
&& mkdir tsv
&& mkdir ckpt_files
&& mv output/*.tsv tsv
&& mv output/model/* ckpt_files
&& mv ckpt_files/*.ckpt.index ckpt_files/train.ckpt.index
&& mv ckpt_files/*.ckpt.meta ckpt_files/train.ckpt.meta
&& mv ckpt_files/*.ckpt.data-000* ckpt_files/train.ckpt.data-00000-of-00001
&& mv output/*.png plots
#if $plots:
    && mv output/*result/*.png plots
#end if
    ]]></command>
    <inputs>
        <param name="datafile" type="data" format="tsv, tabular" label="Data Matrix File" help="Data matrix with first row as the column names"/>
        <param name="datalabel" type="data" format="tsv, tabular" label="Optional Data Label File" optional="true" help="One column file with header provinding corresponding cluster information for each data point. Used for coloring plots."/>
        <param name="plots" type="boolean" checked="false" optional="true" label="Retrieve training graphs?" truevalue="true" falsevalue="false" />
        <param name="configfile" type="data" format="yaml" optional="true" label="Optional Config File" help="Config yaml file as specified in the scvis docs"/>
        <conditional name="norm">
            <param name="normalize" type="select" label="Set Normalization Value?" help="If not selected, normalization will use maximum absolute value">
                <option value="No">No</option>
                <option value="Yes">Yes</option>
            </param>
            <when value="No"/>
            <when value="Yes">
                <param name="normal" type="float" value="0.5" label="Normalization value" help="A positive float"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
      <collection name="graphs" type="list" label="Final graphical outputs">
          <discover_datasets pattern="__designation__" format="png" directory="plots" visible="false"/>
      </collection>
      <collection name="tsv" type="list" label="Final tsv outputs">
          <discover_datasets pattern="__designation__" format="tabular" directory="tsv" visible="false"/>
      </collection>
      <collection name="checkpoint" type="list" label="Final model files">
          <discover_datasets pattern="__designation__" format="ckpt" directory="ckpt_files" visible="false"/>
          <discover_datasets pattern="__designation__" format="checkpoint" directory="ckpt_files" visible="false"/>
      </collection>
    </outputs>
    <tests>
        <test expect_num_outputs="3">
            <param name="datafile" value="minisynth.tsv"/>
            <param name="datalabel" value="minisynthlabel.tsv"/>
            <param name="configfile" value="configtest.yaml"/>
            <param name="normalize" value="Yes"/>
            <param name="normal" value="0.5"/>
            <assert_stdout>
                <has_text_matching expression="scaled_tsne_cost:"/>
            </assert_stdout>
            <output_collection name="tsv" type="list">
                <element name="perplexity_10_regularizer_0.001_batch_size_99_learning_rate_0.01_latent_dimension_2_activation_ELU_seed_1_iter_3000_log_likelihood.tsv" file="log_likely.tsv" ftype="tabular"/>
            </output_collection>
            <output_collection name="graphs" type="list">
                <element name="perplexity_10_regularizer_0.001_batch_size_99_learning_rate_0.01_latent_dimension_2_activation_ELU_seed_1_iter_3000_log_likelihood.png" file="log_likely.png" ftype="png"/>
            </output_collection>
        </test>
        <test expect_num_outputs="3">
            <param name="datafile" value="minisynth.tsv"/>
            <param name="datalabel" value="minisynthlabel.tsv"/>
            <param name="plots" value="true"/>
            <output_collection name="graphs" type="list" count="63">
                <element name="embedding_iter_00000.png" file="training_graph.png" ftype="png" compare="sim_size"/>
            </output_collection>
        </test>
        <test expect_num_outputs="3">
            <param name="datafile" value="minisynth2.tsv"/>
            <param name="datalabel" value="minisynthlabel2.tsv"/>
            <param name="configfile" value="configtest.yaml"/>
            <assert_stdout>
                <has_text_matching expression="elbo:"/>
            </assert_stdout>
            <output_collection name="tsv" type="list">
                <element name="perplexity_10_regularizer_0.001_batch_size_9_learning_rate_0.01_latent_dimension_2_activation_ELU_seed_1_iter_3000_obj.tsv" file="obj.tsv" ftype="tabular"/>
            </output_collection>
            <output_collection name="graphs" type="list">
                <element name="perplexity_10_regularizer_0.001_batch_size_9_learning_rate_0.01_latent_dimension_2_activation_ELU_seed_1_iter_3000_obj.png" file="obj.png" ftype="png"/>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
This tool is for the initial training of the model and clustering graphs. To add data to your model, use SCVIS map.
    ]]></help>
    <citations>
        <citation type="doi">10.1038/s41467-018-04368-5</citation>
    </citations>
</tool>
