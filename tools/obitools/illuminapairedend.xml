<tool id="obi_illumina_pairend" name="Illuminapairedend" version="@TOOL_VERSION@" profile="@PROFILE@">
    <description>Construct consensus reads from Illumina pair-end reads</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <command>
        <![CDATA[
        #if $inputfastq3p.ext.endswith(".gz")
            gunzip -c '$inputfastq3p' > fastq3p.fastq &&
            gunzip -c '$inputfastq5p' > fastq5p.fastq &&
        #else
            ln -s '$inputfastq3p' fastq3p.fastq &&
            ln -s '$inputfastq5p' fastq5p.fastq &&
        #end if

        illuminapairedend
        ##--index-file=
        #if $inputfastq3p.ext.startswith("fastqsolexa")
            ##input file is in fastq nucleic format produced by solexa sequencer
            --solexa
        #else if $inputfastq3p.ext.startswith("fastqillumina")
            ##input file is in fastq nucleic format produced by solexa sequencer
            --illumina
        #else
            ## input file is in sanger fastq nucleic format (standard fastq)
            --sanger
        #end if
        --without-progress-bar
        --score-min='$score'
        -r fastq3p.fastq 
        fastq5p.fastq
        #if $inputfastq3p.ext.endswith(".gz")
            | gzip -c 
        #end if
        > '$output'
        ]]>
    </command>
    <inputs>
        <param name="inputfastq3p" type="data" format="fastq,fastq.gz" label="Read from file" help="file of 3p (1:) Illumina pair-end reads to assemble in sanger fastq nucleic format (standard fastq)" />
        <param name="inputfastq5p" type="data" format="fastq,fastq.gz" label="Read from file" help="file of 5p (2:) Illumina pair-end reads to assemble in sanger fastq nucleic format (standard fastq)" />
        <param name="score" type="float" value="40.0" label="minimum score for keeping aligment"/>
    </inputs>
    <outputs>
        <data name="output" format_source="inputfastq3p" label="${tool.name} on ${on_string}: assembly results" />
    </outputs>

    <tests>
       <test>
           <param name="inputfastq3p" value="wolf_small.F.fastq" ftype="fastqsanger" />
           <param name="inputfastq5p" value="wolf_small.R.fastq" ftype="fastqsanger" />
           <param name="score" value="40.0" />
           <output name="output" file="illuminapairedend.output.fastq" ftype="fastqsanger" />
       </test>
       <test>
           <param name="inputfastq3p" value="wolf_small.F.fastq.gz" ftype="fastqsanger.gz" />
           <param name="inputfastq5p" value="wolf_small.R.fastq.gz" ftype="fastqsanger.gz" />
           <param name="score" value="40.0" />
           <output name="output" file="illuminapairedend.output.fastq.gz" ftype="fastqsanger.gz" decompress="true"/>
       </test>
   </tests>

    <help><![CDATA[

.. class:: warning

**Warning:**
Sequence records corresponding to the same read pair must be in the same order in the two files

--------

.. class:: infomark

**What it does**

illuminapairedend aims at aligning the two reads of a pair-end library sequenced using an Illumina platform :

\* If the two reads overlap, it returns the consensus sequence together with its quality
\* Otherwise, it concatenates sequence merging the forward read and the reversed-complemented reverse read.

The program uses as input one or two fastq sequences reads files.

\* If two files are used one of them must be specified using the -r option. Sequence records corresponding to the  same read pair must be in the same order in the two files.
\* If just one file is provided, sequence records are supposed to be all of the same length. The first half of th  e sequence is used as forward read, the second half is used as the reverse read.

illuminapairedend align the forward sequence record with the reverse complement of the reverse sequence record. The alignment algorithm takes into account the base qualities.

@OBITOOLS_LINK@

]]>
    </help>
    <expand macro="citation" />

</tool>
