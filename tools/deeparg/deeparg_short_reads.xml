<tool id="deeparg_short_reads" name="DeepARG short reads" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>pipeline to detect Antibiotic Resistance Genes (ARGs) from raw reads</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>
    <expand macro="requirements">
        <requirement type="package" version="0.39">trimmomatic</requirement>
        <requirement type="package" version="2.27.1">vsearch</requirement>
        <requirement type="package" version="2.3.5.1">bowtie2</requirement>
        <requirement type="package" version="2.29.2">bedtools</requirement>
        <requirement type="package" version="1.3.1">samtools</requirement>
    </expand>
    <command detect_errors="exit_code"><![CDATA[
## Used only for test 
#if str($hide_db_build) == 'true':
    deeparg download_data -o '$deeparg_db.fields.path' &&
#end if
##
    mkdir -p deeparg_short_reads_output &&
    #set $extension = str($forward_pe_file.ext)
    ln -s -f '${forward_pe_file}' 'input_forward.${extension}' &&
    #set $extension = str($reverse_pe_file.ext)
    ln -s -f '${reverse_pe_file}' 'input_reverse.${extension}' &&
    deeparg short_reads_pipeline
        --forward_pe_file 'input_forward.${extension}'
        --reverse_pe_file 'input_reverse.${extension}'
        --output_file 'deeparg_short_reads_output/SR'
        -d '$deeparg_db.fields.path'
        --deeparg_identity $deeparg_identity
        --deeparg_probability $deeparg_probability
        --deeparg_evalue $deeparg_evalue
        --gene_coverage $gene_coverage
        --bowtie_16s_identity $bowtie_16s_identity 
]]></command>
    <inputs>
        <!-- used only for tests, as the deeparg database contains large files that cannot be deleted or reduced. -->
        <param name="hide_db_build" type="hidden" value=""/>
        <!-- -->
        <param argument="--forward_pe_file" type="data" format="fasta,fasta.gz,fastqsanger,fastqsanger.gz" label="Forward mate from paired end library"/>
        <param argument="--reverse_pe_file" type="data" format="fasta,fasta.gz,fastqsanger,fastqsanger.gz" label="Reverse mate from paired end library"/>
        <param name="deeparg_db" type="select" label="DeepARG database">
            <options from_data_table="deeparg">
                <filter type="static_value" value="@TOOL_VERSION@" column="db_version"/>
                <validator message="No deeparg database is available" type="no_options"/>
            </options>
        </param>
        <param argument="--deeparg_identity" type="integer" min="0" value="80" label="Minimum identity for ARG alignments" help="default value is 80"/>
        <param argument="--deeparg_probability" type="float" min="0" max="1" value="0.8"
            label="Minimum probability for considering a reads as ARG-like"
            help="default value is 0.8"/>
        <param argument="--deeparg_evalue" type="float" min="0" value="1e-10"
            label="Minimum e-value for ARG alignments"
            help="default value is 1e-10"/>
        <param argument="--gene_coverage" type="integer" min="0" max="100" value="1" label="Minimum coverage required for considering a full gene in percentage" 
            help="This parameter looks at the full gene and all hits that align to the gene. If the overlap of all hits is below the threshold the gene is discarded. Use with caution, default value is 1"/>
        <param argument="--bowtie_16s_identity" type="float" min="0" max="1" value="0.8" label="minimum identity a read as a 16s rRNA gene"
            help="default value is 0.8"/>
        <section name="output_files" title="Selection of the output files">
            <param name="output_selection" type="select" label="Output files selection" display="checkboxes" multiple="true">
                <option value="file_ARG_tsv" selected="true">ARG detected with prob higher or equal to --prob in TSV</option>
                <option value="file_merged_ARG_tsv" selected="false">ARG sorted and merged in TSV file</option>
                <option value="file_ARG_subtype_tsv" selected="true">ARGs merged by subtype in TSV file</option>
                <option value="file_ARG_type_tsv" selected="true">ARGs merged by type in TSV file</option>
                <option value="file_potential_ARG_tsv" selected="false">ARG detected with prob below --prob in TSV</option>
                <option value="file_all_hits_tsv" selected="false">All hits detected in TSV</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="output_mapping_ARG" format="tabular" from_work_dir="deeparg_short_reads_output/SR.clean.deeparg.mapping.ARG" label="${tool.name} on ${on_string} : ARG detected (prob higher or equal to --prob)">
            <filter>output_files['output_selection'] and "file_ARG_tsv" in output_files['output_selection']</filter>
        </data>
        <data name="output_merged_ARG" format="tabular" from_work_dir="deeparg_short_reads_output/SR.clean.deeparg.mapping.ARG.merged" label="${tool.name} on ${on_string} : ARG merged and sorted">
            <filter>output_files['output_selection'] and "file_merged_ARG_tsv" in output_files['output_selection']</filter>
        </data>
        <data name="output_subtype_ARG" format="tabular" from_work_dir="deeparg_short_reads_output/SR.clean.deeparg.mapping.ARG.merged.quant.subtype" label="${tool.name} on ${on_string} : ARG merged by subtype">
            <filter>output_files['output_selection'] and "file_ARG_subtype_tsv" in output_files['output_selection']</filter>
        </data>
        <data name="output_type_ARG" format="tabular" from_work_dir="deeparg_short_reads_output/SR.clean.deeparg.mapping.ARG.merged.quant.type" label="${tool.name} on ${on_string} : ARG merged by type">
            <filter>output_files['output_selection'] and "file_ARG_type_tsv" in output_files['output_selection']</filter>
        </data>
        <data name="output_mapping_potential_ARG" format="tabular" from_work_dir="deeparg_short_reads_output/SR.clean.deeparg.mapping.potential.ARG" label="${tool.name} on ${on_string} : Potential ARG (prob below --prob)">
            <filter>output_files['output_selection'] and "file_potential_ARG_tsv" in output_files['output_selection']</filter>
        </data>
        <data name="output_all_hits" format="tabular" from_work_dir="deeparg_short_reads_output/SR.clean.deeparg.align.daa.tsv" label="${tool.name} on ${on_string} : all hits detected">
            <filter>output_files['output_selection'] and "file_all_hits_tsv" in output_files['output_selection']</filter>
        </data>
    </outputs>
    <tests>
        <!-- Test 1 -->
        <test expect_num_outputs="6">
            <param name="hide_db_build" value="true"/>
            <param name="forward_pe_file" value="light_F.fq.gz" ftype="fastqsanger.gz"/>
            <param name="reverse_pe_file" value="light_R.fq.gz" ftype="fastqsanger.gz"/>
            <param name="deeparg_db" value="deeparg_1.0.4-19122024"/>
            <section name="output_files">
                <param name="output_selection" value="file_ARG_tsv,file_merged_ARG_tsv,file_ARG_subtype_tsv,file_ARG_type_tsv,file_potential_ARG_tsv,file_all_hits_tsv"/>
            </section>
            <output name="output_mapping_ARG" ftype="tabular">
                <assert_contents>
                    <has_text text="BAE06008.1|FEATURES|mexQ|multidrug|mexQ"/>
                    <has_text text="CATA"/>
                </assert_contents>
            </output>
            <output name="output_merged_ARG" ftype="tabular">
                <assert_contents>
                    <has_line line="ACRB&#9;568&#9;600&#9;1&#9;multidrug"/>
                    <has_text text="VANR&#9;137&#9;169&#9;1&#9;glycopeptide"/>
                </assert_contents>
            </output>
            <output name="output_subtype_ARG" ftype="tabular">
                <assert_contents>
                    <has_text text="MDTP&#9;1&#9;0.146721311475"/>
                    <has_text text="ACRD&#9;1&#9;0.0690453230473"/>
                </assert_contents>
            </output>
            <output name="output_type_ARG" ftype="tabular">
                <assert_contents>
                    <has_text text="aminoglycoside&#9;2&#9;0.550769230769"/>
                    <has_text text="glycopeptide&#9;1&#9;0.312663755459"/>
                </assert_contents>
            </output>
            <output name="output_mapping_potential_ARG" ftype="tabular">
                <assert_contents>
                    <has_text text="gi:447120629:ref:WP_001197885.1:|FEATURES|mdtB|multidrug|mdtB"/>
                    <has_text text="PORIN_OMPC"/>
                </assert_contents>
            </output>
            <output name="output_all_hits" ftype="tabular">
                <assert_contents>
                    <has_text text="YP_001966224|FEATURES|catA|phenicol|catA"/>
                    <has_text text="CP001918.1.gene2931.p01|FEATURES|major_facilitator_superfamily_transporter|multidrug|major_facilitator_superfamily_transporter"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help>
The DeepARG Short Reads Pipeline is a specialized tool for detecting antibiotic resistance genes (ARGs) directly from **paired-end short read sequencing data**

It provides detailed output files summarizing ARG detection, merged results, subtype and type classifications, potential ARGs, and all detected hits

If you want to annotate ARGs from assembled contigs, use the DeepARG Predict tool
    </help>
    <expand macro="citations"/>
</tool>
