<?xml version="1.0"?>
<tool id="delly_call" name="delly: call" version="@TOOL_VERSION@+galaxy0" profile="18.01">
    <description>discover and genotype structural variants</description>    
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize
#for $i, $current in enumerate($samples)
    ln -s '${current}' 'sample_${i}.bam' &&
    ln -s '${current.metadata.bam_index}' 'sample_${i}.bam.bai' &&
#end for

## run
delly
## generic options
--svtype $generic.svtype
--genome '$generic.genome' ## todo filetype required?
--exclude '$generic.exclude' ## todo filetype required?
--outfile 'out.bcf'
## discovery options
--map-qual $discovery.mapqual
--qual-tra $discovery.qualtra
--mad-cutoff $discovery.madcutoff
--minclip $discovery.minclip
--minrefsep $discovery.minrefsep
--maxreadsep $discovery.maxreadsep
## genotyping options
--vcffile '$genotyping.vcffile'
--geno-qual $genotyping.genoqual
--dump 'out.gz'
## samples
#for #for $i, $current in enumerate($samples)
    'sample_${i}.bam'
#end for

|& tee log.txt  ## todo replace bei variable

&& bcftools view delly.bcf > delly.vcf ## todo if clause
    ]]></command>
    <inputs>
        <param name="samples" type="data" format="bam" multiple="true" label="Select sample file(s)"/>

        <section name="generic" title="Generic options">
            <expand macro="genome"/>
            <expand macro="svtype"/>
            <expand macro="exclude"/>
        </section>
        <section name="discovery" title="Discovery options">
            <param argument="--mapqual" type="integer" value="1" label="Set minimum paired-end (PE) mapping quality"/>
            <param argument="--qualtra" type="integer" value="20" label="Set minimum PE quality for translocation"/>
            <param argument="--madcutoff" type="integer" value="9" label="Set insert size cutoff" help="median+s*MAD, deletions only"/>
            <expand macro="minclip"/>
            <expand macro="minrefsep"/>
            <expand macro="maxreadsep"/>
        </section>
        <section name="genotyping" title="Genotyping options">
            <expand macro="vcffile"/>
            <expand macro="genoqual"/>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="vcf" selected="true">VCF</option>
                <option value="bcf">BCF</option>
                <option value="log">Log</option>
            </param> 
        </section>
    </inputs>
    <outputs>
        <data name="out_bcf" format="tabular" from_work_dir="delly.bcf" label="${tool.name} on ${on_string}: Result">
            <filter>'vcf' in oo['out']</filter>
        </data>
        <data name="out_vcf" format="tabular" from_work_dir="delly.bcf" label="${tool.name} on ${on_string}: Result">
            <filter>'bcf' in oo['out']</filter>
        </data>
        <data name="out_log" format="tabular" from_work_dir="log.txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in oo['out']</filter>
        </data>
    </outputs>
    <tests>
        <!-- todo test for out -->
        
        <!-- #1 default, single -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam"/>
            <section name="generic">
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>           
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 default, multi -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam,tumor.bam"/>
            <section name="generic">
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>           
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam,tumor.bam"/>
            <section name="generic">
                <param name="svtype" value="ALL"/>
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>
            <section name="discovery">
                <param name="map-qual" value="2"/>
                <param name="qual-tra" value="19"/>
                <param name="mad-cutoff" value="8"/>
                <param name="minclip" value="24"/>
                <param name="minrefsep" value="24"/>
                <param name="maxreadsep" value="39"/>
            </section>
            <section name="genotyping">
                <param name="vcffile" value="genotyping.vcf"/>
                <param name="genoqual" value="4"/>
            </section>
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam,tumor.bam"/>
            <section name="generic">
                <param name="svtype" value="DEL"/>
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>           
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam,tumor.bam"/>
            <section name="generic">
                <param name="svtype" value="INS"/>
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>           
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <!-- #6 -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam,tumor.bam"/>
            <section name="generic">
                <param name="svtype" value="DUP"/>
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>           
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <!-- #7 -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam,tumor.bam"/>
            <section name="generic">
                <param name="svtype" value="INV"/>
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>           
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
        <!-- #8 -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam,tumor.bam"/>
            <section name="generic">
                <param name="svtype" value="BND"/>
                <param name="genome" value="genome.fa"/>
                <param name="exclude" value="exclude.excl.tsv"/>
            </section>           
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="3000" delta="100"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

**Input**

Delly needs a sorted, indexed and duplicate marked bam file for every input sample. An indexed reference genome is required to identify split-reads.

**Output**

The output is in BCF format with a csi index. Delly supports germline and somatic SV discovery, genotyping and filtering.

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>