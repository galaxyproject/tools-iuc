<?xml version="1.0"?>
<tool id="delly_merge" name="delly: merge" version="@TOOL_VERSION@+galaxy0" profile="18.01">
    <description>structural variants across/within VCF/BCF file(s)</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize 
        
## run
delly merge
## Generic options:
--outfile out.bcf
--chunks


## Overlap options:

    ]]></command>
    <inputs>
        <expand macro="samples"/>
        <section name="generic" title="Generic options">
            <param argument="--chunks" type="integer" value="500" label="Set maximum chunk size to merge groups of BCF files"/>
            <param argument="--vaf" type="float" value="0.150000006" label="Set minimum fractional ALT support"/>
            <param argument="--coverage" type="integer" value="10" label="Set minimum coverage"/>
            <param argument="--minsize" type="integer" value="0" label="Set minimum SV size"/>
            <param argument="--maxsize" type="integer" value="1000000" label="Set maximum SV size"/>
            <param argument="--precise" type="boolean" truevalue="--precise" falsevalue="" label="Filter sites for PRECISE?"/>                     
            <param argument="--pass" type="boolean" truevalue="--pass" falsevalue="" label="Filter sites for PASS?" />
        </section>
        <section name="overlap" title="Overlap options">
            <param argument="--bp-offset" type="integer" value="1000" label="Set maximum breakpoint offset"/>
            <param argument="--rec-overlap" type="float" value="0.800000012" label="Set minimum reciprocal overlap"/>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="log">Log</option>
            </param> 
        </section>
    </inputs>
    <outputs>
        <data name="out_log" format="tabular" from_work_dir="log.txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in oo['out']</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="1">
            <param name="samples" value="normal.bam"/>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>            
        </test>                                                   
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

This module *filter* uses ...

**Input**

Delly needs a sorted, indexed and duplicate marked bam file for every input sample. An indexed reference genome is required to identify split-reads.

**Output**

The output is in BCF format with a csi index. Delly supports germline and somatic SV discovery, genotyping and filtering.

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>