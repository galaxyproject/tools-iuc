<?xml version="1.0"?>
<tool id="delly_rd" name="Delly read-depth (rd)" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>normalization on read-depth profiles</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## run
delly rd
## generic options
--genome '$generic.genome'
--quality '$generic.quality'
--mappability '$generic.mappability'
--ploidy $generic.ploidy
--fragment $generic.fragment
#if 'stats' in $oo.out
    --statsfile 'stats.tsv.gz'
#end if
--outfile 'result.tsv.gz'
$generic.adaptivewindowing
## window options
--window-size $window.windowsize
--window-offset $window.windowoffset
#if $window.bedintervals
    --bed-intervals '$window.bedintervals'
#end if
--fraction-window $window.fractionwindow
## gc options
--scan-window $gc.scanwindow
--fraction-unique $gc.fractionunique 
#if $gc.scanregions
    --scan-regions '$gc.scanregions'
#end if
--mad-cutoff $gc.madcutoff 
--percentile $gc.percentile
$gc.nowindowselection
## samples
'$samples' ## input

## postprocessing
@LOG@
    ]]></command>
    <inputs>
        <expand macro="samples" multiple="false" label="Select file"/>
        <section name="generic" title="Generic options" expanded="true">
            <expand macro="genome"/>
            <param argument="--quality" type="integer" value="10" label="Set minimum mapping quality"/>
            <param argument="--mappability" type="data" format="fasta" label="Select mappability map file"/>
            <param argument="--ploidy" type="integer" value="2" label="Set baseline ploidy"/>
            <param argument="--fragment" type="float" min="0.0" max="1.0" value="0.97" label="Set minimum fragment uniqueness"/>
            <param name="adaptivewindowing" type="boolean" truevalue="-a" falsevalue="" label="Use mappable bases for window size?" help="(--adaptive-windowing)"/>
        </section>
        <section name="window" title="Window options" expanded="true">
            <param name="windowsize" type="integer" value="10000" label="Set window size" help="(--window-size)"/>
            <param name="windowoffset" type="integer" value="10000" label="Set window offset" help="(--window-offset)"/>
            <param name="bedintervals" type="data" format="BED" optional="true" label="Select input BED file" help="(--bed-intervals)"/>
            <param name="fractionwindow" type="float" min="0.0" max="1.0" value="0.25" label="Set minimum callable window fraction" help="(--fraction-window)"/>
        </section>
        <section name="gc" title="GC options" expanded="true">
            <param name="scanwindow" type="integer" value="10000" label="Set scan window size" help="(--scan-window)"/>
            <param name="fractionunique" type="float" min="0.0" max="1.0" value="0.8" label="Set uniqueness filter for scanning windows" help="(--fraction-unique)"/>
            <param name="scanregions" type="data" format="BED" optional="true" label="Select file with scanning regions" help="(--scan-regions)"/>
            <param name="madcutoff" type="integer" value="3" label="Set count cutoff" help="(median + 3 * mad) (--mad-cutoff)"/>
            <param argument="--percentile" type="float" min="0.0" max="1.0" value="0.0005" label="Set threshold to exclude extreme GC fraction"/>
            <param name="nowindowselection" type="boolean" truevalue="-n" falsevalue="" label="Skip scan window selection?" help="(--no-window-selection)"/>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="result" selected="true">Result</option>
                <option value="stats">Statistics (-s)</option>
                <option value="log">Log</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_result" format="tabular.gz" from_work_dir="result.tsv.gz" label="${tool.name} on ${on_string}: Result">
            <filter>'result' in oo['out']</filter>
        </data>
        <data name="out_stats" format="tabular.gz" from_work_dir="stats.tsv.gz" label="${tool.name} on ${on_string}: Statistics">
            <filter>'stats' in oo['out']</filter>
        </data>
        <expand macro="log"/>
    </outputs>
    <tests>
        <!-- no test implemented for parameter -b, -r -->

        <!-- #1 default, test data not sufficient -->
        <test expect_num_outputs="2">
            <param name="samples" value="normal.bam"/>
            <section name="generic">
                <param name="genome" value="genome.fasta"/>
                <param name="mappability" value="map.fasta"/>
            </section>
            <section name="oo">
                <param name="out" value="result,log"/>
            </section>
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+Scanning Windows"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 default, test data not sufficient -->
        <test expect_num_outputs="3">
            <param name="samples" value="normal.bam"/>
            <section name="generic">
                <param name="genome" value="genome.fasta"/>
                <param name="quality" value="11"/>
                <param name="mappability" value="map.fasta"/>
                <param name="ploidy" value="3"/>
                <param name="fragment" value="0.96"/>
                <param name="adaptivewindowing" value="true"/>
            </section>
            <section name="window">
                <param name="windowsize" value="10001"/>
                <param name="windowoffset" value="9999"/>
                <param name="fractionwindow" value="0.24"/>
            </section>
            <section name="gc">
                <param name="scanwindow" value="10001"/>
                <param name="fractionunique" value="0.79"/>
                <param name="madcutoff" value="2"/>
                <param name="percentile" value="0.0006"/>
                <param name="nowindowselection" value="true"/>
            </section>
            <section name="oo">
                <param name="out" value="result,stats,log"/>
            </section>
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="1"/>
                </assert_contents>
            </output>
            <output name="out_stats">
                <assert_contents>
                    <has_n_lines n="12"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+Scanning Windows"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

Delly *read-depth normalization (rd)* generates read-depth profiles.

**Input**

Required inputs are a sample (BAM), a genome (FASTA) and a mappability map (FASTA), which can be downloaded `here <https://gear.embl.de/data/delly/>`_. Optionally intervals (BED) and scanning regions (BED) ca be provided.

**Output**

Read-depth profiles (tabular) and optionally statistics (tabular) are created.

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>
