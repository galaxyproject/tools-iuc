<tool id="plot_scirpy" name="Plot with Scirpy" version="0.1.0">
    <requirements>
        <requirement type="package" version="1.7.0">scanpy</requirement>
        <requirement type="package" version="0.11.2">scirpy</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        python '$script_file'
]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[import scanpy as sc
import scirpy as ir
#if $method.method == 'pl_embedding'
adata = sc.read_h5ad('method.embedding_adata')
#set panel_size = [x.strip() for x in str($method.embedding_panel_size).split(',')]
axs = ir.pl.embedding(
adata,
basis='$method.embedding_basis'
)
adata.write('pl_adata_out.h5ad')
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')

#else if $method.method == 'pl_alpha_diversity'
adata = sc.read_h5ad('$method.alpha_diversity_adata')
axs = ir.pl.alpha_diversity(
    adata,
    groupby='$method.alpha_diversity_groupby',
    target_col='$method.alpha_diversity_target_col',
    metric='$method.alpha_diversity_metric'
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_clonal_expansion'
adata = sc.read_h5ad('$method.clonal_expansion_adata')
axs = ir.pl.clonal_expansion(
    adata,
    groupby='$method.clonal_expansion_groupby',
    target_col='$method.clonal_expansion_target_col',
    clip_at=$method.clonal_expansion_clip_at,
    expanded_in=None,
    summarize_by='$method.clonal_expansion_summarize_by',
    normalize=$method.clonal_expansion_normalize,
    show_nonexpanded=$method.clonal_expansion_show_nonexpanded,
    viztype='$method.clonal_expansion_viztype'
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_group_abundance'
adata = sc.read_h5ad('$method.group_abundance_adata')
axs = ir.pl.group_abundance(
    adata,
    groupby='$method.group_abundance_groupby',
    target_col='$method.group_abundance_target_col',
    normalize=$method.group_abundance_normalize,
    max_cols=$method.group_abundance_max_cols,
    sort='$method.group_abundance_sort',
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_spectratype'
adata = sc.read_h5ad('$method.spectratype_adata')
#set $cdr3_col = [x.strip() for x in str($method.spectratype_cdr3_col).split(',')]
axs = ir.pl.spectratype(
    adata,
    cdr3_col=$cdr3_col,
    color='$method.spectratype_color',
    normalize=$method.spectratype_normalize,
    viztype='$method.spectratype_viztype'
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_vdj_usage'
adata = sc.read_h5ad('$method.vdj_usage_adata')
#set $vdj_cols = ([x.strip() for x in str($method.vdj_usage_vdj_cols).split(',')])
axs = ir.pl.vdj_usage(
    adata,
    vdj_cols=$vdj_cols,
    normalize_to=$method.vdj_usage_normalize_to,
    ax=None,
    max_segments=None,
    max_labelled_segments=$method.vdj_usage_max_labelled_segments,
    max_ribbons=$method.vdj_usage_max_ribbons,
    barwidth=$method.vdj_usage_barwidth,
    draw_bars=$method.vdj_usage_draw_bars,
    full_combination=$method.vdj_usage_full_combination
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_repertoire_overlap'
adata = sc.read_h5ad('$method.repertoire_overlap_adata')
axs = ir.pl.repertoire_overlap(
    adata,
    groupby=$method.repertoire_overlap_groupby,
    target_col='$method.repertoire_overlap_target_col',
    pair_to_plot=None,
    heatmap_cats=None,
    dendro_only=$method.repertoire_overlap_dendro_only,
    overlap_measure='$method.repertoire_overlap_overlap_measure',
    overlap_threshold=None,
    fraction=$method.repertoire_overlap_fraction,
    added_key='$method.repertoire_overlap_added_key'
)
axs.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_clonotype_modularity'
adata = sc.read_h5ad('$method.clonotype_modularity_adata')
axs = ir.pl.clonotype_modularity(
    adata,
    ax=None,
    target_col='$method.clonotype_modularity_target_col',
    jitter=$method.clonotype_modularity_jitter,
    base_size=$method.clonotype_modularity_base_size,
    size_power=$method.clonotype_modularity_size_power,
    show_labels=$method.clonotype_modularity_show_labels,
    labels_quantile_cutoff=(0.9, 0.9),
    labels=None,
    label_fontsize=$method.clonotype_modularity_label_fontsize,
    label_fontweight=$method.clonotype_modularity_label_fontweight,
    label_fontoutline=$method.clonotype_modularity_label_fontoutline,
    label_adjusttext=$method.clonotype_modularity_label_adjusttext,
    show_size_legend=$method.clonotype_modularity_show_size_legend,
    legend_width=$method.clonotype_modularity_legend_width
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_clonotype_network'
adata = sc.read_h5ad('$method.clonotype_network_adata')
axs = ir.pl.clonotype_network(
    adata,
    color='$method.clonotype_network_color',
    basis='$method.clonotype_network_basis',
    panel_size=(10, 10),
    color_by_n_cells=$method.clonotype_network_color_by_n_cells,
    scale_by_n_cells=$method.clonotype_network_scale_by_n_cells,
    base_size=None,
    size_power=None,
    use_raw=None,
    show_labels=$method.clonotype_network_show_labels,
    label_fontsize=None,
    label_fontweight='$method.clonotype_network_label_fontweight',
    label_fontoutline=$method.clonotype_network_label_fontoutline,
    label_alpha=$method.clonotype_network_label_alpha,
    label_y_offset=$method.clonotype_network_label_y_offset,
    legend_fontsize=None,
    show_legend=$method.clonotype_network_show_legend,
    palette=None,
    cmap=None,
    edges_color=None,
    edges=$method.clonotype_network_edges,
    edges_width=$method.clonotype_network_edges_width,
    frameon=None,
    title=None,
    ax=None
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#else if $method.method == 'pl_clonotype_imbalance'
adata = sc.read_h5ad('$method.clonotype_imbalance_adata')
axs = ir.pl.clonotype_imbalance(
    adata,
    replicate_col='$method.clonotype_imbalance_replicate_col',
    groupby='$method.clonotype_imbalance_groupby',
    case_label='$method.clonotype_imbalance_case_label',
    control_label='$method.clonotype_imbalance_control_label',
    target_col='$method.clonotype_imbalance_target_col',
    additional_hue=None,
    top_n=$method.clonotype_imbalance_top_n,
    plot_type='$method.clonotype_imbalance_plot_type',
    inplace=True,
    key_added='$method.clonotype_imbalance_key_added'
)
fig = axs.get_figure()
fig.savefig('pl_fig_out.png')
adata.write('pl_adata_out.h5ad')

#end if
]]></configfile>
    </configfiles>
    <inputs>
        <conditional name="method">
            <param argument="method" type="select" label="Method to use for plotting">
                <option value="pl_embedding">Generic: Embedding, using 'pl.embedding'</option>
                <option value="pl_alpha_diversity">Tools: Alpha Diversity, using 'pl.alpha_diversity'</option>
                <option value="pl_clonal_expansion">Tools: Clonal Expansion, using 'pl.clonal_expansion'</option>
                <option value="pl_group_abundance">Tools: Group Abundance, using 'pl.group_abundance'</option>
                <option value="pl_spectratype">Tools: Spectratype, using 'pl.spectratype'</option>
                <option value="pl_vdj_usage">Tools: VDJ Usage, using 'pl.vdj_usage'</option>
                <option value="pl_repertoire_overlap">Tools: Repertoire Overlap, using 'pl.repertoire_overlap'</option>
                <option value="pl_clonotype_modularity">Tools: Clonotype Modularity, using 'pl.clonotype_modularity'</option>
                <option value="pl_clonotype_network">Tools: Clonotype Network, using 'pl.clonotype_network'</option>
                <option value="pl_clonotype_imbalance">Tools: Clonotype Imbalance, using 'pl.clonotype_imbalance'</option>
            </param>
            <when value="pl_embedding">
                <param name="embedding_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="embedding_basis" value="X_umap_orig" type="text" label="Embedding to plot" help="(basis)"/>
                <param name="embedding_color" value="patient" type="text" label="Keys for annotations of observations/cells or variables/genes" help="(color)"/>
                <param name="embedding_panel_size" value="4, 4" type="text" help="comma-separated numbers (panel_size)" label="Size tuple of a single panel in inches"/>
                <param name="embedding_legend_loc" type="select" help="(legend_loc)" label="Location of legend">
                    <option value="right margin" selected="true">right margin</option>
                    <option value="on data">on data</option>
                </param>
                <param name="embedding_ncols" value="3" type="integer" help="(ncols)" label="Number of columns for multi-panel plots"/>
                <param name="embedding_wspace" value="1" type="float" help="(wspace)" label="Width of the space between multiple panels"/>
                <param name="embedding_hspace" value="0.25" type="float" help="(hspace)" label="Height of the space between multiple panels"/>
            </when>
            <when value="pl_alpha_diversity">
                <param name="alpha_diversity_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="alpha_diversity_groupby" value="patient" type="text" help="(groupby)" label="Column of obs by which the grouping will be performed"/>
                <param name="alpha_diversity_target_col" value="clone_id" type="text" help="(target_col)" label="Column on which to compute the alpha diversity"/>
                <param name="alpha_diversity_metric" type="select" help="(metric)" label="Metric to use for diversity estimation">
                    <option value="normalized_shannon_entropy" selected="true">Normalized shannon entropy</option>
                    <option value="D50">D50</option>
                    <option value="DXX">DXX</option>
                </param>
            </when>
            <when value="pl_clonal_expansion">
                <param name="clonal_expansion_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="clonal_expansion_groupby" value="patient" type="text" help="(groupby)" label="Column of obs by which the grouping will be performed"/>
                <param name="clonal_expansion_target_col" value="clone_id" type="text" help="(target_col)" label="Column on which to compute the alpha diversity"/>
                <param name="clonal_expansion_clip_at" value="3" type="integer" help="(clip_at)" label="All entries in target_col with more copies than this value will be summarized into a single group."/>
                <param name="clonal_expansion_summarize_by" type="select" help="(summarize_by)" label="Summarize by">
                    <option value="cell" selected="true">Count cells belonging to a clonotype (cell)</option>
                    <option value="clone_id">Count clonotypes (clone_id)</option>
                </param>
                <param name="clonal_expansion_normalize" type="select" help="(normalize)" label="Compute fractions?">
                    <option value="True" selected="true">Compute fractions (True)</option>
                    <option value="False">Report absolute numbers (False)</option>
                </param>
                <param name="clonal_expansion_show_nonexpanded" type="select" help="(show_nonexpanded)" label="Show the fraction of non-expanded cells/clonotypes?">
                    <option value="True" selected="true">True</option>
                    <option value="False">False</option>
                </param>
                <param name="clonal_expansion_viztype" type="select" help="(viztype)" label="Type of visualization">
                    <option value="bar" selected="true">Bars (bar)</option>
                    <option value="barh">Horizontal bars (barh)</option>
                </param>
            </when>
            <when value="pl_group_abundance">
                <param name="group_abundance_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="group_abundance_groupby" type="text" help="(groupby)" label="Column of obs by which the grouping will be performed"/>
                <param name="group_abundance_target_col" value="has_ir" type="text" help="(target_col)" label="Column on which to compute the alpha diversity"/>
                <param name="group_abundance_normalize" type="select" help="(normalize)" label="Compute fractions?">
                    <option value="True" selected="true">Compute fractions of abundances relative to 'groupby' column (True)</option>
                    <option value="False">Report absolute numbers (False)</option>
                </param>
                <param name="group_abundance_max_cols" value="0" type="integer" help="(max_cols)" label="First number of columns to plot"/>
                <param name="group_abundance_sort" type="select" help="(sort)" label="How to arrange the dataframe columns">
                    <option value="count" selected="true">Count (count)</option>
                    <option value="alphabetical">Alphabetical (alphabetical)</option>
                </param>
            </when>
            <when value="pl_spectratype">
                <param name="spectratype_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="spectratype_cdr3_col" value="IR_VJ_1_junction_aa" type="text" help="(cdr3_col)" label="Columns containing CDR3 lengths (comma-separated list of column names)"/>
                <param name="spectratype_color" value="sample" type="text" help="(color)" label="Color by this column from obs"/>
                <param name="spectratype_normalize" type="select" help="(normalize)" label="Compute fractions relative to cdr3_col column?">
                    <option value="True" selected="true">Compute fractions of abundances relative to cdr3_col column (True)</option>
                    <option value="False">Report absolute numbers (False)</option>
                </param>
                <param name="spectratype_viztype" type="select" help="(viztype)" label="Type of visualization">
                    <option value="bar" selected="true">Bars (bar)</option>
                    <option value="line">Lines (line)</option>
                    <option value="curve">Curves (curve)</option>
                </param>
            </when>
            <when value="pl_vdj_usage">
                <param name="vdj_usage_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="vdj_usage_vdj_cols" value="IR_VJ_1_v_call, IR_VJ_1_j_call, IR_VDJ_1_v_call, IR_VDJ_1_d_call, IR_VDJ_1_j_call" type="text" help="(vdj_cols)" label="Columns containing gene segment information"/>
                <param name="vdj_usage_normalize_to" value="False" type="text" help="Set to False to use default (normalize_to)" label="Name of a categorical column that should be used as the base for computing fractions"/>
                <param name="vdj_usage_max_segments" value="0" type="integer" help="(max_segments)" label="Maximum number of segments in a bar (number of different V, D, or J segments to be shown separately)"/>
                <param name="vdj_usage_max_labelled_segments" value="5" type="integer" help="(max_labelled_segments)" label="Maximum number of segments that receive a gene label"/>
                <param name="vdj_usage_max_ribbons" value="10" type="integer" help="(max_ribbons)" label="Maximum number of ribbons (inidvidual VDJ combinations)"/>
                <param name="vdj_usage_barwidth" value="0.4" type="float" help="(barwidth)" label="Width of bars"/>
                <param name="vdj_usage_draw_bars" type="select" help="(draw_bars)" label="Draw bars?">
                    <option value="True" selected="true">Draw bars (True)</option>
                    <option value="False">Only draw ribbons (False)</option>
                </param>
                <param name="vdj_usage_full_combination" type="select" help="(full_combination)" label="What should each band represent?">
                    <option value="True" selected="true">Each band represents an individual combination of all five loci (True)</option>
                    <option value="False">The bands represent the frequency of a binary gene segment combination of the two connected loci (False)</option>
                </param>
            </when>
            <when value="pl_repertoire_overlap">
                <param name="repertoire_overlap_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="repertoire_overlap_groupby" value="adata.obs" type="text" help="(groupby)" label="Column with group labels"/>
                <param name="repertoire_overlap_target_col" value="clone_id" type="text" help="(target_col)" label="Category that overlaps among groups"/>
                <param name="repertoire_overlap_dendro_only" type="select" help="(dendro_only)" label="Should a heatmap be shown or only a dendrogram (in case all samples visualized)?">
                    <option value="True">True</option>
                    <option value="False" selected="true">False</option>
                </param>
                <param name="repertoire_overlap_overlap_measure" value="jaccard" type="text" help="(overlap_measure)" label="Distance measure (any accepted by scipy.spatial.distance)"/>
                <param name="repertoire_overlap_fraction" type="select" help="(fraction)" label="Compute of abundances relative to the groupby column?">
                    <option value="True" selected="true">Compute fractions of abundances relative to 'groupby' column (True)</option>
                    <option value="False">Report absolute numbers (False)</option>
                </param>
                <param name="repertoire_overlap_added_key" value="repertoire_overlap" type="text" help="(added_key)" label="The key by which results are added to .uns"/>
            </when>
            <when value="pl_clonotype_modularity">
                <param name="clonotype_modularity_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="clonotype_modularity_target_col" value="clonotype_modularity" type="text" help="(target_col)" label="Column in adata.obs containing the clonotype modularity score and key in adata.uns containing the dictionary with parameters"/>
                <param name="clonotype_modularity_jitter" value="0.01" type="float" help="(jitter)" label="Random jitter along the x-axis (to avoid overlapping point)"/>
                <param name="clonotype_modularity_base_size" value="2" type="float" help="(base_size)" label="Size of a point representing 1 cell"/>
                <param name="clonotype_modularity_size_power" value="1" type="float" help="(size_power)" label="Point sizes raise to the power of this value"/>
                <param name="clonotype_modularity_show_labels" type="select" help="show_labels)" label="Show labels for the clonotypes with the highest modularity?">
                    <option value="True" selected="true">Show text labels for clonotypes with the highest clonotype modularity (True)</option>
                    <option value="False">Don't show text labels (False)</option>
                </param>
                <param name="clonotype_modularity_labels_quantile_cutoff" value="0.9, 0.9" type="text" help="specified as a tuple of comma-separated float values (labels_quantile_cutoff)" label="Quantile cutoff for labelling clonotypes"/>
                <param name="clonotype_modularity_label_fontsize" value="10" type="integer" help="(label_fontsize)" label="Font size for the clonotype labels"/>
                <param name="clonotype_modularity_label_fontweight" value="300" type="integer" help="(label_fontweight)" label="Font weight for the clonotype labels"/>
                <param name="clonotype_modularity_label_fontoutline" value="0" type="integer" help="(label_fontoutline)" label="Font outline size added to the clonotype labels"/>
                <param name="clonotype_modularity_label_adjusttext" type="select" help="(label_adjusttext)" label="Repel labels so that they don't overlap?">
                    <option value="True" selected="true">Repel labels such that they don't overlap using the adjustText library (significantly increases runtime) (True)</option>
                    <option value="False">Don't repel labels (False)</option>
                </param>
                <param name="clonotype_modularity_show_size_legend" type="select" help="(show_size_legend)" label="Show a legend for dot sizes on the right margin?">
                    <option value="True" selected="true">Show a legend for dot sizes on the right margin (True)</option>
                    <option value="False">Don't show a legend (False)</option>
                </param>/>
                <param name="clonotype_modularity_legend_width" value="2" type="float" help="(legend_width)" label="Width of the legend column in inches (only if chose to show legend)"/>
            </when>
            <when value="pl_clonotype_network">
                <param name="clonotype_network_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="clonotype_network_color" value="patient" type="text" help="(color)" label="Key for annotations of observations/cells or variables/genes"/>
                <param name="clonotype_network_basis" value="clonotype_network" type="text" help="(basis)" label="Key under which the graph layout coordinates are stored in adata.obsm"/>
                <param name="clonotype_network_panel_size" value="10, 10" type="text" help="(panel_size)" label="Size of the main figure panel in inches"/>
                <param name="clonotype_network_color_by_n_cells" type="select" help="(color_by_n_cells)" label="Color the nodes by the number of cells they represent?">
                    <option value="True">Yes (True)</option>
                    <option value="False" selected="true">No (False)</option>
                </param>
                <param name="clonotype_network_scale_by_n_cells" type="select" help="(scale_by_n_cells)" label="Scale the nodes by the number of cells they represent?">
                    <option value="True" selected="true">Yes (True)</option>
                    <option value="False">No (False)</option>
                </param>
                <param name="clonotype_network_show_labels" type="select" help="(show_labels)" label="Plot clonotype IDs on top of the subnetworks?">
                    <option value="True" selected="true">Yes (True)</option>
                    <option value="False">No (False)</option>
                </param>
                <param name="clonotype_network_label_fontweight" value="bold" type="text" help="(label_fontweight)" label="Font weight for the clonotype labels"/>
                <param name="clonotype_network_label_fontoutline" value="3" type="integer" help="(label_fontoutline)" label="Font outline size for the clonotype labels"/>
                <param name="clonotype_network_label_alpha" value="0.6" type="float" help="(label_alpha)" label="Transparency of the clonotype labels"/>
                <param name="clonotype_network_label_y_offset" value="2" type="float" help="(label_y_offset)" label="Offset for the clonotype label on the y-axis for better visibility of the subnetworks"/>
                <param name="clonotype_network_show_legend" type="select" help="(show_legend)" label="Show a legend?">
                    <option value="True" selected="true">Show legend for dot sizes on the right margin (True)</option>
                    <option value="False">Don't show a legend (False)</option>
                </param>
                <param name="clonotype_network_edges" type="select" help="(edges)" label="Show edges?">
                    <option value="True" selected="true">Yes (True)</option>
                    <option value="False">No (False)</option>
                </param>
                <param name="clonotype_network_edges_width" value="0.4" type="float" help="(edges_width)" label="Width of the edges"/>
            </when>
            <when value="pl_clonotype_imbalance">
                <param name="clonotype_imbalance_adata" type="data" format="h5ad" label="Annotated data matrix"/>
                <param name="clonotype_imbalance_replicate_col" value="adata.obs" type="text" help="(replicate_col)" label="Column with batch or sample labels"/>
                <param name="clonotype_imbalance_groupby" value="adata.obs" type="text" help="(groupby)" label="The column containing categories that we want to compare and find imbalance between"/>
                <param name="clonotype_imbalance_case_label" value="sample" type="text" help="(case_label)" label="The label in the groupby column that we want to compare"/>
                <param name="clonotype_imbalance_control_label" value="CD8_Trm" type="text" help="(control_label)" label="The label in the groupby column we want to use as a baseline for comparison"/>
                <param name="clonotype_imbalance_target_col" value="clone_id" type="text" help="(target_col)" label="The clusters that are imbalanced"/>
                <param name="clonotype_imbalance_top_n" value="10" type="integer" help="(top_n)" label="The number of top clonotypes to be visualized"/>
<!--                <param name="clonotype_imbalance_fraction" type="select" help="(fraction)" label="Compute fractions of abundances relative to groupby?">-->
<!--                    <option value="True" selected="true">Compute fractions of abundances relative to the groupby column (True)</option>-->
<!--                    <option value="False">Report absolute numbers (False)</option>-->
<!--                </param>-->
                <param name="clonotype_imbalance_plot_type" type="select" help="(plot_type)" label="Type of plot to be shown">
                    <option value="volcano">volcano (statistics)</option>
                    <option value="box" selected="true">box (frequencies)</option>
                    <option value="bar">bar (frequencies)</option>
                    <option value="strip">strip (frequencies)</option>
                </param>
                <param name="clonotype_imbalance_key_added" value="clonotype_imbalance" type="text" help="(key_added)" label="Key under which results are added to uns"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="pl_adata_out" format="h5ad" label="${tool.name} (${method.method}) on ${on_string}" from_work_dir="pl_adata_out.h5ad"/>
        <data name="pl_fig_out" format="png" label="${tool.name} (${method.method}) on ${on_string} Plot" from_work_dir="pl_fig_out.png"/>
    </outputs>
    <tests>
<!--        <test>-->
<!--            &lt;!&ndash;Test for pl_embedding&ndash;&gt;-->
<!--            <conditional name="method">-->
<!--                <param name="method" value="pl_embedding"/>-->
<!--                <param name="embedding_adata" value="adata_ir_small.h5ad"/>-->
<!--                <param name="embedding_basis" value="umap_orig"/>-->
<!--                <param name="embedding_color" value="patient"/>-->
<!--                <param name="embedding_panel_size" value="4, 4"/>-->
<!--                <param name="embedding_legend_loc" value="right margin"/>-->
<!--                <param name="embedding_ncols" value="3"/>-->
<!--                <param name="embedding_wspace" value="1"/>-->
<!--                <param name="embedding_hspace" value="0.25"/>-->
<!--            </conditional>-->
<!--            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>-->
<!--            <output name="pl_fig_out" file="pl_fig_out.png"/>-->
<!--        </test>-->
        <test>
            <!--Test for pl_alpha_diversity-->
            <conditional name="method">
                <param name="method" value="pl_alpha_diversity"/>
                <param name="alpha_diversity_adata" value="tl_alpha_diversity_adata.h5ad"/>
                <param name="alpha_diversity_groupby" value="patient"/>
                <param name="alpha_diversity_target_col" value="clone_id"/>
                <param name="alpha_diversity_metric" value="normalized_shannon_entropy"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
        <test>
            <!--Test for pl_clonal_expansion-->
            <conditional name="method">
                <param name="method" value="pl_clonal_expansion"/>
                <param name="clonal_expansion_adata" value="tl_clonal_expansion_adata.h5ad"/>
                <param name="clonal_expansion_groupby" value="patient"/>
                <param name="clonal_expansion_target_col" value="clone_id"/>
                <param name="clonal_expansion_clip_at" value="3"/>
<!--                <param name="clonal_expansion_expanded_in" value="None"/>-->
                <param name="clonal_expansion_summarize_by" value="cell"/>
                <param name="clonal_expansion_normalize" value="True"/>
                <param name="clonal_expansion_show_nonexpanded" value="True"/>
                <param name="clonal_expansion_viztype" value="bar"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
        <test>
            <!--Test for pl_group_abundance-->
            <conditional name="method">
                <param name="method" value="pl_group_abundance"/>
                <param name="group_abundance_adata" value="tl_group_abundance_adata.h5ad"/>
                <param name="group_abundance_groupby" value="sample"/>
                <param name="group_abundance_target_col" value="has_ir"/>
                <param name="group_abundance_normalize" value="True"/>
                <param name="group_abundance_max_cols" value="0"/>
                <param name="group_abundance_sort" value="count"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
        <test>
            <!--Test for pl_spectratype-->
            <conditional name="method">
                <param name="method" value="pl_spectratype"/>
                <param name="spectratype_adata" value="tl_spectratype_out.h5ad"/>
                <param name="spectratype_cdr3_col" value="IR_VJ_1_junction_aa"/>
                <param name="spectratype_color" value="sample_name"/>
                <param name="spectratype_normalize" value="True"/>
                <param name="spectratype_viztype" value="bar"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
        <test>
            <!--Test for pl_vdj_usage-->
            <conditional name="method">
                <param name="method" value="pl_vdj_usage"/>
                <param name="vdj_usage_adata" value="tl_group_abundance_out.h5ad"/>
                <param name="vdj_usage_vdj_cols" value="IR_VJ_1_v_call, IR_VJ_1_j_call, IR_VDJ_1_v_call, IR_VDJ_1_d_call, IR_VDJ_1_j_call"/>
                <param name="vdj_usage_normalize_to" value="False"/>
                <param name="vdj_usage_max_segments" value="0"/>
                <param name="vdj_usage_max_labelled_segments" value="5"/>
                <param name="vdj_usage_max_ribbons" value="10"/>
                <param name="vdj_usage_barwidth" value="0.4"/>
                <param name="vdj_usage_draw_bars" value="True"/>
                <param name="vdj_usage_full_combination" value="True"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
        <test>
            <!--Test for pl_repertoire_overlap-->
            <conditional name="method">
                <param name="method" value="pl_repertoire_overlap"/>
                <param name="repertoire_overlap_adata" value="tl_repertoire_overlap_out.h5ad"/>
                <param name="repertoire_overlap_groupby" value="adata.obs"/>
                <param name="repertoire_overlap_target_col" value="clone_id"/>
                <param name="repertoire_overlap_dendro_only" value="False"/>
                <param name="repertoire_overlap_overlap_measure" value="jaccard"/>
                <param name="repertoire_overlap_fraction" value="True"/>
                <param name="repertoire_overlap_added_key" value="repertoire_overlap"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
        <test>
            <!--Test for pl_clonotype_modularity-->
            <conditional name="method">
                <param name="method" value="pl_clonotype_modularity"/>
                <param name="clonotype_modularity_adata" value="tl_clonotype_modularity_out.h5ad"/>
                <param name="clonotype_modularity_target_col" value="clonotype_modularity"/>
                <param name="clonotype_modularity_jitter" value="0.01"/>
                <param name="clonotype_modularity_base_size" value="2"/>
                <param name="clonotype_modularity_size_power" value="1"/>
                <param name="clonotype_modularity_show_labels" value="True"/>
                <param name="clonotype_modularity_labels_quantile_cutoff" value="0.9, 0.9"/>
                <param name="clonotype_modularity_label_fontsize" value="10"/>
                <param name="clonotype_modularity_label_fontweight" value="300"/>
                <param name="clonotype_modularity_label_fontoutline" value="0"/>
                <param name="clonotype_modularity_label_adjusttext" value="True"/>
                <param name="clonotype_modularity_show_size_legend" value="True"/>
                <param name="clonotype_modularity_legend_width" value="2"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
        <test>
            <!--Test for pl_clonotype_network-->
            <conditional name="method">
                <param name="method" value="pl_clonotype_network"/>
                <param name="clonotype_network_adata" value="tl_clonotype_network_out.h5ad"/>
                <param name="clonotype_network_color" value="patient"/>
                <param name="clonotype_network_basis" value="clonotype_network"/>
                <param name="clonotype_network_panel_size" value="10, 10"/>
                <param name="clonotype_network_color_by_n_cells" value="False"/>
                <param name="clonotype_network_scale_by_n_cells" value="True"/>
                <param name="clonotype_network_show_labels" value="True"/>
                <param name="clonotype_network_label_fontweight" value="bold"/>
                <param name="clonotype_network_label_fontoutline" value="3"/>
                <param name="clonotype_network_label_alpha" value="0.6"/>
                <param name="clonotype_network_label_y_offset" value="2"/>
                <param name="clonotype_network_show_legend" value="True"/>
                <param name="clonotype_network_edges" value="True"/>
                <param name="clonotype_network_edges_width" value="0.4"/>
            </conditional>
            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>
            <output name="pl_fig_out" file="pl_fig_out.png"/>
        </test>
<!--        <test>-->
<!--            &lt;!&ndash;Test for pl_clonotype_imbalance&ndash;&gt;-->
<!--            <conditional name="method">-->
<!--                <param name="method" value="pl_clonotype_imbalance"/>-->
<!--                <param name="clonotype_imbalance_adata" value="tl_clonotype_imbalance_out.h5ad"/>-->
<!--                <param name="clonotype_imbalance_replicate_col" value="sample"/>-->
<!--                <param name="clonotype_imbalance_groupby" value="cluster"/>-->
<!--                <param name="clonotype_imbalance_case_label" value="CD8_Teff"/>-->
<!--                <param name="clonotype_imbalance_control_label" value="CD8_Trm"/>-->
<!--                <param name="clonotype_imbalance_target_col" value="clone_id"/>-->
<!--                <param name="clonotype_imbalance_top_n" value="10"/>-->
<!--                <param name="clonotype_imbalance_plot_type" value="box"/>-->
<!--                <param name="clonotype_imbalance_key_added" value="clonotype_imbalance"/>-->
<!--            </conditional>-->
<!--            <output name="pl_adata_out" file="pl_adata_out.h5ad"/>-->
<!--            <output name="pl_fig_out" file="pl_fig_out.png"/>-->
<!--        </test>-->
    </tests>
    <help><![CDATA[
A customized wrapper to the scanpy.pl.embedding() function. (`pl.embedding`)
============================================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.embedding.html>`__

Plot the alpha diversity per group. (`pl.alpha_diversity`)
==========================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.alpha_diversity.html>`__

Visualize the clonal expansion. (`pl.clonal_expansion`)
=======================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.clonal_expansion.html>`__

Plot the number of cells per group, split up by a categorical variable. (`pl.group_abundance`)
==============================================================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.group_abundance.html>`__

Show the distribution of CDR3 region lengths. (`pl.spectratype`)
================================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.spectratype.html>`__

Create a ribbon plot of the most abundant VDJ combinations. (`pl.vjd_usage`)
=============================================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.vjd_usage.html>`__

Visualize overlap between a pair of samples on a scatter plot. (`pl.repertoire_overlap`)
========================================================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.repertoire_overlap.html>`__

Plot the clonotype modularity score against the associated log10 p-value. (`pl.clonotype_modularity`)
======================================================================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.clonotype_modularity.html>`__

Plot the clonotype network. (`pl.clonotype_network`)
====================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.clonotype_network.html>`__

Find clonotypes that are the most enriched or depleted in a category. (`pl.clonotype_imbalance`)
================================================================================================
More details on the `scirpy documentation
<https://scverse.org/scirpy/latest/generated/scirpy.pl.clonotype_imbalance.html>`__

    ]]></help>
    <citations>
        <citation type="bibtex">
}</citation>
    </citations>
</tool>