<tool id="ggplot2" name="Plotting Tool" version="@VERSION_SCRIPT@+@VERSION_WRAPPER@" >
    <description>with ggplot2</description>
    <macros>
        <token name="@VERSION_SCRIPT@">0.1</token>
        <token name="@VERSION_WRAPPER@">1</token>
        <!-- Common Conditionals -->
        <macro name="conditional_ordering" >
            <conditional name="ordering" >
                <param name="use" type="select" label="Ordering" >
                    <option value="ordered">Ordered</option>
                    <option value="notordered">Unordered</option>
                </param>
                <yield />
            </conditional>
        </macro>
        <macro name="headerselection_macro" >
            <!-- TODO: Subselect columns -->
        </macro>
        <import>macros_aesthetics.xml</import>
        <import>macros_hierarchy_flat.xml</import>
        <import>macros_hierarchy_compatibility.xml</import>
        <import>macros_hierarchy_guided.xml</import>
    </macros>
    <version_command><![CDATA[
Rscript '$__tool_directory__/scripts/make_charts.R' --version
]]>
    </version_command>
    <!-- <command detect_errors="exit_code"><![CDATA[
Rscript '$__tool_directory__/scripts/make_charts.R '$userconf'
    ]]></command>
    <configfiles>
        <configfile name="userconf" ><![CDATA[
## WE WILL FILL THIS IN LATER

area.params = formals(areaplot)
#if user.selects.chart == "area":
    area.params$stat = $hierarchy.flat.chart.start
    area.param$stat = $flathierarchy.start


]]>
        </configfile>
    </configfiles> -->
    <command detect_errors="exit_code">
    <![CDATA[
        #import json
        #set $ggjson = {}
        #set $plots = list()
        #for $layer in $layers:
            #set $plot_dict = {}
            $plot_dict.__setitem__("plot_type", str($layer.hierarchy.chart.use))
            ## echo '$layer'
            ## echo '$layer.hierarchy.chart.use' && 
            ## echo '$plot_dict' &&
            ## #set $test2 = $layer
            ## echo '$test2' &&
            #set $aesthetic_list = list()
            #for $aesthetic in $layer.aesthetics:
                #set $aesthetic_dict = {}
                $aesthetic_dict.__setitem__("aesthetic_type", str($aesthetic.aes.use))
                
                ### COLOR_AND_FILL, LINE_AND_POLYGON OR POINT FIELDS
                #if str($aesthetic.aes.use) == 'color_and_fill' or str($aesthetic.aes.use) == 'line_and_polygon' or str($aesthetic.aes.use) == 'point':
                    ### Handle 'select_colors'
                    #if str($aesthetic.aes.color):
                        $aesthetic_dict.__setitem__("color", str($aesthetic.aes.color))
                    #end if
                    #if str($aesthetic.aes.fill):
                        $aesthetic_dict.__setitem__("fill", str($aesthetic.aes.fill))
                    #end if
                #end if
                
                ### Handle 'select_size' #line_and_polygon + point
                #if str($aesthetic.aes.use) == 'line_and_polygon' or str($aesthetic.aes.use) == 'point':
                    #if str($aesthetic.aes.size):
                        $aesthetic_dict.__setitem__("size", str($aesthetic.aes.size))
                    #end if
                #end if
                
                
                ### LINE_AND_POLYGON ONLY FIELDS
                #if str($aesthetic.aes.use) == 'line_and_polygon':
                    ### Handle 'select_stroke' #line_and_polygon
                    #if str($aesthetic.aes.stroke):
                        $aesthetic_dict.__setitem__("stroke", str($aesthetic.aes.stroke))
                    #end if
                
                    ### Handle 'select_linetype'
                    #if str($aesthetic.aes.linetype):
                        $aesthetic_dict.__setitem__("linetype", str($aesthetic.aes.linetype))
                    #end if
                
                    ### Handle 'select_lineend'
                    #if str($aesthetic.aes.lineend):
                        $aesthetic_dict.__setitem__("lineend", str($aesthetic.aes.lineend))
                    #end if
                
                    ### Handle 'select_linejoin'
                    #if str($aesthetic.aes.linejoin):
                        $aesthetic_dict.__setitem__("linejoin", str($aesthetic.aes.linejoin))
                    #end if
                #end if
                
                ### POINT ONLY FIELDS
                #if str($aesthetic.aes.use) == 'point':
                    ### Handle 'select_shape'
                    #if str($aesthetic.aes.shape):
                        $aesthetic_dict.__setitem__("shape", str($aesthetic.aes.shape))
                    #end if
                #end if
                
                ### TEXT ONLY FIELDS
                #if str($aesthetic.aes.use) == 'text':
                    ### Handle 'select_fontfamily'
                    #if str($aesthetic.aes.family):
                        $aesthetic_dict.__setitem__("family", str($aesthetic.aes.family))
                    #end if
                
                    ### Handle 'select_fontface'
                    #if str($aesthetic.aes.fontface):
                        $aesthetic_dict.__setitem__("fontface", str($aesthetic.aes.fontface))
                    #end if
                
                    ### Handle 'select_fontjustification' 
                    #if str($aesthetic.aes.hjust):
                        $aesthetic_dict.__setitem__("hjust", str($aesthetic.aes.hjust))
                    #end if
                    #if str($aesthetic.aes.hjust):
                        $aesthetic_dict.__setitem__("vjust", str($aesthetic.aes.vjust))
                    #end if
                
                    ### Handle text label
                    #if str($aesthetic.aes.label):
                        $aesthetic_dict.__setitem__("label", str($aesthetic.aes.label))
                    #end if
                 #end if
                 $aesthetic_list.append($aesthetic_dict)
            #end for
            $plot_dict.__setitem__("aesthetics", $aesthetic_list )
            $plots.append( $plot_dict )
        #end for
        $ggjson.__setitem__("file",str($input))
        #if $headers:
            $ggjson.__setitem__("header","true")
        #else:
            $ggjson.__setitem__("header","false")
        #end if
        $ggjson.__setitem__("plots", $plots )
        #set $test = json.dumps(ggjson)
        echo '$test'
        Rscript '$__tool_directory__/scripts/make_charts.R '$test'
    ]]>
    </command>
    <inputs>
        <param name="input" type="data" format="tabular" label="Data Set" />
        <param name="headers" type="boolean" checked="no" label="File has header line?"  />
        <repeat name="layers" title="Plot Layer" min="1">
            <conditional name="hierarchy" >
                <param name="use" type="select" label="By" >
                    <option value="flat" >Name</option>
                    <!-- <option value="compatibility" >Compatibility</option> -->
                    <!-- <option value="guided">Guided Search</option> -->
                </param>
                <expand macro="when_hierarchy_flat_macro" />
                <!-- <expand macro="when_hierarchy_compatibility_macro" /> -->
                <!-- <expand macro="when_hierarchy_guided_macro" /> -->
            </conditional>
            <expand macro="headerselection_macro" />
            <expand macro="aesthetics_macro" />
        </repeat>
    </inputs>
    <outputs>
        <data name="outpng" format="png" label="${tool.name} on ${on_string}: PNG" />
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help><![CDATA[

This is the new GGplot tool that we will update later

]]>
    </help>
    <citations>
    </citations>
</tool>
