<tool id="ggplot2" name="Plotting Tool" version="@VERSION_SCRIPT@+@VERSION_WRAPPER@" >
    <description>with ggplot2</description>
    <macros>
        <token name="@VERSION_SCRIPT@">0.1</token>
        <token name="@VERSION_WRAPPER@">1</token>
        <!-- Common Conditionals -->
        <macro name="conditional_ordering" >
            <conditional name="ordering" >
                <param name="use" type="select" label="Ordering" >
                    <option value="ordered">Ordered</option>
                    <option value="notordered">Unordered</option>
                </param>
                <yield />
            </conditional>
        </macro>
        <macro name="headerselection_macro" >
            <!-- TODO: Subselect columns -->
        </macro>
        <import>macros_aesthetics.xml</import>
        <import>macros_hierarchy_flat.xml</import>
        <import>macros_hierarchy_compatibility.xml</import>
        <import>macros_hierarchy_guided.xml</import>
    </macros>
    <version_command>
    <![CDATA[
        Rscript '$__tool_directory__/scripts/make_charts.R' --version
    ]]>
    </version_command>

    <!-- TRANSITIONING AWAY FROM PASSING PARAMS FILE, PASSING JSON STRING INSTEAD-->
    <!-- <command detect_errors="exit_code"><![CDATA[
Rscript '$__tool_directory__/scripts/make_charts.R '$userconf'
    ]]></command>
    <configfiles>
        <configfile name="userconf" ><![CDATA[
## WE WILL FILL THIS IN LATER

area.params = formals(areaplot)
#if user.selects.chart == "area":
    area.params$stat = $hierarchy.flat.chart.start
    area.param$stat = $flathierarchy.start


]]>
        </configfile>
    </configfiles> -->
    <command detect_errors="exit_code">
    <![CDATA[
        #import json
        #set $ggjson = {}
        #set $plot_type_dictionary = {}
        $plot_type_dictionary.__setitem__('2ddensityplot'          , 'geom_density_2d')
        $plot_type_dictionary.__setitem__('abline'                 , 'geom_abline')
        $plot_type_dictionary.__setitem__('vline'                  , 'geom_vline')
        $plot_type_dictionary.__setitem__('hline'                  , 'geom_hline')
        $plot_type_dictionary.__setitem__('barchart'               , 'geom_bar')
        $plot_type_dictionary.__setitem__('bin2d'                  , 'geom_bin2d')
        $plot_type_dictionary.__setitem__('boxplot'                , 'geom_boxplot')
        ## $plot_type_dictionary.__setitem__('bubbleplot'             , 'geom_point')    ## geom_scatter + size aes set to a column
        ## $plot_type_dictionary.__setitem__('connectedscatterplot'   , 'geom_density_2d') ## geom_scatter + geom_line
        ## $plot_type_dictionary.__setitem__('correlogram'            , 'geom_density_2d') ## corrgram package
        ## $plot_type_dictionary.__setitem__('dendrogram'             , 'geom_density_2d') ## ggdendro
        $plot_type_dictionary.__setitem__('densityplot'            , 'geom_density')
        $plot_type_dictionary.__setitem__('heatmap'                , 'geom_tile')
        $plot_type_dictionary.__setitem__('histogram'              , 'geom_histogram')
        $plot_type_dictionary.__setitem__('lineplot'               , 'geom_line')
        ## $plot_type_dictionary.__setitem__('scatterandmarginalplot' , 'geom_density_2d') ## ggExtra
        $plot_type_dictionary.__setitem__('scatterplot'            , 'geom_point')
        $plot_type_dictionary.__setitem__('stackedareaplot'        , 'geom_area')
        ## $plot_type_dictionary.__setitem__('streamgraph'            , 'streamgraph') ## streamgraph
        $plot_type_dictionary.__setitem__('violinplot'             , 'geom_violin')

        #set $plots = list()
        #for $layer in $layers:
            #set $plot_dict = {}
            ## echo '$layer'
            ## echo '$layer.hierarchy.chart.use' && 
            ## echo '$plot_dict' &&
            ## #set $test2 = $layer
            ## echo '$test2' &&
            #set $aesthetic_list = list()
            #for $aesthetic in $layer.aesthetics:
                #set $aesthetic_dict = {}

                #set $aes_keys = list($aesthetic.aes.keys)
                #set $aes_vals = list($aesthetic.aes.values)
                #for $i, $aes_key in enumerate($aes_keys):
                    ## echo 'aes_key' &&
                    
                    #set $aes_key_str = str($aes_key)
                    #set $aes_val_str = str($aes_vals[$i])
                    
                    #if not $aes_key_str.startswith('__') and not $aes_key_str.endswith('__')
                        $aesthetic_dict.__setitem__( $aes_key_str , $aes_val_str )
                    #end if

                    ## echo '$aes_key' &&
                    ## echo '$aes_key_str' &&
                    ## echo '---' &&
                    ## echo 'aes_val' &&
                    ## echo '$aes_val_str' &&
                    
                    ## ## #set $test3 = type($key1)
                    ## ## echo '$test3' &&
                    ## #set $keys2 = dir($key1)
                    ## #for $key2 in $keys2:
                    ##     echo 'dir' &&
                    ##     #set $key_str2 = str($key2)
                    ##     echo '$key2' &&
                    ##     echo '$key_str2' &&
                    ## #end for
                #end for
                
                 $aesthetic_list.append($aesthetic_dict)
            #end for
            #if str($layer.hierarchy.chart.use) == 'connectedscatterplot':
                
                $plot_dict.__setitem__("plot_type", "geom_scatter")
                $plot_dict.__setitem__("aesthetics", $aesthetic_list )
                $plots.append( $plot_dict )
                #set plot_dict2 = { "plot_type" : "geom_line", "aesthetics" : $aesthetic_list }
                $plots.append( $plot_dict2 )
            #else:
                $plot_dict.__setitem__("plot_type", $plot_type_dictionary[str($layer.hierarchy.chart.use)])
                $plot_dict.__setitem__("aesthetics", $aesthetic_list )
                $plots.append( $plot_dict )
            #end if
        #end for
        $ggjson.__setitem__("file",str($input))
        #if $headers:
            $ggjson.__setitem__("header","true")
        #else:
            $ggjson.__setitem__("header","false")
        #end if
        $ggjson.__setitem__("plots", $plots )
        #set $test = json.dumps(ggjson)
        echo '$test'
        Rscript $__tool_directory__/scripts/make_charts.R '$test'
    ]]>
    </command>
    <inputs>
        <param name="input" type="data" format="tabular,csv" label="Data Set" />
        <param name="headers" type="boolean" checked="no" label="File has header line?"  />
        <repeat name="layers" title="Plot Layer" min="1">
            <conditional name="hierarchy" >
                <param name="use" type="select" label="By" >
                    <option value="flat" >Name</option>
                    <!-- <option value="compatibility" >Compatibility</option> -->
                    <!-- <option value="guided">Guided Search</option> -->
                </param>
                <expand macro="when_hierarchy_flat_macro" />
                <!-- <expand macro="when_hierarchy_compatibility_macro" /> -->
                <!-- <expand macro="when_hierarchy_guided_macro" /> -->
            </conditional>
            <expand macro="headerselection_macro" />
            <expand macro="aesthetics_macro" />
        </repeat>
    </inputs>
    <outputs>
        <data name="outpng" format="png" label="${tool.name} on ${on_string}: PNG" />
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help><![CDATA[

This is the new GGplot tool that we will update later

]]>
    </help>
    <citations>
    </citations>
</tool>
