<tool id="metaMDBG" name="metaMDBG" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" license="MIT">
    <description>Assembly and analysis of metagenomic data using minimizer de Bruijn graphs</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="edam"/>
    <xrefs>
        <xref type="bio.tools">metaMDBG</xref>
    </xrefs>
    <expand macro="requirements" />
    <command detect_errors="exit_code">
        <![CDATA[
        metaMDBG asm --out-dir ./assemblyDir/ \
        --in-${read_type} $input.files_path \
        --threads ${GALAXY_SLOTS:-4} && \
        #if $make_graph:
        metaMDBG gfa --assembly-dir ./assemblyDir/ \
        --k $k_value \
        --contigpath --readpath \
        --threads ${GALAXY_SLOTS:-4}
        #end if
        ]]>
    </command>
    <inputs>
        <param name="read_type" type="select" label="Read type" help="Specify the type of reads in your input FASTQ file.">
            <option value="hifi">PacBio HiFi</option>
            <option value="ont">Nanopore R10.4+</option>
        </param>
        <param name="input" type="data" format="fastq,fastq.gz,fastqsanger,fastqsanger.gz" label="Input FASTQ file(s)" multiple="true" help="Provide one or more FASTQ files for assembly." />
        <conditional name="graph_options" >
            <param name="make_graph" type="boolean" value="true" label="Generate an assembly graph?" help="Has metaMDBG also produce an assembly graaph of the assemblies." />
            <when value="true">
                <param name="k_value" type="integer" label="Graph k-mer size" value="21" min="1" max="128" help="Specify the k-mer size for the assembly graph (default: 21)." />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="contigs" format="fasta.gz" label="${tool.name} on ${on_string}: Assembled contigs" from_work_dir=""/>
        <when value="make_graph">
            <data name="assembly_graph" format="gfa" label="${tool.name} on ${on_string}: Assembly graph" />
        </when>
    </outputs>

    <tests>
        <!-- Test Case 1: Basic assembly with PacBio HiFi reads -->
        <test>
            <param name="read_type" value="hifi" />
            <param name="input" value="test_data/hifi_reads.fastq.gz" />
            <param name="threads" value="4" />
            <output name="contigs" file="test_data/expected_contigs_hifi.fasta.gz" />
        </test>
    
        <!-- Test Case 2: Basic assembly with Nanopore reads -->
        <test>
            <param name="read_type" value="ont" />
            <param name="input" value="test_data/ont_reads.fastq.gz" />
            <param name="threads" value="4" />
            <output name="contigs" file="test_data/expected_contigs_ont.fasta.gz" />
        </test>
    
        <!-- Test Case 3: Assembly with graph generation (default k=21) -->
        <test>
            <param name="read_type" value="ont" />
            <param name="input" value="test_data/ont_reads.fastq.gz" />
            <param name="threads" value="4" />
            <param name="make_graph" value="true" />
            <param name="graph_options|k_value" value="21" />
            <output name="contigs" file="test_data/expected_contigs_with_graph.fasta.gz" />
            <output name="assembly_graph" file="test_data/expected_graph_k21.gfa" />
        </test>
    
        <!-- Test Case 4: Assembly with graph generation (custom k=31) -->
        <test>
            <param name="read_type" value="ont" />
            <param name="input" value="test_data/ont_reads.fastq.gz" />
            <param name="threads" value="4" />
            <param name="make_graph" value="true" />
            <param name="graph_options|k_value" value="31" />
            <output name="contigs" file="test_data/expected_contigs_with_graph_k31.fasta.gz" />
            <output name="assembly_graph" file="test_data/expected_graph_k31.gfa" />
        </test>
    
        <!-- Test Case 5: Multiple input files (co-assembly) -->
        <test>
            <param name="read_type" value="hifi" />
            <param name="input" value="test_data/hifi_reads1.fastq.gz,test_data/hifi_reads2.fastq.gz" />
            <param name="threads" value="4" />
            <output name="contigs" file="test_data/expected_contigs_coassembly.fasta.gz" />
        </test>
    </tests>
    
    <help><![CDATA[

**What is metaMDBG?**

metaMDBG is a fast and memory-efficient assembler designed for long and high-accuracy metagenomic reads, such as those from PacBio HiFi and Nanopore R10.4+ technologies. It utilizes a minimizer-based de Bruijn graph (MDBG) approach specifically optimized for metagenomic assembly. This tool effectively handles uneven species coverages using a multi-k approach in minimizer space and incorporates an abundance-based filtering method to simplify strain complexity.

**What can metaMDBG do?**

- **Assemble metagenomic data**: metaMDBG assembles long reads (e.g., Nanopore or PacBio HiFi) into contigs, even with highly uneven species coverage.
- **Handle multiple input samples**: Perform co-assembly of multiple samples to improve assembly quality.
- **Generate assembly graphs**: After assembly, metaMDBG can generate assembly graphs in the GFA format for further visualization and analysis.
- **Contig annotation**: The tool includes detailed information in contig headers, such as length, coverage, and circularity.
- **Support for long reads**: It works with long, noisy reads, making it ideal for high-accuracy metagenomic assembly.
- **Optimized for metagenomics**: Specifically tailored for metagenomic applications, providing results that better reflect species diversity and abundance.

`[See here for more information on metaMDBG]. <https://github.com/GaetanBenoitDev/metaMDBG>`_

----

**Basic options:**
    - **--in-hifi**: Input file(s) for PacBio HiFi reads (separate filenames with spaces).
    - **--in-ont**: Input file(s) for Nanopore R10.4+ reads (separate filenames with spaces).

**Output Files:**
    - **Contigs file**: `contigs.fasta.gz` â€“ Polished assembled contigs saved in compressed FASTA format.
    - **Assembly Graph**: (Optional) Generate an assembly graph in GFA format by running a separate `metaMDBG gfa` command.

----

**Contig headers contain the following information:**
    - **ctgID**: Name of the contig (e.g., `ctg112`).
    - **length**: Length of the contig in base pairs (e.g., `7013`).
    - **coverage**: Estimated read coverage for the contig (e.g., `6`).
    - **circular**: Whether the contig is circular (`yes` or `no`).

    
    ]]></help>
    <expand macro="citations" />
</tool>
