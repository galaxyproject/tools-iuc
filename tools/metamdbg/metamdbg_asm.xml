<tool id="metamdbg_asm" name="metaMDBG assemble" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" license="MIT">
  <description>Assemble long-read metagenomes (HiFi / ONT)</description>

  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="edam"/>

  <requirements>
    <requirement type="package" version="@TOOL_VERSION@">metamdbg</requirement>
  </requirements>

  <stdio><exit_code range="1:" level="fatal"/></stdio>
  <version_command>metaMDBG --version</version_command>
  <command detect_errors="exit_code"><![CDATA[
    mkdir -p assemblyDir &&

    ## Collect reads from file(s) and/or list collection (note: inputs.* because they live in a <section name="inputs">)
    #set reads_list = []
    #if $inputs.reads
        #for $r in $inputs.reads
        #set $x = $reads_list.append($r.file_name)
        #end for
    #end if
    #if $inputs.reads_collection
        #for $c in $inputs.reads_collection
        #set $y = $reads_list.append($c.file_name)
        #end for
    #end if

    metaMDBG asm 
        --out-dir assemblyDir
        --threads \${GALAXY_SLOTS:-4} 
    #if $read_type == "hifi"
        --in-hifi 
    #else
        --in-ont 
    #end if
    #for $p in $reads_list
        "$p" 
    #end for
    #if $assembly.kmer_size is not None and str($assembly.kmer_size) != ""
        --kmer-size $assembly.kmer_size 
    #end if
    #if $assembly.density_assembly is not None and str($assembly.density_assembly) != ""
        --density-assembly $assembly.density_assembly 
    #end if
    #if $assembly.max_k is not None and str($assembly.max_k) != ""
        --max-k $assembly.max_k 
    #end if
    #if $assembly.min_abundance is not None and str($assembly.min_abundance) != ""
        --min-abundance $assembly.min_abundance 
    #end if
    #if str($assembly.all_assembly_graph) == "true"
        --all-assembly-graph 
    #end if
    #if $correction.min_read_quality is not None and str($correction.min_read_quality) != ""
        --min-read-quality $correction.min_read_quality 
    #end if
    #if $correction.density_correction is not None and str($correction.density_correction) != ""
        --density-correction $correction.density_correction 
    #end if
    #if $correction.min_read_identity is not None and str($correction.min_read_identity) != ""
        --min-read-identity $correction.min_read_identity 
    #end if
    #if $correction.min_read_overlap is not None and str($correction.min_read_overlap) != ""
        --min-read-overlap $correction.min_read_overlap 
    #end if
    #if str($correction.skip_correction) == "true"
        --skip-correction 
    #end if
    ;

    ## Bundle for downstream graphing
    tar -C assemblyDir -czf assemblyDir.tgz . ;
  ]]></command>

  <inputs>
    <param name="read_type" type="select" label="Read type (maps to --in-*)">
      <option value="hifi">PacBio HiFi (uses --in-hifi)</option>
      <option value="ont">Nanopore R10.4+ (uses --in-ont)</option>
    </param>

    <section name="inputs" title="Input reads"  expanded="true">
      <param name="reads" type="data" format="fastq,fastq.gz,fastqsanger,fastqsanger.gz"
             multiple="true" optional="true"
             label="FASTQ file(s)"
             help="Multi-select one or more FASTQ files for (co-)assembly."/>
      <param name="reads_collection" type="data_collection" collection_type="list"
             optional="true"
             label="OR: FASTQ collection (list)"
             help="Provide a list collection of FASTQs instead of selecting files above."/>
    </section>

    <section name="assembly" title="Assembly options (advanced)" expanded="false">
        <param name="kmer_size" type="integer" optional="true"
                label="k-mer size (--kmer-size)"
                help="Leave blank to use metaMDBG's default."/>
        <param name="density_assembly" type="float" optional="true"
                label="Fraction of k-mers used for assembly (--density-assembly)"/>
        <param name="max_k" type="integer" optional="true"
                label="Stop after k iterations (--max-k)"/>
        <param name="min_abundance" type="integer" optional="true"
                label="Minimum k-min-mer abundance (--min-abundance)"/>
        <param name="all_assembly_graph" type="boolean" value="false"
                label="Emit assembly graph at each multi-k iteration (--all-assembly-graph)"/>
    </section>

    <section name="correction" title="Correction options (advanced)" expanded="false">
        <param name="min_read_quality" type="integer" optional="true"
                label="Minimum read average quality (--min-read-quality)"/>
        <param name="density_correction" type="float" optional="true"
                label="Fraction of k-mers used for correction (--density-correction)"/>
        <param name="min_read_identity" type="float" optional="true"
                label="Minimum read identity (--min-read-identity)"/>
        <param name="min_read_overlap" type="integer" optional="true"
                label="Minimum read overlap length (--min-read-overlap)"/>
        <param name="skip_correction" type="boolean" value="false"
                label="Skip read correction"/>
    </section>

  </inputs>

  <outputs>
    <data name="contigs" format="fasta.gz"
          from_work_dir="assemblyDir/contigs.fasta.gz"
          label="metaMDBG contigs on ${on_string}"/>
    <data name="assembly_bundle" format="tar.gz"
          from_work_dir="assemblyDir.tgz"
          label="metaMDBG assembly bundle (tar)"/>
  </outputs>

  <tests>

    <!-- 1) HiFi, single-file, defaults (no optional flags passed) -->
    <test expect_num_outputs="2">
      <param name="read_type" value="hifi"/>
      <section name="inputs">
        <param name="reads" value="hifi_reads_small.fastq.gz"/>
      </section>

      <!-- prove mapping & that optional flags are NOT present by default -->
      <assert_command>
        <has_text text="metaMDBG asm"/>
        <has_text text="--out-dir assemblyDir"/>
        <has_text text="--in-hifi"/>
        <not_has_text text="--in-ont"/>
        <not_has_text text="--kmer-size "/>
        <not_has_text text="--density-assembly "/>
        <not_has_text text="--max-k "/>
        <not_has_text text="--min-abundance "/>
        <not_has_text text="--all-assembly-graph"/>
        <not_has_text text="--min-read-quality "/>
        <not_has_text text="--density-correction "/>
        <not_has_text text="--min-read-identity "/>
        <not_has_text text="--min-read-overlap "/>
        <not_has_text text="--skip-correction"/>
      </assert_command>

      <!-- contigs is gzipped; just sanity check size -->
      <output name="contigs">
        <assert_contents>
          <has_size min="1"/>
        </assert_contents>
      </output>

      <!-- check tarball contains key members -->
      <output name="assembly_bundle" ftype="tar.gz">
        <assert_contents>
          <has_archive_member path="^(\.\/)?contigs\.fasta\.gz$"/>
          <has_archive_member path="^(\.\/)?tmp\/"/>
        </assert_contents>
      </output>
    </test>

    <!-- 2) ONT, single-file, exercise correction toggles -->
    <test expect_num_outputs="2">
      <param name="read_type" value="ont"/>
      <section name="inputs">
        <param name="reads" value="ont_reads_small.fastq.gz"/>
      </section>
      <section name="correction">
        <param name="min_read_quality" value="0"/>
        <param name="density_correction" value="0.02"/>
        <param name="min_read_identity" value="0.95"/>
        <param name="min_read_overlap" value="800"/>
        <param name="skip_correction" value="true"/>
      </section>

      <assert_command>
        <has_text text="--in-ont"/>
        <has_text text="--min-read-quality 0"/>
        <has_text text="--density-correction 0.02"/>
        <has_text text="--min-read-identity 0.95"/>
        <has_text text="--min-read-overlap 800"/>
        <has_text text="--skip-correction"/>
      </assert_command>

      <output name="contigs">
        <assert_contents>
          <has_size min="1"/>
        </assert_contents>
      </output>
      <output name="assembly_bundle" ftype="tar.gz">
        <assert_contents>
          <has_archive_member path="^(\.\/)?contigs\.fasta\.gz$"/>
        </assert_contents>
      </output>
    </test>

    <!-- 3) HiFi, set assembly knobs (incl. all-assembly-graph) -->
    <test expect_num_outputs="2">
      <param name="read_type" value="hifi"/>
      <section name="inputs">
        <param name="reads" value="hifi_reads_small.fastq.gz,hifi_reads_small_2.fastq.gz,hifi_reads_small_3.fastq.gz"/>
      </section>
      <section name="assembly">
        <param name="kmer_size" value="13"/>
        <param name="density_assembly" value="0.01"/>
        <param name="max_k" value="8"/>
        <param name="min_abundance" value="2"/>
        <param name="all_assembly_graph" value="true"/>
      </section>

      <assert_command>
        <has_text text="--kmer-size 13"/>
        <has_text text="--density-assembly 0.01"/>
        <has_text text="--max-k 8"/>
        <has_text text="--min-abundance 2"/>
        <has_text text="--all-assembly-graph"/>
      </assert_command>

      <output name="contigs">
        <assert_contents>
          <has_size min="1"/>
        </assert_contents>
      </output>
      <output name="assembly_bundle" ftype="tar.gz">
        <assert_contents>
            <has_archive_member path="^(\.\/)?contigs\.fasta\.gz$"/>
            <has_archive_member path="^(\.\/)?tmp\/"/>
        </assert_contents>
      </output>
    </test>

    <!-- 4) Co-assembly via list collection (2 files), defaults -->
    <test expect_num_outputs="2">
      <param name="read_type" value="hifi"/>
      <section name="inputs">
        <param name="reads_collection">
          <collection type="list">
            <element name="r1" value="hifi_reads_small.fastq.gz"/>
            <element name="r2" value="hifi_reads_small_2.fastq.gz"/>
            <element name="r3" value="hifi_reads_small_3.fastq.gz"/>
          </collection>
        </param>
      </section>
      <section name="correction">
        <param name="skip_correction" value="false"/>
      </section>

      <!-- ensure both inputs got threaded into the command -->
      <assert_command>
        <has_text text="--in-hifi"/>
      </assert_command>

      <output name="contigs">
        <assert_contents>
          <has_size min="1"/>
        </assert_contents>
      </output>
      <output name="assembly_bundle" ftype="tar.gz">
        <assert_contents>
          <has_archive_member path="^(\.\/)?contigs\.fasta\.gz$"/>
        </assert_contents>
      </output>
    </test>

  </tests>
  <help><![CDATA[
**What this tool does and why**

This tool runs `metaMDBG asm` to assemble long-read metagenomes (PacBio HiFi or ONT R10.4+) using a minimizer-space de Bruijn graph with a multi-k strategy. It produces polished contigs and a tarred snapshot of the assembly directory for downstream graphing and reproducibility.

**How to use this tool effectively**

1. **Provide input reads.** Select one or more FASTQ files or supply a list collection.

2. **Choose the read type.** Select PacBio HiFi (sets `--in-hifi`) or Nanopore R10.4+ (sets `--in-ont`).

3. **(Optional) Tune assembly options.** Adjust k-mer size, assembly density, max k iterations, minimum abundance, or enable `--all-assembly-graph`.

4. **(Optional) Tune correction options.** Set minimum read quality/identity/overlap or `--skip-correction`.

5. **Review outputs.** You’ll get the contigs and a tarball of the entire `assemblyDir/` for later use with the GFA tool or auditing.

**Outputs**

- **`contigs.fasta.gz`** — compressed FASTA of assembled contigs.  
- **`assemblyDir.tgz`** — compressed snapshot of the assembly directory (including logs and `tmp/`).

**Options (Galaxy ↔ CLI mapping)**

- **Read type:** `--in-hifi` or `--in-ont`.  
- **Assembly options:** `--kmer-size`, `--density-assembly`, `--max-k`, `--min-abundance`, `--all-assembly-graph`.  
- **Correction options:** `--min-read-quality`, `--density-correction`, `--min-read-identity`, `--min-read-overlap`, `--skip-correction`.

**Why we generate a tar bundle**

Packaging `assemblyDir/` as `assemblyDir.tgz` preserves all artifacts and makes it easy to pass the exact assembly into the **metaMDBG graph (GFA)** tool.

  ]]></help>

  <expand macro="citations"/>
  </tool>


