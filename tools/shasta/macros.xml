<?xml version="1.0"?>
<macros>
    <token name="@TOOL_VERSION@">0.6.0</token>
    <token name="@PROFILE@">18.01</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">shasta</requirement>
        </requirements>
    </xml>
    <xml name="version_command">
        <version_command>shasta --version</version_command>
    </xml>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1038/s41587-020-0503-6</citation>
            <citation type="bibtex">@online{shasta,
              author = {TODOLastName,TODOFirstName},
              title = {shasta},
              year = 2020,
              url = {https://github.com/chanzuckerberg/shasta},
              urldate = {2020-11-05}
            }</citation>
        </citations>
    </xml>
    <!--
        input
    -->
    <token name="@INIT_INPUT_READS@"><![CDATA[
#for $counter, $input in enumerate($in_data)
    #if $input.is_of_type("fasta.gz")
        #set $ext = "fasta"
        gzip -dcf '$input' > ./input_${counter}.${ext} && 
    #elif $input.is_of_type("fastq.gz","fastqsanger.gz")
        #set $ext = "fastq"
        gzip -dcf '$input' > ./input_${counter}.${ext} && 
    #elif $input.is_of_type("fastqsanger", "fastq"):
        #set $ext = "fastq"
        ### I tried symlinking but shasta still complained about file extensions
        cp '$input' ./input_${counter}.${ext} &&
    #elif $input.is_of_type("fasta"):
        #set $ext = "fasta"
        ### I tried symlinking but shasta still complained about file extensions
        cp '$input' ./input_${counter}.${ext} &&
    #end if
#end for
    ]]></token>

    <xml name="input_reads">
        <param name="in_data" type="data" format="fasta,fastq,fastqsanger,fasta.gz,fastq.gz,fastqsanger.gz" multiple="true" label="Input read file(s)"/>
    </xml>

    <xml name="config_selection">
        <param name="config_select" type="select" label="Initial config file to build off of." help="Link to the directory where these config files are stored can be found in the tool help below.">
            <option value="Nanopore-Dec2019.conf"></option>
            <option value="Nanopore-Jun2020.conf"></option>
            <option value="Nanopore-OldGuppy-Sep2020.conf"></option>
            <option value="Nanopore-Sep2020.conf"></option>
            <option value="Nanopore-UL-Dec2019.conf"></option>
            <option value="Nanopore-UL-Jun2020.conf"></option>
            <option value="Nanopore-UL-Sep2020.conf"></option>
            <option value="Nanopore-UL-iterative-Sep2020.conf"></option>
            <option value="PacBio-CCS-Dec2019.conf"></option>
            <option value="PacBio-CLR-Dec2019.conf"></option>
        </param>
    </xml>
    <!--
        Help
    -->

    <token name="@WID@"><![CDATA[
The goal of the *Shasta* long read assembler is to rapidly produce accurate assembled sequence using as input DNA reads generated by Oxford Nanopore flow cells.

Computational methods used by the Shasta assembler include:

Using a run-length representation of the read sequence. This makes the assembly process more resilient to errors in homopolymer repeat counts, which are the most common type of errors in Oxford Nanopore reads.

Using in some phases of the computation a representation of the read sequence based on markers, a fixed subset of short k-mers (k â‰ˆ 10).
]]></token>
    <token name="@REFERENCES@"><![CDATA[
More information are available on the `documentation <https://chanzuckerberg.github.io/shasta/>`_ or the `github <https://github.com/chanzuckerberg/shasta>`_ .
    ]]></token>
</macros>
