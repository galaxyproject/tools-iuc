<tool id="velvetoptimiser" name="VelvetOptimiser" version="2.2.6">
    <description>Automatically optimize Velvet assemblies</description>
    <requirements>
        <requirement type="package" version="1.2.10">velvet</requirement>
        <requirement type="package" version="2.2.6">perl-velvetoptimiser</requirement>
    </requirements>
    <version_command>VelvetOptimiser.pl --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
        export OMP_NUM_THREADS=2 &&
        export OMP_THREAD_LIMIT=2 &&
        VelvetOptimiser.pl
            -t "\${GALAXY_SLOTS:-1}"
            -s $start_kmer
            -e $end_kmer
            -d out
            -f "
            #for $i in $files:
                -${i.filetype}

                #if str($i.paired_type.paired_type_selector) == "paired":

                    #if $i.__index__ > 1:
                        -shortPaired$i.__index__
                    #else
                        -shortPaired
                    #end if

                    -separate '$i.paired_type.input1' '$i.paired_type.input2'
                #end if

                #if str($i.paired_type.paired_type_selector) == "single"

                    #if $i.__index__ > 1
                        -short$i.__index__
                    #else
                        -short
                    #end if

                    '$i.paired_type.input1'
                #end if

                #if str($i.paired_type.paired_type_selector) == "paired_collection"
                    #if $i.__index__ > 1
                        -shortPaired$i.__index__
                    #else
                        -shortPaired
                    #end if
                        -separate '$i.paired_type.input1.forward' '$i.paired_type.input1.reverse'
                #end if
                #if str($i.paired_type.paired_type_selector) == "paired_iv"
                    #if $i.__index__ > 1
                        -shortPaired$i.__index__
                    #else
                        -shortPaired
                    #end if
                    '$i.paired_type.input1'
                #end if
            #end for
            "

            ##if str($advanced.advanced_select) == "advanced"
                $advanced.verbose
                -k '$advanced.optFuncKmer'
                -c '$advanced.optFuncCov'
                #if str($advanced.velvetg_opts) != ""
                    -o '$advanced.velvetg_opts'
                #end if
                -m $advanced.minCutoff
                -z $advanced.maxCutoff
            ##end if

    ]]></command>
    <inputs>
        <param name="start_kmer" type="integer" value="31" label="Start k-mer size" help="Odd integer, Lower limit of k-mer size range to search for optimum value" />
        <param name="end_kmer" type="integer" value="191" label="End k-mer size" help="Odd integer, Upper limit of k-mer size range to search for optimum value" />
        <param name="kmer_step" type="integer" value="2" label="K-mer search step size" help="Even integer, the k-mer value step size when searching the range" />

        <repeat name="files" title="Input files" min="1">
            <param name="filetype" label="Input file type" type="select" help="Input file type">
                <option value="fastq">Fastq</option>
                <option value="fasta">Fasta</option>
                <option value="bam">Bam</option>
            </param>
            <conditional name="paired_type">
                <param name="paired_type_selector" type="select" label="Single or paired end reads" help="Select between paired and single end data">
                    <option value="paired">Paired</option>
                    <option value="single">Single</option>
                    <option value="paired_collection">Paired Collection</option>
                    <option value="paired_iv">Paired Interleaved</option>
                </param>
                <when value="paired">
                    <param name="input1" type="data" format="fastqsanger,fasta,bam" label="Select first set of reads" help="Specify dataset with forward reads"/>
                    <param name="input2" type="data" format="fastqsanger,fasta,bam" label="Select second set of reads" help="Specify dataset with reverse reads"/>
                </when>
                <when value="single">
                    <param name="input1" type="data" format="fastqsanger,fasta,bam" label="Select the reads" help="Specify dataset with the reads"/>
                </when>
                <when value="paired_collection">
                    <param name="input1" format="fastqsanger,fasta" type="data_collection" collection_type="paired" label="Select a paired collection" help="See help section for an explanation of dataset collections"/>
                </when>
                <when value="paired_iv">
                    <param name="input1" type="data" format="fastqsanger,fasta,bam" label="Select set of interleaved reads" help="Specify dataset with interleaved paired reads"/>
                </when>
            </conditional>
        </repeat>

        <section name="advanced" title="Advanced Options" expanded="false">
            <param name="verbose" type="boolean" checked="false" truevalue="-v" falsevalue="" label="Verbose" help="Include verbose velvet output in log file" />
            <param name="optFuncKmer" type="text" value="n50" label="K-mer optimisation function" help="See help below for possibilities!"/>
            <param name="optFuncCov" type="text" value="Lbp" label="Coverage cutoff optimisation function" help="See help below for possibilities!"/>
            <param name="velvetg_opts" type="text" value="" label="Other velvetg options" help="Add any other required velvetg options from the advanced set"/>
            <param name="minCutoff" type="integer" value="0" label="Minimum coverage cutoff" help="The minimum coverage cutoff to consider in the optimisation"/>
            <param name="maxCutoff" type="float" value="0.8" label="Maximum coverage cutoff" help="The maximum coverage cutoff to consider expressed as a fraction of the calculated expected coverage."/>
        </section>
    </inputs>

    <outputs>
        <data format="fasta" name="contigs" label="${tool.name} on ${on_string}: Contigs" from_work_dir="out/contigs.fa"/>
        <data format="tabular" name="stats" label="${tool.name} on ${on_string}: Contig Stats" from_work_dir="out/stats.txt"/>
        <data format="tabular" name="logfile" label="${tool.name} on ${on_string}: Log file" hidden="true" from_work_dir="*_Logfile.txt"/>
    </outputs>

    <tests>
        <test>
            <param name="start_kmer" value="21" />
            <param name="end_kmer" value="31" />
            <param name="files_0|filetype" value="fasta" />
            <param name="files_0|paired_type|paired_type_selector" value="single" />
            <param name="files_0|paired_type|input1" value="test_reads.fa" ftype="fasta" />
            <output name="contigs" ftype="fasta" file="test-contigs.fa" compare="sim_size"/>
        </test>
    </tests>

    <help><![CDATA[
**Velvet Optimiser Overview**

      Velvet_ is a de novo genomic assembler specially designed for short read sequencing technologies, such as Solexa or 454, developed by Daniel Zerbino and Ewan Birney at the European Bioinformatics Institute (EMBL-EBI), near Cambridge, in the United Kingdom.

      Velvet currently takes in short read sequences, removes errors then produces high quality unique contigs. It then uses paired-end read and long read information, when available, to retrieve the repeated areas between contigs.

      Read the Velvet `documentation`__ for details on using the Vevlet Assembler.

      .. _Velvet: http://www.ebi.ac.uk/~zerbino/velvet/

      .. __: http://www.ebi.ac.uk/~zerbino/velvet/Manual.pdf

      **VelvetOptimiser**

      VelvetOptimiser_ was written by Simon Gladman of CSIRO/Melbourne University.

      VelvetOptimiser performs a number of velveth and velvetg steps to try and optimise an assembly based on the metrics provided below.

      .. _VelvetOptimiser: http://github.com/Slugger70/VelvetOptimiser

      Galaxy tool wrapper for newer versions (2.5.5) of Velvet Optimiser. Written by Simon Gladman of Melbourne University.

**Outputs**


      **Contigs**

      The *contigs.fa* file.
      This fasta file contains the sequences of the contigs longer than 2k, where k is the word-length used in velveth. If you have specified a min contig lgth threshold, then the contigs shorter than that value are omitted.
      Note that the length and coverage information provided in the header of each contig should therefore be understood in k-mers and in k-mer coverage (cf. 5.1) respectively.
      The N's in the sequence correspond to gaps between scaffolded contigs. The number of N's corresponds to the estimated length of the gap. For reasons of compatibility with the archives, any gap shorter than 10bp is represented by a sequence of 10 N's.

      **Stats**

      The *stats.txt* file.
      This file is a simple tabbed-delimited description of the nodes. The column names are pretty much self-explanatory. Note however that node lengths are given in k-mers. To obtain the length in nucleotides of each node you simply need to add k - 1, where k is the word-length used in velveth.
      The in and out columns correspond to the number of arcs on the 5' and 3' ends of the contig respectively.
      The coverages in columns short1 cov, short1 Ocov, short2 cov, and short2 Ocov are provided in k-mer coverage (5.1).
      Also, the difference between # cov and # Ocov is the way these values are computed. In the first count, slightly divergent sequences are added to the coverage tally. However, in the second, stricter count, only the sequences which map perfectly onto the consensus sequence are taken into account.

      **LastGraph**

      The *LastGraph* file.
      This file describes in its entirety the graph produced by Velvet. This file is hidden by default.

      **Logfile**

      The Velvet Optimiser's logfile. This file is hidden by default

      **STDERR**

      The Standard Error output of the Optimiser for error messages etc. This file is hidden by default.

      **Advanced options**

      Verbose                                 : Include verbose velvet output in log file. Good for debugging when things don't work.

      Other Velvetg Options                   : Extra velvetg options to pass through.  eg. -long_mult_cutoff -max_coverage etc (default '') See below for details.

      Minimum coverage cutoff                 : The minimum cov_cutoff to be used. (default '0').

      Maximum coverage cutoff                 : The maximum coverage cutoff to consider as a multiplier of the expected coverage. (default '0.8').

      K-mer optimisation function             : The optimisation function used for k-mer choice. (default 'n50').

      Coverage cutoff optimisation function   : The optimisation function used for cov_cutoff optimisation. (default 'Lbp').

      Velvet optimiser **assembly optimisation functions** can be built from the following variables.

          *LNbp* = The total number of Ns in large contigs

          *Lbp* = The total number of base pairs in large contigs

          *Lcon* = The number of large contigs

          *max* = The length of the longest contig

          *n50* = The n50

          *ncon* = The total number of contigs

          *tbp* = The total number of basepairs in contigs

        Examples are:

          'Lbp' = Just the total basepairs in contigs longer than 1kb

          'n50*Lcon' = The n50 times the number of long contigs.

          'n50*Lcon/tbp+log(Lbp)' = The n50 times the number of long contigs divided by the total bases in all contigs plus the log of the number of bases in long contigs (as an example only.)

        Defaults are:

            *n50* for k-mer length optimisation &

            *Lbp* for coverage cutoff

      **Hash Length**

      The hash length, also known as k-mer length, corresponds to the length, in base pairs, of the words being hashed.

      The hash length is the length of the k-mers being entered in the hash table. Firstly, you must observe three technical constraints::
        - it must be an odd number, to avoid palindromes. If you put in an even number, Velvet will just decrement it and proceed.
        - it must be below or equal to MAXKMERHASH length (cf. 2.3.3, by default 31bp), because it is stored on 64 bits
        - it must be strictly inferior to read length, otherwise you simply will not observe any overlaps between reads, for obvious reasons.

      Now you still have quite a lot of possibilities. As is often the case, it's a trade-off between specificity and sensitivity. Longer kmers bring you more specificity (i.e. less spurious overlaps) but lowers coverage (cf. below)... so there's a sweet spot to be found with time and experience.
      We like to think in terms of "k-mer coverage", i.e. how many times has a k-mer been seen among the reads. The relation between k-mer coverage Ck and standard (nucleotide-wise) coverage C is Ck = C * (L - k + 1)/L where k is your hash length, and L you read length.
      Experience shows that this kmer coverage should be above 10 to start getting decent results. If Ck is above 20, you might be "wasting" coverage. Experience also shows that empirical tests with different values for k are not that costly to run! VelvetOptimiser automates these tests for you.


      **Velvetg options**

      -scaffolding yes|no                : scaffolding of contigs used paired end information (default: on)

      -max_branch_length integer        : maximum length in base pair of bubble (default: 100)

      -max_divergence floating-point  : maximum divergence rate between two branches in a bubble (default: 0.2)

      -max_gap_count integer            : maximum number of gaps allowed in the alignment of the two branches of a bubble (default: 3)

      -min_pair_count integer         : minimum number of paired end connections to justify the scaffolding of two long contigs (default: 5)

      -max_coverage floating point    : removal of high coverage nodes AFTER tour bus (default: no removal)

      -coverage_mask integer            : minimum coverage required for confident regions of contigs (default: 1)

      -long_mult_cutoff integer        : minimum number of long reads required to merge contigs (default: 2)

      -paired_exp_fraction double     : remove all the paired end connections which less than the specified fraction of the expected count (default: 0.1)

      -conserveLong yes|no            : preserve sequences with long reads in them (default no)


      **Input Files**

      Velvet works mainly with fasta and fastq formats. For paired-end reads, the assumption is that each read is next to its mate
      read. In other words, if the reads are indexed from 0, then reads 0 and 1 are paired, 2 and 3, 4 and 5, etc.

      Supported file formats are::

          fasta
          fastq
          bam

      Read categories are::

          short (default)
          shortPaired
          long (for Sanger, 454 or even reference sequences)
          longPaired
          reference (for pre-mapped sam or bam files - see Velvet manual for details on how to use this option)


    ]]></help>
    <citations>
        <citation type="bibtex">@UNPUBLISHED{GLADMAN2012,
            author = "Gladman Simon",
            title = "VelvetOptimiser",
            year = "2012",
            note = "https://github.com/slugger70/VelvetOptimiser"}
        </citation>
        <citation type="doi">10.1101/gr.074492.107</citation>
        <citation type="doi">10.1371/journal.pone.0008407</citation>
    </citations>
</tool>
