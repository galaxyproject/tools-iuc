<?xml version="1.0"?>
<macros>
    <token name="@TOOL_VERSION@">2.9.10</token>
    <token name="@GALAXY_VERSION@">galaxy0</token>
    <token name="@DESCRIPTION@">small variant caller</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">strelka</requirement>
            <requirement type="package" version="1.9">samtools</requirement>
            <!--requirement type="package" version="0.2.6">tabix</requirement-->
        </requirements>
    </xml>
	<xml name="citations">
        <citations>
            <citation type="doi">10.1038/s41592-018-0051-x</citation>
        </citations>
    </xml>

    <!-- 
        command
    -->

    <token name="@INIT@"><![CDATA[
        ##ln -s '$referenceFasta' './input_ref.fasta' &&
        ##samtools faidx './input_ref.fasta' &&
        ## must be bgzip compressed and tabix-indexed 
        #if $ap.forcedGT
            #for $i, $file in enumerate($ap.forcedGT)
                ln -s '$file' './input_forcedgt_${i}.vcf' &&
                ln -s '$file.metadata.vcf_bgzip' ./input_forcedgt_${i}.vcf.gz' &&
                ln -s '$file.metadata.tabix_index' './input_forcedgt_${i}.vcf.gz.tbi' &&
            #end for
        #end if
        ## must be bgzip compressed and tabix-indexed         
        #if $ap.indelCandidates
            #for $i, $file in enumerate($ap.indelCandidates)
                ln -s '$file' './input_indelcandidates_${i}.vcf' &&
                ln -s '$file.metadata.vcf_bgzip' './input_indelcandidates_${i}.vcf.gz' &&
                ln -s '$file.metadata.tabix_index' './input_indelcandidates_${i}.vcf.gz.tbi' &&
            #end for
        #end if
        #if $ap.callRegions
            ln -s '$ap.callRegions' './input_callregions.bed' &&
            ln -s '$ap.callRegions.bgzip' './input_callregions.bed.gz' &&
            ln -s '$ap.callRegions.tabix_index' './input_callregions.bed.gz.tbi' &&
        #end if
        #if str($ref_cond.ref_sel) == 'history':
            #set $reference_fasta_fn = './input_ref.fasta'
            ln -s '$ref_cond.ref' $reference_fasta_fn &&
            samtools faidx $reference_fasta_fn &&
        #else
            #set $reference_fasta_fn = str($ref_cond.ref.fields.path)
        #end if        
    ]]></token>
    <token name="@CREATE@"><![CDATA[
        --config='$config_file'
        $ap.exome
        $ap.targeted       
        #if $ap.forcedGT
            #for $i, $file in enumerate($ap.forcedGT)
                --forcedGT './input_forcedgt_${i}.vcf.gz'
            #end for
        #end if
        #if $ap.indelCandidates
            #for $i, $file in enumerate($ap.indelCandidates)
                --indelCandidates './input_indelcandidates_${i}.vcf.gz'
            #end for
        #end if
        #if $ap.callRegions
            --callRegions './input_callregions.bed.gz'
        #end if        
        --referenceFasta '${reference_fasta_fn}' ## './input_ref.fasta'
        --runDir './results' &&
    ]]></token>
    <token name="@RUN@"><![CDATA[
        ./results/runWorkflow.py
            -m local
            -j \${GALAXY_SLOTS:-2}
            -g \${GALAXY_MEMORY_MB:-8192}
    ]]></token>

    <!-- 
        configfile - parser cannot handle indents
    -->

    <token name="@CONFIG@"><![CDATA[
maxIndelSize = $strelka.maxIndelSize
isWriteRealignedBam = 0 ## not inplemented
extraVariantCallerArguments = ## not implemented
    ]]></token>

    <!--
        input 
    -->
    
    <xml name="input_required" token_ref="normalBam">
        <conditional name="ref_cond">
            <param name="ref_sel" type="select" label="Choose the source for the reference genome" help="(--referenceFasta)">
                <option value="cached">Locally cached</option>
                <option value="history">History</option>
            </param>
            <when value="cached">
                <param name="ref" type="select" label="Reference genome" help="">
                    <options from_data_table="fasta_indexes">
                        <filter type="data_meta" column="dbkey" key="dbkey" ref="@REF@"/>
                        <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file."/>
                    </options>
                </param>
            </when>
            <when value="history">
                <param name="ref" type="data" format="fasta" label="Reference sequence" help="(--referenceFasta)"/>
            </when>
        </conditional>
    </xml>
    <xml name="input_advanced">
        <param argument="--indelCandidates" type="data" format="vcf" multiple="true" optional="true" label="Select file with candidate indel alleles" help="Specify a VCF of candidate indel alleles. These alleles are always evaluated but only reported in the output when they are inferred to exist in the sample. The VCF must be tabix indexed. All indel alleles must be left-shifted/normalized, any unnormalized alleles will be ignored. This option may be specified more than once, multiple input VCFs will be merged."/>
        <param argument="--forcedGT" type="data" format="vcf" multiple="true" optional="true" label="Select file with candidate alleles" help="Specify a VCF of candidate alleles. These alleles are always evaluated and reported even if they are unlikely to exist in the sample. The VCF must be tabix indexed. All indel alleles must be left- shifted/normalized, any unnormalized allele will trigger a runtime error. This option may be specified more than once, multiple input VCFs will be merged. Note that for any SNVs provided in the VCF, the SNV site will be reported (and for gVCF, excluded from block compression), but the specific SNV alleles are ignored."/>
        <param argument="--callRegions" type="data" format="bed" optional="true" label="Select file containing a set of regions to call" help="Optionally provide a bgzip-compressed/tabix-indexed BED file containing the set of regions to call. No VCF output will be provided outside of these regions. The full genome will still be used to estimate statistics from the input (such as expected depth per chromosome). Only one BED file may be specified."/>
        <param argument="--rna" type="boolean" checked="false" truevalue="--rna" falsevalue="" label="Activate options for RNA-Seq input" help=""/>
        <param argument="--targeted" type="boolean" checked="false" truevalue="--targeted" falsevalue="" label="Activate options for other targeted input" help="Note in particular that this flag turns off high-depth filters."/>
        <param argument="--exome" type="boolean" checked="false" truevalue="--exome" falsevalue="" label="Activate options for exome input" help="Note in particular that this flag turns off high-depth filters."/>
    </xml>
    <xml name="input_output">
        <param name="type" type="select" label="Select output type">
            <option value="decompressed">Decompressed (vcf, bed)</option>
            <option value="compressed">Compressed (vcf.gz, bed.gz)</option>
        </param>
    </xml>
    <xml name="input_strelka">
        <param argument="maxIndelSize" name="maxIndelSize" type="integer" value="49" label="Set maximum reported indel size" help=""/>
    </xml>

    <!--
        Help
    -->

    <token name="@HELP_INPUT@">
*Sequencing Data*

The input sequencing reads are expected to come from a paired-end sequencing assay. Any input other than paired-end reads are ignored by default except to double-check for putative somatic variant evidence in the normal sample during somatic variant analysis. Read lengths above ~400 bases are not tested.

*Alignment Files*

All input sequencing reads should be mapped by an external tool and provided as input in `BAM &lt;https://samtools.github.io/hts-specs/SAMv1.pdf&gt;`_. or `CRAM &lt;https://samtools.github.io/hts-specs/CRAMv3.pdf&gt;`_ format.

The following limitations apply to the input BAM/CRAM alignment records:

- Alignments cannot contain the "=" character in the SEQ field.
- RG (read group) tags are ignored -- each alignment file must represent one sample.
- Alignments with basecall quality values greater than 70 will trigger a runtime error (these are not supported on the assumption that the high basecall quality indicates an offset error)

*VCF Files*

Input `VCF &lt;http://samtools.github.io/hts-specs/VCFv4.1.pdf&gt;`_ files are accepted for a number of roles as described below. All input VCF records are checked for compatibility with the given reference genome, in additional to role-specific checks described below. If any VCF record's REF field is not compatible with the reference genome a runtime error will be triggered. 'Compatible with the reference genome' means that each VCF record's REF base either (1) matches the corresponding reference genome base or the VCF record's REF base is 'N' or the reference genome base is any ambiguous IUPAC base code (all ambiguous base codes are converted to 'N' while importing the reference).
    </token>
    <token name="@HELP_STRELKA@">
Strelka2 is a fast and accurate small variant caller optimized for analysis of germline variation in small cohorts (Strelka Germline) and somatic variation in tumor/normal sample pairs (Strelka Somatic).

Strelka accepts input read mappings from BAM or CRAM files, and optionally candidate and/or forced-call alleles from VCF. It reports all small variant predictions in VCF 4.1 format. Germline variant reporting uses the gVCF conventions to represent both variant and reference call confidence. For best somatic indel performance, Strelka is designed to be run with the Manta structural variant and indel caller, which provides additional indel candidates up to a given maxiumum indel size (by default this is 49). By design, Manta and Strelka run together with default settings provide complete coverage over all indel sizes (in additional to all SVs and SNVs) for clinical somatic and germline analysis scenarios.
    </token>
    <token name="@HELP_REFERENCES@"><![CDATA[
More information are available on `github <https://github.com/Illumina/strelka>`_.
    ]]></token>
</macros>