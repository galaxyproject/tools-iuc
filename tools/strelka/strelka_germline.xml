<?xml version="1.0"?>
<tool id="strelka_germline" name="Strelka Germline" version="@TOOL_VERSION@+@GALAXY_VERSION@">
    <description>@DESCRIPTION@ for germline variation in small cohorts</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        ## initialize
        #for $i, $s in enumerate($bam)
            #if $s.is_of_type('bam')
                ln -s '$s' './input_sample_${i}.bam' &&               
                ln -s '$s.metadata.bam_index' './input_sample_${i}.bam.bai' &&
            #elif $s.is_of_type('cram')
                ln -s '$s' './input_sample_${i}.cram' &&               
                ln -s '$s.metadata.cram_index' './input_sample_${i}.cram.crai' &&
            #end if
        #end for
        #if $ap.ploidy
            ln -s '$ap.ploidy' './input_ploidy.vcf' &&
        #end if
        #if $ap.noCompress
            ln -s '$ap.noCompress' './input_nocompress.bed' &&
            ln -s '$ap.noCompress.bgzip' './input_nocompress.bed.gz' &&
            ln -s '$ap.noCompress.tabix_index' './input_nocompress.bed.gz.tbi' &&
        #end if
        @INIT@

        ## create workflow
        configureStrelkaGermlineWorkflow.py
            #for $i, $s in enumerate($bam)
                --bam './input_sample_${i}.${s.datatype.file_ext}'
            #end for
            #unless $ap.callContinuousVf == 'none'
                --callContinuousVf '$ap.callContinuousVf'
            #end unless
            #if $ap.ploidy
                --ploidy './input_ploidy.vcf'
            #end if
            #if $ap.noCompress
                --noCompress './input_nocompress.bed.gz'
            #end if
            $ap.rna 
            --disableSequenceErrorEstimation ## demo cause warnings
            @CREATE@

        ## run workflow
        @RUN@

        && ls ./results/results/variants/ -lisa

        ## decompress results
        #if $oo.type == "decompressed"
            && bgzip -d './results/results/variants/variants.vcf.gz'
            #for $i in range(1, len($bam)+1)
                && bgzip -d './results/results/variants/genome.S${i}.vcf.gz'
            #end for
        #end if

        && ls ./results/results/variants/ -lisa
    ]]></command>
    
    <configfiles>
        <configfile name="config_file">
## parser cannot handle indents
[StrelkaSomatic]
minMapq = $strelka.minMapq
@CONFIG@
        </configfile>
    </configfiles>

    <inputs>
        <param argument="--bam" type="data" format="bam,cram" multiple="true" label="Select sample file(s)" help=""/>
        <expand macro="input_required" ref="bam"/>

        <section name="ap" title="Advanced parameters" expanded="false">
            <param argument="--ploidy" type="data" format="vcf" optional="true" label="Select ploidy file" help="Provide ploidy file in VCF. The VCF should include one sample column per input sample labeled with the same sample names found in the input BAM/CRAM RG header sections. Ploidy should be provided in records using the FORMAT/CN field, which are interpreted to span the range [POS+1, INFO/END]. Any CN value besides 1 or 0 will be treated as 2. File must be tabix indexed."/>
            <param argument="--noCompress" type="data" format="bgzip" optional="true" label="Select file of regions where gVCF block compression is not allowed" help="Provide BED file of regions where gVCF block compression is not allowed. File must be bgzip-compressed/tabix-indexed."/>
            <param argument="--callContinuousVf" type="select" label="Select chromosome to call variants on" help="Call variants on CHROM without a ploidy prior assumption, issuing calls with continuous variant frequencies.">
                <option value="none" selected="true">None</option>
                <option value="Chr1">Chr1</option>
                <option value="Chr2">Chr2</option>
                <option value="Chr3">Chr3</option>
                <option value="Chr4">Chr4</option>
                <option value="Chr5">Chr5</option>
                <option value="Chr6">Chr6</option>
                <option value="Chr7">Chr7</option>
                <option value="Chr8">Chr8</option>
                <option value="Chr9">Chr9</option>
                <option value="Chr10">Chr10</option>
                <option value="Chr11">Chr11</option>
                <option value="Chr12">Chr12</option>
                <option value="Chr13">Chr13</option>
                <option value="Chr14">Chr14</option>
                <option value="Chr15">Chr15</option>
                <option value="Chr16">Chr16</option>
                <option value="Chr17">Chr17</option>
                <option value="Chr18">Chr18</option>
                <option value="Chr19">Chr19</option>
                <option value="Chr20">Chr20</option>
                <option value="Chr21">Chr21</option>
                <option value="Chr22">Chr22</option>
                <option value="ChrX">ChrX</option>
                <option value="ChrY">ChrY</option>
            </param>
            <param argument="--rna" type="boolean" checked="false" truevalue="--rna" falsevalue="" label="Activate options for RNA-Seq input" help=""/>
            <expand macro="input_advanced"/>
        </section>

        <section name="oo" title="Output options" expanded="false">
            <expand macro="input_output"/>
        </section>

        <section name="strelka" title="Strelka configuration" expanded="false">
            <param argument="minMapq" name="minMapq" type="integer" value="20" label="Set minMapq" help="Don't use reads with MAPQ less than this value for variant calling."/>
            <expand macro="input_strelka"/>
        </section>
    </inputs>
    <outputs>
        <data name="out_variants_decompressed" format="vcf" from_work_dir="results/results/variants/variants.vcf" label="${tool.name} on ${on_string}, Variants, vcf">
            <filter>'decompressed' == str(oo['type'])</filter>
        </data>
        <data name="out_variants_compressed" format="vcf_bgzip" from_work_dir="results/results/variants/variants.vcf.gz" label="${tool.name} on ${on_string}, Variants, vcf_bgzip">
            <filter>'compressed' == str(oo['type'])</filter>
        </data>

        <collection name="out_genome_decompressed" type="list" label="${tool.name} on ${on_string}: Genome, vcf">
            <discover_datasets pattern="genome\.(?P&lt;designation&gt;.+)\.vcf&#36;" format="vcf" directory="results/results/variants/"/>
            <filter>'decompressed' == str(oo['type'])</filter>
        </collection>

        <collection name="out_genome_compressed" type="list" label="${tool.name} on ${on_string}: Genome, vcf_bgzip">
            <discover_datasets pattern="genome\.(?P&lt;designation&gt;.+)\.vcf\.gz&#36;" format="vcf_bgzip" directory="results/results/variants/"/>
            <filter>'compressed' == str(oo['type'])</filter>
        </collection>
   </outputs>
    <tests>
        <!-- #1; input bam, decompressed -->
        <test expect_num_outputs="2">
            <param name="bam" value="sample1.bam,sample2.bam,sample3.bam"/>
            <conditional name="ref_cond">
                <param name="ref_sel" value="history"/>
                <param name="ref" value="hg98.fa" ftype="fasta"/>
            </conditional>
            <section name="oo">
                <param name="type" value="decompressed"/>
            </section>
            <output name="out_variants_decompressed">
                <assert_contents>
                    <has_n_lines n="62"/>
                    <has_line_matching expression="#CHROM&#009;POS&#009;.+"/>
                    <has_line_matching expression="demo20&#009;3664&#009;.+"/>
                </assert_contents>
            </output>
            <output_collection name="out_genome_decompressed" type="list" count="3">
                <element name="S1" ftype="vcf">
                    <assert_contents>
                        <has_n_lines n="95"/>
                        <has_line_matching expression="demo20&#009;4101&#009;.+"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- #2; input cram, compressed -->
        <test expect_num_outputs="2">
            <param name="bam" value="sample1.cram,sample2.cram"/>
            <conditional name="ref_cond">
                <param name="ref_sel" value="history"/>
                <param name="ref" value="hg98.fa" ftype="fasta"/>
            </conditional>
            <section name="oo">
                <param name="type" value="compressed"/>
            </section>
            <output name="out_variants_compressed" file="variants_test2.vcf.gz" compare="sim_size"/>
            <output_collection name="out_genome_compressed" type="list" count="2">
                <element name="S1" value="genome_test2.vcf.gz" compare="sim_size"/>
            </output_collection>
        </test>
        <!-- #3; input bam, no defaults -->
        <test expect_num_outputs="2">
            <param name="bam" value="sample1.cram,sample2.cram"/>
            <conditional name="ref_cond">
                <param name="ref_sel" value="history"/>
                <param name="ref" value="hg98.fa" ftype="fasta"/>
            </conditional>
            <section name="oo">
                <param name="type" value="decompressed"/>
            </section>
            <section name="ap">
                <param name="callContinuousVf" value="Chr1"/>
                <param name="rna" value="true"/>
                <param name="rna" value="true"/>
                <param name="targeted" value="true"/>
                <param name="exome" value="true"/>
            </section>
            <section name="strelka">
                <param name="minMapq" value="21"/>
                <param name="maxIndelSize" value="51"/>
            </section>
            <output name="out_variants_decompressed">
                <assert_contents>
                    <has_n_lines n="81"/>
                    <has_line_matching expression="#CHROM&#009;POS&#009;.+"/>
                    <has_line_matching expression="demo20&#009;3664&#009;.+"/>
                </assert_contents>
            </output>
            <output_collection name="out_genome_decompressed" type="list" count="2">
                <element name="S1" ftype="vcf">
                    <assert_contents>
                        <has_n_lines n="219"/>
                        <has_line_matching expression="demo20&#009;4101&#009;.+"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@HELP_STRELKA@

The germline caller employs an efficient tiered haplotype model to improve accuracy and provide read-backed phasing, adaptively selecting between assembly and a faster alignment-based haplotyping approach at each variant locus. The germline caller also analyzes input sequencing data using a mixture-model indel error estimation method to improve robustness to indel noise.

**Input**

@HELP_INPUT@

**Output**

*Variants*

This describes all potential variant loci across all samples. Note this file includes non-variant loci if they have a non-trivial level of variant evidence or contain one or more alleles for which genotyping has been forced. Please see the multi-sample variants VCF section below for additional details on interpreting this file.

*Genome*

This is the genome VCF output for sample N, which includes both variant records and compressed non-variant blocks. The sample index, N is 1-indexed and corresponds to the input order of alignment files on the configuration command-line.

.. class:: infomark

**References**

@HELP_REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>