<tool id="stress-ng" name="stress-ng" version="@VERSION@+@GALAXY_VERSION@" profile="20.01" license="GPL-2.0-or-later" >
    <description>stress test a computer system in various selectable ways</description>
    <macros>
        <token name="@GALAXY_VERSION@">0</token>
        <token name="@VERSION@">0.12.02</token>
        <macro name="default_ipv4" >
            <option value="ipv4" />
            <option value="ipv6" />
            <yield />
        </macro>
        <macro name="sanitize_options" >
            <sanitizer>
                <valid initial="string.letters,string.digits" >
                    <add value="," />
                </valid>
            </sanitizer>
        </macro>
        <macro name="sanitize_filesize" >
            <sanitizer>
                <valid initial="string.letters,string.digits" />
            </sanitizer>
        </macro>
        <macro name="sanitize_function" >
            <sanitizer>
                <valid initial="string.letters" >
                    <add value="_" />
                    <add value="-" />
                    <add value="(" />
                    <add value=")" />
                </valid>
            </sanitizer>
        </macro>
        <macro name="default_method_all" >
            <option value="all" />
            <yield />
        </macro>
        <macro name="sanitize_filename" >
            <sanitizer>
                <valid initial="string.letters,string.digits" />
            </sanitizer>
        </macro>
    </macros>
    <requirements>
        <requirement type="package" version="@VERSION@">stress-ng</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
stress-ng

## all text, select, integer
#if ${general.all}# --all '${general.all}' #end if
#if ${general.backoff}# --backoff '${general.backoff}' #end if
#if ${general.class}# --class '${general.class}' #end if
#if ${general.ionice-class}# --ionice-class '${general.ionice-class}' #end if
#if ${general.ionice-level}# --ionice-level '${general.ionice-level}' #end if
#if ${general.random}# --random '${general.random}' #end if
#if ${general.sched}# --sched '${general.sched}' #end if
#if ${general.sched-prio}# --sched-prio '${general.sched-prio}' #end if
#if ${general.sched-period}# --sched-period '${general.sched-period}' #end if
#if ${general.sched-runtime}# --sched-runtime '${general.sched-runtime}' #end if
#if ${general.sched-deadline}# --sched-deadline '${general.sched-deadline}' #end if
#if ${general.sequential}# --sequential '${general.sequential}' #end if
#if ${general.timeout}# --timeout '${general.timeout}' #end if
#if ${stressor.access}# --access '${stressor.access}' #end if
#if ${stressor.access-ops}# --access-ops '${stressor.access-ops}' #end if
#if ${stressor.af-alg}# --af-alg '${stressor.af-alg}' #end if
#if ${stressor.af-alg-ops}# --af-alg-ops '${stressor.af-alg-ops}' #end if
#if ${stressor.affinity}# --affinity '${stressor.affinity}' #end if
#if ${stressor.affinity-ops}# --affinity-ops '${stressor.affinity-ops}' #end if
#if ${stressor.aio}# --aio '${stressor.aio}' #end if
#if ${stressor.aio-ops}# --aio-ops '${stressor.aio-ops}' #end if
#if ${stressor.aio-requests}# --aio-requests '${stressor.aio-requests}' #end if
#if ${stressor.aiol}# --aiol '${stressor.aiol}' #end if
#if ${stressor.aiol-ops}# --aiol-ops '${stressor.aiol-ops}' #end if
#if ${stressor.aiol-requests}# --aiol-requests '${stressor.aiol-requests}' #end if
#if ${stressor.apparmor-ops}# --apparmor-ops '${stressor.apparmor-ops}' #end if
#if ${stressor.bad-altstack}# --bad-altstack '${stressor.bad-altstack}' #end if
#if ${stressor.bad-altstack-ops}# --bad-altstack-ops '${stressor.bad-altstack-ops}' #end if
#if ${stressor.bad-ioctl}# --bad-ioctl '${stressor.bad-ioctl}' #end if
#if ${stressor.bigheap}# --bigheap '${stressor.bigheap}' #end if
#if ${stressor.bigheap-ops}# --bigheap-ops '${stressor.bigheap-ops}' #end if
#if ${stressor.bigheap-growth}# --bigheap-growth '${stressor.bigheap-growth}' #end if
#if ${stressor.bind-mount}# --bind-mount '${stressor.bind-mount}' #end if
#if ${stressor.bind-mount-ops}# --bind-mount-ops '${stressor.bind-mount-ops}' #end if
#if ${stressor.binderfs}# --binderfs '${stressor.binderfs}' #end if
#if ${stressor.binderfs-ops}# --binderfs-ops '${stressor.binderfs-ops}' #end if
#if ${stressor.branch}# --branch '${stressor.branch}' #end if
#if ${stressor.branch-ops}# --branch-ops '${stressor.branch-ops}' #end if
#if ${stressor.brk}# --brk '${stressor.brk}' #end if
#if ${stressor.brk-ops}# --brk-ops '${stressor.brk-ops}' #end if
#if ${stressor.bsearch}# --bsearch '${stressor.bsearch}' #end if
#if ${stressor.bsearch-ops}# --bsearch-ops '${stressor.bsearch-ops}' #end if
#if ${stressor.bsearch-size}# --bsearch-size '${stressor.bsearch-size}' #end if
#if ${stressor.cache}# --cache '${stressor.cache}' #end if
#if ${stressor.cache-ops}# --cache-ops '${stressor.cache-ops}' #end if
#if ${stressor.cache-level}# --cache-level '${stressor.cache-level}' #end if
#if ${stressor.cache-ways}# --cache-ways '${stressor.cache-ways}' #end if
#if ${stressor.cap}# --cap '${stressor.cap}' #end if
#if ${stressor.cap-ops}# --cap-ops '${stressor.cap-ops}' #end if
#if ${stressor.chattr}# --chattr '${stressor.chattr}' #end if
#if ${stressor.chattr-ops}# --chattr-ops '${stressor.chattr-ops}' #end if
#if ${stressor.chdir}# --chdir '${stressor.chdir}' #end if
#if ${stressor.chdir-ops}# --chdir-ops '${stressor.chdir-ops}' #end if
#if ${stressor.chdir-dirs}# --chdir-dirs '${stressor.chdir-dirs}' #end if
#if ${stressor.chmod}# --chmod '${stressor.chmod}' #end if
#if ${stressor.chmod-ops}# --chmod-ops '${stressor.chmod-ops}' #end if
#if ${stressor.chown}# --chown '${stressor.chown}' #end if
#if ${stressor.chown-ops}# --chown-ops '${stressor.chown-ops}' #end if
#if ${stressor.chroot}# --chroot '${stressor.chroot}' #end if
#if ${stressor.chroot-ops}# --chroot-ops '${stressor.chroot-ops}' #end if
#if ${stressor.clock}# --clock '${stressor.clock}' #end if
#if ${stressor.clock-ops}# --clock-ops '${stressor.clock-ops}' #end if
#if ${stressor.clone}# --clone '${stressor.clone}' #end if
#if ${stressor.clone-ops}# --clone-ops '${stressor.clone-ops}' #end if
#if ${stressor.clone-max}# --clone-max '${stressor.clone-max}' #end if
#if ${stressor.close}# --close '${stressor.close}' #end if
#if ${stressor.close-ops}# --close-ops '${stressor.close-ops}' #end if
#if ${stressor.context}# --context '${stressor.context}' #end if
#if ${stressor.context-ops}# --context-ops '${stressor.context-ops}' #end if
#if ${stressor.copy-file}# --copy-file '${stressor.copy-file}' #end if
#if ${stressor.copy-file-ops}# --copy-file-ops '${stressor.copy-file-ops}' #end if
#if ${stressor.copy-file-bytes}# --copy-file-bytes '${stressor.copy-file-bytes}' #end if
#if ${stressor.cpu}# --cpu '${stressor.cpu}' #end if
#if ${stressor.cpu-ops}# --cpu-ops '${stressor.cpu-ops}' #end if
#if ${stressor.cpu-load}# --cpu-load '${stressor.cpu-load}' #end if
#if ${stressor.cpu-load-slice}# --cpu-load-slice '${stressor.cpu-load-slice}' #end if
#if ${stressor.cpu-method}# --cpu-method '${stressor.cpu-method}' #end if
#if ${stressor.cpu-online}# --cpu-online '${stressor.cpu-online}' #end if
#if ${stressor.cpu-online-ops}# --cpu-online-ops '${stressor.cpu-online-ops}' #end if
#if ${stressor.crypt}# --crypt '${stressor.crypt}' #end if
#if ${stressor.crypt-ops}# --crypt-ops '${stressor.crypt-ops}' #end if
#if ${stressor.cyclic}# --cyclic '${stressor.cyclic}' #end if
#if ${stressor.cyclic-ops}# --cyclic-ops '${stressor.cyclic-ops}' #end if
#if ${stressor.cyclic-method}# --cyclic-method '${stressor.cyclic-method}' #end if
#if ${stressor.cyclic-dist}# --cyclic-dist '${stressor.cyclic-dist}' #end if
#if ${stressor.cyclic-policy}# --cyclic-policy '${stressor.cyclic-policy}' #end if
#if ${stressor.cyclic-prio}# --cyclic-prio '${stressor.cyclic-prio}' #end if
#if ${stressor.cyclic-sleep}# --cyclic-sleep '${stressor.cyclic-sleep}' #end if
#if ${stressor.daemon}# --daemon '${stressor.daemon}' #end if
#if ${stressor.daemon-ops}# --daemon-ops '${stressor.daemon-ops}' #end if
#if ${stressor.dccp}# --dccp '${stressor.dccp}' #end if
#if ${stressor.dccp-domain}# --dccp-domain '${stressor.dccp-domain}' #end if
#if ${stressor.dccp-ops}# --dccp-ops '${stressor.dccp-ops}' #end if
#if ${stressor.dccp-opts}# --dccp-opts '${stressor.dccp-opts}' #end if
#if ${stressor.dccp-port}# --dccp-port '${stressor.dccp-port}' #end if
#if ${stressor.dentry}# --dentry '${stressor.dentry}' #end if
#if ${stressor.dentry-ops}# --dentry-ops '${stressor.dentry-ops}' #end if
#if ${stressor.dentry-order}# --dentry-order '${stressor.dentry-order}' #end if
#if ${stressor.dentries}# --dentries '${stressor.dentries}' #end if
#if ${stressor.dev}# --dev '${stressor.dev}' #end if
#if ${stressor.dev-ops}# --dev-ops '${stressor.dev-ops}' #end if
#if ${stressor.dev-shm}# --dev-shm '${stressor.dev-shm}' #end if
#if ${stressor.dev-shm-ops}# --dev-shm-ops '${stressor.dev-shm-ops}' #end if
#if ${stressor.dir}# --dir '${stressor.dir}' #end if
#if ${stressor.dir-ops}# --dir-ops '${stressor.dir-ops}' #end if
#if ${stressor.dir-dirs}# --dir-dirs '${stressor.dir-dirs}' #end if
#if ${stressor.dirdeep}# --dirdeep '${stressor.dirdeep}' #end if
#if ${stressor.dirdeep-ops}# --dirdeep-ops '${stressor.dirdeep-ops}' #end if
#if ${stressor.dirdeep-dirs}# --dirdeep-dirs '${stressor.dirdeep-dirs}' #end if
#if ${stressor.dirdeep-inodes}# --dirdeep-inodes '${stressor.dirdeep-inodes}' #end if
#if ${stressor.dnotify}# --dnotify '${stressor.dnotify}' #end if
#if ${stressor.dnotify-ops}# --dnotify-ops '${stressor.dnotify-ops}' #end if
#if ${stressor.dup}# --dup '${stressor.dup}' #end if
#if ${stressor.dup-ops}# --dup-ops '${stressor.dup-ops}' #end if
#if ${stressor.dynlib}# --dynlib '${stressor.dynlib}' #end if
#if ${stressor.dynlib-ops}# --dynlib-ops '${stressor.dynlib-ops}' #end if
#if ${stressor.efivar}# --efivar '${stressor.efivar}' #end if
#if ${stressor.efivar-ops}# --efivar-ops '${stressor.efivar-ops}' #end if
#if ${stressor.enosys}# --enosys '${stressor.enosys}' #end if
#if ${stressor.enosys-ops}# --enosys-ops '${stressor.enosys-ops}' #end if
#if ${stressor.env}# --env '${stressor.env}' #end if
#if ${stressor.env-ops}# --env-ops '${stressor.env-ops}' #end if
#if ${stressor.epoll}# --epoll '${stressor.epoll}' #end if
#if ${stressor.epoll-ops}# --epoll-ops '${stressor.epoll-ops}' #end if
#if ${stressor.epoll-port}# --epoll-port '${stressor.epoll-port}' #end if
#if ${stressor.epoll-domain}# --epoll-domain '${stressor.epoll-domain}' #end if
#if ${stressor.eventfd}# --eventfd '${stressor.eventfd}' #end if
#if ${stressor.eventfd-ops}# --eventfd-ops '${stressor.eventfd-ops}' #end if
#if ${stressor.exec}# --exec '${stressor.exec}' #end if
#if ${stressor.exec-ops}# --exec-ops '${stressor.exec-ops}' #end if
#if ${stressor.exec-max}# --exec-max '${stressor.exec-max}' #end if
#if ${stressor.fallocate}# --fallocate '${stressor.fallocate}' #end if
#if ${stressor.fallocate-ops}# --fallocate-ops '${stressor.fallocate-ops}' #end if
#if ${stressor.fallocate-bytes}# --fallocate-bytes '${stressor.fallocate-bytes}' #end if
#if ${stressor.fanotify}# --fanotify '${stressor.fanotify}' #end if
#if ${stressor.fanotify-ops}# --fanotify-ops '${stressor.fanotify-ops}' #end if
#if ${stressor.fault}# --fault '${stressor.fault}' #end if
#if ${stressor.fault-ops}# --fault-ops '${stressor.fault-ops}' #end if
#if ${stressor.fcntl}# --fcntl '${stressor.fcntl}' #end if
#if ${stressor.fcntl-ops}# --fcntl-ops '${stressor.fcntl-ops}' #end if
#if ${stressor.fiemap}# --fiemap '${stressor.fiemap}' #end if
#if ${stressor.fiemap-ops}# --fiemap-ops '${stressor.fiemap-ops}' #end if
#if ${stressor.fiemap-bytes}# --fiemap-bytes '${stressor.fiemap-bytes}' #end if
#if ${stressor.fifo}# --fifo '${stressor.fifo}' #end if
#if ${stressor.fifo-ops}# --fifo-ops '${stressor.fifo-ops}' #end if
#if ${stressor.fifo-readers}# --fifo-readers '${stressor.fifo-readers}' #end if
#if ${stressor.file-ioctl}# --file-ioctl '${stressor.file-ioctl}' #end if
#if ${stressor.file-ioctl-ops}# --file-ioctl-ops '${stressor.file-ioctl-ops}' #end if
#if ${stressor.filename}# --filename '${stressor.filename}' #end if
#if ${stressor.filename-ops}# --filename-ops '${stressor.filename-ops}' #end if
#if ${stressor.filename-opts}# --filename-opts '${stressor.filename-opts}' #end if
#if ${stressor.flock}# --flock '${stressor.flock}' #end if
#if ${stressor.flock-ops}# --flock-ops '${stressor.flock-ops}' #end if
#if ${stressor.fork}# --fork '${stressor.fork}' #end if
#if ${stressor.fork-ops}# --fork-ops '${stressor.fork-ops}' #end if
#if ${stressor.fork-max}# --fork-max '${stressor.fork-max}' #end if
#if ${stressor.fp-error}# --fp-error '${stressor.fp-error}' #end if
#if ${stressor.fp-error-ops}# --fp-error-ops '${stressor.fp-error-ops}' #end if
#if ${stressor.fstat}# --fstat '${stressor.fstat}' #end if
#if ${stressor.fstat-ops}# --fstat-ops '${stressor.fstat-ops}' #end if
#if ${stressor.fstat-dir}# --fstat-dir '${stressor.fstat-dir}' #end if
#if ${stressor.full}# --full '${stressor.full}' #end if
#if ${stressor.full-ops}# --full-ops '${stressor.full-ops}' #end if
#if ${stressor.funccall}# --funccall '${stressor.funccall}' #end if
#if ${stressor.funccall-ops}# --funccall-ops '${stressor.funccall-ops}' #end if
#if ${stressor.funccall-method}# --funccall-method '${stressor.funccall-method}' #end if
#if ${stressor.funcret}# --funcret '${stressor.funcret}' #end if
#if ${stressor.funcret-ops}# --funcret-ops '${stressor.funcret-ops}' #end if
#if ${stressor.funcret-method}# --funcret-method '${stressor.funcret-method}' #end if
#if ${stressor.futex}# --futex '${stressor.futex}' #end if
#if ${stressor.futex-ops}# --futex-ops '${stressor.futex-ops}' #end if
#if ${stressor.get}# --get '${stressor.get}' #end if
#if ${stressor.get-ops}# --get-ops '${stressor.get-ops}' #end if
#if ${stressor.getdent}# --getdent '${stressor.getdent}' #end if
#if ${stressor.getdent-ops}# --getdent-ops '${stressor.getdent-ops}' #end if
#if ${stressor.getrandom}# --getrandom '${stressor.getrandom}' #end if
#if ${stressor.getrandom-ops}# --getrandom-ops '${stressor.getrandom-ops}' #end if
#if ${stressor.handle}# --handle '${stressor.handle}' #end if
#if ${stressor.handle-ops}# --handle-ops '${stressor.handle-ops}' #end if
#if ${stressor.hdd}# --hdd '${stressor.hdd}' #end if
#if ${stressor.hdd-ops}# --hdd-ops '${stressor.hdd-ops}' #end if
#if ${stressor.hdd-bytes}# --hdd-bytes '${stressor.hdd-bytes}' #end if
#if ${stressor.hdd-opts}# --hdd-opts '${stressor.hdd-opts}' #end if
#if ${stressor.hdd-write-size}# --hdd-write-size '${stressor.hdd-write-size}' #end if
#if ${stressor.heapsort}# --heapsort '${stressor.heapsort}' #end if
#if ${stressor.heapsort-ops}# --heapsort-ops '${stressor.heapsort-ops}' #end if
#if ${stressor.heapsort-size}# --heapsort-size '${stressor.heapsort-size}' #end if
#if ${stressor.hrtimers}# --hrtimers '${stressor.hrtimers}' #end if
#if ${stressor.hrtimers-ops}# --hrtimers-ops '${stressor.hrtimers-ops}' #end if
#if ${stressor.hsearch}# --hsearch '${stressor.hsearch}' #end if
#if ${stressor.hsearch-ops}# --hsearch-ops '${stressor.hsearch-ops}' #end if
#if ${stressor.hsearch-size}# --hsearch-size '${stressor.hsearch-size}' #end if
#if ${stressor.icache}# --icache '${stressor.icache}' #end if
#if ${stressor.icache-ops}# --icache-ops '${stressor.icache-ops}' #end if
#if ${stressor.icmp-flood}# --icmp-flood '${stressor.icmp-flood}' #end if
#if ${stressor.icmp-flood-ops}# --icmp-flood-ops '${stressor.icmp-flood-ops}' #end if
#if ${stressor.idle-page}# --idle-page '${stressor.idle-page}' #end if
#if ${stressor.idle-page-ops}# --idle-page-ops '${stressor.idle-page-ops}' #end if
#if ${stressor.inode-flags}# --inode-flags '${stressor.inode-flags}' #end if
#if ${stressor.inode-flags-ops}# --inode-flags-ops '${stressor.inode-flags-ops}' #end if
#if ${stressor.inotify}# --inotify '${stressor.inotify}' #end if
#if ${stressor.inotify-ops}# --inotify-ops '${stressor.inotify-ops}' #end if
#if ${stressor.io}# --io '${stressor.io}' #end if
#if ${stressor.io-ops}# --io-ops '${stressor.io-ops}' #end if
#if ${stressor.iomix}# --iomix '${stressor.iomix}' #end if
#if ${stressor.iomix-bytes}# --iomix-bytes '${stressor.iomix-bytes}' #end if
#if ${stressor.iomix-ops}# --iomix-ops '${stressor.iomix-ops}' #end if
#if ${stressor.ioport}# --ioport '${stressor.ioport}' #end if
#if ${stressor.ioport-ops}# --ioport-ops '${stressor.ioport-ops}' #end if
#if ${stressor.ioprio}# --ioprio '${stressor.ioprio}' #end if
#if ${stressor.ioprio-ops}# --ioprio-ops '${stressor.ioprio-ops}' #end if
#if ${stressor.io-uring}# --io-uring '${stressor.io-uring}' #end if
#if ${stressor.io-uring-ops}# --io-uring-ops '${stressor.io-uring-ops}' #end if
#if ${stressor.ipsec-mb}# --ipsec-mb '${stressor.ipsec-mb}' #end if
#if ${stressor.ipsec-mb-ops}# --ipsec-mb-ops '${stressor.ipsec-mb-ops}' #end if
#if ${stressor.ipsec-mb-feature}# --ipsec-mb-feature '${stressor.ipsec-mb-feature}' #end if
#if ${stressor.itimer}# --itimer '${stressor.itimer}' #end if
#if ${stressor.itimer-ops}# --itimer-ops '${stressor.itimer-ops}' #end if
#if ${stressor.judy}# --judy '${stressor.judy}' #end if
#if ${stressor.judy-ops}# --judy-ops '${stressor.judy-ops}' #end if
#if ${stressor.judy-size}# --judy-size '${stressor.judy-size}' #end if
#if ${stressor.kcmp}# --kcmp '${stressor.kcmp}' #end if
#if ${stressor.kcmp-ops}# --kcmp-ops '${stressor.kcmp-ops}' #end if
#if ${stressor.key}# --key '${stressor.key}' #end if
#if ${stressor.key-ops}# --key-ops '${stressor.key-ops}' #end if
#if ${stressor.kill}# --kill '${stressor.kill}' #end if
#if ${stressor.kill-ops}# --kill-ops '${stressor.kill-ops}' #end if
#if ${stressor.klog}# --klog '${stressor.klog}' #end if
#if ${stressor.klog-ops}# --klog-ops '${stressor.klog-ops}' #end if
#if ${stressor.lease}# --lease '${stressor.lease}' #end if
#if ${stressor.lease-ops}# --lease-ops '${stressor.lease-ops}' #end if
#if ${stressor.lease-breakers}# --lease-breakers '${stressor.lease-breakers}' #end if
#if ${stressor.link}# --link '${stressor.link}' #end if
#if ${stressor.link-ops}# --link-ops '${stressor.link-ops}' #end if
#if ${stressor.locka}# --locka '${stressor.locka}' #end if
#if ${stressor.locka-ops}# --locka-ops '${stressor.locka-ops}' #end if
#if ${stressor.lockbus}# --lockbus '${stressor.lockbus}' #end if
#if ${stressor.lockbus-ops}# --lockbus-ops '${stressor.lockbus-ops}' #end if
#if ${stressor.lockf}# --lockf '${stressor.lockf}' #end if
#if ${stressor.lockf-ops}# --lockf-ops '${stressor.lockf-ops}' #end if
#if ${stressor.lockofd}# --lockofd '${stressor.lockofd}' #end if
#if ${stressor.lockofd-ops}# --lockofd-ops '${stressor.lockofd-ops}' #end if
#if ${stressor.longjmp}# --longjmp '${stressor.longjmp}' #end if
#if ${stressor.longjmp-ops}# --longjmp-ops '${stressor.longjmp-ops}' #end if
#if ${stressor.loop}# --loop '${stressor.loop}' #end if
#if ${stressor.loop-ops}# --loop-ops '${stressor.loop-ops}' #end if
#if ${stressor.lsearch}# --lsearch '${stressor.lsearch}' #end if
#if ${stressor.lsearch-ops}# --lsearch-ops '${stressor.lsearch-ops}' #end if
#if ${stressor.lsearch-size}# --lsearch-size '${stressor.lsearch-size}' #end if
#if ${stressor.madvise}# --madvise '${stressor.madvise}' #end if
#if ${stressor.madvise-ops}# --madvise-ops '${stressor.madvise-ops}' #end if
#if ${stressor.malloc}# --malloc '${stressor.malloc}' #end if
#if ${stressor.malloc-bytes}# --malloc-bytes '${stressor.malloc-bytes}' #end if
#if ${stressor.malloc-max}# --malloc-max '${stressor.malloc-max}' #end if
#if ${stressor.malloc-ops}# --malloc-ops '${stressor.malloc-ops}' #end if
#if ${stressor.malloc-thresh}# --malloc-thresh '${stressor.malloc-thresh}' #end if
#if ${stressor.matrix}# --matrix '${stressor.matrix}' #end if
#if ${stressor.matrix-ops}# --matrix-ops '${stressor.matrix-ops}' #end if
#if ${stressor.matrix-method}# --matrix-method '${stressor.matrix-method}' #end if
#if ${stressor.matrix-size}# --matrix-size '${stressor.matrix-size}' #end if
#if ${stressor.matrix-3d}# --matrix-3d '${stressor.matrix-3d}' #end if
#if ${stressor.matrix-3d-ops}# --matrix-3d-ops '${stressor.matrix-3d-ops}' #end if
#if ${stressor.matrix-3d-method}# --matrix-3d-method '${stressor.matrix-3d-method}' #end if
#if ${stressor.matrix-3d-size}# --matrix-3d-size '${stressor.matrix-3d-size}' #end if
#if ${stressor.mcontend}# --mcontend '${stressor.mcontend}' #end if
#if ${stressor.mcontend-ops}# --mcontend-ops '${stressor.mcontend-ops}' #end if
#if ${stressor.membarrier}# --membarrier '${stressor.membarrier}' #end if
#if ${stressor.membarrier-ops}# --membarrier-ops '${stressor.membarrier-ops}' #end if
#if ${stressor.memcpy}# --memcpy '${stressor.memcpy}' #end if
#if ${stressor.memcpy-ops}# --memcpy-ops '${stressor.memcpy-ops}' #end if
#if ${stressor.memcpy-method}# --memcpy-method '${stressor.memcpy-method}' #end if
#if ${stressor.memfd}# --memfd '${stressor.memfd}' #end if
#if ${stressor.memfd-bytes}# --memfd-bytes '${stressor.memfd-bytes}' #end if
#if ${stressor.memfd-fds}# --memfd-fds '${stressor.memfd-fds}' #end if
#if ${stressor.memfd-ops}# --memfd-ops '${stressor.memfd-ops}' #end if
#if ${stressor.memhotplug}# --memhotplug '${stressor.memhotplug}' #end if
#if ${stressor.memhotplug-ops}# --memhotplug-ops '${stressor.memhotplug-ops}' #end if
#if ${stressor.memrate}# --memrate '${stressor.memrate}' #end if
#if ${stressor.memrate-ops}# --memrate-ops '${stressor.memrate-ops}' #end if
#if ${stressor.memrate-bytes}# --memrate-bytes '${stressor.memrate-bytes}' #end if
#if ${stressor.memrate-rd-mbs}# --memrate-rd-mbs '${stressor.memrate-rd-mbs}' #end if
#if ${stressor.memrate-wr-mbs}# --memrate-wr-mbs '${stressor.memrate-wr-mbs}' #end if
#if ${stressor.memthrash}# --memthrash '${stressor.memthrash}' #end if
#if ${stressor.memthrash-ops}# --memthrash-ops '${stressor.memthrash-ops}' #end if
#if ${stressor.memthrash-method}# --memthrash-method '${stressor.memthrash-method}' #end if
#if ${stressor.mergesort}# --mergesort '${stressor.mergesort}' #end if
#if ${stressor.mergesort-ops}# --mergesort-ops '${stressor.mergesort-ops}' #end if
#if ${stressor.mergesort-size}# --mergesort-size '${stressor.mergesort-size}' #end if
#if ${stressor.mincore}# --mincore '${stressor.mincore}' #end if
#if ${stressor.mincore-ops}# --mincore-ops '${stressor.mincore-ops}' #end if
#if ${stressor.mknod}# --mknod '${stressor.mknod}' #end if
#if ${stressor.mknod-ops}# --mknod-ops '${stressor.mknod-ops}' #end if
#if ${stressor.mlock}# --mlock '${stressor.mlock}' #end if
#if ${stressor.mlock-ops}# --mlock-ops '${stressor.mlock-ops}' #end if
#if ${stressor.mlockmany}# --mlockmany '${stressor.mlockmany}' #end if
#if ${stressor.mlockmany-ops}# --mlockmany-ops '${stressor.mlockmany-ops}' #end if
#if ${stressor.mmap}# --mmap '${stressor.mmap}' #end if
#if ${stressor.mmap-ops}# --mmap-ops '${stressor.mmap-ops}' #end if
#if ${stressor.mmap-bytes}# --mmap-bytes '${stressor.mmap-bytes}' #end if
#if ${stressor.mmapaddr}# --mmapaddr '${stressor.mmapaddr}' #end if
#if ${stressor.mmapaddr-ops}# --mmapaddr-ops '${stressor.mmapaddr-ops}' #end if
#if ${stressor.mmapfixed}# --mmapfixed '${stressor.mmapfixed}' #end if
#if ${stressor.mmapfixed-ops}# --mmapfixed-ops '${stressor.mmapfixed-ops}' #end if
#if ${stressor.mmapfork}# --mmapfork '${stressor.mmapfork}' #end if
#if ${stressor.mmapfork-ops}# --mmapfork-ops '${stressor.mmapfork-ops}' #end if
#if ${stressor.mmapmany}# --mmapmany '${stressor.mmapmany}' #end if
#if ${stressor.mmapmany-ops}# --mmapmany-ops '${stressor.mmapmany-ops}' #end if
#if ${stressor.mq}# --mq '${stressor.mq}' #end if
#if ${stressor.mq-ops}# --mq-ops '${stressor.mq-ops}' #end if
#if ${stressor.mq-size}# --mq-size '${stressor.mq-size}' #end if
#if ${stressor.mremap}# --mremap '${stressor.mremap}' #end if
#if ${stressor.mremap-ops}# --mremap-ops '${stressor.mremap-ops}' #end if
#if ${stressor.mremap-bytes}# --mremap-bytes '${stressor.mremap-bytes}' #end if
#if ${stressor.msg}# --msg '${stressor.msg}' #end if
#if ${stressor.msg-ops}# --msg-ops '${stressor.msg-ops}' #end if
#if ${stressor.msg-types}# --msg-types '${stressor.msg-types}' #end if
#if ${stressor.msync}# --msync '${stressor.msync}' #end if
#if ${stressor.msync-ops}# --msync-ops '${stressor.msync-ops}' #end if
#if ${stressor.msync-bytes}# --msync-bytes '${stressor.msync-bytes}' #end if
#if ${stressor.nanosleep}# --nanosleep '${stressor.nanosleep}' #end if
#if ${stressor.nanosleep-ops}# --nanosleep-ops '${stressor.nanosleep-ops}' #end if
#if ${stressor.netdev}# --netdev '${stressor.netdev}' #end if
#if ${stressor.netdev-ops}# --netdev-ops '${stressor.netdev-ops}' #end if
#if ${stressor.netlink-proc}# --netlink-proc '${stressor.netlink-proc}' #end if
#if ${stressor.netlink-proc-ops}# --netlink-proc-ops '${stressor.netlink-proc-ops}' #end if
#if ${stressor.netlink-task}# --netlink-task '${stressor.netlink-task}' #end if
#if ${stressor.netlink-task-ops}# --netlink-task-ops '${stressor.netlink-task-ops}' #end if
#if ${stressor.nice}# --nice '${stressor.nice}' #end if
#if ${stressor.nice-ops}# --nice-ops '${stressor.nice-ops}' #end if
#if ${stressor.nop}# --nop '${stressor.nop}' #end if
#if ${stressor.nop-ops}# --nop-ops '${stressor.nop-ops}' #end if
#if ${stressor.null}# --null '${stressor.null}' #end if
#if ${stressor.null-ops}# --null-ops '${stressor.null-ops}' #end if
#if ${stressor.numa}# --numa '${stressor.numa}' #end if
#if ${stressor.numa-ops}# --numa-ops '${stressor.numa-ops}' #end if
#if ${stressor.oom-pipe}# --oom-pipe '${stressor.oom-pipe}' #end if
#if ${stressor.oom-pipe-ops}# --oom-pipe-ops '${stressor.oom-pipe-ops}' #end if
#if ${stressor.opcode}# --opcode '${stressor.opcode}' #end if
#if ${stressor.opcode-ops}# --opcode-ops '${stressor.opcode-ops}' #end if
#if ${stressor.opcode-method}# --opcode-method '${stressor.opcode-method}' #end if
#if ${stressor.open}# --open '${stressor.open}' #end if
#if ${stressor.open-ops}# --open-ops '${stressor.open-ops}' #end if
#if ${stressor.personality}# --personality '${stressor.personality}' #end if
#if ${stressor.personality-ops}# --personality-ops '${stressor.personality-ops}' #end if
#if ${stressor.physpage}# --physpage '${stressor.physpage}' #end if
#if ${stressor.physpage-ops}# --physpage-ops '${stressor.physpage-ops}' #end if
#if ${stressor.pidfd}# --pidfd '${stressor.pidfd}' #end if
#if ${stressor.pidfd-ops}# --pidfd-ops '${stressor.pidfd-ops}' #end if
#if ${stressor.ping-sock}# --ping-sock '${stressor.ping-sock}' #end if
#if ${stressor.ping-sock-ops}# --ping-sock-ops '${stressor.ping-sock-ops}' #end if
#if ${stressor.pipe}# --pipe '${stressor.pipe}' #end if
#if ${stressor.pipe-ops}# --pipe-ops '${stressor.pipe-ops}' #end if
#if ${stressor.pipe-data-size}# --pipe-data-size '${stressor.pipe-data-size}' #end if
#if ${stressor.pipe-size}# --pipe-size '${stressor.pipe-size}' #end if
#if ${stressor.pipeherd}# --pipeherd '${stressor.pipeherd}' #end if
#if ${stressor.pipeherd-ops}# --pipeherd-ops '${stressor.pipeherd-ops}' #end if
#if ${stressor.pkey}# --pkey '${stressor.pkey}' #end if
#if ${stressor.pkey-ops}# --pkey-ops '${stressor.pkey-ops}' #end if
#if ${stressor.poll}# --poll '${stressor.poll}' #end if
#if ${stressor.poll-ops}# --poll-ops '${stressor.poll-ops}' #end if
#if ${stressor.procfs}# --procfs '${stressor.procfs}' #end if
#if ${stressor.procfs-ops}# --procfs-ops '${stressor.procfs-ops}' #end if
#if ${stressor.procfs}# --procfs '${stressor.procfs}' #end if
#if ${stressor.procfs-ops}# --procfs-ops '${stressor.procfs-ops}' #end if
#if ${stressor.pthread}# --pthread '${stressor.pthread}' #end if
#if ${stressor.pthread-ops}# --pthread-ops '${stressor.pthread-ops}' #end if
#if ${stressor.pthread-max}# --pthread-max '${stressor.pthread-max}' #end if
#if ${stressor.ptrace}# --ptrace '${stressor.ptrace}' #end if
#if ${stressor.ptrace-ops}# --ptrace-ops '${stressor.ptrace-ops}' #end if
#if ${stressor.pty}# --pty '${stressor.pty}' #end if
#if ${stressor.pty-ops}# --pty-ops '${stressor.pty-ops}' #end if
#if ${stressor.pty-max}# --pty-max '${stressor.pty-max}' #end if
#if ${stressor.qsort}# --qsort '${stressor.qsort}' #end if
#if ${stressor.qsort-ops}# --qsort-ops '${stressor.qsort-ops}' #end if
#if ${stressor.qsort-size}# --qsort-size '${stressor.qsort-size}' #end if
#if ${stressor.quota}# --quota '${stressor.quota}' #end if
#if ${stressor.quota-ops}# --quota-ops '${stressor.quota-ops}' #end if
#if ${stressor.radixsort}# --radixsort '${stressor.radixsort}' #end if
#if ${stressor.radixsort-ops}# --radixsort-ops '${stressor.radixsort-ops}' #end if
#if ${stressor.radixsort-size}# --radixsort-size '${stressor.radixsort-size}' #end if
#if ${stressor.ramfs}# --ramfs '${stressor.ramfs}' #end if
#if ${stressor.ramfs-ops}# --ramfs-ops '${stressor.ramfs-ops}' #end if
#if ${stressor.ramfs-bytes}# --ramfs-bytes '${stressor.ramfs-bytes}' #end if
#if ${stressor.rawdev}# --rawdev '${stressor.rawdev}' #end if
#if ${stressor.rawdev-ops}# --rawdev-ops '${stressor.rawdev-ops}' #end if
#if ${stressor.rawdev-method}# --rawdev-method '${stressor.rawdev-method}' #end if
#if ${stressor.rawpkt}# --rawpkt '${stressor.rawpkt}' #end if
#if ${stressor.rawpkt-ops}# --rawpkt-ops '${stressor.rawpkt-ops}' #end if
#if ${stressor.rawpkt-port}# --rawpkt-port '${stressor.rawpkt-port}' #end if
#if ${stressor.rawsock}# --rawsock '${stressor.rawsock}' #end if
#if ${stressor.rawsock-ops}# --rawsock-ops '${stressor.rawsock-ops}' #end if
#if ${stressor.rawudp}# --rawudp '${stressor.rawudp}' #end if
#if ${stressor.rawudp-ops}# --rawudp-ops '${stressor.rawudp-ops}' #end if
#if ${stressor.rawudp-port}# --rawudp-port '${stressor.rawudp-port}' #end if
#if ${stressor.rdrand}# --rdrand '${stressor.rdrand}' #end if
#if ${stressor.rdrand-ops}# --rdrand-ops '${stressor.rdrand-ops}' #end if
#if ${stressor.readahead}# --readahead '${stressor.readahead}' #end if
#if ${stressor.readahead-bytes}# --readahead-bytes '${stressor.readahead-bytes}' #end if
#if ${stressor.readahead-ops}# --readahead-ops '${stressor.readahead-ops}' #end if
#if ${stressor.reboot}# --reboot '${stressor.reboot}' #end if
#if ${stressor.reboot-ops}# --reboot-ops '${stressor.reboot-ops}' #end if
#if ${stressor.remap}# --remap '${stressor.remap}' #end if
#if ${stressor.remap-ops}# --remap-ops '${stressor.remap-ops}' #end if
#if ${stressor.rename}# --rename '${stressor.rename}' #end if
#if ${stressor.rename-ops}# --rename-ops '${stressor.rename-ops}' #end if
#if ${stressor.resources}# --resources '${stressor.resources}' #end if
#if ${stressor.resources-ops}# --resources-ops '${stressor.resources-ops}' #end if
#if ${stressor.revio}# --revio '${stressor.revio}' #end if
#if ${stressor.revio-ops}# --revio-ops '${stressor.revio-ops}' #end if
#if ${stressor.rmap}# --rmap '${stressor.rmap}' #end if
#if ${stressor.rmap-ops}# --rmap-ops '${stressor.rmap-ops}' #end if
#if ${stressor.rmap}# --rmap '${stressor.rmap}' #end if
#if ${stressor.rmap-ops}# --rmap-ops '${stressor.rmap-ops}' #end if
#if ${stressor.rseq}# --rseq '${stressor.rseq}' #end if
#if ${stressor.rseq-ops}# --rseq-ops '${stressor.rseq-ops}' #end if
#if ${stressor.rtc}# --rtc '${stressor.rtc}' #end if
#if ${stressor.rtc-ops}# --rtc-ops '${stressor.rtc-ops}' #end if
#if ${stressor.schedpolicy}# --schedpolicy '${stressor.schedpolicy}' #end if
#if ${stressor.schedpolicy-ops}# --schedpolicy-ops '${stressor.schedpolicy-ops}' #end if
#if ${stressor.sctp}# --sctp '${stressor.sctp}' #end if
#if ${stressor.sctp-ops}# --sctp-ops '${stressor.sctp-ops}' #end if
#if ${stressor.sctp-domain}# --sctp-domain '${stressor.sctp-domain}' #end if
#if ${stressor.sctp-port}# --sctp-port '${stressor.sctp-port}' #end if
#if ${stressor.sctp-sched}# --sctp-sched '${stressor.sctp-sched}' #end if
#if ${stressor.seal}# --seal '${stressor.seal}' #end if
#if ${stressor.seal-ops}# --seal-ops '${stressor.seal-ops}' #end if
#if ${stressor.seccomp}# --seccomp '${stressor.seccomp}' #end if
#if ${stressor.seccomp-ops}# --seccomp-ops '${stressor.seccomp-ops}' #end if
#if ${stressor.secretmem}# --secretmem '${stressor.secretmem}' #end if
#if ${stressor.secretmem-ops}# --secretmem-ops '${stressor.secretmem-ops}' #end if
#if ${stressor.seek}# --seek '${stressor.seek}' #end if
#if ${stressor.seek-ops}# --seek-ops '${stressor.seek-ops}' #end if
#if ${stressor.seek-size}# --seek-size '${stressor.seek-size}' #end if
#if ${stressor.sem}# --sem '${stressor.sem}' #end if
#if ${stressor.sem-ops}# --sem-ops '${stressor.sem-ops}' #end if
#if ${stressor.sem-procs}# --sem-procs '${stressor.sem-procs}' #end if
#if ${stressor.sem-sysv}# --sem-sysv '${stressor.sem-sysv}' #end if
#if ${stressor.sem-sysv-ops}# --sem-sysv-ops '${stressor.sem-sysv-ops}' #end if
#if ${stressor.sem-sysv-procs}# --sem-sysv-procs '${stressor.sem-sysv-procs}' #end if
#if ${stressor.sendfile}# --sendfile '${stressor.sendfile}' #end if
#if ${stressor.sendfile-ops}# --sendfile-ops '${stressor.sendfile-ops}' #end if
#if ${stressor.sendfile-size}# --sendfile-size '${stressor.sendfile-size}' #end if
#if ${stressor.session}# --session '${stressor.session}' #end if
#if ${stressor.session-ops}# --session-ops '${stressor.session-ops}' #end if
#if ${stressor.set}# --set '${stressor.set}' #end if
#if ${stressor.set-ops}# --set-ops '${stressor.set-ops}' #end if
#if ${stressor.shellsort}# --shellsort '${stressor.shellsort}' #end if
#if ${stressor.shellsort-ops}# --shellsort-ops '${stressor.shellsort-ops}' #end if
#if ${stressor.shellsort-size}# --shellsort-size '${stressor.shellsort-size}' #end if
#if ${stressor.shm}# --shm '${stressor.shm}' #end if
#if ${stressor.shm-ops}# --shm-ops '${stressor.shm-ops}' #end if
#if ${stressor.shm-bytes}# --shm-bytes '${stressor.shm-bytes}' #end if
#if ${stressor.shm-segs}# --shm-segs '${stressor.shm-segs}' #end if
#if ${stressor.shm-sysv}# --shm-sysv '${stressor.shm-sysv}' #end if
#if ${stressor.shm-sysv-ops}# --shm-sysv-ops '${stressor.shm-sysv-ops}' #end if
#if ${stressor.shm-sysv-bytes}# --shm-sysv-bytes '${stressor.shm-sysv-bytes}' #end if
#if ${stressor.shm-sysv-segs}# --shm-sysv-segs '${stressor.shm-sysv-segs}' #end if
#if ${stressor.sigabrt}# --sigabrt '${stressor.sigabrt}' #end if
#if ${stressor.sigabrt-ops}# --sigabrt-ops '${stressor.sigabrt-ops}' #end if
#if ${stressor.sigchld}# --sigchld '${stressor.sigchld}' #end if
#if ${stressor.sigchld-ops}# --sigchld-ops '${stressor.sigchld-ops}' #end if
#if ${stressor.sigfd}# --sigfd '${stressor.sigfd}' #end if
#if ${stressor.sigfd-ops}# --sigfd-ops '${stressor.sigfd-ops}' #end if
#if ${stressor.sigfpe}# --sigfpe '${stressor.sigfpe}' #end if
#if ${stressor.sigfpe-ops}# --sigfpe-ops '${stressor.sigfpe-ops}' #end if
#if ${stressor.sigio}# --sigio '${stressor.sigio}' #end if
#if ${stressor.sigio-ops}# --sigio-ops '${stressor.sigio-ops}' #end if
#if ${stressor.signal}# --signal '${stressor.signal}' #end if
#if ${stressor.signal-ops}# --signal-ops '${stressor.signal-ops}' #end if
#if ${stressor.sigpending}# --sigpending '${stressor.sigpending}' #end if
#if ${stressor.sigpending-ops}# --sigpending-ops '${stressor.sigpending-ops}' #end if
#if ${stressor.sigpipe}# --sigpipe '${stressor.sigpipe}' #end if
#if ${stressor.sigpipe-ops}# --sigpipe-ops '${stressor.sigpipe-ops}' #end if
#if ${stressor.sigq}# --sigq '${stressor.sigq}' #end if
#if ${stressor.sigq-ops}# --sigq-ops '${stressor.sigq-ops}' #end if
#if ${stressor.sigrt}# --sigrt '${stressor.sigrt}' #end if
#if ${stressor.sigrt-ops}# --sigrt-ops '${stressor.sigrt-ops}' #end if
#if ${stressor.sigsegv}# --sigsegv '${stressor.sigsegv}' #end if
#if ${stressor.sigsegv-ops}# --sigsegv-ops '${stressor.sigsegv-ops}' #end if
#if ${stressor.sigsuspend}# --sigsuspend '${stressor.sigsuspend}' #end if
#if ${stressor.sigsuspend-ops}# --sigsuspend-ops '${stressor.sigsuspend-ops}' #end if
#if ${stressor.sigtrap}# --sigtrap '${stressor.sigtrap}' #end if
#if ${stressor.sigtrap-ops}# --sigtrap-ops '${stressor.sigtrap-ops}' #end if
#if ${stressor.skiplist}# --skiplist '${stressor.skiplist}' #end if
#if ${stressor.skiplist-ops}# --skiplist-ops '${stressor.skiplist-ops}' #end if
#if ${stressor.skiplist-size}# --skiplist-size '${stressor.skiplist-size}' #end if
#if ${stressor.sleep}# --sleep '${stressor.sleep}' #end if
#if ${stressor.sleep-ops}# --sleep-ops '${stressor.sleep-ops}' #end if
#if ${stressor.sleep-max}# --sleep-max '${stressor.sleep-max}' #end if
#if ${stressor.sock}# --sock '${stressor.sock}' #end if
#if ${stressor.sock-domain}# --sock-domain '${stressor.sock-domain}' #end if
#if ${stressor.sock-ops}# --sock-ops '${stressor.sock-ops}' #end if
#if ${stressor.sock-opts}# --sock-opts '${stressor.sock-opts}' #end if
#if ${stressor.sock-port}# --sock-port '${stressor.sock-port}' #end if
#if ${stressor.sock-type}# --sock-type '${stressor.sock-type}' #end if
#if ${stressor.sock}# --sock '${stressor.sock}' #end if
#if ${stressor.sock-ops}# --sock-ops '${stressor.sock-ops}' #end if
#if ${stressor.sockdiag}# --sockdiag '${stressor.sockdiag}' #end if
#if ${stressor.sockdiag-ops}# --sockdiag-ops '${stressor.sockdiag-ops}' #end if
#if ${stressor.sockfd}# --sockfd '${stressor.sockfd}' #end if
#if ${stressor.sockfd-ops}# --sockfd-ops '${stressor.sockfd-ops}' #end if
#if ${stressor.sockfd-port}# --sockfd-port '${stressor.sockfd-port}' #end if
#if ${stressor.sockpair}# --sockpair '${stressor.sockpair}' #end if
#if ${stressor.sockpair-ops}# --sockpair-ops '${stressor.sockpair-ops}' #end if
#if ${stressor.sockmany}# --sockmany '${stressor.sockmany}' #end if
#if ${stressor.sockmany-ops}# --sockmany-ops '${stressor.sockmany-ops}' #end if
#if ${stressor.softlockup}# --softlockup '${stressor.softlockup}' #end if
#if ${stressor.softlockup-ops}# --softlockup-ops '${stressor.softlockup-ops}' #end if
#if ${stressor.spawn}# --spawn '${stressor.spawn}' #end if
#if ${stressor.spawn-ops}# --spawn-ops '${stressor.spawn-ops}' #end if
#if ${stressor.splice}# --splice '${stressor.splice}' #end if
#if ${stressor.splice-ops}# --splice-ops '${stressor.splice-ops}' #end if
#if ${stressor.splice-bytes}# --splice-bytes '${stressor.splice-bytes}' #end if
#if ${stressor.stack}# --stack '${stressor.stack}' #end if
#if ${stressor.stack-ops}# --stack-ops '${stressor.stack-ops}' #end if
#if ${stressor.stackmmap}# --stackmmap '${stressor.stackmmap}' #end if
#if ${stressor.stackmmap-ops}# --stackmmap-ops '${stressor.stackmmap-ops}' #end if
#if ${stressor.str}# --str '${stressor.str}' #end if
#if ${stressor.str-method}# --str-method '${stressor.str-method}' #end if
#if ${stressor.str-ops}# --str-ops '${stressor.str-ops}' #end if
#if ${stressor.stream}# --stream '${stressor.stream}' #end if
#if ${stressor.stream-ops}# --stream-ops '${stressor.stream-ops}' #end if
#if ${stressor.stream-l3-size}# --stream-l3-size '${stressor.stream-l3-size}' #end if
#if ${stressor.stream-madvise}# --stream-madvise '${stressor.stream-madvise}' #end if
#if ${stressor.swap}# --swap '${stressor.swap}' #end if
#if ${stressor.swap-ops}# --swap-ops '${stressor.swap-ops}' #end if
#if ${stressor.switch}# --switch '${stressor.switch}' #end if
#if ${stressor.switch-ops}# --switch-ops '${stressor.switch-ops}' #end if
#if ${stressor.switch-freq}# --switch-freq '${stressor.switch-freq}' #end if
#if ${stressor.symlink}# --symlink '${stressor.symlink}' #end if
#if ${stressor.symlink-ops}# --symlink-ops '${stressor.symlink-ops}' #end if
#if ${stressor.sync-file}# --sync-file '${stressor.sync-file}' #end if
#if ${stressor.sync-file-ops}# --sync-file-ops '${stressor.sync-file-ops}' #end if
#if ${stressor.sync-file-bytes}# --sync-file-bytes '${stressor.sync-file-bytes}' #end if
#if ${stressor.sysbadaddr}# --sysbadaddr '${stressor.sysbadaddr}' #end if
#if ${stressor.sysbadaddr-ops}# --sysbadaddr-ops '${stressor.sysbadaddr-ops}' #end if
#if ${stressor.sysinfo}# --sysinfo '${stressor.sysinfo}' #end if
#if ${stressor.sysinfo-ops}# --sysinfo-ops '${stressor.sysinfo-ops}' #end if
#if ${stressor.sysinval}# --sysinval '${stressor.sysinval}' #end if
#if ${stressor.sysinval-ops}# --sysinval-ops '${stressor.sysinval-ops}' #end if
#if ${stressor.sysfs}# --sysfs '${stressor.sysfs}' #end if
#if ${stressor.sysfs-ops}# --sysfs-ops '${stressor.sysfs-ops}' #end if
#if ${stressor.tee}# --tee '${stressor.tee}' #end if
#if ${stressor.tee-ops}# --tee-ops '${stressor.tee-ops}' #end if
#if ${stressor.timer}# --timer '${stressor.timer}' #end if
#if ${stressor.timer-ops}# --timer-ops '${stressor.timer-ops}' #end if
#if ${stressor.timer-freq}# --timer-freq '${stressor.timer-freq}' #end if
#if ${stressor.timerfd}# --timerfd '${stressor.timerfd}' #end if
#if ${stressor.timerfd-ops}# --timerfd-ops '${stressor.timerfd-ops}' #end if
#if ${stressor.timerfd-freq}# --timerfd-freq '${stressor.timerfd-freq}' #end if
#if ${stressor.tlb-shootdown}# --tlb-shootdown '${stressor.tlb-shootdown}' #end if
#if ${stressor.tmpfs}# --tmpfs '${stressor.tmpfs}' #end if
#if ${stressor.tmpfs-ops}# --tmpfs-ops '${stressor.tmpfs-ops}' #end if
#if ${stressor.tree}# --tree '${stressor.tree}' #end if
#if ${stressor.tree-ops}# --tree-ops '${stressor.tree-ops}' #end if
#if ${stressor.tree-method}# --tree-method '${stressor.tree-method}' #end if
#if ${stressor.tree-size}# --tree-size '${stressor.tree-size}' #end if
#if ${stressor.tsc}# --tsc '${stressor.tsc}' #end if
#if ${stressor.tsc-ops}# --tsc-ops '${stressor.tsc-ops}' #end if
#if ${stressor.tsearch}# --tsearch '${stressor.tsearch}' #end if
#if ${stressor.tsearch-ops}# --tsearch-ops '${stressor.tsearch-ops}' #end if
#if ${stressor.tsearch-size}# --tsearch-size '${stressor.tsearch-size}' #end if
#if ${stressor.tun}# --tun '${stressor.tun}' #end if
#if ${stressor.tun-ops}# --tun-ops '${stressor.tun-ops}' #end if
#if ${stressor.udp}# --udp '${stressor.udp}' #end if
#if ${stressor.udp-ops}# --udp-ops '${stressor.udp-ops}' #end if
#if ${stressor.udp-domain}# --udp-domain '${stressor.udp-domain}' #end if
#if ${stressor.udp-port}# --udp-port '${stressor.udp-port}' #end if
#if ${stressor.udp-flood}# --udp-flood '${stressor.udp-flood}' #end if
#if ${stressor.udp-flood-ops}# --udp-flood-ops '${stressor.udp-flood-ops}' #end if
#if ${stressor.udp-flood-domain}# --udp-flood-domain '${stressor.udp-flood-domain}' #end if
#if ${stressor.unshare}# --unshare '${stressor.unshare}' #end if
#if ${stressor.unshare-ops}# --unshare-ops '${stressor.unshare-ops}' #end if
#if ${stressor.uprobe}# --uprobe '${stressor.uprobe}' #end if
#if ${stressor.uprobe-ops}# --uprobe-ops '${stressor.uprobe-ops}' #end if
#if ${stressor.urandom}# --urandom '${stressor.urandom}' #end if
#if ${stressor.urandom-ops}# --urandom-ops '${stressor.urandom-ops}' #end if
#if ${stressor.userfaultfd}# --userfaultfd '${stressor.userfaultfd}' #end if
#if ${stressor.userfaultfd-ops}# --userfaultfd-ops '${stressor.userfaultfd-ops}' #end if
#if ${stressor.utime}# --utime '${stressor.utime}' #end if
#if ${stressor.utime-ops}# --utime-ops '${stressor.utime-ops}' #end if
#if ${stressor.vdso}# --vdso '${stressor.vdso}' #end if
#if ${stressor.vdso-ops}# --vdso-ops '${stressor.vdso-ops}' #end if
#if ${stressor.vdso-func}# --vdso-func '${stressor.vdso-func}' #end if
#if ${stressor.vecmath}# --vecmath '${stressor.vecmath}' #end if
#if ${stressor.vecmath-ops}# --vecmath-ops '${stressor.vecmath-ops}' #end if
#if ${stressor.verity}# --verity '${stressor.verity}' #end if
#if ${stressor.verity-ops}# --verity-ops '${stressor.verity-ops}' #end if
#if ${stressor.vfork}# --vfork '${stressor.vfork}' #end if
#if ${stressor.vfork-ops}# --vfork-ops '${stressor.vfork-ops}' #end if
#if ${stressor.vfork-max}# --vfork-max '${stressor.vfork-max}' #end if
#if ${stressor.vforkmany}# --vforkmany '${stressor.vforkmany}' #end if
#if ${stressor.vforkmany-ops}# --vforkmany-ops '${stressor.vforkmany-ops}' #end if
#if ${stressor.vm}# --vm '${stressor.vm}' #end if
#if ${stressor.vm-bytes}# --vm-bytes '${stressor.vm-bytes}' #end if
#if ${stressor.vm-hang}# --vm-hang '${stressor.vm-hang}' #end if
#if ${stressor.vm-ops}# --vm-ops '${stressor.vm-ops}' #end if
#if ${stressor.vm-madvise}# --vm-madvise '${stressor.vm-madvise}' #end if
#if ${stressor.vm-method}# --vm-method '${stressor.vm-method}' #end if
#if ${stressor.vm-addr}# --vm-addr '${stressor.vm-addr}' #end if
#if ${stressor.vm-addr-ops}# --vm-addr-ops '${stressor.vm-addr-ops}' #end if
#if ${stressor.vm-rw}# --vm-rw '${stressor.vm-rw}' #end if
#if ${stressor.vm-rw-bytes}# --vm-rw-bytes '${stressor.vm-rw-bytes}' #end if
#if ${stressor.vm-rw-ops}# --vm-rw-ops '${stressor.vm-rw-ops}' #end if
#if ${stressor.vm-segv}# --vm-segv '${stressor.vm-segv}' #end if
#if ${stressor.vm-segv-ops}# --vm-segv-ops '${stressor.vm-segv-ops}' #end if
#if ${stressor.vm-splice}# --vm-splice '${stressor.vm-splice}' #end if
#if ${stressor.vm-splice-ops}# --vm-splice-ops '${stressor.vm-splice-ops}' #end if
#if ${stressor.vm-splice-bytes}# --vm-splice-bytes '${stressor.vm-splice-bytes}' #end if
#if ${stressor.wait}# --wait '${stressor.wait}' #end if
#if ${stressor.wait-ops}# --wait-ops '${stressor.wait-ops}' #end if
#if ${stressor.watchdog}# --watchdog '${stressor.watchdog}' #end if
#if ${stressor.watchdog-ops}# --watchdog-ops '${stressor.watchdog-ops}' #end if
#if ${stressor.wcs}# --wcs '${stressor.wcs}' #end if
#if ${stressor.wcs-method}# --wcs-method '${stressor.wcs-method}' #end if
#if ${stressor.wcs-ops}# --wcs-ops '${stressor.wcs-ops}' #end if
#if ${stressor.x86syscall}# --x86syscall '${stressor.x86syscall}' #end if
#if ${stressor.x86syscall-ops}# --x86syscall-ops '${stressor.x86syscall-ops}' #end if
#if ${stressor.x86syscall-func}# --x86syscall-func '${stressor.x86syscall-func}' #end if
#if ${stressor.xattr}# --xattr '${stressor.xattr}' #end if
#if ${stressor.xattr-ops}# --xattr-ops '${stressor.xattr-ops}' #end if
#if ${stressor.yield}# --yield '${stressor.yield}' #end if
#if ${stressor.yield-ops}# --yield-ops '${stressor.yield-ops}' #end if
#if ${stressor.zero}# --zero '${stressor.zero}' #end if
#if ${stressor.zero-ops}# --zero-ops '${stressor.zero-ops}' #end if
#if ${stressor.zlib}# --zlib '${stressor.zlib}' #end if
#if ${stressor.zlib-level}# --zlib-level '${stressor.zlib-level}' #end if
#if ${stressor.zlib-mem-level}# --zlib-mem-level '${stressor.zlib-mem-level}' #end if
#if ${stressor.zlib-method}# --zlib-method '${stressor.zlib-method}' #end if
#if ${stressor.zlib-ops}# --zlib-ops '${stressor.zlib-ops}' #end if
#if ${stressor.zlib-strategy}# --zlib-strategy '${stressor.zlib-strategy}' #end if
#if ${stressor.zlib-stream-bytes}# --zlib-stream-bytes '${stressor.zlib-stream-bytes}' #end if
#if ${stressor.zombie}# --zombie '${stressor.zombie}' #end if
#if ${stressor.zombie-ops}# --zombie-ops '${stressor.zombie-ops}' #end if
#if ${stressor.zombie-max}# --zombie-max '${stressor.zombie-max}' #end if


## all booleans
'${general.abort}'
'${general.aggressive}'
'${general.dry-run}'
'${general.ignite-cpu}'
'${general.keep-name}'
'${general.log-brief}'
'${general.maximize}'
'${general.max-fd}'
'${general.metrics}'
'${general.metrics-brief}'
'${general.minimize}'
'${general.no-madvise}'
'${general.no-rand-seed}'
'${general.page-in}'
'${general.pathological}'
'${general.perf}'
'${general.quiet}'
'${general.sched-reclaim}'
'${general.stressors}'
'${general.syslog}'
'${general.taskset}'
'${general.thrash}'
'${general.timer-slack}'
'${general.times}'
'${general.timestamp}'
'${general.tz}'
'${general.verbose}'
'${general.verify}'
'${general.version}'
'${general.exclude}'
'${stressor.af-alg-dump}'
'${stressor.affinity-rand}'
'${stressor.apparmor}'
'${stressor.atomic}'
'${stressor.atomic-ops}'
'${stressor.bad-ioctl-ops}'
'${stressor.brk-mlock}'
'${stressor.brk-notouch}'
'${stressor.cache-prefetch}'
'${stressor.cache-flush}'
'${stressor.cache-fence}'
'${stressor.eventfs-nonblock}'
'${stressor.itimer-rand}'
'${stressor.lockf-nonblock}'
'${stressor.matrix-yx}'
'${stressor.matrix-3d-zyx}'
'${stressor.mincore-random}'
'${stressor.mmap-async}'
'${stressor.mmap-file}'
'${stressor.mmap-mprotect}'
'${stressor.mmap-osync}'
'${stressor.mmap-odirect}'
'${stressor.mremap-lock}'
'${stressor.open-fd}'
'${stressor.pipeherd-yield}'
'${stressor.seek-punch}'
'${stressor.sock-nodelay}'
'${stressor.stack-fill}'
'${stressor.stack-mlock}'
'${stressor.stream-index}'
'${stressor.timer-rand}'
'${stressor.timerfd-rand}'
'${stressor.tlb-shootdown-ops}'
'${stressor.tmpfs-mmap-async}'
'${stressor.tmpfs-mmap-file}'
'${stressor.tun-tap}'
'${stressor.udp-lite}'
'${stressor.utime-fsync}'
'${stressor.vm-keep}'
'${stressor.vm-locked}'
'${stressor.vm-populate}'


    ]]>
    </command>
    <inputs>
        <section name="general" title="General Control Options" expanded="false" >
            <param argument="--abort" type="boolean"
                   truevalue="--abort" falsevalue="" checked="false"
                   label="abort" help="abort all stressors if any stressor fails" />
            <param argument="--aggressive" type="boolean"
                   truevalue="--aggressive" falsevalue="" checked="false"
                   label="aggressive" help="enable all aggressive options" />
            <param argument="--all" type="integer" min="0" optional="true"
                   label="all" help="start N workers of each stress test" />
            <param argument="--backoff" type="integer" optional="true"
                   label="backoff" help="wait of N microseconds before work starts" />
            <param argument="--class" type="text" optional="true"
                   label="class name" help="specify a class of stressors, use with --sequential" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--dry-run" type="boolean"
                   truevalue="--dry-run" falsevalue="" checked="false"
                   label="dry-run" help="do not run" />
            <param argument="--ignite-cpu" type="boolean"
                   truevalue="--ignite-cpu" falsevalue="" checked="false"
                   label="ignite cpu" help="alter kernel controls to make CPU run hot" />
            <param argument="--ionice-class" type="select" optional="true"
                   label="ionice class C" help="specify ionice class (idle, besteffort, realtime)" >
                <option value="idle" />
                <option value="besteffort" />
                <option value="realtime" />
            </param>
            <param argument="--ionice-level" type="integer" min="0" max="7" optional="true"
                   label="ionice level L" help="specify ionice level (0 max, 7 min)" />
            <param argument="--job" type="data" format="text"
                   label="job file" help="run the named jobfile" />
            <param argument="--keep-name" type="boolean"
                   truevalue="--keep-name" falsevalue="" checked="false"
                   label="keep name" help="keep stress worker names to be 'stress-ng'" />
            <param argument="--log-brief" type="boolean"
                   truevalue="--log-brief" falsevalue="" checked="false"
                   label="log brief" help="less verbose log messages" />
            <param argument="--log-file" type="data" format="data"
                   label="log file" help="messages to a log file" />
            <param argument="--maximize" type="boolean"
                   truevalue="--maximize" falsevalue="" checked="false"
                   label="maximize" help="enable maximum stress options" />
            <param argument="--max-fd" type="boolean"
                   truevalue="--max-fd" falsevalue="" checked="false"
                   label="max fd" help="set maximum file descriptor limit" />
            <param argument="--metrics" type="boolean"
                   truevalue="--metrics" falsevalue="" checked="false"
                   label="metrics" help="print pseudo metrics of activity" />
            <param argument="--metrics-brief" type="boolean"
                   truevalue="--metrics-brief" falsevalue="" checked="false"
                   label="metrics brief" help="enable metrics and only show non-zero results" />
            <param argument="--minimize" type="boolean"
                   truevalue="--minimize" falsevalue="" checked="false"
                   label="minimize" help="enable minimal stress options" />
            <param argument="--no-madvise" type="boolean"
                   truevalue="--no-madvise" falsevalue="" checked="false"
                   label="no madvise" help="don't use random madvise options for each mmap" />
            <param argument="--no-rand-seed" type="boolean"
                   truevalue="--no-rand-seed" falsevalue="" checked="false"
                   label="no rand seed" help="seed random numbers with the same constant" />
            <param argument="--page-in" type="boolean"
                   truevalue="--page-in" falsevalue="" checked="false"
                   label="page in" help="touch allocated pages that are not in core" />
            <!-- <param argument="-\-parallel N" type="" -->
            <!--        label="parallel N" help="synonym for 'all N'" /> -->
            <param argument="--pathological" type="boolean"
                   truevalue="--pathological" falsevalue="" checked="false"
                   label="pathological" help="enable stressors that are known to hang a machine" />
            <param argument="--perf" type="boolean"
                   truevalue="--perf" falsevalue="" checked="false"
                   label="perf" help="display perf statistics" />
            <param argument="--quiet" type="boolean"
                   truevalue="--quiet" falsevalue="" checked="false"
                   label="quiet" help="quiet output" />
            <param argument="--random" type="integer" min="0" optional="true"
                   label="random N" help="start N random workers" />
            <param argument="--sched" type="text" optional="true"
                   label="sched type" help="set scheduler type" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--sched-prio" type="integer" optional="true"
                   label="sched prio N" help="set scheduler priority level N" />
            <param argument="--sched-period" type="integer" min="0" optional="true"
                   label="sched period N" help="set period for SCHED_DEADLINE to N nanosecs" />
            <param argument="--sched-runtime" type="integer" min="0" optional="true"
                   label="sched runtime N" help="set runtime for SCHED_DEADLINE to N nanosecs" />
            <param argument="--sched-deadline" type="integer" min="0" optional="true"
                   label="sched deadline N" help="set deadline for SCHED_DEADLINE to N nanosecs" />
            <param argument="--sched-reclaim" type="boolean"
                   truevalue="--sched-reclaim" falsevalue="" checked="false"
                   label="sched reclaim" help="set reclaim cpu bandwidth for deadline scheduler" />
            <param argument="--sequential" type="integer" min="0" optional="true"
                   label="sequential N" help="run all stressors one by one, invoking N of them" />
            <param argument="--stressors" type="boolean"
                   truevalue="--stressors" falsevalue="" checked="false"
                   label="stressors" help="show available stress tests" />
            <param argument="--syslog" type="boolean"
                   truevalue="--syslog" falsevalue="" checked="false"
                   label="syslog" help="log messages to the syslog" />
            <param argument="--taskset" type="boolean"
                   truevalue="--taskset" falsevalue="" checked="false"
                   label="taskset" help="use specific CPUs (set CPU affinity)" />
            <!-- <param argument="-\-temp-path path" type="" -->
            <!--        label="temp path path" help="specify path for temporary directories and files" /> -->
            <param argument="--thrash" type="boolean"
                   truevalue="--thrash" falsevalue="" checked="false"
                   label="thrash" help="force all pages in causing swap thrashing" />
            <param argument="--timeout" type="integer" min="0" optional="true"
                   label="timeout T" help="timeout after T seconds" />
            <param argument="--timer-slack" type="boolean"
                   truevalue="--timer-slack" falsevalue="" checked="false"
                   label="timer slack" help="enable timer slack mode" />
            <param argument="--times" type="boolean"
                   truevalue="--times" falsevalue="" checked="false"
                   label="times" help="show run time summary at end of the run" />
            <param argument="--timestamp" type="boolean"
                   truevalue="--timestamp" falsevalue="" checked="false"
                   label="timestamp" help="timestamp log output " />
            <param argument="--tz" type="boolean"
                   truevalue="--tz" falsevalue="" checked="false"
                   label="tz" help="collect temperatures from thermal zones (Linux only)" />
            <param argument="--verbose" type="boolean"
                   truevalue="--verbose" falsevalue="" checked="false"
                   label="verbose" help="verbose output" />
            <param argument="--verify" type="boolean"
                   truevalue="--verify" falsevalue="" checked="false"
                   label="verify" help="verify results (not available on all tests)" />
            <param argument="--version" type="boolean"
                   truevalue="--version" falsevalue="" checked="false"
                   label="version" help="show version" />
            <!-- <param argument="-\-yaml file" type="" -->
            <!--        label="yaml file" help="output results to YAML formatted filed" /> -->
            <param argument="--exclude" type="boolean"
                   truevalue="--exclude" falsevalue="" checked="false"
                   label="exclude" help="list of stressors to exclude (not run)" />
        </section>

        <section name="stressor" title="Stressor Specific Options" expanded="false" >
            <param argument="--access" type="integer" min="0" optional="true"
                   label="access N" help="start N workers that stress file access permissions" />
            <param argument="--access-ops" type="integer" min="0" optional="true"
                   label="access ops N" help="stop after N file access bogo operations" />
            <param argument="--af-alg" type="integer" min="0" optional="true"
                   label="af alg N" help="start N workers that stress AF_ALG socket domain" />
            <param argument="--af-alg-ops" type="integer" min="0" optional="true"
                   label="af alg ops N" help="stop after N af-alg bogo operations" />
            <param argument="--af-alg-dump" type="boolean"
                   truevalue="--af-alg-dump" falsevalue="" checked="false"
                   label="af alg dump" help="dump internal list from /proc/crypto to stdout" />
            <param argument="--affinity" type="integer" min="0" optional="true"
                   label="affinity N" help="start N workers that rapidly change CPU affinity" />
            <param argument="--affinity-ops" type="integer" min="0" optional="true"
                   label="affinity ops N" help="stop after N affinity bogo operations" />
            <param argument="--affinity-rand" type="boolean"
                   truevalue="--affinity-rand" falsevalue="" checked="false"
                   label="affinity rand" help="change affinity randomly rather than sequentially" />
            <param argument="--aio" type="integer" min="0" optional="true"
                   label="aio N" help="start N workers that issue async I/O requests" />
            <param argument="--aio-ops" type="integer" min="0" optional="true"
                   label="aio ops N" help="stop after N bogo async I/O requests" />
            <param argument="--aio-requests" type="integer" min="0" optional="true"
                   label="aio requests N" help="number of async I/O requests per worker" />
            <param argument="--aiol" type="integer" min="0" optional="true"
                   label="aiol N" help="start N workers that exercise Linux async I/O" />
            <param argument="--aiol-ops" type="integer" min="0" optional="true"
                   label="aiol ops N" help="stop after N bogo Linux aio async I/O requests" />
            <param argument="--aiol-requests" type="integer" min="0" optional="true"
                   label="aiol requests N" help="number of Linux aio async I/O requests per worker" />
            <param argument="--apparmor" type="boolean"
                   truevalue="--apparmor" falsevalue="" checked="false"
                   label="apparmor" help="start N workers exercising AppArmor interfaces" />
            <param argument="--apparmor-ops" type="integer" min="0" optional="true"
                   label="apparmor ops N" help="stop after N bogo AppArmor worker bogo operations" />
            <param argument="--atomic" type="boolean"
                   truevalue="--atomic" falsevalue="" checked="false"
                   label="atomic" help="start N workers exercising GCC atomic operations" />
            <param argument="--atomic-ops" type="boolean"
                   truevalue="--atomic-ops" falsevalue="" checked="false"
                   label="atomic ops" help="stop after N bogo atomic bogo operations" />
            <param argument="--bad-altstack" type="integer" min="0" optional="true"
                   label="bad altstack N" help="start N workers exercising bad signal stacks" />
            <param argument="--bad-altstack-ops" type="integer" min="0" optional="true"
                   label="bad altstack ops N" help="after N bogo signal stack SIGSEGVs" />
            <param argument="--bad-ioctl" type="integer" min="0" optional="true"
                   label="bad ioctl N" help="start N stressors that perform illegal read ioctls on devices" />
            <param argument="--bad-ioctl-ops" type="boolean"
                   truevalue="--bad-ioctl-ops" falsevalue="" checked="false"
                   label="bad ioctl ops" help="stop after N bad ioctl bogo operations" />
            <param argument="--bigheap" type="integer" min="0" optional="true"
                   label="bigheap N" help="start N workers that grow the heap using calloc()" />
            <param argument="--bigheap-ops" type="integer" min="0" optional="true"
                   label="bigheap ops N" help="stop after N bogo bigheap operations" />
            <param argument="--bigheap-growth" type="integer" min="0" optional="true"
                   label="bigheap growth N" help="grow heap by N bytes per iteration" />
            <param argument="--bind-mount" type="integer" min="0" optional="true"
                   label="bind mount N" help="start N workers exercising bind mounts" />
            <param argument="--bind-mount-ops" type="integer" min="0" optional="true"
                   label="bind mount ops N" help="stop after N bogo bind mount operations" />
            <param argument="--binderfs" type="integer" min="0" optional="true"
                   label="binderfs N" help="start N workers exercising binderfs" />
            <param argument="--binderfs-ops" type="integer" min="0" optional="true"
                   label="binderfs ops N" help="stop after N bogo binderfs operations" />
            <param argument="--branch" type="integer" min="0" optional="true"
                   label="branch N" help="start N workers that force branch misprediction" />
            <param argument="--branch-ops" type="integer" min="0" optional="true"
                   label="branch ops N" help="stop after N branch misprediction branches" />
            <param argument="--brk" type="integer" min="0" optional="true"
                   label="brk N" help="start N workers performing rapid brk calls" />
            <param argument="--brk-ops" type="integer" min="0" optional="true"
                   label="brk ops N" help="stop after N brk bogo operations" />
            <param argument="--brk-mlock" type="boolean"
                   truevalue="--brk-mlock" falsevalue="" checked="false"
                   label="brk mlock" help="attempt to mlock newly mapped brk pages" />
            <param argument="--brk-notouch" type="boolean"
                   truevalue="--brk-notouch" falsevalue="" checked="false"
                   label="brk notouch" help="don't touch (page in) new data segment page" />
            <param argument="--bsearch" type="integer" min="0" optional="true"
                   label="bsearch N" help="start N workers that exercise a binary search" />
            <param argument="--bsearch-ops" type="integer" min="0" optional="true"
                   label="bsearch ops N" help="stop after N binary search bogo operations" />
            <param argument="--bsearch-size" type="integer" min="0" optional="true"
                   label="bsearch size N" help="number of 32 bit integers to bsearch" />
            <param argument="--cache" type="integer" min="0" optional="true"
                   label="cache N" help="start N CPU cache thrashing workers" />
            <param argument="--cache-ops" type="integer" min="0" optional="true"
                   label="cache ops N" help="stop after N cache bogo operations" />
            <param argument="--cache-prefetch" type="boolean"
                   truevalue="--cache-prefetch" falsevalue="" checked="false"
                   label="cache prefetch" help="prefetch on memory reads/writes" />
            <param argument="--cache-flush" type="boolean"
                   truevalue="--cache-flush" falsevalue="" checked="false"
                   label="cache flush" help="flush cache after every memory write (x86 only)" />
            <param argument="--cache-fence" type="boolean"
                   truevalue="--cache-fence" falsevalue="" checked="false"
                   label="cache fence" help="serialize stores" />
            <param argument="--cache-level" type="integer" min="0" optional="true"
                   label="cache level N" help="only exercise specified cache" />
            <param argument="--cache-ways" type="integer" min="0" optional="true"
                   label="cache ways N" help="only fill specified number of cache ways" />
            <param argument="--cap" type="integer" min="0" optional="true"
                   label="cap N" help="start N workers exercising capget" />
            <param argument="--cap-ops" type="integer" min="0" optional="true"
                   label="cap ops N" help="stop cap workers after N bogo capget operations" />
            <param argument="--chattr" type="integer" min="0" optional="true"
                   label="chattr N" help="start N workers thrashing chattr file mode bits " />
            <param argument="--chattr-ops" type="integer" min="0" optional="true"
                   label="chattr ops N" help="stop chattr workers after N bogo operations" />
            <param argument="--chdir" type="integer" min="0" optional="true"
                   label="chdir N" help="start N workers thrashing chdir on many paths" />
            <param argument="--chdir-ops" type="integer" min="0" optional="true"
                   label="chdir ops N" help="stop chdir workers after N bogo chdir operations" />
            <param argument="--chdir-dirs" type="integer" min="0" optional="true"
                   label="chdir dirs N" help="select number of directories to exercise chdir on" />
            <param argument="--chmod" type="integer" min="0" optional="true"
                   label="chmod N" help="start N workers thrashing chmod file mode bits " />
            <param argument="--chmod-ops" type="integer" min="0" optional="true"
                   label="chmod ops N" help="stop chmod workers after N bogo operations" />
            <param argument="--chown" type="integer" min="0" optional="true"
                   label="chown N" help="start N workers thrashing chown file ownership" />
            <param argument="--chown-ops" type="integer" min="0" optional="true"
                   label="chown ops N" help="stop chown workers after N bogo operations" />
            <param argument="--chroot" type="integer" min="0" optional="true"
                   label="chroot N" help="start N workers thrashing chroot" />
            <param argument="--chroot-ops" type="integer" min="0" optional="true"
                   label="chroot ops N" help="stop chhroot workers after N bogo operations" />
            <param argument="--clock" type="integer" min="0" optional="true"
                   label="clock N" help="start N workers thrashing clocks and POSIX timers" />
            <param argument="--clock-ops" type="integer" min="0" optional="true"
                   label="clock ops N" help="stop clock workers after N bogo operations" />
            <param argument="--clone" type="integer" min="0" optional="true"
                   label="clone N" help="start N workers that rapidly create and reap clones" />
            <param argument="--clone-ops" type="integer" min="0" optional="true"
                   label="clone ops N" help="stop after N bogo clone operations" />
            <param argument="--clone-max" type="integer" min="0" optional="true"
                   label="clone max N" help="set upper limit of N clones per worker" />
            <param argument="--close" type="integer" min="0" optional="true"
                   label="close N" help="start N workers that exercise races on close" />
            <param argument="--close-ops" type="integer" min="0" optional="true"
                   label="close ops N" help="stop after N bogo close operations" />
            <param argument="--context" type="integer" min="0" optional="true"
                   label="context N" help="start N workers exercising user context" />
            <param argument="--context-ops" type="integer" min="0" optional="true"
                   label="context ops N" help="stop context workers after N bogo operations" />
            <param argument="--copy-file" type="integer" min="0" optional="true"
                   label="copy file N" help="start N workers that copy file data" />
            <param argument="--copy-file-ops" type="integer" min="0" optional="true"
                   label="copy file ops N" help="stop after N copy bogo operations" />
            <param argument="--copy-file-bytes" type="integer" min="0" optional="true"
                   label="copy file bytes N" help="size of file to be copied" />
            <param argument="--cpu" type="integer" min="0" optional="true"
                   label="cpu N" help="start N workers spinning on sqrt(rand())" />
            <param argument="--cpu-ops" type="integer" min="0" optional="true"
                   label="cpu ops N" help="stop after N cpu bogo operations" />
            <param argument="--cpu-load" type="integer" min="1" optional="true"
                   label="cpu load P" help="load CPU by P %, 0=sleep, 100=full load (see -c)" />
            <param argument="--cpu-load-slice" type="integer" min="1" optional="true"
                   label="cpu load slice S" help="specify time slice during busy load" />
            <param argument="--cpu-method" type="select" optional="true"
                   label="cpu method M" help="specify stress cpu method M, default is all" >
                <expand macro="default_method_all" />
            </param>
            <param argument="--cpu-online" type="integer" min="0" optional="true"
                   label="cpu online N" help="start N workers offlining/onlining the CPUs" />
            <param argument="--cpu-online-ops" type="integer" min="0" optional="true"
                   label="cpu online ops N" help="stop after N offline/online operations" />
            <param argument="--crypt" type="integer" min="0" optional="true"
                   label="crypt N" help="start N workers performing password encryption" />
            <param argument="--crypt-ops" type="integer" min="0" optional="true"
                   label="crypt ops N" help="stop after N bogo crypt operations" />
            <param argument="--cyclic" type="integer" min="0" optional="true"
                   label="cyclic N" help="start N cyclic real time benchmark stressors" />
            <param argument="--cyclic-ops" type="integer" min="0" optional="true"
                   label="cyclic ops N" help="stop after N cyclic timing cycles" />
            <param argument="--cyclic-method" type="select" optional="true"
                   label="cyclic method M" help="specify cyclic method M, default is clock_ns" >
                <option value="clock_ns" />
            </param>
            <param argument="--cyclic-dist" type="integer" min="0" optional="true"
                   label="cyclic dist N" help="calculate distribution of interval N nanosecs" />
            <param argument="--cyclic-policy" type="integer" min="1" optional="true"
                   label="cyclic policy P" help="used rr or fifo scheduling policy" />
            <param argument="--cyclic-prio" type="integer" min="0" optional="true"
                   label="cyclic prio N" help="real time scheduling priority 1..100" />
            <param argument="--cyclic-sleep" type="integer" min="0" optional="true"
                   label="cyclic sleep N" help="sleep time of real time timer in nanosecs" />
            <param argument="--daemon" type="integer" min="0" optional="true"
                   label="daemon N" help="start N workers creating multiple daemons" />
            <param argument="--daemon-ops" type="integer" min="0" optional="true"
                   label="daemon ops N" help="stop when N daemons have been created" />
            <param argument="--dccp" type="integer" min="0" optional="true"
                   label="dccp N" help="start N workers exercising network DCCP I/O" />
            <param argument="--dccp-domain" type="select" optional="true"
                   label="dccp domain D" help="specify DCCP domain, default is ipv4">
                <expand macro="default_ipv4" />
            </param>
            <param argument="--dccp-ops" type="integer" min="0" optional="true"
                   label="dccp ops N" help="stop after N DCCP  bogo operations" />
            <param argument="--dccp-opts" type="select" optional="true"
                   label="dccp opts option" help="DCCP data send options [send|sendmsg|sendmmsg]" >
                <option value="send" />
                <option value="sendmsg" />
                <option value="sendmmsg" />
            </param>
            <param argument="--dccp-port" type="integer" min="1" optional="true"
                   label="dccp port P" help="use DCCP ports P to P + number of workers - 1" />
            <param argument="--dentry" type="integer" min="0" optional="true"
                   label="dentry N" help="start N dentry thrashing stressors" />
            <param argument="--dentry-ops" type="integer" min="0" optional="true"
                   label="dentry ops N" help="stop after N dentry bogo operations" />
            <param argument="--dentry-order" type="select" optional="true"
                   label="dentry order O" help="specify unlink order (reverse, forward, stride)" >
                <option value="reverse" />
                <option value="forward" />
                <option value="stride" />
            </param>
            <param argument="--dentries" type="integer" min="0" optional="true"
                   label="dentries N" help="create N dentries per iteration" />
            <param argument="--dev" type="integer" min="0" optional="true"
                   label="dev N" help="start N device entry thrashing stressors" />
            <param argument="--dev-ops" type="integer" min="0" optional="true"
                   label="dev ops N" help="stop after N device thrashing bogo ops" />
            <!-- <param argument="-\-dev-file name" type="" -->
            <!--        label="dev file name" help="specify the /dev/ file to exercise" /> -->
            <param argument="--dev-shm" type="integer" min="0" optional="true"
                   label="dev shm N" help="start N /dev/shm file and mmap stressors" />
            <param argument="--dev-shm-ops" type="integer" min="0" optional="true"
                   label="dev shm ops N" help="stop after N /dev/shm bogo ops" />
            <param argument="--dir" type="integer" min="0" optional="true"
                   label="dir N" help="start N directory thrashing stressors" />
            <param argument="--dir-ops" type="integer" min="0" optional="true"
                   label="dir ops N" help="stop after N directory bogo operations" />
            <param argument="--dir-dirs" type="integer" min="0" optional="true"
                   label="dir dirs N" help="select number of directories to exercise dir on" />
            <param argument="--dirdeep" type="integer" min="0" optional="true"
                   label="dirdeep N" help="start N directory depth stressors" />
            <param argument="--dirdeep-ops" type="integer" min="0" optional="true"
                   label="dirdeep ops N" help="stop after N directory depth bogo operations" />
            <param argument="--dirdeep-dirs" type="integer" min="0" optional="true"
                   label="dirdeep dirs N" help="create N directories per level" />
            <param argument="--dirdeep-inodes" type="integer" min="0" optional="true"
                   label="dirdeep inodes N" help="create a maximum N inodes (N can also be %)" />
            <param argument="--dnotify" type="integer" min="0" optional="true"
                   label="dnotify N" help="start N workers exercising dnotify events" />
            <param argument="--dnotify-ops" type="integer" min="0" optional="true"
                   label="dnotify ops N" help="stop dnotify workers after N bogo operations" />
            <param argument="--dup" type="integer" min="0" optional="true"
                   label="dup N" help="start N workers exercising dup/close" />
            <param argument="--dup-ops" type="integer" min="0" optional="true"
                   label="dup ops N" help="stop after N dup/close bogo operations" />
            <param argument="--dynlib" type="integer" min="0" optional="true"
                   label="dynlib N" help="start N workers exercising dlopen/dlclose" />
            <param argument="--dynlib-ops" type="integer" min="0" optional="true"
                   label="dynlib ops N" help="stop after N dlopen/dlclose bogo operations" />
            <param argument="--efivar" type="integer" min="0" optional="true"
                   label="efivar N" help="start N workers that read EFI variables" />
            <param argument="--efivar-ops" type="integer" min="0" optional="true"
                   label="efivar ops N" help="stop after N EFI variable bogo read operations" />
            <param argument="--enosys" type="integer" min="0" optional="true"
                   label="enosys N" help="start N workers that call non-existent system calls" />
            <param argument="--enosys-ops" type="integer" min="0" optional="true"
                   label="enosys ops N" help="stop after N enosys bogo operations" />
            <param argument="--env" type="integer" min="0" optional="true"
                   label="env N" help="start N workers setting environment vars" />
            <param argument="--env-ops" type="integer" min="0" optional="true"
                   label="env ops N" help="stop after N env bogo operations" />
            <param argument="--epoll" type="integer" min="0" optional="true"
                   label="epoll N" help="start N workers doing epoll handled socket activity" />
            <param argument="--epoll-ops" type="integer" min="0" optional="true"
                   label="epoll ops N" help="stop after N epoll bogo operations" />
            <param argument="--epoll-port" type="integer" min="1" optional="true"
                   label="epoll port P" help="use socket ports P upwards" />
            <param argument="--epoll-domain" type="select" optional="true"
                   label="epoll domain D" help="specify socket domain, default is unix" >
                <option value="unix" />
            </param>
            <param argument="--eventfd" type="integer" min="0" optional="true"
                   label="eventfd N" help="start N workers stressing eventfd read/writes" />
            <param argument="--eventfd-ops" type="integer" min="0" optional="true"
                   label="eventfd ops N" help="stop eventfd workers after N bogo operations" />
            <param argument="--eventfs-nonblock" type="boolean"
                   truevalue="--eventfs-nonblock" falsevalue="" checked="false"
                   label="eventfs nonblock" help="poll with non-blocking I/O on eventfd fd" />
            <param argument="--exec" type="integer" min="0" optional="true"
                   label="exec N" help="start N workers spinning on fork() and exec()" />
            <param argument="--exec-ops" type="integer" min="0" optional="true"
                   label="exec ops N" help="stop after N exec bogo operations" />
            <param argument="--exec-max" type="integer" min="1" value="1" optional="true"
                   label="exec max P" help="create P workers per iteration, default is 1" />
            <param argument="--fallocate" type="integer" min="0" optional="true"
                   label="fallocate N" help="start N workers fallocating 16MB files" />
            <param argument="--fallocate-ops" type="integer" min="0" optional="true"
                   label="fallocate ops N" help="stop after N fallocate bogo operations" />
            <param argument="--fallocate-bytes" type="integer" min="0" optional="true"
                   label="fallocate bytes N" help="size of file to allocate" />
            <param argument="--fanotify" type="integer" min="0" optional="true"
                   label="fanotify N" help="start N workers exercising fanotify events" />
            <param argument="--fanotify-ops" type="integer" min="0" optional="true"
                   label="fanotify ops N" help="stop fanotify workers after N bogo operations" />
            <param argument="--fault" type="integer" min="0" optional="true"
                   label="fault N" help="start N workers producing page faults" />
            <param argument="--fault-ops" type="integer" min="0" optional="true"
                   label="fault ops N" help="stop after N page fault bogo operations" />
            <param argument="--fcntl" type="integer" min="0" optional="true"
                   label="fcntl N" help="start N workers exercising fcntl commands" />
            <param argument="--fcntl-ops" type="integer" min="0" optional="true"
                   label="fcntl ops N" help="stop after N fcntl bogo operations" />
            <param argument="--fiemap" type="integer" min="0" optional="true"
                   label="fiemap N" help="start N workers exercising the FIEMAP ioctl" />
            <param argument="--fiemap-ops" type="integer" min="0" optional="true"
                   label="fiemap ops N" help="stop after N FIEMAP ioctl bogo operations" />
            <param argument="--fiemap-bytes" type="integer" min="0" optional="true"
                   label="fiemap bytes N" help="specify size of file to fiemap" />
            <param argument="--fifo" type="integer" min="0" optional="true"
                   label="fifo N" help="start N workers exercising fifo I/O" />
            <param argument="--fifo-ops" type="integer" min="0" optional="true"
                   label="fifo ops N" help="stop after N fifo bogo operations" />
            <param argument="--fifo-readers" type="integer" min="0" optional="true"
                   label="fifo readers N" help="number of fifo reader stessors to start" />
            <param argument="--file-ioctl" type="integer" min="0" optional="true"
                   label="file ioctl N" help="start N workers exercising file specific ioctls" />
            <param argument="--file-ioctl-ops" type="integer" min="0" optional="true"
                   label="file ioctl ops N" help="stop after N file ioctl bogo operations" />
            <param argument="--filename" type="integer" min="0" optional="true"
                   label="filename N" help="start N workers exercising filenames" />
            <param argument="--filename-ops" type="integer" min="0" optional="true"
                   label="filename ops N" help="stop after N filename bogo operations" />
            <param argument="--filename-opts" type="text" optional="true"
                   label="filename opts opt" help="allowed filename options" >
                <expand macro="sanitize_filename" />
            </param>
            <param argument="--flock" type="integer" min="0" optional="true"
                   label="flock N" help="start N workers locking a single file" />
            <param argument="--flock-ops" type="integer" min="0" optional="true"
                   label="flock ops N" help="stop after N flock bogo operations" />
            <param argument="--fork" type="integer" min="0" optional="true"
                   label="fork N" help="start N workers spinning on fork() and exit()" />
            <param argument="--fork-ops" type="integer" min="0" optional="true"
                   label="fork ops N" help="stop after N fork bogo operations" />
            <param argument="--fork-max" type="integer" min="1" optional="true"
                   label="fork max P" help="create P workers per iteration, default is 1" />
            <param argument="--fp-error" type="integer" min="0" optional="true"
                   label="fp error N" help="start N workers exercising floating point errors" />
            <param argument="--fp-error-ops" type="integer" min="0" optional="true"
                   label="fp error ops N" help="stop after N fp-error bogo operations" />
            <param argument="--fstat" type="integer" min="0" optional="true"
                   label="fstat N" help="start N workers exercising fstat on files" />
            <param argument="--fstat-ops" type="integer" min="0" optional="true"
                   label="fstat ops N" help="stop after N fstat bogo operations" />
            <param argument="--fstat-dir" type="text" optional="true"
                   label="fstat dir path" help="fstat files in the specified directory" >
                <expand macro="sanitize_filename" />
            </param>
            <param argument="--full" type="integer" min="0" optional="true"
                   label="full N" help="start N workers exercising /dev/full" />
            <param argument="--full-ops" type="integer" min="0" optional="true"
                   label="full ops N" help="stop after N /dev/full bogo I/O operations" />
            <param argument="--funccall" type="integer" min="0" optional="true"
                   label="funccall N" help="start N workers exercising 1 to 9 arg functions" />
            <param argument="--funccall-ops" type="integer" min="0" optional="true"
                   label="funccall ops N" help="stop after N function call bogo operations" />
            <param argument="--funccall-method" type="text" optional="true"
                   label="funccall method M" help="function call method M" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--funcret" type="integer" min="0" optional="true"
                   label="funcret N" help="start N workers exercising function return copying" />
            <param argument="--funcret-ops" type="integer" min="0" optional="true"
                   label="funcret ops N" help="stop after N function return bogo operations" />
            <param argument="--funcret-method" type="text" optional="true"
                   label="funcret method M" help="select method of exercising a function return type" >
                <expand macro="sanitize_filename" />
            </param>
            <param argument="--futex" type="integer" min="0" optional="true"
                   label="futex N" help="start N workers exercising a fast mutex" />
            <param argument="--futex-ops" type="integer" min="0" optional="true"
                   label="futex ops N" help="stop after N fast mutex bogo operations" />
            <param argument="--get" type="integer" min="0" optional="true"
                   label="get N" help="start N workers exercising the get*() system calls" />
            <param argument="--get-ops" type="integer" min="0" optional="true"
                   label="get ops N" help="stop after N get bogo operations" />
            <param argument="--getdent" type="integer" min="0" optional="true"
                   label="getdent N" help="start N workers reading directories using getdents" />
            <param argument="--getdent-ops" type="integer" min="0" optional="true"
                   label="getdent ops N" help="stop after N getdents bogo operations" />
            <param argument="--getrandom" type="integer" min="0" optional="true"
                   label="getrandom N" help="start N workers fetching random data via getrandom()" />
            <param argument="--getrandom-ops" type="integer" min="0" optional="true"
                   label="getrandom ops N" help="stop after N getrandom bogo operations" />
            <param argument="--handle" type="integer" min="0" optional="true"
                   label="handle N" help="start N workers exercising name_to_handle_at" />
            <param argument="--handle-ops" type="integer" min="0" optional="true"
                   label="handle ops N" help="stop after N handle bogo operations" />
            <param argument="--hdd" type="integer" min="0" optional="true"
                   label="hdd N" help="start N workers spinning on write()/unlink()" />
            <param argument="--hdd-ops" type="integer" min="0" optional="true"
                   label="hdd ops N" help="stop after N hdd bogo operations" />
            <param argument="--hdd-bytes" type="integer" min="0" optional="true"
                   label="hdd bytes N" help="write N bytes per hdd worker (default is 1GB)" />
            <param argument="--hdd-opts" type="text" optional="true"
                   label="hdd opts list" help="specify list of various stressor options" >
                <expand macro="sanitize_options" />
            </param>
            <param argument="--hdd-write-size" type="integer" min="0" optional="true"
                   label="hdd write size N" help="set the default write size to N bytes" />
            <param argument="--heapsort" type="integer" min="0" optional="true"
                   label="heapsort N" help="start N workers heap sorting 32 bit random integers" />
            <param argument="--heapsort-ops" type="integer" min="0" optional="true"
                   label="heapsort ops N" help="stop after N heap sort bogo operations" />
            <param argument="--heapsort-size" type="integer" min="0" optional="true"
                   label="heapsort size N" help="number of 32 bit integers to sort" />
            <param argument="--hrtimers" type="integer" min="0" optional="true"
                   label="hrtimers N" help="start N workers that exercise high resolution timers" />
            <param argument="--hrtimers-ops" type="integer" min="0" optional="true"
                   label="hrtimers ops N" help="stop after N bogo high-res timer bogo operations" />
            <param argument="--hsearch" type="integer" min="0" optional="true"
                   label="hsearch N" help="start N workers that exercise a hash table search" />
            <param argument="--hsearch-ops" type="integer" min="0" optional="true"
                   label="hsearch ops N" help="stop after N hash search bogo operations" />
            <param argument="--hsearch-size" type="integer" min="0" optional="true"
                   label="hsearch size N" help="number of integers to insert into hash table" />
            <param argument="--icache" type="integer" min="0" optional="true"
                   label="icache N" help="start N CPU instruction cache thrashing workers" />
            <param argument="--icache-ops" type="integer" min="0" optional="true"
                   label="icache ops N" help="stop after N icache bogo operations" />
            <param argument="--icmp-flood" type="integer" min="0" optional="true"
                   label="icmp flood N" help="start N ICMP packet flood workers" />
            <param argument="--icmp-flood-ops" type="integer" min="0" optional="true"
                   label="icmp flood ops N" help="stop after N ICMP bogo operations (ICMP packets)" />
            <param argument="--idle-page" type="integer" min="0" optional="true"
                   label="idle page N" help="start N idle page scanning workers" />
            <param argument="--idle-page-ops" type="integer" min="0" optional="true"
                   label="idle page ops N" help="stop after N idle page scan bogo operations" />
            <param argument="--inode-flags" type="integer" min="0" optional="true"
                   label="inode flags N" help="start N workers exercising various inode flags" />
            <param argument="--inode-flags-ops" type="integer" min="0" optional="true"
                   label="inode flags ops N" help="inode-flags workers after N bogo operations" />
            <param argument="--inotify" type="integer" min="0" optional="true"
                   label="inotify N" help="start N workers exercising inotify events" />
            <param argument="--inotify-ops" type="integer" min="0" optional="true"
                   label="inotify ops N" help="stop inotify workers after N bogo operations" />
            <param argument="--io" type="integer" min="0" optional="true"
                   label="io N" help="start N workers spinning on sync()" />
            <param argument="--io-ops" type="integer" min="0" optional="true"
                   label="io ops N" help="stop sync I/O after N io bogo operations" />
            <param argument="--iomix" type="integer" min="0" optional="true"
                   label="iomix N" help="start N workers that have a mix of I/O operations" />
            <param argument="--iomix-bytes" type="integer" min="0" optional="true"
                   label="iomix bytes N" help="write N bytes per iomix worker (default is 1GB)" />
            <param argument="--iomix-ops" type="integer" min="0" optional="true"
                   label="iomix ops N" help="stop iomix workers after N iomix bogo operations" />
            <param argument="--ioport" type="integer" min="0" optional="true"
                   label="ioport N" help="start N workers exercising port I/O" />
            <param argument="--ioport-ops" type="integer" min="0" optional="true"
                   label="ioport ops N" help="stop ioport workers after N port bogo operations" />
            <param argument="--ioprio" type="integer" min="0" optional="true"
                   label="ioprio N" help="start N workers exercising set/get iopriority" />
            <param argument="--ioprio-ops" type="integer" min="0" optional="true"
                   label="ioprio ops N" help="stop after N io bogo iopriority operations" />
            <param argument="--io-uring" type="integer" min="0" optional="true"
                   label="io uring N" help="start N workers that issue io-uring I/O requests" />
            <param argument="--io-uring-ops" type="integer" min="0" optional="true"
                   label="io uring ops N" help="stop after N bogo io-uring I/O requests" />
            <param argument="--ipsec-mb" type="integer" min="0" optional="true"
                   label="ipsec mb N" help="start N workers exercising the IPSec MB encoding" />
            <param argument="--ipsec-mb-ops" type="integer" min="0" optional="true"
                   label="ipsec mb ops N" help="stop after N ipsec bogo encoding operations" />
            <param argument="--ipsec-mb-feature" type="text" optional="true"
                   label="ipsec mb feature F" help="specify CPU feature F" >
                <expand macro="sanitize_options" />
            </param>
            <param argument="--itimer" type="integer" min="0" optional="true"
                   label="itimer N" help="start N workers exercising interval timers" />
            <param argument="--itimer-ops" type="integer" min="0" optional="true"
                   label="itimer ops N" help="stop after N interval timer bogo operations" />
            <param argument="--itimer-rand" type="boolean"
                   truevalue="--itimer-rand" falsevalue="" checked="false"
                   label="itimer rand" help="enable random interval timer frequency" />
            <param argument="--judy" type="integer" min="0" optional="true"
                   label="judy N" help="start N workers that exercise a judy array search" />
            <param argument="--judy-ops" type="integer" min="0" optional="true"
                   label="judy ops N" help="stop after N judy array search bogo operations" />
            <param argument="--judy-size" type="integer" min="0" optional="true"
                   label="judy size N" help="number of 32 bit integers to insert into judy array" />
            <param argument="--kcmp" type="integer" min="0" optional="true"
                   label="kcmp N" help="start N workers exercising kcmp" />
            <param argument="--kcmp-ops" type="integer" min="0" optional="true"
                   label="kcmp ops N" help="stop after N kcmp bogo operations" />
            <param argument="--key" type="integer" min="0" optional="true"
                   label="key N" help="start N workers exercising key operations" />
            <param argument="--key-ops" type="integer" min="0" optional="true"
                   label="key ops N" help="stop after N key bogo operations" />
            <param argument="--kill" type="integer" min="0" optional="true"
                   label="kill N" help="start N workers killing with SIGUSR1" />
            <param argument="--kill-ops" type="integer" min="0" optional="true"
                   label="kill ops N" help="stop after N kill bogo operations" />
            <param argument="--klog" type="integer" min="0" optional="true"
                   label="klog N" help="start N workers exercising kernel syslog interface" />
            <param argument="--klog-ops" type="integer" min="0" optional="true"
                   label="klog ops N" help="stop after N klog bogo operations" />
            <param argument="--lease" type="integer" min="0" optional="true"
                   label="lease N" help="start N workers holding and breaking a lease" />
            <param argument="--lease-ops" type="integer" min="0" optional="true"
                   label="lease ops N" help="stop after N lease bogo operations" />
            <param argument="--lease-breakers" type="integer" min="0" optional="true"
                   label="lease breakers N" help="number of lease breaking workers to start" />
            <param argument="--link" type="integer" min="0" optional="true"
                   label="link N" help="start N workers creating hard links" />
            <param argument="--link-ops" type="integer" min="0" optional="true"
                   label="link ops N" help="stop after N link bogo operations" />
            <param argument="--locka" type="integer" min="0" optional="true"
                   label="locka N" help="start N workers locking a file via advisory locks" />
            <param argument="--locka-ops" type="integer" min="0" optional="true"
                   label="locka ops N" help="stop after N locka bogo operations" />
            <param argument="--lockbus" type="integer" min="0" optional="true"
                   label="lockbus N" help="start N workers locking a memory increment" />
            <param argument="--lockbus-ops" type="integer" min="0" optional="true"
                   label="lockbus ops N" help="stop after N lockbus bogo operations" />
            <param argument="--lockf" type="integer" min="0" optional="true"
                   label="lockf N" help="start N workers locking a single file via lockf" />
            <param argument="--lockf-ops" type="integer" min="0" optional="true"
                   label="lockf ops N" help="stop after N lockf bogo operations" />
            <param argument="--lockf-nonblock" type="boolean"
                   truevalue="--lockf-nonblock" falsevalue="" checked="false"
                   label="lockf nonblock" help="don't block if lock cannot be obtained, re-try" />
            <param argument="--lockofd" type="integer" min="0" optional="true"
                   label="lockofd N" help="start N workers using open file description locking" />
            <param argument="--lockofd-ops" type="integer" min="0" optional="true"
                   label="lockofd ops N" help="stop after N lockofd bogo operations" />
            <param argument="--longjmp" type="integer" min="0" optional="true"
                   label="longjmp N" help="start N workers exercising setjmp/longjmp" />
            <param argument="--longjmp-ops" type="integer" min="0" optional="true"
                   label="longjmp ops N" help="stop after N longjmp bogo operations" />
            <param argument="--loop" type="integer" min="0" optional="true"
                   label="loop N" help="start N workers exercising loopback devices" />
            <param argument="--loop-ops" type="integer" min="0" optional="true"
                   label="loop ops N" help="stop after N bogo loopback operations" />
            <param argument="--lsearch" type="integer" min="0" optional="true"
                   label="lsearch N" help="start N workers that exercise a linear search" />
            <param argument="--lsearch-ops" type="integer" min="0" optional="true"
                   label="lsearch ops N" help="stop after N linear search bogo operations" />
            <param argument="--lsearch-size" type="integer" min="0" optional="true"
                   label="lsearch size N" help="number of 32 bit integers to lsearch" />
            <param argument="--madvise" type="integer" min="0" optional="true"
                   label="madvise N" help="start N workers exercising madvise on memory" />
            <param argument="--madvise-ops" type="integer" min="0" optional="true"
                   label="madvise ops N" help="stop after N bogo madvise operations" />
            <param argument="--malloc" type="integer" min="0" optional="true"
                   label="malloc N" help="start N workers exercising malloc/realloc/free" />
            <param argument="--malloc-bytes" type="integer" min="0" optional="true"
                   label="malloc bytes N" help="allocate up to N bytes per allocation" />
            <param argument="--malloc-max" type="integer" min="0" optional="true"
                   label="malloc max N" help="keep up to N allocations at a time" />
            <param argument="--malloc-ops" type="integer" min="0" optional="true"
                   label="malloc ops N" help="stop after N malloc bogo operations" />
            <param argument="--malloc-thresh" type="integer" min="0" optional="true"
                   label="malloc thresh N" help="threshold where malloc uses mmap instead of sbrk" />
            <param argument="--matrix" type="integer" min="0" optional="true"
                   label="matrix N" help="start N workers exercising matrix operations" />
            <param argument="--matrix-ops" type="integer" min="0" optional="true"
                   label="matrix ops N" help="stop after N maxtrix bogo operations" />
            <param argument="--matrix-method" type="select" optional="true"
                   label="matrix method M" help="specify matrix stress method M, default is all" >
                <expand macro="default_method_all" />
            </param>
            <param argument="--matrix-size" type="integer" min="0" optional="true"
                   label="matrix size N" help="specify the size of the N x N matrix" />
            <param argument="--matrix-yx" type="boolean"
                   truevalue="--matrix-yx" falsevalue="" checked="false"
                   label="matrix yx" help="matrix operation is y by x instead of x by y" />
            <param argument="--matrix-3d" type="integer" min="0" optional="true"
                   label="matrix 3d N" help="start N workers exercising 3D matrix operations" />
            <param argument="--matrix-3d-ops" type="integer" min="0" optional="true"
                   label="matrix 3d ops N" help="stop after N 3D maxtrix bogo operations" />
            <param argument="--matrix-3d-method" type="select" optional="true"
                   label="matrix 3d method M" help="specify 3D matrix stress method M, default is all" >
                <expand macro="default_method_all" />
            </param>
            <param argument="--matrix-3d-size" type="integer" min="0" optional="true"
                   label="matrix 3d size N" help="specify the size of the N x N x N matrix" />
            <param argument="--matrix-3d-zyx" type="boolean"
                   truevalue="--matrix-3d-zyx" falsevalue="" checked="false"
                   label="matrix 3d zyx" help="matrix operation is z by y by x instead of x by y by z" />
            <param argument="--mcontend" type="integer" min="0" optional="true"
                   label="mcontend N" help="start N workers that produce memory contention" />
            <param argument="--mcontend-ops" type="integer" min="0" optional="true"
                   label="mcontend ops N" help="stop memory contention workers after N bogo-ops" />
            <param argument="--membarrier" type="integer" min="0" optional="true"
                   label="membarrier N" help="start N workers performing membarrier system calls" />
            <param argument="--membarrier-ops" type="integer" min="0" optional="true"
                   label="membarrier ops N" help="stop after N membarrier bogo operations" />
            <param argument="--memcpy" type="integer" min="0" optional="true"
                   label="memcpy N" help="start N workers performing memory copies" />
            <param argument="--memcpy-ops" type="integer" min="0" optional="true"
                   label="memcpy ops N" help="stop after N memcpy bogo operations" />
            <param argument="--memcpy-method" type="select" optional="true"
                   label="memcpy method M" help="set memcpy method (M = all, libc, builtin, naive)" >
                <option value="all" />
                <option value="libc" />
                <option value="builtin" />
                <option value="naive" />
            </param>
            <param argument="--memfd" type="integer" min="0" optional="true"
                   label="memfd N" help="start N workers allocating memory with memfd_create" />
            <param argument="--memfd-bytes" type="integer" min="0" optional="true"
                   label="memfd bytes N" help="allocate N bytes for each stress iteration" />
            <param argument="--memfd-fds" type="integer" min="0" optional="true"
                   label="memfd fds N" help="number of memory fds to open per stressors" />
            <param argument="--memfd-ops" type="integer" min="0" optional="true"
                   label="memfd ops N" help="stop after N memfd bogo operations" />
            <param argument="--memhotplug" type="integer" min="0" optional="true"
                   label="memhotplug N" help="start N workers that exercise memory hotplug" />
            <param argument="--memhotplug-ops" type="integer" min="0" optional="true"
                   label="memhotplug ops N" help="stop after N memory hotplug operations" />
            <param argument="--memrate" type="integer" min="0" optional="true"
                   label="memrate N" help="start N workers exercised memory read/writes" />
            <param argument="--memrate-ops" type="integer" min="0" optional="true"
                   label="memrate ops N" help="stop after N memrate bogo operations" />
            <param argument="--memrate-bytes" type="integer" min="0" optional="true"
                   label="memrate bytes N" help="size of memory buffer being exercised" />
            <param argument="--memrate-rd-mbs" type="integer" min="0" optional="true"
                   label="memrate rd mbs N" help="read rate from buffer in megabytes per second" />
            <param argument="--memrate-wr-mbs" type="integer" min="0" optional="true"
                   label="memrate wr mbs N" help="write rate to buffer in megabytes per second" />
            <param argument="--memthrash" type="integer" min="0" optional="true"
                   label="memthrash N" help="start N workers thrashing a 16MB memory buffer" />
            <param argument="--memthrash-ops" type="integer" min="0" optional="true"
                   label="memthrash ops N" help="stop after N memthrash bogo operations" />
            <param argument="--memthrash-method" type="select" optional="true"
                   label="memthrash method M" help="specify memthrash method M, default is all" >
                <expand macro="default_method_all" />
            </param>
            <param argument="--mergesort" type="integer" min="0" optional="true"
                   label="mergesort N" help="start N workers merge sorting 32 bit random integers" />
            <param argument="--mergesort-ops" type="integer" min="0" optional="true"
                   label="mergesort ops N" help="stop after N merge sort bogo operations" />
            <param argument="--mergesort-size" type="integer" min="0" optional="true"
                   label="mergesort size N" help="number of 32 bit integers to sort" />
            <param argument="--mincore" type="integer" min="0" optional="true"
                   label="mincore N" help="start N workers exercising mincore" />
            <param argument="--mincore-ops" type="integer" min="0" optional="true"
                   label="mincore ops N" help="stop after N mincore bogo operations" />
            <param argument="--mincore-random" type="boolean"
                   truevalue="--mincore-random" falsevalue="" checked="false"
                   label="mincore random" help="randomly select pages rather than linear scan" />
            <param argument="--mknod" type="integer" min="0" optional="true"
                   label="mknod N" help="start N workers that exercise mknod" />
            <param argument="--mknod-ops" type="integer" min="0" optional="true"
                   label="mknod ops N" help="stop after N mknod bogo operations" />
            <param argument="--mlock" type="integer" min="0" optional="true"
                   label="mlock N" help="start N workers exercising mlock/munlock" />
            <param argument="--mlock-ops" type="integer" min="0" optional="true"
                   label="mlock ops N" help="stop after N mlock bogo operations" />
            <param argument="--mlockmany" type="integer" min="0" optional="true"
                   label="mlockmany N" help="start N workers exercising many mlock/munlock processes" />
            <param argument="--mlockmany-ops" type="integer" min="0" optional="true"
                   label="mlockmany ops N" help="stop after N mlockmany bogo operations" />
            <param argument="--mmap" type="integer" min="0" optional="true"
                   label="mmap N" help="start N workers stressing mmap and munmap" />
            <param argument="--mmap-ops" type="integer" min="0" optional="true"
                   label="mmap ops N" help="stop after N mmap bogo operations" />
            <param argument="--mmap-async" type="boolean"
                   truevalue="--mmap-async" falsevalue="" checked="false"
                   label="mmap async" help="using asynchronous msyncs for file based mmap" />
            <param argument="--mmap-bytes" type="integer" min="0" optional="true"
                   label="mmap bytes N" help="mmap and munmap N bytes for each stress iteration" />
            <param argument="--mmap-file" type="boolean"
                   truevalue="--mmap-file" falsevalue="" checked="false"
                   label="mmap file" help="mmap onto a file using synchronous msyncs" />
            <param argument="--mmap-mprotect" type="boolean"
                   truevalue="--mmap-mprotect" falsevalue="" checked="false"
                   label="mmap mprotect" help="enable mmap mprotect stressing" />
            <param argument="--mmap-osync" type="boolean"
                   truevalue="--mmap-osync" falsevalue="" checked="false"
                   label="mmap osync" help="enable O_SYNC on file" />
            <param argument="--mmap-odirect" type="boolean"
                   truevalue="--mmap-odirect" falsevalue="" checked="false"
                   label="mmap odirect" help="enable O_DIRECT on file" />
            <param argument="--mmapaddr" type="integer" min="0" optional="true"
                   label="mmapaddr N" help="start N workers stressing mmap with random addresses" />
            <param argument="--mmapaddr-ops" type="integer" min="0" optional="true"
                   label="mmapaddr ops N" help="stop after N mmapaddr bogo operations" />
            <param argument="--mmapfixed" type="integer" min="0" optional="true"
                   label="mmapfixed N" help="start N workers stressing mmap with fixed mappings" />
            <param argument="--mmapfixed-ops" type="integer" min="0" optional="true"
                   label="mmapfixed ops N" help="stop after N mmapfixed bogo operations" />
            <param argument="--mmapfork" type="integer" min="0" optional="true"
                   label="mmapfork N" help="start N workers stressing many forked mmaps/munmaps" />
            <param argument="--mmapfork-ops" type="integer" min="0" optional="true"
                   label="mmapfork ops N" help="stop after N mmapfork bogo operations" />
            <param argument="--mmapmany" type="integer" min="0" optional="true"
                   label="mmapmany N" help="start N workers stressing many mmaps and munmaps" />
            <param argument="--mmapmany-ops" type="integer" min="0" optional="true"
                   label="mmapmany ops N" help="stop after N mmapmany bogo operations" />
            <param argument="--mq" type="integer" min="0" optional="true"
                   label="mq N" help="start N workers passing messages using POSIX messages" />
            <param argument="--mq-ops" type="integer" min="0" optional="true"
                   label="mq ops N" help="stop mq workers after N bogo messages" />
            <param argument="--mq-size" type="integer" min="0" optional="true"
                   label="mq size N" help="specify the size of the POSIX message queue" />
            <param argument="--mremap" type="integer" min="0" optional="true"
                   label="mremap N" help="start N workers stressing mremap" />
            <param argument="--mremap-ops" type="integer" min="0" optional="true"
                   label="mremap ops N" help="stop after N mremap bogo operations" />
            <param argument="--mremap-bytes" type="integer" min="0" optional="true"
                   label="mremap bytes N" help="mremap N bytes maximum for each stress iteration" />
            <param argument="--mremap-lock" type="boolean"
                   truevalue="--mremap-lock" falsevalue="" checked="false"
                   label="mremap lock" help="mlock remap pages, force pages to be unswappable" />
            <param argument="--msg" type="integer" min="0" optional="true"
                   label="msg N" help="start N workers stressing System V messages" />
            <param argument="--msg-ops" type="integer" min="0" optional="true"
                   label="msg ops N" help="stop msg workers after N bogo messages" />
            <param argument="--msg-types" type="integer" min="0" optional="true"
                   label="msg types N" help="enable N different message types" />
            <param argument="--msync" type="integer" min="0" optional="true"
                   label="msync N" help="start N workers syncing mmap'd data with msync" />
            <param argument="--msync-ops" type="integer" min="0" optional="true"
                   label="msync ops N" help="stop msync workers after N bogo msyncs" />
            <param argument="--msync-bytes" type="integer" min="0" optional="true"
                   label="msync bytes N" help="size of file and memory mapped region to msync" />
            <param argument="--nanosleep" type="integer" min="0" optional="true"
                   label="nanosleep N" help="start N workers performing short sleeps" />
            <param argument="--nanosleep-ops" type="integer" min="0" optional="true"
                   label="nanosleep ops N" help="stop after N bogo sleep operations" />
            <param argument="--netdev" type="integer" min="0" optional="true"
                   label="netdev N" help="start N workers exercising netdevice ioctls" />
            <param argument="--netdev-ops" type="integer" min="0" optional="true"
                   label="netdev ops N" help="stop netdev workers after N bogo operations" />
            <param argument="--netlink-proc" type="integer" min="0" optional="true"
                   label="netlink proc N" help="start N workers exercising netlink process events" />
            <param argument="--netlink-proc-ops" type="integer" min="0" optional="true"
                   label="netlink proc ops N" help="stop netlink-proc workers after N bogo events" />
            <param argument="--netlink-task" type="integer" min="0" optional="true"
                   label="netlink task N" help="start N workers exercising netlink tasks events" />
            <param argument="--netlink-task-ops" type="integer" min="0" optional="true"
                   label="netlink task ops N" help="stop netlink-task workers after N bogo events" />
            <param argument="--nice" type="integer" min="0" optional="true"
                   label="nice N" help="start N workers that randomly re-adjust nice levels" />
            <param argument="--nice-ops" type="integer" min="0" optional="true"
                   label="nice ops N" help="stop after N nice bogo operations" />
            <param argument="--nop" type="integer" min="0" optional="true"
                   label="nop N" help="start N workers that burn cycles with no-ops" />
            <param argument="--nop-ops" type="integer" min="0" optional="true"
                   label="nop ops N" help="stop after N nop bogo no-op operations" />
            <param argument="--null" type="integer" min="0" optional="true"
                   label="null N" help="start N workers writing to /dev/null" />
            <param argument="--null-ops" type="integer" min="0" optional="true"
                   label="null ops N" help="stop after N /dev/null bogo write operations" />
            <param argument="--numa" type="integer" min="0" optional="true"
                   label="numa N" help="start N workers stressing NUMA interfaces" />
            <param argument="--numa-ops" type="integer" min="0" optional="true"
                   label="numa ops N" help="stop after N NUMA bogo operations" />
            <param argument="--oom-pipe" type="integer" min="0" optional="true"
                   label="oom pipe N" help="start N workers exercising large pipes" />
            <param argument="--oom-pipe-ops" type="integer" min="0" optional="true"
                   label="oom pipe ops N" help="stop after N oom-pipe bogo operations" />
            <param argument="--opcode" type="integer" min="0" optional="true"
                   label="opcode N" help="start N workers exercising random opcodes" />
            <param argument="--opcode-ops" type="integer" min="0" optional="true"
                   label="opcode ops N" help="stop after N opcode bogo operations" />
            <param argument="--opcode-method" type="select" optional="true"
                   label="opcode method M" help="set opcode stress method (M = random, inc, mixed, text)" >
                <option value="random" />
                <option value="inc" />
                <option value="mixed" />
                <option value="text" />
            </param>
            <param argument="--open" type="integer" min="0" optional="true"
                   label="open N" help="start N workers exercising open/close" />
            <param argument="--open-ops" type="integer" min="0" optional="true"
                   label="open ops N" help="stop after N open/close bogo operations" />
            <param argument="--open-fd" type="boolean"
                   truevalue="--open-fd" falsevalue="" checked="false"
                   label="open fd" help="open files in /proc/$pid/fd" />
            <param argument="--personality" type="integer" min="0" optional="true"
                   label="personality N" help="start N workers that change their personality" />
            <param argument="--personality-ops" type="integer" min="0" optional="true"
                   label="personality ops N" help="stop after N bogo personality calls" />
            <param argument="--physpage" type="integer" min="0" optional="true"
                   label="physpage N" help="start N workers performing physical page lookup" />
            <param argument="--physpage-ops" type="integer" min="0" optional="true"
                   label="physpage ops N" help="stop after N physical page bogo operations" />
            <param argument="--pidfd" type="integer" min="0" optional="true"
                   label="pidfd N" help="start N workers exercising pidfd system call" />
            <param argument="--pidfd-ops" type="integer" min="0" optional="true"
                   label="pidfd ops N" help="stop after N pidfd bogo operations" />
            <param argument="--ping-sock" type="integer" min="0" optional="true"
                   label="ping sock N" help="start N workers that exercises a ping socket" />
            <param argument="--ping-sock-ops" type="integer" min="0" optional="true"
                   label="ping sock ops N" help="stop after N ping sendto messages" />
            <param argument="--pipe" type="integer" min="0" optional="true"
                   label="pipe N" help="start N workers exercising pipe I/O" />
            <param argument="--pipe-ops" type="integer" min="0" optional="true"
                   label="pipe ops N" help="stop after N pipe I/O bogo operations" />
            <param argument="--pipe-data-size" type="integer" min="0" optional="true"
                   label="pipe data size N" help="set pipe size of each pipe write to N bytes" />
            <param argument="--pipe-size" type="integer" min="0" optional="true"
                   label="pipe size N" help="set pipe size to N bytes" />
            <param argument="--pipeherd" type="integer" min="0" optional="true"
                   label="pipeherd N" help="start N multi-process workers exercising pipes I/O" />
            <param argument="--pipeherd-ops" type="integer" min="0" optional="true"
                   label="pipeherd ops N" help="stop after N pipeherd I/O bogo operations" />
            <param argument="--pipeherd-yield" type="boolean"
                   truevalue="--pipeherd-yield" falsevalue="" checked="false"
                   label="pipeherd yield" help="force processes to yield after each write" />
            <param argument="--pkey" type="integer" min="0" optional="true"
                   label="pkey N" help="start N workers exercising pkey_mprotect" />
            <param argument="--pkey-ops" type="integer" min="0" optional="true"
                   label="pkey ops N" help="stop after N bogo pkey_mprotect bogo operations" />
            <param argument="--poll" type="integer" min="0" optional="true"
                   label="poll N" help="start N workers exercising zero timeout polling" />
            <param argument="--poll-ops" type="integer" min="0" optional="true"
                   label="poll ops N" help="stop after N poll bogo operations" />
            <param argument="--procfs" type="integer" min="0" optional="true"
                   label="procfs N" help="start N workers reading portions of /proc" />
            <param argument="--procfs-ops" type="integer" min="0" optional="true"
                   label="procfs ops N" help="stop procfs workers after N bogo read operations" />
            <param argument="--procfs" type="integer" min="0" optional="true"
                   label="procfs N" help="start N workers reading portions of /proc" />
            <param argument="--procfs-ops" type="integer" min="0" optional="true"
                   label="procfs ops N" help="stop procfs workers after N bogo read operations" />
            <param argument="--pthread" type="integer" min="0" optional="true"
                   label="pthread N" help="start N workers that create multiple threads" />
            <param argument="--pthread-ops" type="integer" min="0" optional="true"
                   label="pthread ops N" help="stop pthread workers after N bogo threads created" />
            <param argument="--pthread-max" type="integer" min="1" optional="true"
                   label="pthread max P" help="create P threads at a time by each worker" />
            <param argument="--ptrace" type="integer" min="0" optional="true"
                   label="ptrace N" help="start N workers that trace a child using ptrace" />
            <param argument="--ptrace-ops" type="integer" min="0" optional="true"
                   label="ptrace ops N" help="stop ptrace workers after N system calls are traced" />
            <param argument="--pty" type="integer" min="0" optional="true"
                   label="pty N" help="start N workers that exercise pseudoterminals" />
            <param argument="--pty-ops" type="integer" min="0" optional="true"
                   label="pty ops N" help="stop pty workers after N pty bogo operations" />
            <param argument="--pty-max" type="integer" min="0" optional="true"
                   label="pty max N" help="attempt to open a maximum of N ptys" />
            <param argument="--qsort" type="integer" min="0" optional="true"
                   label="qsort N" help="start N workers qsorting 32 bit random integers" />
            <param argument="--qsort-ops" type="integer" min="0" optional="true"
                   label="qsort ops N" help="stop after N qsort bogo operations" />
            <param argument="--qsort-size" type="integer" min="0" optional="true"
                   label="qsort size N" help="number of 32 bit integers to sort" />
            <param argument="--quota" type="integer" min="0" optional="true"
                   label="quota N" help="start N workers exercising quotactl commands" />
            <param argument="--quota-ops" type="integer" min="0" optional="true"
                   label="quota ops N" help="stop after N quotactl bogo operations" />
            <param argument="--radixsort" type="integer" min="0" optional="true"
                   label="radixsort N" help="start N workers radix sorting random strings" />
            <param argument="--radixsort-ops" type="integer" min="0" optional="true"
                   label="radixsort ops N" help="stop after N radixsort bogo operations" />
            <param argument="--radixsort-size" type="integer" min="0" optional="true"
                   label="radixsort size N" help="number of strings to sort" />
            <param argument="--ramfs" type="integer" min="0" optional="true"
                   label="ramfs N" help="start N workers exercising ramfs mounts" />
            <param argument="--ramfs-ops" type="integer" min="0" optional="true"
                   label="ramfs ops N" help="stop after N bogo ramfs mount operations" />
            <param argument="--ramfs-bytes" type="integer" min="0" optional="true"
                   label="ramfs bytes N" help="set the ramfs size in bytes, e.g. 2M is 2MB" />
            <param argument="--rawdev" type="integer" min="0" optional="true"
                   label="rawdev N" help="start N workers that read a raw device" />
            <param argument="--rawdev-ops" type="integer" min="0" optional="true"
                   label="rawdev ops N" help="stop after N rawdev read operations" />
            <param argument="--rawdev-method" type="text" optional="true"
                   label="rawdev method M" help="specify the rawdev read method to use" >
                <expand macro="sanitize_filename" />
            </param>
            <param argument="--rawpkt" type="integer" min="0" optional="true"
                   label="rawpkt N" help="start N workers exercising raw packets" />
            <param argument="--rawpkt-ops" type="integer" min="0" optional="true"
                   label="rawpkt ops N" help="stop after N raw packet bogo operations" />
            <param argument="--rawpkt-port" type="integer" min="1" optional="true"
                   label="rawpkt port P" help="use raw packet ports P to P + number of workers - 1" />
            <param argument="--rawsock" type="integer" min="0" optional="true"
                   label="rawsock N" help="start N workers performing raw socket send/receives " />
            <param argument="--rawsock-ops" type="integer" min="0" optional="true"
                   label="rawsock ops N" help="stop after N raw socket bogo operations" />
            <param argument="--rawudp" type="integer" min="0" optional="true"
                   label="rawudp N" help="start N workers exercising raw UDP socket I/O" />
            <param argument="--rawudp-ops" type="integer" min="0" optional="true"
                   label="rawudp ops N" help="stop after N raw socket UDP bogo operations" />
            <param argument="--rawudp-port" type="integer" min="1" optional="true"
                   label="rawudp port P" help="use raw socket ports P to P + number of workers - 1" />
            <param argument="--rdrand" type="integer" min="0" optional="true"
                   label="rdrand N" help="start N workers exercising rdrand (x86 only)" />
            <param argument="--rdrand-ops" type="integer" min="0" optional="true"
                   label="rdrand ops N" help="stop after N rdrand bogo operations" />
            <param argument="--readahead" type="integer" min="0" optional="true"
                   label="readahead N" help="start N workers exercising file readahead" />
            <param argument="--readahead-bytes" type="text" optional="true"
                   label="readahead bytes N" help="size of file to readahead on (default is 1GB)" >
                <expand macro="sanitize_filesize" />
            </param>
            <param argument="--readahead-ops" type="integer" min="0" optional="true"
                   label="readahead ops N" help="stop after N readahead bogo operations" />
            <param argument="--reboot" type="integer" min="0" optional="true"
                   label="reboot N" help="start N workers that exercise bad reboot calls" />
            <param argument="--reboot-ops" type="integer" min="0" optional="true"
                   label="reboot ops N" help="stop after N bogo reboot operations" />
            <param argument="--remap" type="integer" min="0" optional="true"
                   label="remap N" help="start N workers exercising page remappings" />
            <param argument="--remap-ops" type="integer" min="0" optional="true"
                   label="remap ops N" help="stop after N remapping bogo operations" />
            <param argument="--rename" type="integer" min="0" optional="true"
                   label="rename N" help="start N workers exercising file renames" />
            <param argument="--rename-ops" type="integer" min="0" optional="true"
                   label="rename ops N" help="stop after N rename bogo operations" />
            <param argument="--resources" type="integer" min="0" optional="true"
                   label="resources N" help="start N workers consuming system resources" />
            <param argument="--resources-ops" type="integer" min="0" optional="true"
                   label="resources ops N" help="stop after N resource bogo operations" />
            <param argument="--revio" type="integer" min="0" optional="true"
                   label="revio N" help="start N workers performing reverse I/O" />
            <param argument="--revio-ops" type="integer" min="0" optional="true"
                   label="revio ops N" help="stop after N revio bogo operations" />
            <param argument="--rmap" type="integer" min="0" optional="true"
                   label="rmap N" help="start N workers that stress reverse mappings" />
            <param argument="--rmap-ops" type="integer" min="0" optional="true"
                   label="rmap ops N" help="stop after N rmap bogo operations" />
            <param argument="--rmap" type="integer" min="0" optional="true"
                   label="rmap N" help="start N workers that stress reverse mappings" />
            <param argument="--rmap-ops" type="integer" min="0" optional="true"
                   label="rmap ops N" help="stop after N rmap bogo operations" />
            <param argument="--rseq" type="integer" min="0" optional="true"
                   label="rseq N" help="start N workers that exercise restartable sequences" />
            <param argument="--rseq-ops" type="integer" min="0" optional="true"
                   label="rseq ops N" help="stop after N bogo restartable sequence operations" />
            <param argument="--rtc" type="integer" min="0" optional="true"
                   label="rtc N" help="start N workers that exercise the RTC interfaces" />
            <param argument="--rtc-ops" type="integer" min="0" optional="true"
                   label="rtc ops N" help="stop after N RTC bogo operations" />
            <param argument="--schedpolicy" type="integer" min="0" optional="true"
                   label="schedpolicy N" help="start N workers that exercise scheduling policy" />
            <param argument="--schedpolicy-ops" type="integer" min="0" optional="true"
                   label="schedpolicy ops N" help="stop after N scheduling policy bogo operations" />
            <param argument="--sctp" type="integer" min="0" optional="true"
                   label="sctp N" help="start N workers performing SCTP send/receives " />
            <param argument="--sctp-ops" type="integer" min="0" optional="true"
                   label="sctp ops N" help="stop after N SCTP bogo operations" />
            <param argument="--sctp-domain" type="select" optional="true"
                   label="sctp domain D" help="specify sctp domain, default is ipv4" >
                <expand macro="default_ipv4" />
            </param>
            <param argument="--sctp-port" type="integer" min="1" optional="true"
                   label="sctp port P" help="use SCTP ports P to P + number of workers - 1" />
            <param argument="--sctp-sched" type="text" optional="true"
                   label="sctp sched S" help="specify sctp scheduler" >
                <expand macro="sanitize_options" />
            </param>
            <param argument="--seal" type="integer" min="0" optional="true"
                   label="seal N" help="start N workers performing fcntl SEAL commands" />
            <param argument="--seal-ops" type="integer" min="0" optional="true"
                   label="seal ops N" help="stop after N SEAL bogo operations" />
            <param argument="--seccomp" type="integer" min="0" optional="true"
                   label="seccomp N" help="start N workers performing seccomp call filtering" />
            <param argument="--seccomp-ops" type="integer" min="0" optional="true"
                   label="seccomp ops N" help="stop after N seccomp bogo operations" />
            <param argument="--secretmem" type="integer" min="0" optional="true"
                   label="secretmem N" help="start N workers that use secretmem mappings" />
            <param argument="--secretmem-ops" type="integer" min="0" optional="true"
                   label="secretmem ops N" help="stop after N secretmem bogo operations" />
            <param argument="--seek" type="integer" min="0" optional="true"
                   label="seek N" help="start N workers performing random seek r/w IO" />
            <param argument="--seek-ops" type="integer" min="0" optional="true"
                   label="seek ops N" help="stop after N seek bogo operations" />
            <param argument="--seek-punch" type="boolean"
                   truevalue="--seek-punch" falsevalue="" checked="false"
                   label="seek punch" help="punch random holes in file to stress extents" />
            <param argument="--seek-size" type="integer" min="0" optional="true"
                   label="seek size N" help="length of file to do random I/O upon" />
            <param argument="--sem" type="integer" min="0" optional="true"
                   label="sem N" help="start N workers doing semaphore operations" />
            <param argument="--sem-ops" type="integer" min="0" optional="true"
                   label="sem ops N" help="stop after N semaphore bogo operations" />
            <param argument="--sem-procs" type="integer" min="0" optional="true"
                   label="sem procs N" help="number of processes to start per worker" />
            <param argument="--sem-sysv" type="integer" min="0" optional="true"
                   label="sem sysv N" help="start N workers doing System V semaphore operations" />
            <param argument="--sem-sysv-ops" type="integer" min="0" optional="true"
                   label="sem sysv ops N" help="stop after N System V sem bogo operations" />
            <param argument="--sem-sysv-procs" type="integer" min="0" optional="true"
                   label="sem sysv procs N" help="number of processes to start per worker" />
            <param argument="--sendfile" type="integer" min="0" optional="true"
                   label="sendfile N" help="start N workers exercising sendfile" />
            <param argument="--sendfile-ops" type="integer" min="0" optional="true"
                   label="sendfile ops N" help="stop after N bogo sendfile operations" />
            <param argument="--sendfile-size" type="integer" min="0" optional="true"
                   label="sendfile size N" help="size of data to be sent with sendfile" />
            <param argument="--session" type="integer" min="0" optional="true"
                   label="session N" help="start N workers that exercise new sessions" />
            <param argument="--session-ops" type="integer" min="0" optional="true"
                   label="session ops N" help="stop after N session bogo operations" />
            <param argument="--set" type="integer" min="0" optional="true"
                   label="set N" help="start N workers exercising the set*() system calls" />
            <param argument="--set-ops" type="integer" min="0" optional="true"
                   label="set ops N" help="stop after N set bogo operations" />
            <param argument="--shellsort" type="integer" min="0" optional="true"
                   label="shellsort N" help="start N workers shell sorting 32 bit random integers" />
            <param argument="--shellsort-ops" type="integer" min="0" optional="true"
                   label="shellsort ops N" help="stop after N shell sort bogo operations" />
            <param argument="--shellsort-size" type="integer" min="0" optional="true"
                   label="shellsort size N" help="number of 32 bit integers to sort" />
            <param argument="--shm" type="integer" min="0" optional="true"
                   label="shm N" help="start N workers that exercise POSIX shared memory" />
            <param argument="--shm-ops" type="integer" min="0" optional="true"
                   label="shm ops N" help="stop after N POSIX shared memory bogo operations" />
            <param argument="--shm-bytes" type="integer" min="0" optional="true"
                   label="shm bytes N" help="allocate/free N bytes of POSIX shared memory" />
            <param argument="--shm-segs" type="integer" min="0" optional="true"
                   label="shm segs N" help="allocate N POSIX shared memory segments per iteration" />
            <param argument="--shm-sysv" type="integer" min="0" optional="true"
                   label="shm sysv N" help="start N workers that exercise System V shared memory" />
            <param argument="--shm-sysv-ops" type="integer" min="0" optional="true"
                   label="shm sysv ops N" help="stop after N shared memory bogo operations" />
            <param argument="--shm-sysv-bytes" type="integer" min="0" optional="true"
                   label="shm sysv bytes N" help="allocate and free N bytes of shared memory per loop" />
            <param argument="--shm-sysv-segs" type="integer" min="0" optional="true"
                   label="shm sysv segs N" help="allocate N shared memory segments per iteration" />
            <param argument="--sigabrt" type="integer" min="0" optional="true"
                   label="sigabrt N" help="start N workers generating segmentation faults" />
            <param argument="--sigabrt-ops" type="integer" min="0" optional="true"
                   label="sigabrt ops N" help="stop after N bogo segmentation faults" />
            <param argument="--sigchld" type="integer" min="0" optional="true"
                   label="sigchld N" help="start N workers that handle SIGCHLD" />
            <param argument="--sigchld-ops" type="integer" min="0" optional="true"
                   label="sigchld ops N" help="stop after N bogo SIGCHLD signals" />
            <param argument="--sigfd" type="integer" min="0" optional="true"
                   label="sigfd N" help="start N workers reading signals via signalfd reads " />
            <param argument="--sigfd-ops" type="integer" min="0" optional="true"
                   label="sigfd ops N" help="stop after N bogo signalfd reads" />
            <param argument="--sigfpe" type="integer" min="0" optional="true"
                   label="sigfpe N" help="start N workers generating floating point math faults" />
            <param argument="--sigfpe-ops" type="integer" min="0" optional="true"
                   label="sigfpe ops N" help="stop after N bogo floating point math faults" />
            <param argument="--sigio" type="integer" min="0" optional="true"
                   label="sigio N" help="start N workers that exercise SIGIO signals" />
            <param argument="--sigio-ops" type="integer" min="0" optional="true"
                   label="sigio ops N" help="stop after N bogo sigio signals" />
            <param argument="--signal" type="integer" min="0" optional="true"
                   label="signal N" help="start N workers that exercise signal" />
            <param argument="--signal-ops" type="integer" min="0" optional="true"
                   label="signal ops N" help="stop after N bogo signals" />
            <param argument="--sigpending" type="integer" min="0" optional="true"
                   label="sigpending N" help="start N workers exercising sigpending" />
            <param argument="--sigpending-ops" type="integer" min="0" optional="true"
                   label="sigpending ops N" help="stop after N sigpending bogo operations" />
            <param argument="--sigpipe" type="integer" min="0" optional="true"
                   label="sigpipe N" help="start N workers exercising SIGPIPE" />
            <param argument="--sigpipe-ops" type="integer" min="0" optional="true"
                   label="sigpipe ops N" help="stop after N SIGPIPE bogo operations" />
            <param argument="--sigq" type="integer" min="0" optional="true"
                   label="sigq N" help="start N workers sending sigqueue signals" />
            <param argument="--sigq-ops" type="integer" min="0" optional="true"
                   label="sigq ops N" help="stop after N sigqueue bogo operations" />
            <param argument="--sigrt" type="integer" min="0" optional="true"
                   label="sigrt N" help="start N workers sending real time signals" />
            <param argument="--sigrt-ops" type="integer" min="0" optional="true"
                   label="sigrt ops N" help="stop after N real time signal bogo operations" />
            <param argument="--sigsegv" type="integer" min="0" optional="true"
                   label="sigsegv N" help="start N workers generating segmentation faults" />
            <param argument="--sigsegv-ops" type="integer" min="0" optional="true"
                   label="sigsegv ops N" help="stop after N bogo segmentation faults" />
            <param argument="--sigsuspend" type="integer" min="0" optional="true"
                   label="sigsuspend N" help="start N workers exercising sigsuspend" />
            <param argument="--sigsuspend-ops" type="integer" min="0" optional="true"
                   label="sigsuspend ops N" help="stop after N bogo sigsuspend wakes" />
            <param argument="--sigtrap" type="integer" min="0" optional="true"
                   label="sigtrap N" help="start N workers generating segmentation faults" />
            <param argument="--sigtrap-ops" type="integer" min="0" optional="true"
                   label="sigtrap ops N" help="stop after N bogo segmentation faults" />
            <param argument="--skiplist" type="integer" min="0" optional="true"
                   label="skiplist N" help="start N workers that exercise a skiplist search" />
            <param argument="--skiplist-ops" type="integer" min="0" optional="true"
                   label="skiplist ops N" help="stop after N skiplist search bogo operations" />
            <param argument="--skiplist-size" type="integer" min="0" optional="true"
                   label="skiplist size N" help="number of 32 bit integers to add to skiplist" />
            <param argument="--sleep" type="integer" min="0" optional="true"
                   label="sleep N" help="start N workers performing various duration sleeps" />
            <param argument="--sleep-ops" type="integer" min="0" optional="true"
                   label="sleep ops N" help="stop after N bogo sleep operations" />
            <param argument="--sleep-max" type="integer" min="1" optional="true"
                   label="sleep max P" help="create P threads at a time by each worker" />
            <param argument="--sock" type="integer" min="0" optional="true"
                   label="sock N" help="start N workers exercising socket I/O" />
            <param argument="--sock-domain" type="select" optional="true"
                   label="sock domain D" help="specify socket domain, default is ipv4" >
                <expand macro="default_ipv4" />
            </param>
            <param argument="--sock-nodelay" type="boolean"
                   truevalue="--sock-nodelay" falsevalue="" checked="false"
                   label="sock nodelay" help="disable Nagle algorithm, send data immediately" />
            <param argument="--sock-ops" type="integer" min="0" optional="true"
                   label="sock ops N" help="stop after N socket bogo operations" />
            <param argument="--sock-opts" type="select" optional="true"
                   label="sock opts option" help="socket options [send|sendmsg|sendmmsg]" >
                <option value="send" />
                <option value="sendmsg" />
                <option value="sendmmsg" />
            </param>
            <param argument="--sock-port" type="integer" min="1" optional="true"
                   label="sock port P" help="use socket ports P to P + number of workers - 1" />
            <param argument="--sock-type" type="select" optional="true"
                   label="sock type T" help="socket type (stream, seqpacket)" >
                <option value="stream" />
                <option value="seqpacket" />
            </param>
            <param argument="--sock" type="integer" min="0" optional="true"
                   label="sock N" help="start N workers exercising socket I/O" />
            <param argument="--sock-ops" type="integer" min="0" optional="true"
                   label="sock ops N" help="stop after N socket bogo operations" />
            <param argument="--sockdiag" type="integer" min="0" optional="true"
                   label="sockdiag N" help="start N workers exercising sockdiag netlink" />
            <param argument="--sockdiag-ops" type="integer" min="0" optional="true"
                   label="sockdiag ops N" help="stop sockdiag workers after N bogo messages" />
            <param argument="--sockfd" type="integer" min="0" optional="true"
                   label="sockfd N" help="start N workers sending file descriptors over sockets" />
            <param argument="--sockfd-ops" type="integer" min="0" optional="true"
                   label="sockfd ops N" help="stop after N sockfd bogo operations" />
            <param argument="--sockfd-port" type="integer" min="1" optional="true"
                   label="sockfd port P" help="use socket fd ports P to P + number of workers - 1" />
            <param argument="--sockpair" type="integer" min="0" optional="true"
                   label="sockpair N" help="start N workers exercising socket pair I/O activity" />
            <param argument="--sockpair-ops" type="integer" min="0" optional="true"
                   label="sockpair ops N" help="stop after N socket pair bogo operations" />
            <param argument="--sockmany" type="integer" min="0" optional="true"
                   label="sockmany N" help="start N workers exercising many socket connections" />
            <param argument="--sockmany-ops" type="integer" min="0" optional="true"
                   label="sockmany ops N" help="stop after N sockmany bogo operations" />
            <param argument="--softlockup" type="integer" min="0" optional="true"
                   label="softlockup N" help="start N workers that cause softlockups" />
            <param argument="--softlockup-ops" type="integer" min="0" optional="true"
                   label="softlockup ops N" help="stop after N softlockup bogo operations" />
            <param argument="--spawn" type="integer" min="0" optional="true"
                   label="spawn N" help="start N workers spawning stress-ng using posix_spawn" />
            <param argument="--spawn-ops" type="integer" min="0" optional="true"
                   label="spawn ops N" help="stop after N spawn bogo operations" />
            <param argument="--splice" type="integer" min="0" optional="true"
                   label="splice N" help="start N workers reading/writing using splice" />
            <param argument="--splice-ops" type="integer" min="0" optional="true"
                   label="splice ops N" help="stop after N bogo splice operations" />
            <param argument="--splice-bytes" type="integer" min="0" optional="true"
                   label="splice bytes N" help="number of bytes to transfer per splice call" />
            <param argument="--stack" type="integer" min="0" optional="true"
                   label="stack N" help="start N workers generating stack overflows" />
            <param argument="--stack-ops" type="integer" min="0" optional="true"
                   label="stack ops N" help="stop after N bogo stack overflows" />
            <param argument="--stack-fill" type="boolean"
                   truevalue="--stack-fill" falsevalue="" checked="false"
                   label="stack fill" help="fill stack, touches all new pages " />
            <param argument="--stack-mlock" type="boolean"
                   truevalue="--stack-mlock" falsevalue="" checked="false"
                   label="stack mlock" help="mlock stack, force pages to be unswappable" />
            <param argument="--stackmmap" type="integer" min="0" optional="true"
                   label="stackmmap N" help="start N workers exercising a filebacked stack" />
            <param argument="--stackmmap-ops" type="integer" min="0" optional="true"
                   label="stackmmap ops N" help="stop after N bogo stackmmap operations" />
            <param argument="--str" type="integer" min="0" optional="true"
                   label="str N" help="start N workers exercising lib C string functions" />
            <param argument="--str-method" type="text" optional="true"
                   label="str method func" help="specify the string function to stress" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--str-ops" type="integer" min="0" optional="true"
                   label="str ops N" help="stop after N bogo string operations" />
            <param argument="--stream" type="integer" min="0" optional="true"
                   label="stream N" help="start N workers exercising memory bandwidth" />
            <param argument="--stream-ops" type="integer" min="0" optional="true"
                   label="stream ops N" help="stop after N bogo stream operations" />
            <param argument="--stream-index" type="boolean"
                   truevalue="--stream-index" falsevalue="" checked="false"
                   label="stream index" help="specify number of indices into the data (0..3)" />
            <param argument="--stream-l3-size" type="integer" min="0" optional="true"
                   label="stream l3 size N" help="specify the L3 cache size of the CPU" />
            <param argument="--stream-madvise" type="text" optional="true"
                   label="stream madvise M" help="specify mmap'd stream buffer madvise advice" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--swap" type="integer" min="0" optional="true"
                   label="swap N" help="start N workers exercising swapon/swapoff" />
            <param argument="--swap-ops" type="integer" min="0" optional="true"
                   label="swap ops N" help="stop after N swapon/swapoff operations" />
            <param argument="--switch" type="integer" min="0" optional="true"
                   label="switch N" help="start N workers doing rapid context switches" />
            <param argument="--switch-ops" type="integer" min="0" optional="true"
                   label="switch ops N" help="stop after N context switch bogo operations" />
            <param argument="--switch-freq" type="integer" min="0" optional="true"
                   label="switch freq N" help="set frequency of context switches" />
            <param argument="--symlink" type="integer" min="0" optional="true"
                   label="symlink N" help="start N workers creating symbolic links" />
            <param argument="--symlink-ops" type="integer" min="0" optional="true"
                   label="symlink ops N" help="stop after N symbolic link bogo operations" />
            <param argument="--sync-file" type="integer" min="0" optional="true"
                   label="sync file N" help="start N workers exercise sync_file_range" />
            <param argument="--sync-file-ops" type="integer" min="0" optional="true"
                   label="sync file ops N" help="stop after N sync_file_range bogo operations" />
            <param argument="--sync-file-bytes" type="integer" min="0" optional="true"
                   label="sync file bytes N" help="size of file to be sync'd" />
            <param argument="--sysbadaddr" type="integer" min="0" optional="true"
                   label="sysbadaddr N" help="start N workers that pass bad addresses to syscalls" />
            <param argument="--sysbadaddr-ops" type="integer" min="0" optional="true"
                   label="sysbadaddr ops N" help="stop after N sysbadaddr bogo syscalls" />
            <param argument="--sysinfo" type="integer" min="0" optional="true"
                   label="sysinfo N" help="start N workers reading system information" />
            <param argument="--sysinfo-ops" type="integer" min="0" optional="true"
                   label="sysinfo ops N" help="stop after sysinfo bogo operations" />
            <param argument="--sysinval" type="integer" min="0" optional="true"
                   label="sysinval N" help="start N workers that pass invalid args to syscalls" />
            <param argument="--sysinval-ops" type="integer" min="0" optional="true"
                   label="sysinval ops N" help="stop after N sysinval bogo syscalls" />
            <param argument="--sysfs" type="integer" min="0" optional="true"
                   label="sysfs N" help="start N workers reading files from /sys" />
            <param argument="--sysfs-ops" type="integer" min="0" optional="true"
                   label="sysfs ops N" help="stop after sysfs bogo operations" />
            <param argument="--tee" type="integer" min="0" optional="true"
                   label="tee N" help="start N workers exercising the tee system call" />
            <param argument="--tee-ops" type="integer" min="0" optional="true"
                   label="tee ops N" help="stop after N tee bogo operations" />
            <param argument="--timer" type="integer" min="0" optional="true"
                   label="timer N" help="start N workers producing timer events" />
            <param argument="--timer-ops" type="integer" min="0" optional="true"
                   label="timer ops N" help="stop after N timer bogo events" />
            <param argument="--timer-freq" type="integer" min="1" max="1000000000" optional="true"
                   label="timer freq F" help="run timer(s) at F Hz, range 1 to 1000000000" />
            <param argument="--timer-rand" type="boolean"
                   truevalue="--timer-rand" falsevalue="" checked="false"
                   label="timer rand" help="enable random timer frequency" />
            <param argument="--timerfd" type="integer" min="0" optional="true"
                   label="timerfd N" help="start N workers producing timerfd events" />
            <param argument="--timerfd-ops" type="integer" min="0" optional="true"
                   label="timerfd ops N" help="stop after N timerfd bogo events" />
            <param argument="--timerfd-freq" type="integer" min="1" max="1000000000" optional="true"
                   label="timerfd freq F" help="run timer(s) at F Hz, range 1 to 1000000000" />
            <param argument="--timerfd-rand" type="boolean"
                   truevalue="--timerfd-rand" falsevalue="" checked="false"
                   label="timerfd rand" help="enable random timerfd frequency" />
            <param argument="--tlb-shootdown" type="integer" min="0" optional="true"
                   label="tlb shootdown N" help="start N workers that force TLB shootdowns" />
            <param argument="--tlb-shootdown-ops" type="boolean"
                   truevalue="--tlb-shootdown-ops" falsevalue="" checked="false"
                   label="tlb shootdown ops" help="Nstop after N TLB shootdown bogo ops" />
            <param argument="--tmpfs" type="integer" min="0" optional="true"
                   label="tmpfs N" help="start N workers mmap'ing a file on tmpfs" />
            <param argument="--tmpfs-ops" type="integer" min="0" optional="true"
                   label="tmpfs ops N" help="stop after N tmpfs bogo ops" />
            <param argument="--tmpfs-mmap-async" type="boolean"
                   truevalue="--tmpfs-mmap-async" falsevalue="" checked="false"
                   label="tmpfs mmap async" help="using asynchronous msyncs for tmpfs file based mmap" />
            <param argument="--tmpfs-mmap-file" type="boolean"
                   truevalue="--tmpfs-mmap-file" falsevalue="" checked="false"
                   label="tmpfs mmap file" help="mmap onto a tmpfs file using synchronous msyncs" />
            <param argument="--tree" type="integer" min="0" optional="true"
                   label="tree N" help="start N workers that exercise tree structures" />
            <param argument="--tree-ops" type="integer" min="0" optional="true"
                   label="tree ops N" help="stop after N bogo tree operations" />
            <param argument="--tree-method" type="select" optional="true"
                   label="tree method M" help="select tree method, all,avl,binary,rb,splay" >
                <option value="all" />
                <option value="avl" />
                <option value="binary" />
                <option value="rb" />
                <option value="splay" />
            </param>
            <param argument="--tree-size" type="integer" min="0" optional="true"
                   label="tree size N" help="N is the number of items in the tree" />
            <param argument="--tsc" type="integer" min="0" optional="true"
                   label="tsc N" help="start N workers reading the time stamp counter" />
            <param argument="--tsc-ops" type="integer" min="0" optional="true"
                   label="tsc ops N" help="stop after N TSC bogo operations" />
            <param argument="--tsearch" type="integer" min="0" optional="true"
                   label="tsearch N" help="start N workers that exercise a tree search" />
            <param argument="--tsearch-ops" type="integer" min="0" optional="true"
                   label="tsearch ops N" help="stop after N tree search bogo operations" />
            <param argument="--tsearch-size" type="integer" min="0" optional="true"
                   label="tsearch size N" help="number of 32 bit integers to tsearch" />
            <param argument="--tun" type="integer" min="0" optional="true"
                   label="tun N" help="start N workers exercising tun interface" />
            <param argument="--tun-ops" type="integer" min="0" optional="true"
                   label="tun ops N" help="stop after N tun bogo operations" />
            <param argument="--tun-tap" type="boolean"
                   truevalue="--tun-tap" falsevalue="" checked="false"
                   label="tun tap" help="use TAP interface instead of TUN" />
            <param argument="--udp" type="integer" min="0" optional="true"
                   label="udp N" help="start N workers performing UDP send/receives " />
            <param argument="--udp-ops" type="integer" min="0" optional="true"
                   label="udp ops N" help="stop after N udp bogo operations" />
            <param argument="--udp-domain" type="select" optional="true"
                   label="udp domain D" help="specify domain, default is ipv4" >
                <expand macro="default_ipv4" />
            </param>
            <param argument="--udp-lite" type="boolean"
                   truevalue="--udp-lite" falsevalue="" checked="false"
                   label="udp lite" help="use the UDP-Lite (RFC 3828) protocol" />
            <param argument="--udp-port" type="integer" min="1" optional="true"
                   label="udp port P" help="use ports P to P + number of workers - 1" />
            <param argument="--udp-flood" type="integer" min="0" optional="true"
                   label="udp flood N" help="start N workers that performs a UDP flood attack" />
            <param argument="--udp-flood-ops" type="integer" min="0" optional="true"
                   label="udp flood ops N" help="stop after N udp flood bogo operations" />
            <param argument="--udp-flood-domain" type="select" optional="true"
                   label="udp flood domain D" help="specify domain, default is ipv4" >
                <expand macro="default_ipv4" />
            </param>
            <param argument="--unshare" type="integer" min="0" optional="true"
                   label="unshare N" help="start N workers exercising resource unsharing" />
            <param argument="--unshare-ops" type="integer" min="0" optional="true"
                   label="unshare ops N" help="stop after N bogo unshare operations" />
            <param argument="--uprobe" type="integer" min="0" optional="true"
                   label="uprobe N" help="start N workers that generate uprobe events" />
            <param argument="--uprobe-ops" type="integer" min="0" optional="true"
                   label="uprobe ops N" help="stop after N uprobe events" />
            <param argument="--urandom" type="integer" min="0" optional="true"
                   label="urandom N" help="start N workers reading /dev/urandom" />
            <param argument="--urandom-ops" type="integer" min="0" optional="true"
                   label="urandom ops N" help="stop after N urandom bogo read operations" />
            <param argument="--userfaultfd" type="integer" min="0" optional="true"
                   label="userfaultfd N" help="start N page faulting workers with userspace handling" />
            <param argument="--userfaultfd-ops" type="integer" min="0" optional="true"
                   label="userfaultfd ops N" help="stop after N page faults have been handled" />
            <param argument="--utime" type="integer" min="0" optional="true"
                   label="utime N" help="start N workers updating file timestamps" />
            <param argument="--utime-ops" type="integer" min="0" optional="true"
                   label="utime ops N" help="stop after N utime bogo operations" />
            <param argument="--utime-fsync" type="boolean"
                   truevalue="--utime-fsync" falsevalue="" checked="false"
                   label="utime fsync" help="force utime meta data sync to the file system" />
            <param argument="--vdso" type="integer" min="0" optional="true"
                   label="vdso N" help="start N workers exercising functions in the VDSO" />
            <param argument="--vdso-ops" type="integer" min="0" optional="true"
                   label="vdso ops N" help="stop after N vDSO function calls" />
            <param argument="--vdso-func" type="text" optional="true"
                   label="vdso func F" help="use just vDSO function F" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--vecmath" type="integer" min="0" optional="true"
                   label="vecmath N" help="start N workers performing vector math ops" />
            <param argument="--vecmath-ops" type="integer" min="0" optional="true"
                   label="vecmath ops N" help="stop after N vector math bogo operations" />
            <param argument="--verity" type="integer" min="0" optional="true"
                   label="verity N" help="start N workers exercising file verity ioctls" />
            <param argument="--verity-ops" type="integer" min="0" optional="true"
                   label="verity ops N" help="stop after N file verity bogo operations" />
            <param argument="--vfork" type="integer" min="0" optional="true"
                   label="vfork N" help="start N workers spinning on vfork() and exit()" />
            <param argument="--vfork-ops" type="integer" min="0" optional="true"
                   label="vfork ops N" help="stop after N vfork bogo operations" />
            <param argument="--vfork-max" type="integer" min="1" value="1" optional="true"
                   label="vfork max P" help="create P processes per iteration, default is 1" />
            <param argument="--vforkmany" type="integer" min="0" optional="true"
                   label="vforkmany N" help="start N workers spawning many vfork children" />
            <param argument="--vforkmany-ops" type="integer" min="0" optional="true"
                   label="vforkmany ops N" help="stop after spawning N vfork children" />
            <param argument="--vm" type="integer" min="0" optional="true"
                   label="vm N" help="start N workers spinning on anonymous mmap" />
            <param argument="--vm-bytes" type="integer" min="0" optional="true"
                   label="vm bytes N" help="allocate N bytes per vm worker (default 256MB)" />
            <param argument="--vm-hang" type="integer" min="0" optional="true"
                   label="vm hang N" help="sleep N seconds before freeing memory" />
            <param argument="--vm-keep" type="boolean"
                   truevalue="--vm-keep" falsevalue="" checked="false"
                   label="vm keep" help="redirty memory instead of reallocating" />
            <param argument="--vm-ops" type="integer" min="0" optional="true"
                   label="vm ops N" help="stop after N vm bogo operations" />
            <param argument="--vm-locked" type="boolean"
                   truevalue="--vm-locked" falsevalue="" checked="false"
                   label="vm locked" help="lock the pages of the mapped region into memory" />
            <param argument="--vm-madvise" type="text" optional="true"
                   label="vm madvise M" help="specify mmap'd vm buffer madvise advice" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--vm-method" type="select" optional="true"
                   label="vm method M" help="specify stress vm method M, default is all" >
                <expand macro="default_method_all" />
            </param>
            <param argument="--vm-populate" type="boolean"
                   truevalue="--vm-populate" falsevalue="" checked="false"
                   label="vm populate" help="populate (prefault) page tables for a mapping" />
            <param argument="--vm-addr" type="integer" min="0" optional="true"
                   label="vm addr N" help="start N vm address exercising workers" />
            <param argument="--vm-addr-ops" type="integer" min="0" optional="true"
                   label="vm addr ops N" help="stop after N vm address bogo operations" />
            <param argument="--vm-rw" type="integer" min="0" optional="true"
                   label="vm rw N" help="start N vm read/write process_vm* copy workers" />
            <param argument="--vm-rw-bytes" type="integer" min="0" optional="true"
                   label="vm rw bytes N" help="transfer N bytes of memory per bogo operation" />
            <param argument="--vm-rw-ops" type="integer" min="0" optional="true"
                   label="vm rw ops N" help="stop after N vm process_vm* copy bogo operations" />
            <param argument="--vm-segv" type="integer" min="0" optional="true"
                   label="vm segv N" help="start N workers that unmap their address space" />
            <param argument="--vm-segv-ops" type="integer" min="0" optional="true"
                   label="vm segv ops N" help="stop after N vm-segv unmap'd SEGV faults" />
            <param argument="--vm-splice" type="integer" min="0" optional="true"
                   label="vm splice N" help="start N workers reading/writing using vmsplice" />
            <param argument="--vm-splice-ops" type="integer" min="0" optional="true"
                   label="vm splice ops N" help="stop after N bogo splice operations" />
            <param argument="--vm-splice-bytes" type="integer" min="0" optional="true"
                   label="vm splice bytes N" help="number of bytes to transfer per vmsplice call" />
            <param argument="--wait" type="integer" min="0" optional="true"
                   label="wait N" help="start N workers waiting on child being stop/resumed" />
            <param argument="--wait-ops" type="integer" min="0" optional="true"
                   label="wait ops N" help="stop after N bogo wait operations" />
            <param argument="--watchdog" type="integer" min="0" optional="true"
                   label="watchdog N" help="start N workers that exercise /dev/watchdog" />
            <param argument="--watchdog-ops" type="integer" min="0" optional="true"
                   label="watchdog ops N" help="stop after N bogo watchdog operations" />
            <param argument="--wcs" type="integer" min="0" optional="true"
                   label="wcs N" help="start N workers on lib C wide char string functions" />
            <param argument="--wcs-method" type="text" optional="true"
                   label="wcs method func" help="specify the wide character string function to stress" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--wcs-ops" type="integer" min="0" optional="true"
                   label="wcs ops N" help="stop after N bogo wide character string operations" />
            <param argument="--x86syscall" type="integer" min="0" optional="true"
                   label="x86syscall N" help="start N workers exercising functions using syscall" />
            <param argument="--x86syscall-ops" type="integer" min="0" optional="true"
                   label="x86syscall ops N" help="stop after N syscall function calls" />
            <param argument="--x86syscall-func" type="text" optional="true"
                   label="x86syscall func F" help="use just syscall function F" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--xattr" type="integer" min="0" optional="true"
                   label="xattr N" help="start N workers stressing file extended attributes" />
            <param argument="--xattr-ops" type="integer" min="0" optional="true"
                   label="xattr ops N" help="stop after N bogo xattr operations" />
            <param argument="--yield" type="integer" min="0" optional="true"
                   label="yield N" help="start N workers doing sched_yield() calls" />
            <param argument="--yield-ops" type="integer" min="0" optional="true"
                   label="yield ops N" help="stop after N bogo yield operations" />
            <param argument="--zero" type="integer" min="0" optional="true"
                   label="zero N" help="start N workers reading /dev/zero" />
            <param argument="--zero-ops" type="integer" min="0" optional="true"
                   label="zero ops N" help="stop after N /dev/zero bogo read operations" />
            <param argument="--zlib" type="integer" min="0" optional="true"
                   label="zlib N" help="start N workers compressing data with zlib" />
            <param argument="--zlib-level" type="integer" min="0" max="9" optional="true"
                   label="zlib level L" help="specify zlib compression level 0=fast, 9=best" />
            <param argument="--zlib-mem-level" type="integer" min="1" max="9" optional="true"
                   label="zlib mem level L" help="specify zlib compression state memory usage 1=minimum, 9=maximum" />
            <param argument="--zlib-method" type="text" optional="true"
                   label="zlib method M" help="specify zlib random data generation method M" >
                <expand macro="sanitize_function" />
            </param>
            <param argument="--zlib-ops" type="integer" min="0" optional="true"
                   label="zlib ops N" help="stop after N zlib bogo compression operations" />
            <param argument="--zlib-strategy" type="select" optional="true"
                   label="zlib strategy S" help="specify zlib strategy 0=default, 1=filtered, 2=huffman only, 3=rle, 4=fixed" >
                <option value="0">default</option>
                <option value="1">filtered</option>
                <option value="2">huffman only</option>
                <option value="3">rle</option>
                <option value="4">fixed</option>
            </param>
            <param argument="--zlib-stream-bytes" type="integer" min="1" optional="true"
                   label="zlib stream bytes S" help="specify the number of bytes to deflate until the current stream will be closed" />
            <!-- <param argument="-\-zlib-window-bits W" type="" -->
            <!--        label="zlib window bits W" help="specify zlib window bits -8-(-15) | 8-15 | 24-31 | 40-47" /> -->
            <param argument="--zombie" type="integer" min="0" optional="true"
                   label="zombie N" help="start N workers that rapidly create and reap zombies" />
            <param argument="--zombie-ops" type="integer" min="0" optional="true"
                   label="zombie ops N" help="stop after N bogo zombie fork operations" />
            <param argument="--zombie-max" type="integer" min="0" optional="true"
                   label="zombie max N" help="set upper limit of N zombies per worker" />
        </section>
    </inputs>
    <outputs>
        <data name="outfile" label="${tool.name} on ${on_string}" />
    </outputs>
    <tests>
        <test>
            <!-- example from default help text -->
            <section name="stressor" >
                <param name="cpu" value="8" />
                <param name="io" value="4" />
                <param name="vm" value="2" />
                <param name="vm-bytes" value="128M" />
                <param name="fork" value="4" />
            </section>
            <section name="general" >
                <param name="timeout" value="10s" />
            </section>
            <output name="outfile" value="default_example.txt" />
        </test>
        <!-- The following examples are taken from the PDF manual -->
        <test>
            <section name="stressor" >
                <param name="vm" value="8" />
                <param name="vm-bytes" value="80%" />
            </section>
            <section name="general" >
                <param name="timeout" value="1h" />
            </section>
            <output name="outfile" value="example1.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cpu" value="4" />
                <param name="io" value="2" />
                <param name="vm" value="1" />
                <param name="vm-bytes" value="1G" />
            </section>
            <section name="general" >
                <param name="timeout" value="60s" />
            </section>
            <output name="outfile" value="example2.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="iomix" value="2" />
                <param name="iomix-bytes" value="10%" />
            </section>
            <section name="general" >
                <param name="timeout" value="10m" />
            </section>
            <output name="outfile" value="example3.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cyclic" value="1" />
                <param name="cyclic-dist" value="2500" />
                <param name="cyclic-method" value="clock_ns" />
                <param name="cyclic-prio" value="100" />
                <param name="cyclic-sleep" value="10000" />
                <param name="hdd" value="0" />
            </section>
            <section name="general" >
                <param name="timeout" value="1m" />
            </section>
            <output name="outfile" value="example4.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cpu" value="8" />
                <param name="cpu-ops" value="800000" />
            </section>
            <output name="outfile" value="example5.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="sequential" value="2" />
                <param name="metrics" value="true" />
                <param name="timeout" value="2m" />
            </section>
            <output name="outfile" value="example6.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cpu" value="4" />
                <param name="cpu-method" value="fft" />
                <param name="cpu-ops" value="10000" />
            </section>
            <section name="general" >
                <param name="metrics-brief" value="true" />
            </section>
            <output name="outfile" value="example7.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cpu" value="1" />
                <param name="cpu-method" value="all" />
                <param name="cpu-load" value="90" />
            </section>
            <section name="general" >
                <param name="timeout" value="1h" />
            </section>
            <output name="outfile" value="example8.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cpu" value="0" />
                <param name="cpu-method" value="all" />
            </section>
            <section name="general" >
                <param name="timeout" value="20m" />
            </section>
            <output name="outfile" value="example9.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="all" value="4" />
                <param name="timeout" value="5m" />
            </section>
            <output name="outfile" value="example10.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="random" value="64" />
            </section>
            <output name="outfile" value="example11.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cpu" value="64" />
                <param name="cpu-method" value="all" />
            </section>
            <section name="general" >
                <param name="timeout" value="10m" />
                <param name="metrics-brief" value="true" />
            </section>
            <output name="outfile" value="example12.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="sequential" value="-1" /><!-- really? -->
                <param name="timeout" value="10m" />
            </section>
            <output name="outfile" value="example13.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="class" value="io" />
                <param name="sequential" value="8" />
                <param name="timeout" value="5m" />
                <param name="times" value="true" />
            </section>
            <output name="outfile" value="example14.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="all" value="-1" />
                <param name="aggressive" value="true" />
                <param name="maximize" value="true" />
            </section>
            <output name="outfile" value="example15.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="random" value="32" />
                <param name="exclude" value="numa,hdd,key" />
            </section>
            <output name="outfile" value="example16.txt" />
        </test>
        <test>
            <section name="general" >
                <param name="sequential" value="4" />
                <param name="class" value="vm" />
                <param name="exclude" value="bigheap,brk,stack" />
            </section>
            <output name="outfile" value="example17.txt" />
        </test>
        <test>
            <section name="stressor" >
                <param name="cpu" value="3" />
            </section>
            <section name="general" >
                <param name="taskset" value="0,2-3" />
            </section>
            <output name="outfile" value="example18.txt" />
        </test>
    </tests>
    <help>
**Stress-NG**

``stress-ng`` was originally intended to make a machine work hard and trip hardware
issues such as thermal overruns as well as operating system bugs that only
occur when a system is being thrashed hard. Use stress-ng with caution as some
of the tests can make a system run hot on poorly designed hardware and also can
cause excessive system thrashing which may be difficult to stop.

stress-ng can also measure test throughput rates; this can be useful to observe
performance changes across different operating system releases or types of
hardware. However, it has never been intended to be used as a precise benchmark
test suite, so do NOT use it in this manner.

**Examples**

stress−ng −−vm 8 −−vm−bytes 80% -t 1h

   run 8 virtual memory stressors that combined use 80% of the available memory for 1 hour. Thus each stressor uses 10% of the available memory.

stress−ng −−cpu 4 −−io 2 −−vm 1 −−vm−bytes 1G −−timeout 60s

   runs  for  60  seconds  with  4  cpu  stressors,  2  io  stressors  and  1  vm  stressor  using  1GB  of  virtual memory.

stress−ng −−iomix 2 −−iomix−bytes 10% -t 10m

   runs 2 instances of the mixed I/O stressors using a total of 10% of the available file system spacefor 10 minutes. Each stressor will use 5% of the available file system space.

stress−ng  −−cyclic  1  −−cyclic−dist  2500  −−cyclic−method  clock_ns  −−cyclic−prio  100  −−cyclic−sleep 10000 −−hdd 0 -t 1m

   measures real time scheduling latencies created by the hdd stressor.This uses the high resolution nanosecond  clock  to  measure  latencies  during  sleeps  of  10,000  nanoseconds.
   At  the  end  of  1minute of stressing, the latency distribution with 2500 ns intervals will be displayed.

   NOTE: this must be run with the ``CAP_SYS_NICE`` capability to enable the real time scheduling to get accurate measurements.

stress−ng −−cpu 8 −−cpu−ops 800000

   runs 8 cpu stressors and stops after 800000 bogo operations.

stress−ng −−sequential 2 −−timeout 2m −−metrics

   run  2  simultaneous  instances  of  all  the  stressors  sequentially  one  by  one,  each  for  2  minutes  andsummarise with performance metrics at the end.

stress−ng −−cpu 4 −−cpu-method fft −−cpu-ops 10000 −−metrics−brief

   run 4 FFT cpu stressors, stop after 10000 bogo operations and produce a summary just for the FFTresults.

stress−ng −−cpu -1 −−cpu-method all −t 1h −−cpu−load 90

   run  cpu  stressors  on  all  online  CPUs  working  through  all  the  available  CPU  stressors  for  1  hour, loading the CPUs at 90% load capacity.

stress−ng −−cpu 0 −−cpu-method all −t 20m

   run  cpu  stressors  on  all  configured  CPUs  working  through  all  the  available  CPU  stressors  for  20minutes

stress−ng −−all 4 −−timeout 5m

   run 4 instances of all the stressors for 5 minutes.

stress−ng −−random 64

   run 64 stressors that are randomly chosen from all the available stressors.

stress−ng −−cpu 64 −−cpu−method all −−verify −t 10m −−metrics−brief

   run 64 instances of all the different cpu stressors and verify that the computations are correct for 10 minutes with a bogo operations summary at the end.

stress−ng −−sequential -1 −t 10m

   run  all  the  stressors  one  by  one  for  10  minutes,  with  the  number  of  instances  of  each  stressor matching the number of online CPUs.

stress−ng −−sequential 8 −−class io −t 5m −−times

   run all the stressors in the io class one by one for 5 minutes each, with 8 instances of each stressor running concurrently and show overall time utilisation statistics at the end of the run.

stress−ng −−all -1 −−maximize −−aggressive

   run  all  the  stressors  (1  instance  of  each  per  online  CPU)  simultaneously,maximize  the  settings(memory sizes, file allocations, etc.) and select the most demanding/aggressive options.

stress−ng −−random 32 −x numa,hdd,key

   run 32 randomly selected stressors and exclude the numa, hdd and key stressors

stress−ng −−sequential 4 −−class vm −−exclude bigheap,brk,stack

   run  4  instances  of  the  VM  stressors  one  after  each  other, excluding  the  bigheap,  brk  and  stack stressors

stress−ng −−taskset 0,2-3 −−cpu 3

   run 3 instances of the CPU stressor and pin them to CPUs 0, 2 and 3.

    </help>
</tool>
