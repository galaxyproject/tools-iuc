<tool id='ragtag' name='RagTag' version='@TOOL_VERSION@+galaxy@VERSION_SUFFIX@' profile='20.01'>
    <description>reference-guided scaffolding of draft genomes</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='xrefs' />
    <expand macro='requirements' />
    <command detect_errors='exit_code'><![CDATA[
    ragtag.py $mode_conditional.mode_option -u
    #if $mode_conditional.mode_option == 'correct'
        @INPUTS@
        @COMMON_PARAMETERS@
        #if $mode_conditional.validation_conditional.validation_option == 'true'
            -R '${mode_conditional.validation_conditional.R}'
            -T $mode_conditional.validation_conditional.read_type
            -v $mode_conditional.validation_conditional.v 
            --max-cov $mode_conditional.validation_conditional.max_cov
            --min-cov $mode_conditional.validation_conditional.min_cov
        #end if
        -b $mode_conditional.advanced_options.b
        #if $mode_conditional.advanced_options.missasembly_break
            $mode_conditional.advanced_options.missasembly_break
        #end if
        #if $mode_conditional.advanced_options.gff 
            --gff '${mode_conditional.advanced_options.gff}'
        #end if
        --read-aligner 'minimap2' ## it is the only allowed
    #else if $mode_conditional.mode_option == 'scaffold'
        @INPUTS@
        @COMMON_PARAMETERS@
        -i $mode_conditional.advanced_options.i
        -a $mode_conditional.advanced_options.a
        -s $mode_conditional.advanced_options.s
        #if $mode_conditional.advanced_options.gap_conditional.gap_option == 'true'
            -r
            -g '${mode_conditional.advanced_options.gap_conditional.g}'
            -m '${mode_conditional.advanced_options.gap_conditional.m}'
        #end if
        #if $mode_conditional.advanced_options.unplaced_conditional.unplaced_option == 'true'
            -C
            #if $mode_conditional.advanced_options.unplaced_conditional.J 
                -J '${mode_conditional.advanced_options.unplaced_conditional.J}'
            #end if
        #end if
    #else if $mode_conditional.mode_option == 'patch'
        @INPUTS@
        @COMMON_PARAMETERS@
        -s $mode_conditional.advanced_options.s
        -i $mode_conditional.advanced_options.i
        #if $mode_conditional.advanced_options.patching_mode
            $mode_conditional.advanced_options.patching_mode
        #end if
    #else
        $assembly_fasta
        #if $mode_conditional.scaffold_files
            $mode_conditional.scaffold_files
        #end if
        #if $mode_conditional.merging_options.f
            -f $mode_conditional.merging_options.f
        #end if
        #if $mode_conditional.merging_options.j
            -j $mode_conditional.merging_options.j
        #end if
        -l $mode_conditional.merging_options.l
        -e $mode_conditional.merging_options.e
        --gap-func $mode_conditional.merging_options.function_merging
        #if $mode_conditional.hic_options.b
            -b $mode_conditional.hic_options.b
            -r $mode_conditional.hic_options.r
            -p $mode_conditional.hic_options.p
        #end if 
    #end if
    -o ./
    -t \${GALAXY_SLOTS:-2}
     && ls -lah
    ]]>    </command>
    <inputs>
        <conditional name="mode_conditional">
            <param name="mode_option" type="select" label="Operation mode">
                <option value="correct">Correct: homology-based missasembly correction</option>
                <option value="scaffold">Scaffold: homology-based assebly scaffolding</option>
                <option value="patch">Patch: homology-based assembly patching</option>
                <option value="merge">Merge: scaffolding merging</option>
            </param>
            <when value="correct">
                <expand macro="input_options"/>
                <conditional name="validation_conditional">
                    <param name="validation_option" type="select" label="Use validation reads">
                        <option value="true">Enabled</option>
                        <option value="false" selected="true">Disabled</option>
                    </param>
                    <when value="true">
                        <param argument="-R" type="data" format="fasta, fasta.gz" optional="true" label="Validation reads" />
                        <param name="read_type" type="select" label="Read type">
                            <option value="sr">Illumina</option>
                            <option value="ont">Nanopore</option>
                            <option value="corr">Error corrected long-reads</option>
                        </param>
                        <param argument="-v" type="integer" min="0" value="10000" label="Coverage validation window size" />
                        <param argument="--max-cov" type="integer" min="0" value="" optional="true" label="Break sequences at regions at or above this coverage level"/>
                        <param argument="--min-cov" type="integer" min="0" value="" optional="true" label="Break sequences at regions at or below this coverage level"/>
                    </when>
                    <when value="false"/>
                </conditional>
                <section name="advanced_options" title="Advanced options">
                    <expand macro="common_parameters"/>
                    <param argument="-b" type="integer" min="0" value="5000" label="Minimum break distance from contig ends"/>
                    <param name="missasembly_break" type="select" optional="true" label="Break misassebly option">
                        <option value="--inter">Only break misassemblies between reference sequences (--inter)</option>
                        <option value="--intra">Only break missasemblies within reference sequences (--intra)</option>
                    </param>
                    <param argument="--gff" type="data" format="gff" optional="true" label="Don't break sequences within GFF intervals"/>
                </section>
                <param name="output_correct" type="select"  multiple="true" display="checkboxes" optional='false' label="Output files">
                    <option value="fasta" selected="true">The corrected query assembly in FASTA format (ragtag.correct.fasta)</option>
                    <option value="agp" selected="true">The AGP file defining the exact coordinates of query sequence breaks (ragtag.correct.agp)</option>
                    <option value="paf">The description of the approximate mapping positions between two set of sequences in PAF format (ragtag.correct.asm.paf)</option>
                    <option value="log">Log file (ragtag.correct.asm.paf.log)</option>
                </param>
            </when>
            <when value="scaffold">
                <expand macro="input_options"/>
                <section name="advanced_options" title="advanced options">
                    <expand macro="common_parameters"/>
                    <param argument="-i" type="float" min="0" max="1" value="0.2" label="Minimum grouping confidence score"/>
                    <param argument="-a" type="float" min="0" max="1" value="0" label="Minimum location confidence score"/>
                    <param argument="-s" type="float" min="0" max="1" value="0" label="Minimum orientation confidence score"/>
                    <conditional name="gap_conditional">
                        <param name="gap_option" type="select" label="Infer gap sizes" help="When disabled, all gaps are 100 bp (-r)">
                            <option value="true" selected="true">Enabled</option>
                            <option value="false">Disabled</option>
                        </param>
                        <when value="true">
                            <param argument="-g" type="integer" min="0" value="100" label="Minimum infered gap size" />
                            <param argument="-m" type="integer" min="0" value="100000" label="Maximum inferred gap size"/>
                        </when>
                        <when value="false"/>
                    </conditional>
                    <conditional name="unplaced_conditional">
                        <param name="unplaced_option" type="select" label="Concatenate unplaced contigs and make 'chr0' (-C)">
                            <option value="true">Enabled</option>
                            <option value="false" selected="true">Disabled</option>
                        </param>
                        <when value="true">
                            <param argument="-J" type="data" format="txt" optional="true" label="List of query headers to leave unplaceds and exclude form 'chr0'"/>
                        </when>
                        <when value="false"/>
                    </conditional>
                </section>
                <param name="output_scaffold" type="select"  multiple="true" display="checkboxes" label="Output files">
                    <option value="fasta" selected="true">The scaffolds in FASTA format, defined by the ordering and orientations of the sequences containted in the AGP file</option>
                    <option value="agp" selected="true">The ordering and orientations of query sequences in AGP format</option>
                    <option value="paf">The description of the approximate mapping positions between two set of sequences in PAF format</option>
                    <option value="confidence">Confidence score values</option>
                    <option value="stats">Summary statistics for the scaffolding process</option>
                    <option value="log">Log file</option>
                </param>
            </when>
            <when value="patch">
                <expand macro="input_options"/>
                <section name="advanced_options" title="advanced options">
                    <expand macro="common_parameters"/>
                    <param argument="-s" type="integer" min="0" value="50000" label="Minimum merged alignment length"/>
                    <param argument="-i" type="float" min="0" max="1" value="0.05" label="Maximum merged alignment distance" help="Maximum merged alignment distance from sequence terminus as fraction of the sequence length"/>
                    <param name="patching_mode" type="select" optional="true" label="Patching mode">
                        <option value="--fill-only">Only fill existing target gaps. Do not join target sequences</option>
                        <option value="--join_only">Only join and patch target sequences. DO not fill existing gaps</option>
                    </param>
                </section>
                <param name="output_patch" type="select"  multiple="true" display="checkboxes" optional='false' label="Output files">
                    <option value="final_fasta" selected="true">The final FASTA file containing the patched assembly</option>
                    <option value="final_agp" selected="true">The final AGP file defining how final FASTA is built</option>
                    <option value="assembly_files" selected="true">Assembly alignment files</option>
                    <option value="split_assembly">The split target assembly and the renamed query assembly combined into one FASTA file</option>
                    <option value="split_description">An AGP file defining how the target assembly was split at gaps</option>
                    <option value="target_gaps">The target assembly split at gaps</option>
                    <option value="agp_names">An AGP file defining the new names for query sequences</option>
                    <option value="fasta_renamed">A FASTA file with the original query sequence, but with new names</option>
                    <option value="log">Log file</option>
                </param>
            </when>
            <when value="merge">
                <param name="assembly_fasta" type="data" format="fasta" label="Assembly FASTA file"/>
                <param name="scaffold_files" type="data" format="agp" multiple="true" optional="true" label="Scaffold AGP files"/>
                <section name="merging_options" title="Merging options">
                    <param argument="-f" type="data" format="csv" optional="true" label="CSV list of (AGP file,weight)"/>
                    <param argument="-j" type="data" format="txt" optional="true" label="List of query headers to leave unplaced"/>
                    <param argument="-l" type="integer" min="0" value="100000" label="Minimum assembly sequence length"/>
                    <param argument="-e" type="float" min="0" value="0" label="Minimum edge weight"/>
                    <param name="function_merging" type="select" label="Function for merging gap lengths (--gap-func)">
                        <option value="min" selected="true">Min</option>
                        <option value="max">Max</option>
                        <option value="mean">Mean</option>
                    </param>
                </section>
                <section name="hic_options" title="HI-C options">
                    <param argument="-b" type="data" format="bam" optional="true" label="Hi-C alignments" help="Sorted by read name"/>
                    <param argument="-r" type="text" value="" optional="true" label="Restriction enzymes/sites or 'DNase'" help="List of restrction enzimes/sites or 'DNase', separated by comma. E.g. GATC,GACC">
                        <sanitizer invalid_char="">
                            <valid initial="string.letters,string.digits">
                                <add value="," />
                                <add value="[" />
                                <add value="]" />
                            </valid>
                        </sanitizer>
                        <validator type="regex">[0-9a-zA-Z,\]\[]+</validator>
                    </param>
                    <param argument="-p" type="float" min="0" max="1" value="1" optional="true" label="Portion of the sequence termini to consider for links"/>
                </section>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <!--Correct mode outputs-->
        <data format="paf" name="correct_paf" from_work_dir="ragtag.correct.asm.paf" label="${tool.name} on ${on_string}: PAF">
            <filter>mode_conditional["mode_option"] == "correct" and "paf" in mode_conditional["output_correct"]</filter>
        </data>
        <data format="tabular" name="correct_agp" from_work_dir="ragtag.correct.agp" label="${tool.name} on ${on_string}: AGP">
            <filter>mode_conditional["mode_option"] == "correct" and "agp" in mode_conditional["output_correct"]</filter>
        </data>
        <data format="fasta" name="correct_fasta" from_work_dir="ragtag.correct.fasta" label="${tool.name} on ${on_string}: FASTA">
            <filter>mode_conditional["mode_option"] == "correct" and "fasta" in mode_conditional["output_correct"]</filter>
        </data>
        <data format="txt" name="correct_log" from_work_dir="ragtag.correct.asm.paf.log" label="${tool.name} on ${on_string}: log">
            <filter>mode_conditional["mode_option"] == "correct" and "log" in mode_conditional["output_correct"]</filter>
        </data>
        <!-- TO DO: If -gff was used during correction, use this AGP file to update the GFF coordinates to refer to the new broken query assembly.
        <data format="gff" name="correct_gff" from_work_dir="ragtag.correct.asm.paf.log" label="${tool.name} on ${on_string}: GFF">
            <filter>mode_conditional["mode_option"] == "correct" and "log" in mode_conditional["output_correct"]</filter>
        </data>
        -->
        <!--Scaffold mode outputs-->
        <data format="paf" name="scaffold_paf" from_work_dir="ragtag.scaffold.asm.paf" label="${tool.name} on ${on_string}: PAF">
            <filter>mode_conditional["mode_option"] == "scaffold" and "paf" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_agp" from_work_dir="ragtag.scaffold.agp" label="${tool.name} on ${on_string}: AGP">
            <filter>mode_conditional["mode_option"] == "scaffold" and "agp" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="fasta" name="scaffold_fasta" from_work_dir="ragtag.scaffold.fasta" label="${tool.name} on ${on_string}: FASTA">
            <filter>mode_conditional["mode_option"] == "scaffold" and "fasta" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="txt" name="scaffold_log" from_work_dir="ragtag.scaffold.asm.paf.log" label="${tool.name} on ${on_string}: log">
            <filter>mode_conditional["mode_option"] == "scaffold" and "log" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_stats" from_work_dir="ragtag.scaffold.stats" label="${tool.name} on ${on_string}: stats">
            <filter>mode_conditional["mode_option"] == "scaffold" and "stats" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <!--Patch mode outputs TODO-->
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="tabular" name="scaffold_confidence" from_work_dir="ragtag.scaffold.confidence.txt" label="${tool.name} on ${on_string}: confidence">
            <filter>mode_conditional["mode_option"] == "scaffold" and "confidence" in mode_conditional["output_scaffold"]</filter>
        </data>
        <data format="txt" name="tmp" label="${tool.name} on ${on_string}: tmp"/>
    </outputs>
    <tests>
    </tests>
    <help><![CDATA[
.. class:: infomark

**Purpose**

Hello!

----

.. class:: infomark

**List of accepted restriction enzymes**

    Below is a list of all accepted restriction enzymes and
    their restriction sites:

        HindIII: AAGCTT
        Sau3AI: GATC
        MboI: GATC
        DpnII: GATC
        HinfI: GA[ATCG]TC
        DdeI: CT[ATCG]AG
        MseI: TTAA

    For RagTag, use a comma separated list of enzymes or
    sites (or a mix). For example:
    
    -- Arima Hi-C v1.0
        'Sau3AI,HinfI' or 'GATC,GA[ATCG]TC'.
    
    -- Arima Hi-C v2.0 ("Arima High Coverage Hi-C")
        'Sau3AI,HinfI,DdeI,MseI' or 'GATC,GA[ATCG]TC,CT[ATCG]AG,TTAA'.
 
    Note that for restriction sites, wildcards are
    represented with python regex syntax, not IUPAC
    ambiguity codes. e.g. '[ATCG]' instead of 'N'.
    
    Restriction enzymes are not necessarily the enzyme
    used for sample prep. Each is only a enzyme that
    cuts at the corresponding restriction site.

    Please contact the developers if you would like to add
    more enzymes/sites.

    ]]>    </help>
    <expand macro="citations" />
</tool>