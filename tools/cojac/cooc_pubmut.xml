<tool id="cooc_pubmut" name="Cojac: render" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@"
      profile="@PROFILE@">
    <description>
        a JSON or YAML file to a pretty table
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="biotools"/>
    <expand macro="requirements"/>
    <expand macro="version"/>
    <command detect_errors="exit_code"><![CDATA[
#if $vocdir_option.choice == 'custom'
    #set vocdir = 'voc/'
    #set file_paths1 = []
    mkdir -p voc &&
    #for $input_file in $voc_file
        #set $file_path = $vocdir + $input_file.element_identifier
        ln -s '$input_file' '$file_path' &&
        $file_paths1.append($file_path)
    #end for
#end if
cooc-pubmut
    -m '$vocdir'
    -a '$amplicons'
    #if $mutbamscan_results.choice == 'json'
        -j '$cooc_json'
    #else
        -y '$cooc_yaml'
    #end if
    -o cooc-table.csv
    $escape
    $excel
    #if $batchname
        -/ '$batchname'
    #end if
    -q &&
pandoc cooc-output.csv -o cooc-table.pdf &&
pandoc cooc-output.csv -o cooc-table.html &&
pandoc cooc-output.csv -o cooc-table.md
    ]]></command>
    <inputs>
        <expand macro="vocdir_input"/>
        <param name="amplicons" type="data" format="yaml"
               label="List of query amplicons, from mutbamscan"/>
        <conditional name="mutbamscan_results">
            <param name="choice" type="select"
                   label="Select the format of 'cooc-mutbamscan' result file(s)">
                <option value="json">JSON</option>
                <option value="yaml">YAML</option>
            </param>
            <when value="json">
                <param name="cooc_json" type="data" format="json" multiple="true"
                       label="Results generated by mutbamscan"/>
            </when>
            <when value="yaml">
                <param name="cooc_yaml" type="data" format="yaml" multiple="true"
                       label="Results generated by mutbamscan"/>
            </when>
        </conditional>
        <param argument="--escape" type="boolean" truevalue="--escape" falsevalue=""
               checked="false" label="Use escape characters for newlines"/>
        <param argument="--excel" type="boolean" truevalue="--excel" falsevalue=""
               checked="false"
               label="Use a semi-colon ';' instead of a comma ',' in the comma-separated-files as required by Microsoft Excel"/>
        <param argument="--batchname" type="text" optional="true"
               label="Batchname"
               help="Split samplename/batchname (as in samples tsv)"/>
        <param name="add_output_files" type="select" display="checkboxes" optional="true"
               multiple="true" label="Convert CSV output table to other formats">
            <option value="html">HTML</option>
            <option value="pdf">PDF</option>
            <option value="md">MD</option>
        </param>
    </inputs>
    <outputs>
        <data name="table" format="csv"
              label="${tool.name} on ${on_string}: Mutation cooccurrence (CSV table)"
              from_work_dir="cooc-table.csv">
        </data>
        <data name="add_output_files" format="html"
              label="${tool.name} on ${on_string}: Mutation cooccurrence (HTML)"
              from_work_dir="cooc-table.html">
            <filter>'html' in add_output_files</filter>
        </data>
        <data name="add_output_files" format="pdf"
              label="${tool.name} on ${on_string}: Mutation cooccurrence (PDF)"
              from_work_dir="cooc-table.pdf">
            <filter>'pdf' in add_output_files</filter>
        </data>
        <data name="add_output_files" format="md"
              label="${tool.name} on ${on_string}: Mutation cooccurrence (MD)"
              from_work_dir="cooc-table.md">
            <filter>'md' in add_output_files</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <conditional name="vocdir_option">
                <param name="choice" value="custom"/>
                <param name="voc_file" value="omicron_ba1_mutations.yaml"/>
            </conditional>
            <param name="amplicons" value="amplicons111.yaml"/>
            <conditional name="mutbamscan_results">
                <param name="choice" value="json"/>
                <param name="cooc_json" value="cooc-test111.json"/>
            </conditional>
            <output name="table" ftype="csv">
                <assert_contents>
                    <has_text text="Amplicon 76"/>
                    <has_text text="Amplicon 81"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
@HELP_HEADER@

Information about **cooc-pubmut** method
========================================

The method renders a JSON or YAML file to a table as in the publication.
You need to open the output CSV in a spreadsheet that understands linebreaks.

    ]]></help>
    <expand macro="citations"/>
</tool>
