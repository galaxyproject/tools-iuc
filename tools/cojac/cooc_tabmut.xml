<tool id="cooc_tabmut" name="Cojac: tabmut" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@"
      profile="@PROFILE@">
    <description>
        esport a JSON or YAML file as a CSV/TSV table for downstream analysis
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="biotools"/>
    <expand macro="requirements"/>
    <expand macro="version"/>
    <command detect_errors="exit_code"><![CDATA[
cooc-tabmut
    #if $mutbamscan_results.choice == 'json'
        -j '$cooc_json'
    #else
        -y '$cooc_yaml'
    #end if
    -o cooc-table.csv
    $lines
    $excel
    $multiindex
    #if $batchname
        -/ '$batchname'
    #end if
    -q
    ]]></command>
    <inputs>
        <conditional name="mutbamscan_results">
            <param name="choice" type="select"
                   label="Select the format of 'cooc-mutbamscan' result file(s)">
                <option value="json">JSON</option>
                <option value="yaml">YAML</option>
            </param>
            <when value="json">
                <param name="cooc_json" type="data" format="json" multiple="true"
                       label="Results generated by mutbamscan"/>
            </when>
            <when value="yaml">
                <param name="cooc_yaml" type="data" format="yaml" multiple="true"
                       label="Results generated by mutbamscan"/>
            </when>
        </conditional>
        <param argument="--lines" type="boolean" truevalue="--lines" falsevalue=""
               checked="false" label="Line-oriented table alternative"/>
        <param argument="--excel" type="boolean" truevalue="--excel" falsevalue=""
               checked="false"
               label="Use a semi-colon ';' instead of a comma ',' in the comma-separated-files as required by Microsoft Excel"/>
        <param argument="--multiindex" type="boolean" truevalue="--multiindex" falsevalue=""
               checked="false"
               label="Use multi-level indexing (amplicons and counts categories)"/>
        <param argument="--batchname" type="text" optional="true"
               label="Batchname"
               help="Split samplename/batchname (as in samples tsv)"/>
    </inputs>
    <outputs>
        <data name="table" format="csv"
              label="${tool.name} on ${on_string}: Mutation cooccurrence (CSV table)"
              from_work_dir="cooc-table.csv">
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <conditional name="mutbamscan_results">
                <param name="choice" value="json"/>
                <param name="cooc_json" value="cooc-test111.json"/>
            </conditional>
            <output name="table" ftype="csv">
                <assert_contents>
                    <has_text text="A76_om1.count"/>
                    <has_text text="A76_om1.mut_oneless"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
@HELP_HEADER@

Information about **cooc_tabmut** method
========================================

The method exports a JSON or YAML file as a CSV/TSV table for downstream analysis (e.g.: RStudio).

    ]]></help>
    <expand macro="citations"/>
</tool>
