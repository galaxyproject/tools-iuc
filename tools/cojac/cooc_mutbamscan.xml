<tool id="cooc_mutbamscan" name="Cojac: scan" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@"
      profile="@PROFILE@">
    <description>
        an alignment file for mutation co-occurrences
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="biotools"/>
    <expand macro="requirements"/>
    <expand macro="version"/>
    <command detect_errors="exit_code"><![CDATA[
ln -s '$bam_file' 'bam_file' &&
ln -s '$bed_file' 'bed_file' &&
#if $vocdir_option.choice == 'custom'
    #set vocdir = 'voc/'
    #set file_paths1 = []
    mkdir -p voc &&
    #for $input_file in $voc_file
        #set $file_path = $vocdir + $input_file.element_identifier
        ln -s '$input_file' '$file_path' &&
        $file_paths1.append($file_path)
    #end for
#end if
cooc-mutbamscan
    -b 'bed_file'
    -m '$vocdir'
    -a 'bam_file'
    -y cooc.yaml
    -j cooc.json
    -A amplicons.yaml

    ]]></command>
    <inputs>
        <expand macro="vocdir_input"/>
        <param name="bam_file" type="data" format="bam,cram,sam"
               label="Alignment BAM/CRAM/SAM file"/>
        <param name="bed_file" type="data" format="bed"
               label="BED file defining the amplicons"/>
    </inputs>
    <outputs>
        <data name="cooc_yaml" format="yaml"
              label="${tool.name} on ${on_string}: Mutation cooccurrence (yaml)"
              from_work_dir="cooc.yaml">
        </data>
        <data name="cooc_json" format="json"
              label="${tool.name} on ${on_string}: Mutation cooccurrence (json)"
              from_work_dir="cooc.json">
        </data>
        <data name="amplicons" format="yaml"
              label="${tool.name} on ${on_string}: Amplicons (yaml)"
              from_work_dir="amplicons.yaml">
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="3">
            <conditional name="vocdir_option">
                <param name="choice" value="custom"/>
                <param name="voc_file" value="omicron_ba1_mutations.yaml"/>
            </conditional>
            <param name="bam_file" value="tbam11.bam"/>
            <param name="bed_file" value="nCoV-2019.insert.V3.bed"/>
            <output name="cooc_yaml" ftype="yaml">
                <assert_contents>
                    <has_text text="76_om1"/>
                    <has_text text="81_om1"/>
                </assert_contents>
            </output>
            <output name="cooc_yaml" ftype="json">
                <assert_contents>
                    <has_text text="76_om1"/>
                    <has_text text="81_om1"/>
                </assert_contents>
            </output>
            <output name="amplicons" ftype="yaml">
                <assert_contents>
                    <has_text text="76_om1"/>
                    <has_text text="81_om1"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
@HELP_HEADER@

Information about **cooc-mutbamscan** method
============================================

The method scans an alignment BAM/CRAM/SAM file for mutation co-occurrences and output a JSON or YAML file.d

    ]]></help>
    <expand macro="citations"/>
</tool>
