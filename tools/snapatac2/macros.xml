<macros>
	<token name="@TOOL_VERSION@">2.5.3</token>
    <token name="@VERSION_SUFFIX@">0</token>
    <token name="@PROFILE@">23.0</token>
    <xml name="requirements">
        <requirement type="package" version="@TOOL_VERSION@">snapatac2</requirement>
        <!--<requirement type="package" version="3.0.0">macs3</requirement>-->
        <requirement type="package" version="5.18.0">plotly</requirement>
        <requirement type="package" version="0.2.1">python-kaleido</requirement>
        <requirement type="package" version="0.19.19">polars</requirement>
        <requirement type="package" version="14.0.1">pyarrow</requirement>
        <requirement type="package" version="0.11.3">python-igraph</requirement>
        <yield />
    </xml>

    <token name="@PREP_ADATA@"><![CDATA[
        cp '$method.adata' 'anndata.h5ad' &&
        ]]>
    </token>

    <token name="@CMD@"><![CDATA[
        cat '$script_file' > '$hidden_output' &&
        python '$script_file' >> '$hidden_output' &&
		touch 'anndata_info.txt' &&
		cat 'anndata_info.txt' @CMD_prettify_stdout@
        ]]>
    </token>

    <token name="@CMD_prettify_stdout@"><![CDATA[ | sed -r '1 s|AnnData object with (.+) = (.*)\s*|\1: \2|g' | sed "s|'||g"  | sed -r 's|^\s*(.*):\s(.*)|[\1]\n-    \2|g' | sed 's|, |\n-    |g'
    ]]></token>

    <token name="@CMD_imports@"><![CDATA[
import snapatac2 as sa
    ]]>
    </token>
    <xml name="sanitize_query" token_validinitial="string.printable">
        <sanitizer>
            <valid initial="@VALIDINITIAL@">
                <remove value="&apos;" />
            </valid>
        </sanitizer>
    </xml>

    <xml name="inputs_anndata">
        <param name="adata" type="data" format="h5ad" label="Annotated data matrix"/>
    </xml>

    <token name="@CMD_read_inputs@"><![CDATA[

adata = sa.read('anndata.h5ad')
]]>
    </token>

    <xml name="dimentions_plot">
        <param argument="width" type="integer" value="500" label="Width of the plot"/>
		<param argument="height" type="integer" value="400" label="Height of the plot"/>
    </xml>

    <xml name="param_groupby">
        <param argument="groupby" type="text" optional="flase" label="The key of the observation grouping to consider" help="If it is given, the plot is ordered by the respective group. It is expected that to be a categorical. If it is not a categorical observation, it would be subdivided into 'num_categories'.">
            <expand macro="sanitize_query" />
        </param>
    </xml>

    <xml name="out_file">
        <param name="out_file" type="select" optional="true" label="Type of output file">
            <option value="png" selected="true">PNG</option>
            <option value="svg" >SVG</option>
            <option value="pdf">PDF</option>
            <option value="html">HTML</option>
		</param>
    </xml>
    <token name="@CMD_anndata_write_outputs@"><![CDATA[
adata.write('anndata.h5ad')
with open('anndata_info.txt','w', encoding='utf-8') as ainfo:
    print(adata, file=ainfo)s
]]>
    </token>
    <xml name="inputs_common_advanced">
        <section name="advanced_common" title="Advanced Options" expanded="false">
            <param name="show_log" type="boolean"  checked="false" label="Output Log?" />
        </section>
    </xml>
    <xml name="render_plot">
        <param argument="width" type="integer" value="600" label="Width of the plot"/>
        <param argument="height" type="integer" value="400" label="Height of the plot"/>
        <param argument="scale" type="float" optional="true" value="" label="Scale factor for the image"/>
        <expand macro="out_file"/>
    </xml>
    <xml name="shift">
    	<param argument="shift_left" type="integer" value="4" label="Insertion site correction for the left end" help="Note this has no effect on single-end reads"/>
    	<param argument="shift_right" type="integer" value="-5" label="Insertion site correction for the right end" help="Note this has no effect on single-end reads"/>
    </xml>
    <xml name="param_chunk_size" tokens="size">
    	<param argument="chunk_size" type="integer" value="@SIZE@" label="chunk size"/>
    </xml>
	<xml name="min_max_frag_size">
		<param argument="min_frag_size" type="integer" optional="true" value="" label="Minimum fragment size to include"/>
		<param argument="max_frag_size" type="integer" optional="true" value="" label="Maximum fragment size to include"/>
	</xml>
	<xml name="params_data_integration">
		<param argument="use_rep" type="text" value="X_spectral" label="The key for the matrix"/>
		<param argument="use_dims" type="text" optional="true" value="" label="The dimensions used for computation">
			<expand macro="sanitize_query"/>
		</param>
		<param argument="groupby" type="text" optional="true" value="" label="The key of the observation grouping to consider">
            <expand macro="sanitize_query" />
        </param>
		<param argument="key_added" type="text" optional="true" value="" label="If specified, add the result to adata.obsm with this key"/>
	</xml>
    <xml name="n_comps">
        <param argument="n_comps" type="integer" value="30" label="Number of dimensions to keep"/>
    </xml>
    <xml name="random_state">
        <param argument="random_state" type="integer" value="0" label="Seed of the random state generator"/>
    </xml>
    <xml name="weighted_by_sd">
        <param argument="weighted_by_sd" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Whether to weight the result eigenvectors by the square root of eigenvalues"/>
    </xml>
    <xml name="key_added">
        <param argument="key_added" type="integer" label="adata.obs key under which to add the cluster labels"/>
    </xml>
    <xml name="use_rep">
        <param argument="use_rep" type="text" value="X_spectral" optional="flase" label="Which data in adata.obsm to use for clustering"/>
    </xml>
    <xml name="genome_fasta">
        <param argument="genome_fasta" type="text" label="A fasta file containing the genome sequences or a Genome object"/>
    </xml>
    <xml name="background">
        <param argument="background" type="text" optional="true" value="" label="A list of regions to be used as the background">
			<expand macro="sanitize_query"/>
		</param>
    </xml>
    <xml name="mat">
        <param argument="peak_mat" type="data" format="h5ad" optional="true" label="AnnData or AnnDataSet object storing the cell by peak count matrix"/>
		<param argument="gene_mat" type="data" format="h5ad" optional="true" label="AnnData or AnnDataSet object storing the cell by gene count matrix"/>
    </xml>
    <xml name="network">
        <param argument="network" type="text" optional="flase" label="network"/>
    </xml>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1101/2023.09.11.557221</citation>
        </citations>
    </xml>
    <xml name="render_plot_test">
    	<param argument="width" value="650"/>
        <param argument="height" value="450"/>
        <param argument="scale" value="1"/>
    </xml>
    <xml name="render_plot_matching_text">
    	<has_text_matching expression="width = 650"/>
        <has_text_matching expression="height = 450"/>
        <has_text_matching expression="scale = 1"/>
    </xml>
    <xml name="param_counting_strategy">
        <param name="counting_strategy" type="select" label="he strategy to compute feature counts">
            <option value="fragment">fragment</option>
            <option value="insertion" selected="true">insertion</option>
            <option value="paired-insertion">paired-insertion</option>
        </param>
    </xml>

    <token name="@CMD_params_data_integration@"><![CDATA[
use_rep = '$method.use_rep',
#if $method.use_dims != ''
#set $dims = ([x.strip() for x in str($method.use_dims).split(',')])
use_dims=$dims,
#end if
#if $method.groupby != ''
#set $groupby = ([x.strip() for x in str($method.groupby).split(',')])
groupby=$groupby,
#end if
#if $method.key_added != ''
key_added = '$method.key_added',
#end if
    ]]>
    </token>

    <token name="@CMD_params_render_plot@"><![CDATA[
width = $method.width,
height = $method.height,
out_file = 'plot.$method.out_file',
#if $method.scale
scale = $method.scale
#end if
    ]]>
    </token>
</macros>
