<tool id="ucsc_wigtobigwig" name="wigtobigwig" version="@TOOL_VERSION@+galaxy0" profile="22.05">
    <description>bedGraph or Wig to bigWig converter</description>
    <macros>
        <token name="@TOOL_VERSION@">447</token>
    </macros>
    <xrefs>
        <xref type="bio.tools">UCSC_Genome_Browser_Utilities</xref>
    </xrefs>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">ucsc-wigtobigwig</requirement>
    </requirements>
    <stdio>
        <!-- Anything other than zero is an error -->
        <regex match="needLargeMem: trying to allocate 0 bytes" description="Your input file might be empty or wrongly formatted"/>
        <regex match="^Error"/>
    </stdio>
    <command><![CDATA[
        grep -v "^track" '$input1' > trackless &&
        wigToBigWig trackless
        #if $hist_or_builtin.genome_type_select == "indexed":
            '$hist_or_builtin.index.fields.len_path'
        #else
            '$chromfile'
        #end if
        '$out_file1'
        #if $settings.settingsType == "full":
              -blockSize=${settings.blockSize}
              -itemsPerSlot=${settings.itemsPerSlot}
              ${settings.clip}
              ${settings.unc}
        #else:
              -clip
        #end if
    ]]>
    </command>
    <inputs>
        <conditional name="hist_or_builtin">
            <param name="genome_type_select" type="select" label="Reference genome source" help="Was the Wig/bedgraph input constructed using a genome from your history, or a built-in genome?">
                <option selected="True" value="indexed">Input data is for a built-in genome</option>
                <option value="history">Input data is for a genome from the current history</option>
            </param>
            <when value="indexed">
                <param name="input1" type="data" format="wig,bedgraph" label="Wig/Bedgraph to convert">
                    <validator type="unspecified_build"/>
                </param>
                <param name="index" type="select" label="Source Genome Build">
                    <options from_data_table="__dbkeys__">
                        <filter type="data_meta" column="0" key="dbkey" ref="input1"/>
                    </options>
                    <validator type="no_options" message="The chosen genome build is not available."/>
                </param>
            </when>
            <when value="history">
                <param name="input1" type="data" format="wig,bedgraph" label="Wig/Bedgraph to convert"/>
                <param name="chromfile" type="data" format="len,txt,tabular" label="Chromosome length file" help="A file of sequence lengths for the history reference is required to make a bigwig. Compute sequence length tool can make these from fasta files"/>
            </when>
        </conditional>
        <conditional name="settings">
            <param name="settingsType" type="select" label="Converter settings to use" help="Default settings should usually be used.">
                <option value="preset">Default</option>
                <option value="full">Full parameter list</option>
            </param>
            <when value="preset"/>
            <when value="full">
                <param argument="-blockSize" type="integer" value="256" label="Items to bundle in r-tree" />
                <param argument="-itemsPerSlot" type="integer" value="1024" label="Data points bundled at lowest level"/>
                <param argument="-clip" type="boolean" truevalue="-clip" falsevalue="" checked="True" label="Clip chromosome positions" help="Issue warning messages rather than dying if wig file contains items off end of chromosome."/>
                <param argument="-unc" type="boolean" truevalue="-unc" falsevalue="" checked="False" label="Do not use compression"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="out_file1" format="bigwig"/>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <conditional name="hist_or_builtin">
                <param name="genome_type_select" value="history"/>
                <param name="input1" value="1.wig"/>
                <param name="chromfile" value="hg17.len" ftype="len"/>
            </conditional>
            <conditional name="settings">
                <param name="settingsType" value="full"/>
                <param name="blockSize" value="256"/>
                <param name="itemsPerSlot" value="1024"/>
                <param name="clip" value="True"/>
                <param name="unc" value="False"/>
            </conditional>
            <output name="out_file1" file="1.bigwig" compare="sim_size"/>
        </test>
        <!-- location file test -->
        <test expect_num_outputs="1">
            <conditional name="hist_or_builtin">
                <param name="genome_type_select" value="indexed"/>
                <param name="input1" value="1.wig" dbkey="hg17" />
                <param name="index" value="hg17" />
            </conditional>
            <conditional name="settings">
                <param name="settingsType" value="preset"/>
            </conditional>
            <output name="out_file1" file="1.bigwig" compare="sim_size"/>
        </test>
        <test expect_num_outputs="1">
            <conditional name="hist_or_builtin">
                <param name="input1" value="1.wig"/>
                <param name="genome_type_select" value="history"/>
                <param name="chromfile" value="hg17.len" ftype="len"/>
            </conditional>
            <conditional name="settings">
                <param name="settingsType" value="preset"/>
            </conditional>
            <output name="out_file1" file="1.bigwig" compare="sim_size"/>
        </test>
        <test expect_num_outputs="1">
            <conditional name="hist_or_builtin">
                <param name="input1" value="1.bedgraph" ftype="bedgraph"/>
                <param name="genome_type_select" value="history"/>
                <param name="chromfile" value="hg17.len" ftype="len"/>
            </conditional>
            <conditional name="settings">
                <param name="settingsType" value="preset"/>
            </conditional>
            <output name="out_file1" file="3.bigwig" compare="sim_size"/>
        </test>
        <test expect_num_outputs="1">
            <conditional name="hist_or_builtin">
                <param name="input1" value="merlin.wig" ftype="bedgraph"/>
                <param name="genome_type_select" value="history"/>
                <param name="chromfile" value="merlin.len" ftype="len"/>
            </conditional>
            <conditional name="settings">
                <param name="settingsType" value="preset"/>
            </conditional>
            <output name="out_file1" file="merlin.bigwig" compare="sim_size"/>
        </test>
    </tests>
    <help>
**Purpose**

This tool converts bedgraph or wiggle data into bigWig data for visualisation in browsers. The JBrowse tool can display these with other interesting tracks.

**Technical format details**

- **Wiggle format**: The .wig format is line-oriented. Wiggle data is preceded by a UCSC track definition line.  Following the track definition line is the track data, which can be entered in three different formats described below.

  - **BED format** with no declaration line and four columns of data::

      chromA  chromStartA  chromEndA  dataValueA
      chromB  chromStartB  chromEndB  dataValueB

  - **variableStep** two column data; started by a declaration line and followed with chromosome positions and data values::

      variableStep  chrom=chrN  [span=windowSize]
      chromStartA  dataValueA
      chromStartB  dataValueB

  - **fixedStep** single column data; started by a declaration line and followed with data values::

      fixedStep  chrom=chrN  start=position  step=stepInterval  [span=windowSize]
      dataValue1
      dataValue2

- The **BedGraph format** is described in detail at the `UCSC Bioinformatics website`_

.. _UCSC Bioinformatics website: http://genome.ucsc.edu/goldenPath/help/bedgraph.html

    </help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btq351</citation>
    </citations>
</tool>
