<tool id="csaw_consolidateSizes" name="Consolidate Sizes" version="@VERSION@.0">
    <description>consolidates window sizes</description>
     <macros>
       <import>csaw_macros.xml</import>
    </macros>
     <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

##consolidateSizes
    cS_gRangeList <- c()
    cS_IRangeList <- list()
    cS_width <- c()
    #for $i in $gRange_obj
        #if str($i.width) != ''
            cS_width <- c(cS_width, as.numeric("${i.width}"))
        #end if
        cS_gRangeList <- c(cS_gRangeList, "${i.GRanges}")
        cS_IRangeList <- append(cS_IRangeList, list(scan("${i.IRanges}", what=numeric())))
    #end for
    cS_dataList <- c()
    for (i in seq(cS_gRangeList)){
        cS_dataList <- c(cS_dataList, GRanges(cS_gRangeList[i], IRanges(cS_IRangeList[[i]], width=cS_width[i])))
    }
     cS_resultList <- list()
    #for $i in $consolidateSizes_select.db
        cS_resultList <- append(cS_resultList, list(read.table("${i.result_list}", header=T)))
    #end for
    #if str($consolidateSizes_select.equiweight) == 'true'
        cS_equiweight <- TRUE
    #else
        cS_equiweight <- FALSE
    #end if
    cS_tol <- as.numeric("${consolidateSizes_select.tol}")
    #if str($consolidateSizes_select.max_width) != ''
        cS_maxWidth <- as.numeric("${consolidateSizes_select.max_width}")
    #else
        cS_maxWidth <- NULL
    #end if
    #if str($consolidateSizes_select.GRanges) != ''
        cS_gRange <- as.character(unlist(strsplit(gsub(" ", "", "${consolidateSizes_select.GRanges}", ","), ",")))
        cS_b <- unlist(strsplit(gsub(" ", "", "${consolidateSizes_select.IRanges}", ","), ";"))
        cS_c <- gsub("\\[|\\]", "", cS_b)
        cS_d <- lapply(cS_c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
        cS_e <- c()
        cS_f <- c()
        for (i in seq(cS_d)){ 
            cS_e <- c(cS_e, cS_d[[i]][1])
            cS_f <- c(cS_f, cS_d[[i]][2])
        }
    cS_regions <- GRanges(cS_gRange, IRanges(cS_e,cS_f))
    #else
        cS_regions <-NULL
    #end if
    
    sink("$consolidateSizes_output")
        consolidateSizes(cS_dataList, cS_resultList, equiweight=cS_equiweight, merge.args=list(tol=cS_tol, max.width=cS_maxWidth), region=cS_regions)
    sink()

]]>
        </configfile>
    </configfiles>
    <inputs>
    	<expand macro="consolidate_param" />
        <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
        <param name="max_width" type="float" value="" optional="true" label="Maximum size of merged intervals"  />
        <param name="GRanges" type="text" label="Sequence Names" />
        <param name="IRanges" type="data" format="tabular" label="Ranges" help="Upload as a dataframe where the first column is the start position and the second column is the end position." />
                
                <!--TO DO: merge.args
                            combine.args
                            overlap.args-->
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: consolidateSizes output" />
    </outputs>

    <tests>
        <test>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conSize1.tabular" />
            </repeat>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conSize2.tabular" />
            </repeat>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conSize3.tabular" />
            </repeat>
            <repeat name="db">
                <param name="result_list" value="" />
            </repeat>
            <param name="equiweight" value="true" />
            <param name="tol" value="" />
    
        </test>
    </tests>

    <help><![CDATA[
        Consolidate DB results from multiple window sizes. A comprehensive detection of DB at a range of spatial resolutions. Windows of all sizes are clustered together and the p-values from all windows in each cluster are combined.
    ]]></help>


</tool>