<tool id="csaw_consolidateSizes" name="Consolidate Sizes" version="@VERSION@.0">
    <description>consolidates window sizes</description>
     <macros>
       <import>csaw_macros.xml</import>
    </macros>
     <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

##consolidateSizes
    cS_gRangeList <- c()
    cS_IRangeList <- list()
    #for $i in $gRange_obj
        cS_gRangeList <- c(cS_gRangeList, as.character(unlist(strsplit(gsub(" ", "", "${i.GRanges}", ","), ","))))
        cS_IRangeList <- append(cS_IRangeList, list(read.table("${i.IRanges}")))
    #end for

    cS_dataList <- c()
    for (i in seq(cS_gRangeList)){
        cS_dataList <- c(cS_dataList, GRanges(cS_gRangeList[i], IRanges(cS_IRangeList[[i]][[1]], cS_IRangeList[[i]][[2]])))
    }
    cS_resultList <- list()
    #for $i in $db
        cS_resultList <- append(cS_resultList, list(read.table("${i.result_list}", header=T)))
    #end for
    #if str($equiweight) == 'true'
        cS_equiweight <- TRUE
    #else
        cS_equiweight <- FALSE
    #end if
    cS_tol <- as.numeric("$tol")
    #if str($max_width) != ''
        cS_maxWidth <- as.numeric("$max_width")
    #else
        cS_maxWidth <- NULL
    #end if

    #if str($region_select.region_selector) == 'yes'
        cS_gRange <- as.character(unlist(strsplit(gsub(" ", "", "${region_select.GRanges}", ","), ",")))
        cS_iRange <- read.table("$region_select.IRanges", header=F)
        start <- c(cS_iRange[[1]])
        end <- c(cS_iRange[[2]])
    cS_regions <- GRanges(cS_gRange, IRanges(start,end))
    #else
        cS_regions <-NULL
    #end if
    
    result <- consolidateSizes(cS_dataList, cS_resultList, equiweight=cS_equiweight, merge.args=list(tol=cS_tol, max.width=cS_maxWidth), region=cS_regions)

    ids = result[[1]]
    lapply(ids, function(x) write.table(x, file="$id_output", quote = FALSE, row.names = FALSE, col.names = TRUE, append=TRUE))
    region <- result[[2]]
    write.table(region, file="$region_output", quote = FALSE, row.names = FALSE)
    table <- result[[3]]
    write.table(table, file="$table_output", row.names = FALSE)

]]>
        </configfile>
    </configfiles>
    <inputs>
    	<expand macro="consolidate_param" />
        <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
        <param name="max_width" type="float" value="" optional="true" label="Maximum size of merged intervals"  />
        <conditional name="region_select">
            <param name="region_selector" type="select" label="Specify regions of interest for overlapping with windows?">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <expand macro="gRanges" />
            </when>
            <when value="no"> </when>
        </conditional>
                
                <!--TO DO: merge.args
                            combine.args
                            overlap.args-->
    </inputs>

    <outputs>
        <data name="id_output" format="txt" label="${tool.name} on ${on_string}: consolidateSizes id output" />
        <data name="region_output" format="txt" label="${tool.name} on ${on_string}: consolidateSizes region output" />
        <data name="table_output" format="txt" label="${tool.name} on ${on_string}: consolidateSizes table output" />
    </outputs>

    <tests>
        <test>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conClus_range1.tabular" />
            </repeat>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conClus_range1.tabular" />
            </repeat>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conClus_range1.tabular" />
            </repeat>
            <repeat name="db">
                <param name="result_list" value="db1.tabular" />
            </repeat>
            <repeat name="db">
                <param name="result_list" value="db2.tabular" />
            </repeat>
            <repeat name="db">
                <param name="result_list" value="db3.tabular" />
            </repeat>
            <param name="equiweight" value="true" />
            <param name="tol" value="20" />
            <param name="max_width" value="10" />
            <conditional name="region_select">
                <param name="region_selector" value="yes" />
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="range1.tabular" />
            </conditional>
            <output name="id_output" value="conSizes_id_output.txt" />
            <output name="region_output" value="conSizes_region_output.txt" />
            <output name="table_output" value="conSizes_table_output.txt" />
        </test>
    </tests>

    <help><![CDATA[
        Consolidate DB results from multiple window sizes. A comprehensive detection of DB at a range of spatial resolutions. Windows of all sizes are clustered together and the p-values from all windows in each cluster are combined.
    ]]></help>


</tool>