<tool id="csaw_windowCounts" name="Window Counts" version="@VERSION@.0">
    <description>count reads overlapping each window</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

bamFiles <- c()
#for $i in $bam_input
    bamFiles <- c(bamFiles, '${i.bam_file}')
#end for
indexBam(bamFiles)

spacing <- as.numeric("$spacing")
#if str($width) != ''
    width <- as.numeric("$width")
#else
    width <- spacing
#end if
#if str($ext_selector.ext_select) == 'integer'
    ext <- as.numeric("$ext")
#else
    #if "$ext1" != ""
        ext1 <- as.numeric(unlist(strsplit("$ext1", ",")))
    #else
        ext1 <- NA
    #end if
    #if "$ext2" != ""
        ext2 <- as.numeric(unlist(strsplit("$ext2", ",")))
    #else
        ext2 <- NA
    #end if
    ext <- list(ext1, ext2)
#end if
shift <- as.numeric("$shift")
filter <- as.numeric("$filter")
#if str($bin) == "true"
    bin <- TRUE
#else
    bin <- FALSE
#end if

@READPARAM@

window_counts <- windowCounts(bamFiles, spacing=spacing, width=width, ext=ext, shift=shift, filter=filter, bin=bin, param=p)


counts <- list(counts)
write.table(do.call(rbind, counts), file="$output", quote = FALSE, row.names = c("Counts "), col.names = FALSE)
]]>
        </configfile>
    </configfiles>
    <inputs>
        <expand macro="windowCounts" />
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: windowCounts output" />
    </outputs>

    <tests>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="spacing" value="50"/>
            <param name="width" value="" />
            <conditional name="ext_selector">
                <param name="ext_select" value="list" />
                <param name="ext_list1" value="50, 100" />
                <param name="ext_list2" value="80" />
            </conditional>
            <param name="shift" value="0" />
            <param name="filter" value="10" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="no" />
            </conditional>    
            <output name="output" value="" />        
        </test>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="spacing" value="50"/>
            <param name="width" value="" />
            <conditional name="ext_selector">
                <param name="ext_select" value="list" />
                <param name="ext_list1" value="50, 100" />
                <param name="ext_list2" value="" />
            </conditional>
            <param name="shift" value="0" />
            <param name="filter" value="10" />
             <conditional name="readParam_select">
                <param name="readParam_selector" value="yes" />
                <param name="pe" value="both" />
                <param name="max_frag" value="100" />
                <param name="dedup" value="false" />
                <param name="minq" value="20" />
                <param name="forward" value="NA" />
                <param name="restrict" value="chrA" />
                <param name="discard" value="no" />
            </conditional>      
            <output name="output" value="" />      
        </test>
    </tests>

    <help><![CDATA[
        Count the number of extended reads overlapping a sliding window at spaced positions across the genome. A RangedSummarizedExperiment object is returned containing one integer matrix. A matrix of the same dimensions as object, containing (log-)transformed CPM values for each feature in each sample is returned. 
    ]]></help>
    <expand macro="citations" />
</tool>