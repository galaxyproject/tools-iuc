<tool id="csaw_clusterWindows" name="clusterWindows" version="@VERSION@.0">
    <description>clusters DB windows</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

@GRANGES@

tab <- read.table("$tab")
clust_target <- as.numeric("$target")
@COLNAMES@
tol <- as.numeric("$tol")
grid_length <- as.numeric("$grid_length")
iterations <- as.numeric("$iterations")

#if str($mergeWindows_select.mergeWindows_selector) == "yes"

    ############# Sign parameter not working #######################
    #if str($mergeWindows_select.sign_select.sign_selector) == "yes"
        sign <- scan("$mergeWindows_select.sign_select.sign", what=logical())
    #else 
        sign <- NULL
    #end if
    ################################################################

    #if str($mergeWindows_select.max_width) != ""
        max_width <- as.numeric("$mergeWindows_select.max_width")
    #else
        max_width <- NULL
    #end if

    #if str($mergeWindows_select.ignore_strand) == "yes"
        ignore_strand <- TRUE
    #else
        ignore_strand <- FALSE
    #end if

    result <- clusterWindows(regions, tab, clust_target, pval.col=pval_col, fc.col=fc_col, tol, max.width=max_width, ignore.strand=ignore_strand, weight=NULL, grid.length=grid_length, iterations=iterations)
#else
    result <- clusterWindows(regions, tab, clust_target, pval.col=pval_col, fc.col=fc_col, tol, weight=NULL, grid.length=grid_length, iterations=iterations)
#end if
    
ids <- list(result[[1]])
write.table(do.call(rbind, ids), file="$id_output", quote = FALSE, row.names = c("id "), col.names = FALSE)
region <- result[[2]]
write.table(region, file="$region_output", quote = FALSE, row.names = FALSE, col.names = TRUE)
f <- list(result[[3]])
write.table(do.call(rbind, f), file="$fdr_output", quote = FALSE, row.names = c("FDR "), col.names = FALSE)
]]>
        </configfile>
    </configfiles>
    <inputs>
        <expand macro="gRanges" />
        <param name="tab" type="data" format="tabular" label="Dataframe of results with a PValue field for each window" />
        <param name="target" type="float" value="" label="Desired cluster-level FDR" />
        <expand macro="col_names" />
        <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
        <!--Excluded weight because for internal use was noted-->
        <expand macro="mergeWindows_select" />
        <param name="grid_length" type="integer" value="21" label="Specify the number of points to use in the grid search" />
        <param name="iterations" type="integer" value="4" label="Specify the number of iterations of the grid search" />
    </inputs>

    <outputs>
        <data name="id_output" format="txt" label="${tool.name} on ${on_string}: clusterWindows id output" />
        <data name="region_output" format="txt" label="${tool.name} on ${on_string}: clusterWindows region output" />
        <data name="fdr_output" format="txt" label="${tool.name} on ${on_string}: clusterWindows FDR output" />
    </outputs>

    <tests>
        <test>
            <param name="GRanges" value="gRange_region3.tabular" />
            <param name="tab" value="tab.tabular" />
            <param name="target" value="0.05" />
            <param name="pval_col" value="PValue" />
            <param name="fc_col" value="logFC" />
            <param name="tol" value="10" />
            <conditional name="mergeWindows_select" >
                <param name="mergeWindows_selector" value="no" />
            </conditional>
            <param name="grid_length" value="21" />
            <param name="iterations" value="4" />
            <output name="id_output" file="clusterWindows_id_output1.txt"/>
            <output name="region_output" file="clusterWindows_region_output1.txt"/>
            <output name="fdr_output" file="clusterWindows_FDR_output1.txt"/>
        </test>
        <test>
            <param name="GRanges" value="gRange_region3.tabular" />
            <param name="tab" value="tab.tabular" />
            <param name="target" value="0.05" />
            <param name="pval_col" value="PValue" />
            <param name="fc_col" value="logFC" />
            <param name="tol" value="10" />
            <conditional name="mergeWindows_select" >
                <param name="mergeWindows_selector" value="yes" />
                <param name="max_width" value="10" />
                <param name="ignore_strand" value="true" />
            </conditional>
            <param name="grid_length" value="21" />
            <param name="iterations" value="4" />
            <output name="id_output" file="clusterWindows_id_output2.txt"/>
            <output name="region_output" file="clusterWindows_region_output2.txt"/>
            <output name="fdr_output" file="clusterWindows_FDR_output2.txt"/>
        </test>
    </tests>

    <help><![CDATA[
        Clusters significant windows into clusters while controlling the cluster-level FDR.
    ]]></help>
    <expand macro="citations" />
</tool>