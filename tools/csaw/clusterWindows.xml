<tool id="csaw_clusterWindows" name="Cluster Windows" version="@VERSION@.0">
    <description>clusters DB windows</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
##clusterWindows
    clust_grange <- as.character(unlist(strsplit(gsub(" ", "", "$GRanges", ","), ",")))
    i_range <- read.table("$IRanges")
    clust_regions <- GRanges(clust_grange, IRanges(i_range[[1]],i_range[[2]]))
    tab <- read.table("$tab")
    clust_target <- as.numeric("$target")
    #if str($pval_col) != ''
        pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$pval_col"))
        if (is.na(pval_col)){
            pval_col <- "$pval_col"
        }
    #else
        pval_col <- NULL
    #end if
    #if str($fc_col) != ''
        fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$fc_col"))
        if (is.na(fc_col)){
            fc_col <- "$fc_col"
        }
    #else
        fc_col <- NA
    #end if
    tol <- as.numeric("$tol")

    ##if str($weight) != ''
        ##clust_weight <- as.numeric("$weight")
    ##else
        ##clust_weight <- NULL
    ##end if

    #if str($grid_param_select) == 'yes'
        clust_length <- as.numeric("$grid_param_select.length")
        clust_range <- as.numeric("$grid_param_select.length")
        #if str($grid_param_select.iter) != ''
            clust_iter <- as.numeric("$grid_param_select.iter")
        #else
            clust_iter <- NULL
        #end if
        #if str($grid_param_select.scale) != ''
            clust_scale <- as.numeric("$grid_param_select.scale")
        #else 
            clust_scale <- NULL
        #end if
        clust_grid_param <- list(length=clust_length, range=clust_range, iter=clust_iter, scale=clust_scale)
    #else
        clust_grid_param <- NULL
    #end if

    result <- clusterWindows(clust_regions, tab, clust_target, pval.col=pval_col, fc.col=fc_col, tol, weight=NULL, grid.param=clust_grid_param)
    
    ids <- list(result[[1]])
    write.table(do.call(rbind, ids), file="$id_output", quote = FALSE, row.names = c("id "), col.names = FALSE)
    region <- result[[2]]
    write.table(region, file="$region_output", quote = FALSE, row.names = FALSE, col.names = TRUE)
    f <- list(result[[3]])
    write.table(do.call(rbind, f), file="$fdr_output", quote = FALSE, row.names = c("FDR "), col.names = FALSE)
]]>
        </configfile>
    </configfiles>
    <inputs>
        <expand macro="gRanges" />
        <param name="tab" type="data" format="tabular" label="Dataframe of results with a PValue field for each window" />
        <param name="target" type="float" value="" label="Desired cluster-level FDR" />
        <expand macro="col_names" />
        <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
        <!--<expand macro="weight" />-->
        <expand macro="grid_param" />
    </inputs>

    <outputs>
        <data name="id_output" format="txt" label="${tool.name} on ${on_string}: clusterWindows id output" />
        <data name="region_output" format="txt" label="${tool.name} on ${on_string}: clusterWindows region output" />
        <data name="fdr_output" format="txt" label="${tool.name} on ${on_string}: clusterWindows FDR output" />
    </outputs>

    <tests>
        <test>
            <param name="GRanges" value="chrA" />
            <param name="IRanges" value="range2.tabular" />
            <param name="tab" value="tab.tabular" />
            <param name="target" value="0.05" />
            <param name="pval_col" value="" />
            <param name="fc_col" value="logFC" />
            <param name="tol" value="10" />
            <conditional name="grid_param_select">
                <param name="grid_param" value="no" />
            </conditional>
            <output name="id_output" file="clusterWindows_id1.txt"/>
            <output name="region_output" file="clusterWindows_region1.txt"/>
            <output name="fdr_output" file="clusterWindows_FDR1.txt"/>
        </test>
        <test>
            <param name="GRanges" value="chrA" />
            <param name="IRanges" value="range2.tabular" />
            <param name="tab" value="tab.tabular" />
            <param name="target" value="0.05" />
            <param name="pval_col" value="" />
            <param name="fc_col" value="logFC" />
            <param name="tol" value="10" />
            <conditional name="grid_param_select">
                <param name="grid_param" value="yes" />
                <param name="length" value="21" />
                <param name="range" value="20" />
                <param name="iter" value="3" />
                <param name="scale" value="2" />
            </conditional>
            <output name="id_output" file="clusterWindows_id2.txt"/>
            <output name="region_output" file="clusterWindows_region2.txt"/>
            <output name="fdr_output" file="clusterWindows_FDR2.txt"/>
        </test>
    </tests>

    <help><![CDATA[
        Clusters significant windows into clusters while controlling the cluster-level FDR.
    ]]></help>


</tool>