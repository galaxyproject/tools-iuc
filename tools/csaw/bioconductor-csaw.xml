<tool id="bioconductor-csaw" name="csaw" version="@VERSION@.0">
    <description>detects differentially bound regions</description>

     <macros>
       <import>csaw_macros.xml</import>
    </macros>

     <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

## checkBimodality
	#if str($checkBimodality_select.checkBimodality) == 'yes'
		bamFiles <- c()
    	#for $i in $checkBimodality_select.bam_input
        	bamFiles <- c(bamFiles, "${i.bam_file}")
    	#end for

    	gRange <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.GRanges}", ","), ",")))
    	b <- unlist(strsplit(gsub(" ", "", "${checkBimodality_select.IRanges}", ","), ";"))
    	c <- gsub("\\[|\\]", "", b)
    	d <- lapply(c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
    	e <- c()
    	f <- c()
		for (i in seq(d)){ 
			e <- c(e, d[[i]][1])
			f <- c(f, d[[i]][2])
		}

        gRange <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.GRanges}", ","), ",")))
        b <- unlist(strsplit(gsub(" ", "", "${checkBimodality_select.IRanges}", ","), ";"))
        c <- gsub("\\[|\\]", "", b)
        d <- lapply(c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
        e <- c()
        f <- c()
        for (i in seq(d)){ 
        e <- c(e, d[[i]][1])
        f <- c(f, d[[i]][2])
    }
		regions <- GRanges(gRange, IRanges(e,f))

        w <- as.numeric("${checkBimodality_select.width}")

        #if str($checkBimodality_select.readParam_select.readParam_selector) == 'yes'
            pe <- "$checkBimodality_select.readParam_select.pe"
            max_frag <- as.numeric("$checkBimodality_select.readParam_select.max_frag")

            #if str($checkBimodality_select.readParam_select.dedup) == ''
                ded_up <- F
            #else
                ded_up <- T
            #end if

            #if str($checkBimodality_select.readParam_select.minq) != ''
                min_q <- as.numeric("${checkBimodality_select.readParam_select.minq}")
            #else
                min_q <- NA
            #end if

            #if str($checkBimodality_select.readParam_select.foward) == 'NA'
                forward <- NA
            #else if str($checkBimodality_select.readParam_select.foward) == 'forward'
                forward <- TRUE
            #else if str($checkBimodality_select.readParam_select.foward) == 'reverse'
                forward <- FALSE
            #end if

            restrict <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.readParam_select.restrict}", ","), ",")))
            #if str($checkBimodality_select.readParam_select.discard_select) == 'yes'
                dis_gRange <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.discard_select.GRanges}", ","), ",")))
                    dis_b <- unlist(strsplit(gsub(" ", "", "${checkBimodality_select.IRanges}", ","), ";"))
                    dis_c <- gsub("\\[|\\]", "", dis_b)
                    dis_d <- lapply(dis_c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
                    dis_e <- c()
                    dis_f <- c()
                    for (i in seq(dis_d)){ 
                        dis_e <- c(dis_e, dis_d[[i]][1])
                        dis_f <- c(dis_f, dis_d[[i]][2])
                    }
                discard <- GRanges(dis_gRange, IRanges(dis_e, dis_f))
            #else
                discard <- GRanges()
            #end if
            p <- readParam(pe=pe, max.frag=max_frag, dedup=ded_up, minq=min_q, forward=forward, discard=discard, BPPARAM=SerialParam())
        #else
            p <- readParam
        #end if  

        prior_count <- as.numeric("${checkBimodality_select.prior_count}")
        #if str($checkBimodality_select.invert) == ''
            inver <- F
        #else
            inver <- T
        #end if
        
        sink("$output")
            print("hi")
        sink()
         
    #end if

##clusterFDR
#if str($clusterFDR_select.clusterFDR) == 'yes'
    id <- scan("${clusterFDR_select.id}", what = integer())
    threshold <- as.numeric("${clusterFDR_select.threshold}")
    target <- as.numeric("${clusterFDR_select.target}")
    adjp <- scan("${clusterFDR_select.adjp}", what = numeric())
    #if str($clusterFDR_select.weight) != ''
        weight <- as.numeric("${clusterFDR_select.weight}")
    #else
        weight <- NULL
    #end if
    #if str($clusterFDR_select.grid_param_select) == 'yes'
        length <- as.numeric("${clusterFDR_select.grid_param_select.length}")
        range <- as.numeric("${clusterFDR_select.grid_param_select.length}")
        #if str($clusterFDR_select.grid_param_select.grid_param_select.iter) != ''
            iter <- as.numeric("${clusterFDR_select.grid_param_select.iter}")
        #else
            iter <- NULL
        #end if
        #if str($clusterFDR_select.grid_param_select.grid_param_select.scale) != ''
            scale <- as.numeric("${clusterFDR_select.grid_param_select.scale}")
        #else 
            scale <- NULL
        #end if
        grid_param <- list(length=length, range=range, iter=iter, scale=scale)
    #else
        grid_param <- NULL
    #end if
   
    sink("$clusterFDR_output")
        cluster_fdr <- clusterFDR(id, threshold, weight=weight)
        control_cluster <- controlClusterFDR(target, adjp, weight=weight, grid.param=grid_param)
    sink()
#end if

##clusterWindows
#if str($clusterWindows_select.clusterWindows) == 'yes'
    clust_grange <- as.character(unlist(strsplit(gsub(" ", "", "${clusterWindows_select.GRanges}", ","), ",")))
    i_range <- read.table("${clusterWindows_select.GRanges}")
    clust_regions <- GRanges(clust_grange, IRanges(i_range$V1,i_range$V2))
    tab <- read.table("${clusterWindows_select.tab}")
    clust_target <- as.numeric("${clusterWindows_select.target}")
    #if str($clusterWindows_select.pval_col) != ''
        pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${clusterWindows_select.pval_col}"))
        if (is.na(pval_col)){
            pval_col <- "${clusterWindows_select.pval_col}"
        }
    #else
        pval_col <- NULL
    #end if
    #if str($clusterWindows_select.fc_col) != ''
        fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${clusterWindows_select.fc_col}"))
        if (is.na(fc_col)){
            fc_col <- "${clusterWindows_select.fc_col}"
        }
    #else
        fc_col <- NA
    #end if
    tol <- as.numeric("${clusterWindows_select.tol}")
    #if str($clusterWindows_select.weight) != ''
        clust_weight <- as.numeric("${clusterWindows_select.weight}")
    #else
        clust_weight <- NULL
    #end if
    #if str($clusterWindows_select.grid_param_select) == 'yes'
        clust_length <- as.numeric("${clusterWindows_select.grid_param_select.length}")
        clust_range <- as.numeric("${clusterWindows_select.grid_param_select.length}")
        #if str($clusterWindows_select.grid_param_select.grid_param_select.iter) != ''
            clust_iter <- as.numeric("${clusterWindows_select.grid_param_select.iter}")
        #else
            clust_iter <- NULL
        #end if
        #if str($clusterWindows_select.grid_param_select.grid_param_select.scale) != ''
            clust_scale <- as.numeric("${clusterWindows_select.grid_param_select.scale}")
        #else 
            clust_scale <- NULL
        #end if
        clust_grid_param <- list(length=clust_length, range=clust_range, iter=clust_iter, scale=clust_scale)
    #else
        clust_grid_param <- NULL
    #end if

    sink("$clusterWindows_output")
        clusterWindows(clust_regions, tab, clust_target, pval.col=pval_col, fc.col=fc_col, tol, weight=clust_weight, grid.param=clust_grid_param)
    sink()
#end if


]]>
        </configfile>
    </configfiles>

    <inputs>
    	<conditional name="checkBimodality_select">
    		<param name="checkBimodality" type="select" label="Compute the maximum bimodality score across all base pairs in each region?" >
    			<option value="yes">Yes</option>
    			<option value="no" selected="true">No</option>
    		</param>
    		<when value="yes">
				<repeat name="bam_input" title="Upload indexed BAM files in sorted order" >
            		<param name="bam_file" type="data" format="bam" label="BAM file" />
        		</repeat>
        		<expand macro="gRanges" />
        		<!--width list?-->
        		<param name="width" type="integer" value="100" label="Span with which to compute bimodality" />
        		<conditional name="readParam_select">
        			<param name="readParam_selector" type="select" label="Specify read loading parameters?" >
        				<option value="yes">Yes</option>
    					<option value="no" selected="true">No</option>
    				</param>
    				<when value="yes">
                        <expand macro="readParam" />
    				</when>
    				<when value="no"> </when>
    			</conditional>
    			<param name="prior_count" type="integer" value="2" label="Prior count to compute bimodality scores" />
    			<param name="invert" type="boolean" truevalue="true" falsevalue="" checked="false" label="Invert bimodality score?" />
        	</when>
        	<when value="no"> </when>
        </conditional>

        <conditional name="clusterFDR_select">
            <param name="clusterFDR" type="select" label="Compute the FDR across clusters based on the test-level FDR threshold?" >
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <param name="id" type="data" format="tabular" label="Cluster IDs for each significant test below threshold" />
                <param name="threshold" type="float" value="" label="The FDR threshold used to define the significant tests" />
                <!--Separate output for controlClusterFDR?-->
                <param name="target" type="float" value="" optional="true" label="The desired cluster-level FDR threshold" />
                <param name="adjp" type="data" format="tabular" label="Window-level adjusted p-values" />
                <!--Include weights? Advanced Settings-->
                <expand macro="weight" />
                <expand macro="grid_param" />
            </when>
            <when value="no"> </when>
        </conditional>
        <conditional name="clusterWindows_select">
            <param name="clusterWindows" type="select" label="Clusters significant windows while controlling the cluster-level FDR?">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <param name="GRanges" type="text" label="Objects" />
                <param name="IRanges" type="data" format="tabular" label="Ranges" help="Upload as a Dataframe where each row is a interval separated by a space" />
                <param name="tab" type="data" format="tabular" label="Dataframe of results with a PValue field for each window" />
                <param name="target" type="float" value="" label="Desired cluster-level FDR" />
                <param name="pval_col" type="text" optional="true" label="Specify the column with the p-values" help="Enter a string or integer" />
                <param name="fc_col" type="text" optional="true" label="Specify the column of tab with the log-fold changes" help="Enter a string or integer" />
                <param name="tol" type="float" value="" label="Maximum distance between adjacent windows"/>
                <expand macro="weight" />
                <expand macro="grid_param" />
            </when>
            <when value="no"> </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: Output" >
            <filter>checkBimodality_select['checkBimodality'] == 'yes'</filter>
        </data>
        <data name="clusterFDR_output" format="txt" label="${tool.name} on ${on_string}: clusterFDR Output" >
            <filter>clusterFDR_select['clusterFDR'] == 'yes'</filter>
        </data>
        <data name="clusterWindows_output" format="txt" label="${tool.name} on ${on_string}: clusterWindows Output" >
            <filter>clusterWindows_select['clusterWindows'] == 'yes'</filter>
        </data>
        
    </outputs>

    <tests>
    	<!--<test>
			<repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>

            <param name="GRanges" value="chrA, chrA, chrB, chrC" />

            <param name="IRanges" value="[1, 100]; [500, 580]; [100, 500]; [1000, 1500]" />
           
        </test>-->
    </tests>

    <help><![CDATA[
        Detection of differentially bound regions in ChIP-seq data with sliding windows, with methods for normalization and proper FDR control.
    ]]></help>


</tool>