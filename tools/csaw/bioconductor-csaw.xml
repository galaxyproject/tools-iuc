<tool id="bioconductor-csaw" name="csaw" version="@VERSION@.0">
    <description>detects differentially bound regions</description>

     <macros>
        <token name="@VERSION@">1.12.0</token>
    </macros>

   <requirements>
        <requirement type="package" version="@VERSION@">bioconductor-csaw</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)


## checkBimodality
	#if str($checkBimodality_select.checkBimodality) == 'yes'
		bamFiles <- c()
    	#for $i in $checkBimodality_select.bam_input
        	bamFiles <- c(bamFiles, "${i.bam_file}")
    	#end for

    	gRange <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.GRanges}", ","), ",")))
    	b <- unlist(strsplit(gsub(" ", "", "${checkBimodality_select.IRanges}", ","), ";"))
    	c <- gsub("\\[|\\]", "", b)
    	d <- lapply(c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
    	e <- c()
    	f <- c()
		for (i in seq(d)){ 
			e <- c(e, d[[i]][1])
			f <- c(f, d[[i]][2])
		}

		incoming <- GRanges(gRange, IRanges(e,f))

		x <- checkBimodality(bamFiles, incoming)
		
    #end if

print(x)



## OUTPUT


]]>
        </configfile>
    </configfiles>

    <inputs>
    	<conditional name="checkBimodality_select">
    		<param name="checkBimodality" type="select" label="Compute the maximum bimodality score across all base pairs in each region?" >
    			<option value="yes">Yes</option>
    			<option value="no" selected="true">No</option>
    		</param>
    		<when value="yes">
				<repeat name="bam_input" title="Upload indexed BAM files in sorted order" >
            		<param name="bam_file" type="data" format="bam" label="BAM file" />
        		</repeat>
        		<param name="GRanges" type="text" label="Objects" />
        		<param name="IRanges" type="text" label="Ranges" help="Enter the ranges in square brackets separated by a comma and a colon for each range, e.g. [1, 100]; [500, 580]">
        			<sanitizer>
                        <valid>
                            <add value="[" />
                            <add value="]" />
                            <add value=";" />
                        </valid>
                    </sanitizer> 
                 </param>
        		<!--width list?-->
        		<param name="width" type="integer" value="100" label="Span with which to compute bimodality" />
        		<conditional name="readParam_select">
        			<param name="readParam_selector" type="select" label="Specify read loading parameters?" >
        				<option value="yes">Yes</option>
    					<option value="no" selected="true">No</option>
    				</param>
    				<when value="yes">
    					<param name="dedup" type="boolean" truevalue="true" falsevalue="" checked="false" label="Ignore marked duplicate reads?" />
    					<param name="minq" type="integer" value="" label="Minimum mapping quality score for an aligned read" />
    				</when>
    				<when value="no"> </when>
    			</conditional>
    			<param name="prior_count" type="integer" value="2" label="Prior count to compute bimodality scores" />
    			<param name="invert" type="boolean" truevalue="true" falsevalue="" checked="false" label="Invert bimodality score?" />
        	</when>
        	<when value="no"> </when>
        </conditional>
        
    </inputs>

    <outputs>
        
        <data name="output" format="txt" label="${tool.name} on ${on_string}: Output" />
        
    </outputs>

    <tests>
    	<!--<test>
			<repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>

            <param name="GRanges" value="chrA, chrA, chrB, chrC" />

            <param name="IRanges" value="[1, 100]; [500, 580]; [100, 500]; [1000, 1500]" />
           
        </test>-->
    </tests>

    <help><![CDATA[
        Detection of differentially bound regions in ChIP-seq data with sliding windows, with methods for normalization and proper FDR control.
    ]]></help>

    <citations>
         
    </citations>
</tool>