<tool id="bioconductor-csaw" name="csaw" version="@VERSION@.0">
    <description>detects differentially bound regions</description>

     <macros>
       <import>metaphlan2_macros.xml</import>
    </macros>

     <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

gRange <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.GRanges}", ","), ",")))
    b <- unlist(strsplit(gsub(" ", "", "${checkBimodality_select.IRanges}", ","), ";"))
    c <- gsub("\\[|\\]", "", b)
    d <- lapply(c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
    e <- c()
    f <- c()
    for (i in seq(d)){ 
    e <- c(e, d[[i]][1])
    f <- c(f, d[[i]][2])
}

gRanges <- GRanges(gRange, IRanges(e,f))


## checkBimodality
	#if str($checkBimodality_select.checkBimodality) == 'yes'
		bamFiles <- c()
    	#for $i in $checkBimodality_select.bam_input
        	bamFiles <- c(bamFiles, "${i.bam_file}")
    	#end for

    	gRange <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.GRanges}", ","), ",")))
    	b <- unlist(strsplit(gsub(" ", "", "${checkBimodality_select.IRanges}", ","), ";"))
    	c <- gsub("\\[|\\]", "", b)
    	d <- lapply(c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
    	e <- c()
    	f <- c()
		for (i in seq(d)){ 
			e <- c(e, d[[i]][1])
			f <- c(f, d[[i]][2])
		}

		regions <- gRanges

        w <- as.numeric("${checkBimodality_select.width}")

        #if str($checkBimodality_select.readParam_select.readParam_selector) == 'yes'
            pe <- "$checkBimodality_select.readParam_select.pe"
            max_frag <- as.numeric("$checkBimodality_select.readParam_select.max_frag")
            #if str($checkBimodality_select.readParam_select.dedup) == ''
                ded_up <- F
            #else
                ded_up <- T
            #end if
            #if str($checkBimodality_select.readParam_select.minq) != ''
                min_q <- as.numeric("${checkBimodality_select.readParam_select.minq}")
            #else
                min_q <- NA
            #end if
            #if str($checkBimodality_select.readParam_select.foward) == 'NA'
                forward <- NA
            #else if str($checkBimodality_select.readParam_select.foward) == 'forward'
                forward <- TRUE
            #else if str($checkBimodality_select.readParam_select.foward) == 'reverse'
                forward <- FALSE
            #end if
            restrict <- as.character(unlist(strsplit(gsub(" ", "", "${checkBimodality_select.readParam_select.restrict}", ","), ",")))
            #if str($checkBimodality_select.readParam_select.discard_select) == 'yes'
                discard <- gRanges
            #else
                discard <- GRanges()
            #end if
            p <- readParam(pe=pe, max.frag=max_frag, dedup=ded_up, minq=min_q, forward=forward, discard=discard, BPPARAM=SerialParam())
        #else
            p <- readParam
        #end if  
        prior_count <- as.numeric("${checkBimodality_select.prior_count}")
        #if str($checkBimodality_select.invert) == ''
            inver <- F
        #else
            inver <- T
        #end if
        #if str($checkBimodality_select.save_checkBimodality) == 'true'
            sink("$output")
            print("hi")
            sink()
        #end if  
    #end if

                
	


## OUTPUT


]]>
        </configfile>
    </configfiles>

    <inputs>
    	<conditional name="checkBimodality_select">
    		<param name="checkBimodality" type="select" label="Compute the maximum bimodality score across all base pairs in each region?" >
    			<option value="yes">Yes</option>
    			<option value="no" selected="true">No</option>
    		</param>
    		<when value="yes">
				<repeat name="bam_input" title="Upload indexed BAM files in sorted order" >
            		<param name="bam_file" type="data" format="bam" label="BAM file" />
        		</repeat>
        		<expand macro="gRanges" />
        		<!--width list?-->
        		<param name="width" type="integer" value="100" label="Span with which to compute bimodality" />
        		<conditional name="readParam_select">
        			<param name="readParam_selector" type="select" label="Specify read loading parameters?" >
        				<option value="yes">Yes</option>
    					<option value="no" selected="true">No</option>
    				</param>
    				<when value="yes">
                        <expand macro="readParam" />
    				</when>
    				<when value="no"> </when>
    			</conditional>
    			<param name="prior_count" type="integer" value="2" label="Prior count to compute bimodality scores" />
    			<param name="invert" type="boolean" truevalue="true" falsevalue="" checked="false" label="Invert bimodality score?" />
                <param name="save_checkBimodality" type="boolean" truevalue="true" falsevalue="" checked="false" label="Save results?" />
        	</when>
        	<when value="no"> </when>
        </conditional>
        
    </inputs>

    <outputs>
        
        <data name="output" format="txt" label="${tool.name} on ${on_string}: Output" >
            <filter>checkBimodality_select['checkBimodality'] == 'yes' and checkBimodality_select['save_checkBimodality']</filter>
        </data>
        
    </outputs>

    <tests>
    	<!--<test>
			<repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>

            <param name="GRanges" value="chrA, chrA, chrB, chrC" />

            <param name="IRanges" value="[1, 100]; [500, 580]; [100, 500]; [1000, 1500]" />
           
        </test>-->
    </tests>

    <help><![CDATA[
        Detection of differentially bound regions in ChIP-seq data with sliding windows, with methods for normalization and proper FDR control.
    ]]></help>


</tool>