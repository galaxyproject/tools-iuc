<tool id="csaw_filterWindows" name="Filter Windows" version="@VERSION@.0">
    <description>computes filter statistics for windows</description>
     <macros>
       <import>csaw_macros.xml</import>
    </macros>
     <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

##TODO:
##read in data_filter, data_scale, background_filter, background_scale
##check assay_data and assay_back
##scale_info
##outputs

type <- "$type"

#if str($assay_data) != "counts"
    assay_data <- as.numeric(gsub("([0-9]+).*$", "\\1", "$assay_data"))
    if (is.na(assay_data)){
        assay_data <- "$assay_data"
    }
#else
    assay_data <- "$assay_data"
#end if

#if str($assay_back) != "counts"
    assay_back <- as.numeric(gsub("([0-9]+).*$", "\\1", "$assay_back"))
    if (is.na(assay_back)){
        assay_back <- "$assay_back"
    }
#else
    assay_back <- "$assay_back"
#end if

prior_count <- as.numeric("$prior_count")

result1 <- filterWindows(data_filter, background_filter, type=type, assay.data=assay_data, assay.back=assay_back, prior.count=prior_count, scale.info=scale_info)

result2 <- scaleControlFilter(data_scale, background_scale)

]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="data_filter" type="data" format="tabular" label="Data containing window-level counts" />
        <param name="data_scale" type="data" format="tabular" label="Data containing bin-level counts" />
        <param name="type" type="select" label="Type of filtering to perfrom" >
            <option value="global" selected="true">global</option>
            <option value="local">local</option>
            <option value="control">control</option>
            <option value="proportion">proportion</option>
        </param>
        <param name="background_filter" type="data" format="tabular" label="Data containing counts for background regions when type is not proportion" />
        <param name="background_scale" type="data" format="tabular" label="Data containing bin-level counts for negative control samples" />
        <param name="assay_data" type="text" value="counts" label="Specify the assay containing window/bin counts in data" />
        <param name="assy_back" type="text" value="counts" label="Specify the assay containing window/bin counts in background." />
        <param name="prior_count" type="float" value="2" label="Specify the prior count to use in aveLogCPM" /> 
        <!--TODO: check the input for scale_info-->
        <param name="scale_info" type="data" label="Data containing the output of scaleControlFilter" help="i.e., a normalization factor and library sizes for ChIP and control samples." />
    </inputs>
    <outputs>
        <data name="output1" format="txt" label="${tool.name} on ${on_string}: filterWindows output" />
        <data name="output2" format="txt" label="${tool.name} on ${on_string}: scaleControlFilter output" />
    </outputs>

    <tests>
        <test>
            <param name="data_filter" value="" />
            <param name="data_scale" value="" />
            <param name="type" value="global" />
            <param name="background_filter" value="" />
            <param name="background_scale" value="" />
            <param name="assay_data" value="" />
            <param name="assy_back" value="" />
            <param name="prior_count" value="" /> 
            <param name="scale_info" value="" />
            <output name="output1" value="" />
            <output name="output2" value="" />
        </test>
    </tests>

    <help><![CDATA[
        Convenience function to compute filter statistics for windows, based on proportions or using enrichment over background.

        Proportion-based filtering supposes that a certain percentage of the genome is genuinely bound. If type="proportion", the filter statistic is defined as the ratio of the rank to the total number of windows. Rank is in ascending order, i.e., higher abundance windows have higher ratios. Windows are retained that have rank ratios above a threshold, e.g., 0.99 if 1% of the genome is assumed to be bound.

        All other values of type will perform background-based filtering, where abundances of the windows are compared to those of putative background regions. The filter statistic are generally defined as the difference between window and background abundances, i.e., the log-fold increase in the counts. Windows can be filtered to retain those with large filter statistics, to select those that are more likely to contain genuine binding sites. The differences between the methods center around how the background abundances are obtained for each window.

        If type="global", the median average abundance across the genome is used as a global estimate of the background abundance. This should be used when background contains unfiltered counts for large (2 - 10 kbp) genomic bins, from which the background abundance can be computed. The filter statistic for each window is defined as the difference between the window abundance and the global background. If background is not supplied, the background abundance is directly computed from entries in data.

        If type="local", the counts of each row in data are subtracted from those of the corresponding row in background. The average abundance of the remaining counts is computed and used as the background abundance. The filter statistic is defined by subtracting the background abundance from the corresponding window abundance for each row. This is designed to be used when background contains counts for expanded windows, to determine the local background estimate.

        If type="control", the background abundance is defined as the average abundance of each row in background. The filter statistic is defined as the difference between the average abundance of each row in data and that of the corresponding row in background. This is designed to be used when background contains read counts for each window in the control sample(s). Unlike type="local", there is no subtraction of the counts in background prior to computing the average abundance.
    ]]></help>
    <expand macro="citations" />
</tool>