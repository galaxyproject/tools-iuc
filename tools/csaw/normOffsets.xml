<tool id="csaw_normOffsets" name="normOffsets" version="@VERSION@.0">
  <description>normalizes counts across libraries</description>
  <macros>
    <import>csaw_macros.xml</import>
  </macros>
  <expand macro="requirements" />
  <command detect_errors="exit_code"><![CDATA[
    Rscript '$script']]>
  </command>
  <configfiles>
    <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

counts <- scan("$counts", what=integer())
counts <- matrix(counts, ncol= as.numeric("$ncol"))
data <- SummarizedExperiment(list(counts=counts))
data$totals <- colSums(counts)


normOffsets(object, type=c("scaling", "loess"), ..., assay.id="counts", se.out=TRUE)

normFactors(object, weighted=FALSE, ..., assay.id="counts", se.out=TRUE)

"calcNormFactors"(object, lib.size=NULL, method=c("TMM","RLE", "upperquartile","none"), refColumn=NULL, logratioTrim=.3, sumTrim=0.05, doWeighting=TRUE, Acutoff=-1e10, p=0.75, ...)

write.table(result, file="$output", row.names=FALSE)

]]>
    </configfile>
  </configfiles>
  <inputs>
    <param name="counts" type="data" format="tabular", label="Upload a count matrix for the SummarizedExperiment object" />
    <param name="ncol" type="integer" value="" label="Number of columns of the count matrix" />
    <conditional name="type_select">
      <param name="type_selector" type="select" label="What type of normalization is to be performed?" >
        <option value="scaling">scaling</option>
        <option value="loess">loess</option>
      </param>
      <when value="scaling">
        <conditional name="scaling_select">
          <param name="scaling_selector" type="select" label="Add other paramaters to be passed to calcNormFactors?">
            <option value="yes">Yes</option>
            <option value="no" selected="true">No</option>
          </param>
          <when value="yes">
            <param name="lib_size" type="data" format="tabular" label="Upload a dataframe with a column of library sizes" />
            <conditional name="method_select">
              <param name="method_selector" type="select" label="Normalization method to be used" >
                <option value="TMM">TMM</option>
                <option value="RLE">RLE</option>
                <option value="upperquartile">upperquartile</option>
                <option value="none">none</option>
              </param>
              <when value="TMM">
                <conditional name="refColumn_select">
                  <param name="refColumn_selector" type="select" label="Use a column or upload a dataframe of columns to use as reference?" >
                    <option value="integer">Enter a column number</option>
                    <option value="vector">Upload a dataframe of columns</option>
                  </param>
                  <when value="integer">
                    <param name="refColumn" type="integer" value="" label="Enter a column number" />
                  </when>
                  <when value="vector">
                    <param name="refColumn" type="data" format="tabular" label="Upload a dataframe of column numbers stored in one column" />
                  </when>
                </conditional>
                <param name="logratioTrim" type="float" value="0.3" label="Amount of trim to use on log-ratios (M values)" />
                <param name="sumTrim" type="float" value="0.05" label="Amount of trim to use on the combined absolute levels (A values)" />
                <param name="doWeighting" type="boolean" truevalue="true" falsevalue="" checked="true" label="Compute (asymptotic binomial precision) weights?" />
                <param name="acutoff" type="float" value="-1e10" label="Cutoff on A values to use before trimming" />
              </when>
              <when value="RLE"> </when>
              <when value="upperquartile"> 
                <param name="p" type="float" value="0.75" label="Percentile (between 0 and 1) of the counts that is aligned" />
              </when>
              <when value="none"> </when>
            </conditional>

          </when>
          <when value="no"> </when>
        </conditional>


      </when>
      <when value="loess">

      </when>
    </conditional>
    <param name="weighted" type="boolean" truevalue="true" falsevalue="" checked="false" label="Use precision weights for TMM normalization?" />




... Other arguments to be passed to calcNormFactors for type="scaling", or
loessFit for type="loess".

assay.id An integer scalar or string specifying the assay values to use for normalization.
se.out A logical scalar indicating whether or not a SummarizedExperiment object should
be returned. Alternatively, a SummarizedExperiment object in which normalization
factors are to be stored.
    
  </inputs>
  <outputs>
    <data name="output" format="txt" label="${tool.name} on ${on_string}: normOffsets output" />
  </outputs>
  <tests>
    <test>
      
    </test>
  </tests>
  <help><![CDATA[
      Calculate normalization factors or offsets using count data from multiple libraries.
    ]]></help>
  <expand macro="citations" />
</tool>