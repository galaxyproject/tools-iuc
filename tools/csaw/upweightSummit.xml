<tool id="csaw_upweightSummit" name="upweightSummit" version="@VERSION@.0">
  <description>upweights summits</description>
  <macros>
    <import>csaw_macros.xml</import>
  </macros>
  <expand macro="requirements" />
  <command detect_errors="exit_code"><![CDATA[
    Rscript '$script']]>
  </command>
  <configfiles>
    <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

ids <- scan("$ids", what=integer())

#if str($summit_select.summit_selector) == "boolean"
  summits <- scan("$summit_select.summits", what=logical())
#else
  summits <- scan("$summit_select.summits", what=integer())
#end if

result <- upweightSummit(ids, summits)

write.table(result, "$output", quote = FALSE, col.names = FALSE, row.names = FALSE)
]]>
    </configfile>
  </configfiles>
  <inputs>
    <param name="ids" type="data" format="tabular" label="cluster IDs" />
    <conditional name="summit_select">
      <param name="summit_selector" type="select" label="Indicate whether each window is a summit by boolean values or integer indices?" >
        <option value="boolean">Boolean Values</option>
        <option value="integer">Integer Indices</option>
      </param>
      <when value="boolean">
        <param name="summits" type="data" format="tabular" label="Indicate the whether each window is a summit by boolean values" help="Upload a dataframe with a column of boolean values" />
      </when>
      <when value="integer">
        <param name="summits" type="data" format="tabular" label="Indicate the whether each window is a summit by integer indices" help="Upload a dataframe with a column of integer indices" />
      </when>
    </conditional>    
  </inputs>
  <outputs>
    <data name="output" format="txt" label="${tool.name} on ${on_string}: output" />
  </outputs>

  <tests>
    <test>
      <param name="ids" value="upweightSummit_ids.tabular" />
      <conditional name="summit_select">
        <param name="summit_selector" value="boolean" />
        <param name="summits" value="upweightSummit_summits.tabular" />
      </conditional>
      <output name="output" value="upweightSummit_output.txt" />
    </test>
  </tests>

  <help><![CDATA[
Upweight the highest-abudance window(s) in a cluster.

This function computes weights for each window in a cluster, where the highest-abundance windows are upweighted. These weights are intended for use in combineTests, such that the summits of a cluster have a greater influence on the combined p-value. This is more graduated than simply using the summits alone, as potential DB between summits can still be detected. 

Summits can be obtained through findMaxima or by running getBestTest. The exact value of the weight is arbitrary. Greater weight represents a stronger belief that DB occurs at the most abundant window. Here, the weighting scheme is designed such that the maximum Simes correction is not more than twice that without weighting. It will also be no more than twice that from applying Simesâ€™ method on the summits alone. This (restrained) conservativeness is an acceptable cost for considering DB events elsewhere in the cluster, while still focusing on the most abundant site.

It returns:

- `weights`: numeric column of weights, where the highest-abundance window in each cluster is assigned a greater weight. Any windows with NA values for ids or summits will have a weight of zero.
    ]]></help>
  <expand macro="citations" />
</tool>