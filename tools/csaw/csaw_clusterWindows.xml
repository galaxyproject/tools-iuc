<tool id="csaw_clusterWindows" name="Cluster Windows" version="@VERSION@.0">
    <description> </description>

     <macros>
       <import>csaw_macros.xml</import>
    </macros>

     <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
##clusterWindows
#if str($clusterWindows_select.clusterWindows) == 'yes'
    clust_grange <- as.character(unlist(strsplit(gsub(" ", "", "${clusterWindows_select.GRanges}", ","), ",")))
    i_range <- read.table("${clusterWindows_select.IRanges}")
    clust_regions <- GRanges(clust_grange, IRanges(i_range[[1]],i_range[[2]]))
    tab <- read.table("${clusterWindows_select.tab}")
    clust_target <- as.numeric("${clusterWindows_select.target}")
    #if str($clusterWindows_select.pval_col) != ''
        pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${clusterWindows_select.pval_col}"))
        if (is.na(pval_col)){
            pval_col <- "${clusterWindows_select.pval_col}"
        }
    #else
        pval_col <- NULL
    #end if
    #if str($clusterWindows_select.fc_col) != ''
        fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${clusterWindows_select.fc_col}"))
        if (is.na(fc_col)){
            fc_col <- "${clusterWindows_select.fc_col}"
        }
    #else
        fc_col <- NA
    #end if
    tol <- as.numeric("${clusterWindows_select.tol}")
    #if str($clusterWindows_select.weight) != ''
        clust_weight <- as.numeric("${clusterWindows_select.weight}")
    #else
        clust_weight <- NULL
    #end if
    #if str($clusterWindows_select.grid_param_select) == 'yes'
        clust_length <- as.numeric("${clusterWindows_select.grid_param_select.length}")
        clust_range <- as.numeric("${clusterWindows_select.grid_param_select.length}")
        #if str($clusterWindows_select.grid_param_select.grid_param_select.iter) != ''
            clust_iter <- as.numeric("${clusterWindows_select.grid_param_select.iter}")
        #else
            clust_iter <- NULL
        #end if
        #if str($clusterWindows_select.grid_param_select.grid_param_select.scale) != ''
            clust_scale <- as.numeric("${clusterWindows_select.grid_param_select.scale}")
        #else 
            clust_scale <- NULL
        #end if
        clust_grid_param <- list(length=clust_length, range=clust_range, iter=clust_iter, scale=clust_scale)
    #else
        clust_grid_param <- NULL
    #end if

    sink("$clusterWindows_output")
       clusterWindows(clust_regions, tab, clust_target, pval.col=pval_col, fc.col=fc_col, tol, weight=clust_weight, grid.param=clust_grid_param)
    sink()
#end if

]]>
        </configfile>
    </configfiles>
    <inputs>
    	
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: checkBiomodality output" />
    </outputs>

    <tests>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="no" />
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="false" />
            <output name="output" file="checkBiomodality_output1.txt" />
        </test>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="yes" />
                <param name="pe" value="both" />
                <param name="max_frag" value="100" />
                <param name="dedup" value="false" />
                <param name="minq" value="20" />
                <param name="forward" value="NA" />
                <param name="restrict" value="" />
                <param name="discard" value="no" />
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="False" />
            <output name="output" file="checkBiomodality_output2.txt" />
        </test>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="yes" />
                <param name="pe" value="both" />
                <param name="max_frag" value="100" />
                <param name="dedup" value="false" />
                <param name="minq" value="20" />
                <param name="forward" value="NA" />
                <param name="restrict" value="mitochondria" />
                <conditional name="discard_select">
                    <param name="discard" value="yes" />
                    <param name="GRanges" value="chrA" />
                    <param name="IRanges" value="range_readParam.tabular" />
                </conditional>
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="False" />
            <output name="output" file="checkBiomodality_output3.txt" />
        </test>
    </tests>

    <help><![CDATA[
        Consider a base position x. This function counts the number of forward- and reverse-strand reads within the interval [x-width+1, x]. It then calculates the forward:reverse ratio after adding prior.count to both counts. This is repeated for the interval [x, x+width-1], and the reverse:forward ratio is then computed. The smaller of these two ratios is used as the bimodality score. Sites with high bimodality scores will be enriched for forward- and reverse-strand enrichment on the left and right of the site, respectively. Given a genomic region, this function will treat each base position as a site. The largest bimodality score across all positions will be reported for each region. The idea is to assist with the identification of transcription factor binding sites, which exhibit strong strand bimodality. The function will be less useful for broad targets like histone marks. If multiple bam.files are specified, they are effectively pooled so that counting uses all reads in all files. A separate value of width can be specified for each library, to account for differences in fragmentation â€“ see the ext argument for windowCounts for more details. In practice, this is usually unnecessary. Setting width to the average fragment length yields satisfactory results in most cases. If invert is set, the bimodality score will be flipped around, i.e., it will be maximized when reversestrand coverage dominates on the left, and forward-strand coverage dominates on the right. This is designed for use in CAGE analyses where this inverted bimodality is symptomatic of enhancer RNAs
    ]]></help>


</tool>