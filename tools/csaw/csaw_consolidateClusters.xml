<tool id="csaw_consolidateClusters" name="Consolidate Clusters" version="@VERSION@.0">
    <description> </description>

     <macros>
       <import>csaw_macros.xml</import>
    </macros>

     <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
source("https://bioconductor.org/biocLite.R")
biocLite("Rsamtools")
library(Rsamtools)


##consolidateClusters
#if str($consolidateClusters_select.consolidateClusters) == 'yes'
    gRangeList <- c()
    IRangeList <- list()
    width <- c()
    #for $i in $consolidateClusters_select.gRange_obj
        #if str($i.width) != ''
            width <- c(width, as.numeric("${i.width}"))
        #end if
        gRangeList <- c(gRangeList, "${i.GRanges}")
        IRangeList <- append(IRangeList, list(scan("${i.IRanges}", what=numeric())))
    #end for
    dataList <- c()
    for (i in seq(gRangeList)){
        dataList <- c(dataList, GRanges(gRangeList[i], IRanges(IRangeList[[i]], width=width[i])))
    }
    resultList <- list()
    #for $i in $consolidateClusters_select.db
        resultList <- append(resultList, list(read.table("${i.result_list}", header=T)))
    #end for
    #if str($consolidateClusters_select.equiweight) == 'true'
        equiweight <- TRUE
    #else
        equiweight <- FALSE
    #end if
    conClust_tol <- as.numeric("${consolidateClusters_select.tol}")
    #if str($consolidateClusters_select.pval_col) != ''
        conClust_pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${consolidateClusters_select.pval_col}"))
        if (is.na(conClust_pval_col)){
            conClust_pval_col <- "${consolidateClusters_select.pval_col}"
        }
    #else
        conClust_pval_col <- NULL
    #end if
    #if str("$consolidateClusters_select.fc_col")!= ''
        conClust_fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${consolidateClusters_select.fc_col}"))
        if (is.na(conClust_fc_col)){
            conClust_fc_col <- "${consolidateClusters_select.fc_col}"
        }
    #else
        conClust_fc_col <- NULL
    #end if
    
    sink("$consolidateClusters_output")
       consolidateClusters(dataList, resultList, equiweight=equiweight, tol=conClust_tol, pval.col=conClust_pval_col, fc.col=conClust_fc_col)
    sink()

#end if

]]>
        </configfile>
    </configfiles>
    <inputs>
    	<conditional name="consolidateClusters_select">
            <param name="consolidateClusters" type="select" label="Consolidate DB results from multiple analyses with cluster-level FDR control?" help="Typically involving different window sizes. The aim is to provide comprehensive detection of DB at a range of spatial resolutions. Significant windows from each analysis are identified and used for clustering with cluster windows. This represents the post-hoc counterpart to consolidateSizes.">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <!--RangedSummarizedExperiment?
                    arguments to be passed to clusterWindow?-->
                <expand macro="consolidate_param" />
                <expand macro="col_names" />
            </when>
            <when value="no"> </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: checkBiomodality output" />
    </outputs>

    <tests>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="no" />
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="false" />
            <output name="output" file="checkBiomodality_output1.txt" />
        </test>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="yes" />
                <param name="pe" value="both" />
                <param name="max_frag" value="100" />
                <param name="dedup" value="false" />
                <param name="minq" value="20" />
                <param name="forward" value="NA" />
                <param name="restrict" value="" />
                <param name="discard" value="no" />
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="False" />
            <output name="output" file="checkBiomodality_output2.txt" />
        </test>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="yes" />
                <param name="pe" value="both" />
                <param name="max_frag" value="100" />
                <param name="dedup" value="false" />
                <param name="minq" value="20" />
                <param name="forward" value="NA" />
                <param name="restrict" value="mitochondria" />
                <conditional name="discard_select">
                    <param name="discard" value="yes" />
                    <param name="GRanges" value="chrA" />
                    <param name="IRanges" value="range_readParam.tabular" />
                </conditional>
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="False" />
            <output name="output" file="checkBiomodality_output3.txt" />
        </test>
    </tests>

    <help><![CDATA[
        Consider a base position x. This function counts the number of forward- and reverse-strand reads within the interval [x-width+1, x]. It then calculates the forward:reverse ratio after adding prior.count to both counts. This is repeated for the interval [x, x+width-1], and the reverse:forward ratio is then computed. The smaller of these two ratios is used as the bimodality score. Sites with high bimodality scores will be enriched for forward- and reverse-strand enrichment on the left and right of the site, respectively. Given a genomic region, this function will treat each base position as a site. The largest bimodality score across all positions will be reported for each region. The idea is to assist with the identification of transcription factor binding sites, which exhibit strong strand bimodality. The function will be less useful for broad targets like histone marks. If multiple bam.files are specified, they are effectively pooled so that counting uses all reads in all files. A separate value of width can be specified for each library, to account for differences in fragmentation â€“ see the ext argument for windowCounts for more details. In practice, this is usually unnecessary. Setting width to the average fragment length yields satisfactory results in most cases. If invert is set, the bimodality score will be flipped around, i.e., it will be maximized when reversestrand coverage dominates on the left, and forward-strand coverage dominates on the right. This is designed for use in CAGE analyses where this inverted bimodality is symptomatic of enhancer RNAs
    ]]></help>


</tool>