<tool id="csaw_statistics" name="Statistics" version="@VERSION@.0">
    <description>with csaw</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles><configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

#if str($method_select.method) == "calculateCPM"
    @WINDOWCOUNTS_METHOD@

    object <- window_counts

    #if str($method_select.calculateCPM.log_select.log_selector) == "yes"
        log <- TRUE
        use_norm_factors <- FALSE
        use_offsets <- FALSE
        prior_count <- as.numeric("$method_select.calculateCPM.log_select.prior_count")
    #else
        log <- FALSE
        #if str($method_select.calculateCPM.log_select.use_norm_factors) == "true"
            use_norm_factors <- TRUE
        #else
            use_norm_factors <- FALSE
        #end if

        #if str($method_select.calculateCPM.log_select.use_offsets) == "true"
            use_offsets <- TRUE
        #else
            use_offsets <- FALSE
        #end if
        prior_count <- 1
    #end if

    #if str($method_select.calculateCPM.assay_id) != ''
        assay_id <- "$method_select.calculateCPM.assay_id"
    #else
        assay_id <- "counts"
    #end if

    result <- calculateCPM(object, use.norm.factors=use_norm_factors, use.offsets=use_offsets, log=log, prior.count=prior_count, assay.id=assay_id)

    write.table(result, "$calculateCPM_output", row.names=FALSE, col.names=FALSE)
#else
    bamFiles <- c()
    #for $i in $method_select.bam_input
      bamFiles <- c(bamFiles, '${i.bam_file}')
    #end for
    indexBam(bamFiles)

    #if str($method_select.readParam_select.readParam_selector) == 'yes'
      pe <- "$method_select.readParam_select.pe"
      max_frag <- as.numeric("$method_select.readParam_select.max_frag")

      #if str($method_select.readParam_select.dedup) == ''
        ded_up <- F
      #else
        ded_up <- T
      #end if

      #if str($method_select.readParam_select.minq) != ''
        min_q <- as.numeric("$method_select.readParam_select.minq")
      #else
        min_q <- NA
      #end if

      restrict <- as.character(unlist(strsplit(gsub(" ", "", "$method_select.readParam_select.restrict", ","), ",")))

    #if str($method_select.readParam_select.discard_select.discard) == 'yes'
      #if str($method_select.readParam_select.discard_select.named) == "true"
        data <- read.table("$method_select.readParam_select.discard_select.GRanges", header=T)
      #else
        data <- read.table("$method_select.readParam_select.discard_select.GRanges", header=F)
      #end if
        gRange <- data[[1]]
        start <- data[[2]]
        end <- data[[3]]
        discard <- GRanges(gRange, IRanges(start, end))
      #else
        discard <- GRanges()
      #end if
      p <- readParam(pe=pe, max.frag=max_frag, dedup=ded_up, minq=min_q, forward=NULL, discard=discard, BPPARAM=SerialParam())
    #else
      p <- readParam(forward=NULL)
    #end if  

    #if str($method_select.regions_select.regions_selector) == "yes"
      #if str($method_select.regions_select.named) == "true"
        data <- read.table("$method_select.regions_select.GRanges", header=T)
      #else
        data <- read.table("$method_select.regions_select.GRanges", header=F)
      #end if
      gRange <- data[[1]]
      start <- data[[2]]
      end <- data[[3]]
      regions <- GRanges(gRange, IRanges(start, end))

      #if str($method_select.regions_select.ext_selector.ext_select) == 'integer'
        ext <- as.numeric("$method_select.regions_select.ext_selector.ext")
      #else
        #if "$method_select.regions_select.ext_selector.ext1" != ""
          ext1 <- as.numeric(unlist(strsplit("$method_select.regions_select.ext_selector.ext1", ",")))
        #else
          ext1 <- NA
        #end if
        #if "$method_select.regions_select.ext_selector.ext2" != ""
          ext2 <- as.numeric(unlist(strsplit("$method_select.regions_select.ext_selector.ext2", ",")))
        #else
          ext2 <- NA
        #end if
          ext <- list(ext1, ext2)
      #end if

      result <- strandedCounts(bamFiles, param=p, regions=regions, ext=ext)
    #else
      regions <- NULL

      spacing <- as.numeric("$method_select.regions_select.spacing")
        #if str($method_select.regions_select.width) != ''
            width <- as.numeric("$method_select.regions_select.width")
        #else
            width <- spacing
        #end if
        #if str($method_select.regions_select.ext_selector.ext_select) == 'integer'
            ext <- as.numeric("$method_select.regions_select.ext_selector.ext")
        #else
            #if "$method_select.regions_select.ext_selector.ext_list1" != ""
                ext1 <- as.numeric(unlist(strsplit("$method_select.regions_select.ext_selector.ext_list1", ",")))
            #else
                ext1 <- NA
            #end if
            #if "$method_select.regions_select.ext_selector.ext_list2" != ""
                ext2 <- as.numeric(unlist(strsplit("$method_select.regions_select.ext_selector.ext_list2", ",")))
            #else
                ext2 <- NA
            #end if
            ext <- list(ext1, ext2)
        #end if
        shift <- as.numeric("$method_select.regions_select.shift")
        filter <- as.numeric("$method_select.regions_select.filter")
        #if str($method_select.regions_select.bin) == "true"
            bin <- TRUE
        #else
            bin <- FALSE
        #end if

      result <- strandedCounts(bamFiles, param=p, regions=regions, spacing=spacing, width=width, ext=ext, shift=shift, filter=filter, bin=bin)
    #end if

    result <- strand(result)
    write.table(result, "$strandedCounts_output", quote = FALSE, col.names = FALSE, row.names = FALSE)
#end if
]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="method_select">
            <param name="method" type="select" label="Method" >
                <option value="calculateCPM">Calculate counts-per-million (CPM) values for each feature</option>
                <option value="strandedCounts">Obtain strand-specific counts for each genomic window or region</option>
            </param>
            <when value="calculateCPM">
                <section name="windowCounts" title="Count reads overlapping each window" expanded="true">
                  <expand macro="windowCounts" />
                </section>
                <section name="calculateCPM" title="Calculates counts-per-million values" expanded="true">
                    <conditional name="log_select">
                        <param name="log_selector" type="select" label="Return log2-transformed CPM values?" help="CPMs are calculated in the standard manner when log2-transformed CPM values are not returned, use normalization factors and use offsets are false. Otherwise, if log2-transformed CPM values are returned, then a library size-adjusted prior count is added to both the counts and the library sizes. This is done after addition of a prior count to both the counts and library sizes.">
                            <option value="yes" selected="true">Yes</option>
                            <option value="no">No</option>
                        </param>
                        <when value="yes">
                            <param name="prior_count" type="float" value="1" label="Prior count to add" />
                        </when>
                        <when value="no">
                            <param name="use_norm_factors" type="boolean" truevalue="true" falsevalue="" checked="true" label="Use normalization factors?" help="If yes is selected the effective library size is used for computing CPMs, provided that normalization factors are available in the object. This is defined as the product of the library size and the normalization factor." />
                            <param name="use_offsets" type="boolean" truevalue="true" falsevalue="" checked="false" label="Use offsets?" help="If yes is selected the offsets are converted into effective library sizes using scaleOffset." />
                        </when>
                    </conditional>
                    <param name="assay_id" type="text" value="counts" optional="true" label="Indicate which assay of y contains the counts" />
                </section>
            </when>
            <when value="strandedCounts">
                <repeat name="bam_input" title="Upload indexed BAM files in sorted order" >
                  <param name="bam_file" type="data" format="bam" label="BAM file" />
                </repeat>
                <!--Not sure if forward from readParam is always NULL-->
                <expand macro="readParam_select" />
                <conditional name="regions_select">
                  <param name="regions_selector" type="select" label="Specify the regions over which reads are to be counted?">
                    <option value="yes">Yes</option>
                    <option value="no" selected="true">No</option>
                  </param>
                  <when value="yes">
                    <expand macro="gRanges" />
                    <conditional name="ext_selector">
                      <param name="ext_select" type="select" label="Average length(s) of the sequenced fragments in each library" >
                        <option value="integer" selected="true">Enter an integer</option>
                        <option value="list">Enter two integers or lists</option>
                      </param>
                      <when value="integer">
                        <param name="ext" type="integer" value="100" label="Enter an integer as the average length" />
                      </when>
                      <when value="list">
                        <param name="ext_list1" type="text" optional="true" label="Enter an integer or vector" />
                        <param name="ext_list2" type="text" optional="true" label="Enter an integer or vector" />
                      </when>
                    </conditional>
                  </when>
                  <when value="no">
                    <param name="spacing" type="integer" value="50" label="Distance between consecutive windows" help="New windows are defined by sliding the current window to the right by the specified spacing." />
                    <param name="width" type="integer" value="" optional="true" label="Width of the window" help="The value of width can be interpreted as the width of the contact area between the DNA and protein. In practical terms, it determines the spatial resolution of the analysis. Larger windows count reads over a larger region which results in larger counts. This results in greater detection power at the cost of resolution." />
                    <conditional name="ext_selector">
                      <param name="ext_select" type="select" label="Average length(s) of the sequenced fragments in each library" >
                        <option value="integer" selected="true">Single fragment length</option>
                        <option value="list">Multiple fragment lengths</option>
                      </param>
                      <when value="integer">
                        <param name="ext" type="integer" value="100" label="Enter an integer as the average length" />
                      </when>
                      <when value="list">
                        <param name="ext_list1" type="text" optional="true" label="Enter an integer or list" help="When multiple fragment lengths are specified, enter a list of integers followed by a comma. e.g. 100, 150, 200, 250" />
                        <param name="ext_list2" type="text" optional="true" label="Enter an integer or list" help="When multiple fragment lengths are specified, enter a list of integers followed by a comma. e.g. 100, 150, 200, 250" />
                      </when>
                    </conditional>
                      <param name="shift" type="integer" value="0" label="Specifying how much the start of each window should be shifted to the left" help="The first window on a chromosome starts at base position 1. Specifying an appropriate value to shift to the left." />
                      <param name="filter" type="integer" value="10" label="Minimum count sum across libraries for each window" />
                      <param name="bin" type="boolean" truevalue="true" falsevalue="" checked="false" label="Perform binning?" help="If yes is selected, settings are internally adjusted so that all reads are counted into non-overlapping adjacent bins of size width." />
                  </when>
                </conditional>
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="calculateCPM_output" format="txt" label="calculateCPM on ${on_string}: output">
             <filter>method_select['method'] == 'calculateCPM'</filter>
        </data>
        <data name="strandedCounts_output" format="txt" label="strandedCounts on ${on_string}: output">
             <filter>method_select['method'] == 'strandedCounts'</filter>
        </data>
    </outputs>

    <tests>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="calculateCPM" />
                <section name="windowCounts">
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="50" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="no" />
                    </conditional>
                </section>
                <section name="calculateCPM">
                    <conditional name="log_select">
                        <param name="log_selector" value="no"/>
                        <param name="use_norm_factors" value="true" />
                    <param name="use_offsets" value="false" />
                    </conditional>
                    <param name="assay_id" value="counts" />
                </section>
            </conditional>
            <output name="calculateCPM_output" value="calculateCPM_output0.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="calculateCPM" />
                <section name="windowCounts">
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="50" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="no" />
                    </conditional>
                </section>
                <section name="calculateCPM">
                    <conditional name="log_select">
                        <param name="log_selector" value="yes"/>
                        <param name="prior_count" value="1" />
                    </conditional>
                    <param name="assay_id" value="counts" />
                </section>
            </conditional>
            <output name="calculateCPM_output" value="calculateCPM_output1.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="calculateCPM" />
                <section name="windowCounts">
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="50" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="list" />
                        <param name="ext_list1" value="50, 100" />
                        <param name="ext_list2" value="80" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="no" />
                    </conditional>
                </section>
                <section name="calculateCPM">
                    <conditional name="log_select">
                        <param name="log_selector" value="yes"/>
                        <param name="prior_count" value="1" />
                    </conditional>
                    <param name="assay_id" value="counts" />
                </section>
            </conditional>
            <output name="calculateCPM_output" value="calculateCPM_output2.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="calculateCPM" />
                <section name="windowCounts">
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="50" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="yes" />
                        <param name="pe" value="none" />
                        <param name="max_frag" value="500" />
                        <param name="dedup" value="false" />
                        <param name="minq" value="1" />
                        <param name="forward" value="NA" />
                        <param name="restrict" value="chrA" />
                        <conditional name="discard_select">
                            <param name="discard" value="no" />
                        </conditional>
                    </conditional>
                </section>
                <section name="calculateCPM">
                    <conditional name="log_select">
                        <param name="log_selector" value="yes"/>
                        <param name="prior_count" value="1" />
                    </conditional>
                    <param name="assay_id" value="counts" />
                </section>
            </conditional>
            <output name="calculateCPM_output" value="calculateCPM_output3.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="calculateCPM" />
                <section name="windowCounts">
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="50" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="yes" />
                        <param name="pe" value="none" />
                        <param name="max_frag" value="500" />
                        <param name="dedup" value="false" />
                        <param name="minq" value="1" />
                        <param name="forward" value="NA" />
                        <param name="restrict" value="chrA" />
                        <conditional name="discard_select">
                            <param name="discard" value="yes" />
                            <param name="GRanges" value="gRange_discard.tabular" />
                            <param name="named" value="false" />
                        </conditional>
                    </conditional>
                </section>
                <section name="calculateCPM">
                    <conditional name="log_select">
                        <param name="log_selector" value="yes"/>
                        <param name="prior_count" value="1" />
                    </conditional>
                    <param name="assay_id" value="counts" />
                </section>
            </conditional>
            <output name="calculateCPM_output" value="calculateCPM_output4.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="strandedCounts" />
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="no" />
                </conditional>
                <conditional name="regions_select">
                    <param name="regions_selector" value="no" />
                    <param name="spacing" value="50" />
                    <param name="width" value="" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                </conditional>
            </conditional>
            <output name="strandedCounts_output" value="strandedCounts_output1.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="strandedCounts" />
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="yes" />
                    <param name="pe" value="none" />
                    <param name="max_frag" value="500" />
                    <param name="dedup" value="false" />
                    <param name="minq" value="20" />
                    <param name="restrict" value="chrA" />
                    <conditional name="discard_select">
                        <param name="discard" value="yes" />
                        <param name="GRanges" value="gRange_discard.tabular" />
                        <param name="named" value="false" />
                    </conditional>
                </conditional>
                <conditional name="regions_select">
                    <param name="regions_selector" value="no" />
                    <param name="spacing" value="50" />
                    <param name="width" value="" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                </conditional>
            </conditional>
            <output name="strandedCounts_output" value="strandedCounts_output2.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="strandedCounts" />
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="yes" />
                    <param name="pe" value="none" />
                    <param name="max_frag" value="500" />
                    <param name="dedup" value="false" />
                    <param name="minq" value="20" />
                    <param name="restrict" value="" />
                    <conditional name="discard_select">
                      <param name="discard" value="no" />
                    </conditional>
                </conditional>
                <conditional name="regions_select">
                    <param name="regions_selector" value="yes" />
                    <param name="GRanges" value="strandedCounts_regions.tabular" />
                    <param name="named" value="yes" />
                    <conditional name="ext_selector">
                      <param name="ext_select" value="integer" />
                      <param name="ext" value="100" />
                    </conditional>
                </conditional>
            </conditional>
            <output name="strandedCounts_output" value="strandedCounts_output3.txt" />
        </test>-->
    </tests>
    <help><![CDATA[
Calculate counts-per-million (CPM) values for each feature
==========================================================

It returns:

- `CPM values`: A matrix of the same dimensions as object, containing (log-)transformed CPM values for each feature in each sample


Obtain strand-specific counts for each genomic window or region
===============================================================

Some applications require strand-specific counts for each genomic region. If regions is specified, regionCounts is used instead of windowCounts. The function then concatenates the two RangedSummarizedExperiment objects (one from each strand). The total numbers of reads are added together to form the new totals. However, the total numbers of reads for each strand are also stored for future reference. 

Count loading parameters are also stored in the metadata. Each row in the concatenated object corresponds to a stranded genomic region, where the strand of the region indicates the strand of the reads that were counted in that row. Note that there may not be two rows for each genomic region. This is because any empty rows, or those with counts below filter, will be removed within each call to windowCounts.

It returns:

- `RangedSummarizedExperiment object`: containing strand-specific counts for genomic regions

    ]]></help>
    <expand macro="citations" />
</tool>