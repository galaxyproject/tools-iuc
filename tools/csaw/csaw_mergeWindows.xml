<tool id="csaw_mergeWindows" name="Merge Windows" version="@VERSION@.0">
    <description>merges windows into clusters</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

##mergeWindows
#if str($mergeWindows_select.mergeWindows) == 'yes'
    mW_gRange <- as.character(unlist(strsplit(gsub(" ", "", "${mergeWindows_select.GRanges}", ","), ",")))
        mW_b <- unlist(strsplit(gsub(" ", "", "${mergeWindows_select.IRanges}", ","), ";"))
        mW_c <- gsub("\\[|\\]", "", mW_b)
        mW_d <- lapply(mW_c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
        mW_e <- c()
        mW_f <- c()
        for (i in seq(mW_d)){ 
            mW_e <- c(mW_e, mW_d[[i]][1])
            mW_f <- c(mW_f, mW_d[[i]][2])
        }
    mW_regions <- GRanges(mW_gRange, IRanges(mW_e,mW_f))
    mW_tol <- as.numeric("${mergeWindows_select.tol}")
    #if str($mergeWindows_select.max_width) != ''
        mW_maxWidth <- as.numeric("${consolidateSizes_select.max_width}")
    #else
        mW_maxWidth <- NULL
    #end if
    #if str($mergeWindows_select.ignore_strand) == 'true'
        ignore_strand <- T
    #else
        ignore_strand <- F
    #end if

sink("$mergeWindows_output")
    mergeWindows(mW_regions, mW_tol, sign=NULL, max.width=mW_maxWidth, ignore.strand=ignore_strand)
sink()

]]>
        </configfile>
    </configfiles>
    <inputs>
        <expand macro="gRanges" />
        <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows" help="A value of zero means that the windows must be contiguous whereas negative values specify minimum overlaps" />
        <conditional name="sign_select">
            <param name="sign_selector" type="select" label="Specify a positive log-FC for each window?" >
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <param name="sign" type="boolean" truevalue="true" falsevalue="" checked="true" label="Positive log-FC for each window?" />
            </when>
            <when value="no"> </when>
        </conditional>
        <param name="max_width" type="float" value="" optional="true" label="Maximum size of merged intervals" help="Specification prevents the formation of excessively large clusters when many adjacent regions are present. Any cluster that is wider than the max width is split into multiple subclusters of (roughly) equal size. Specifically, the cluster interval is partitioned into the smallest number of equally-sized subintervals where each subinterval is smaller than max width. Windows are then assigned to each subinterval based on the location of the window midpoints. Suggested values range from 2000 to 10000 bp, but no limits are placed on the maximum size if no value entered." />
        <param name="ignore_strand" type="boolean" truevalue="true" falsevalue="" checked="true" label="Ignore the strandedness of regions?" help="If no is selected, the entries in regions are split into their separate strands." />
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: mergeWindows output" />
    </outputs>

    <tests>
        <test>

        </test>
    </tests>

    <help><![CDATA[
        Use a simple single-linkage approach to merge adjacent or overlapping windows into clusters. Windows in regions are merged if the gap between the end of one window and the start of the next is no greater than tol. Adjacent windows can then be chained together to build a cluster of windows across the linear genome.
    ]]></help>


</tool>