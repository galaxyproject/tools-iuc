<tool id="csaw_consolidateClusters" name="Consolidate Clusters" version="@VERSION@.0">
    <description>consolidate DB clusters</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

##consolidateClusters
    gRangeList <- c()
    IRangeList <- list()
    #for $i in $gRange_obj
        gRangeList <- c(gRangeList, "${i.GRanges}")
        IRangeList <- append(IRangeList, list(read.table("${i.IRanges}")))
    #end for

    dataList <- c()
    for (i in seq(gRangeList)){
        dataList <- c(dataList, GRanges(gRangeList[i], IRanges(IRangeList[[i]][[1]], IRangeList[[i]][[2]])))
    }

    resultList <- list()
    #for $i in $db
        resultList <- append(resultList, list(read.table("${i.result_list}", header=T)))
    #end for
    #if str($equiweight) == 'true'
        equiweight <- TRUE
    #else
        equiweight <- FALSE
    #end if
    conClust_tol <- as.numeric("$tol")
    #if str($pval_col) != ''
        conClust_pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$pval_col"))
        if (is.na(conClust_pval_col)){
            conClust_pval_col <- "$pval_col"
        }
    #else
        conClust_pval_col <- NULL
    #end if
    #if str("$fc_col")!= ''
        conClust_fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$fc_col"))
        if (is.na(conClust_fc_col)){
            conClust_fc_col <- "$fc_col"
        }
    #else
        conClust_fc_col <- NULL
    #end if
    
    result <- consolidateClusters(dataList, resultList, equiweight=equiweight, tol=conClust_tol, pval.col=conClust_pval_col, fc.col=conClust_fc_col)
    
    ids <- result[[1]]
    lapply(ids, cat, "\n", file="$id_output", append=TRUE)
    region <- result[[2]]
    write.table(region, file="$region_output", quote = FALSE, row.names = FALSE, col.names = TRUE)
    f <- list(result[[3]])
    write.table(do.call(rbind, f), file="$fdr_output", quote = FALSE, row.names = c("FDR "), col.names = FALSE)

]]>
        </configfile>
    </configfiles>
    <inputs>
        <!--RangedSummarizedExperiment?
        arguments to be passed to clusterWindow?-->
        <expand macro="consolidate_param" />
        <expand macro="col_names" />
    </inputs>

    <outputs>
        <data name="id_output" format="txt" label="${tool.name} on ${on_string}: consolidateClusters id output" />
        <data name="region_output" format="txt" label="${tool.name} on ${on_string}: consolidateClusters region output" />
        <data name="fdr_output" format="txt" label="${tool.name} on ${on_string}: consolidateClusters FDR output" />
    </outputs>

    <tests>
        <test>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conClus_range1.tabular" />
            </repeat>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conClus_range2.tabular" />
            </repeat>
            <repeat name="gRange_obj">
                <param name="GRanges" value="chrA" />
                <param name="IRanges" value="conClus_range3.tabular" />
            </repeat>
            <repeat name="db">
                <param name="result_list" value="db1.tabular" />
            </repeat>
            <repeat name="db">
                <param name="result_list" value="db2.tabular" />
            </repeat>
            <repeat name="db">
                <param name="result_list" value="db3.tabular" />
            </repeat>
            <param name="equiweight" value="true" />
            <param name="tol" value="20" />
             <param name="pval_col" value="" />
            <param name="fc_col" value="logFC" />
            <output name="id_output" file="consolidateClusters_id_output.txt"/>
            <output name="region_output" file="consolidateClusters_region_output.txt"/>
            <output name="fdr_output" file="consolidateClusters_FDR_output.txt"/>
        </test>
    </tests>

    <help><![CDATA[
        Consolidate DB results from multiple analyses with cluster-level FDR control typically involving different window sizes. The aim is to provide comprehensive detection of DB at a range of spatial resolutions. Significant windows from each analysis are identified and used for clustering with cluster windows. This represents the post-hoc counterpart to consolidateSizes.
    ]]></help>


</tool>