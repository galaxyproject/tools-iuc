<tool id="csaw_strandedCounts" name="strandedCounts" version="@VERSION@.0">
  <description>gets strand-specific counts</description>
  <macros>
    <import>csaw_macros.xml</import>
  </macros>
  <expand macro="requirements" />
  <command detect_errors="exit_code"><![CDATA[
    Rscript '$script']]>
  </command>
  <configfiles>
    <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

bamFiles <- c()
#for $i in $bam_input
  bamFiles <- c(bamFiles, '${i.bam_file}')
#end for
indexBam(bamFiles)

@READPARAM_OBJ@
@GRANGES@

result <- strandedCounts(bam.files, param=p, regions=regions)

write.table(result, "$output", quote = FALSE, col.names = FALSE, row.names = FALSE)

]]>
    </configfile>
  </configfiles>
  <inputs>
    <repeat name="bam_input" title="Upload indexed BAM files in sorted order" >
      <param name="bam_file" type="data" format="bam" label="BAM file" />
    </repeat>
    <expand macro="readParam_select" />
    <expand macro="gRanges" />

    <!--TODO: windowcounts and regioncounts parameters-->
    
  </inputs>
  <outputs>
    <data name="output" format="txt" label="${tool.name} on ${on_string}: getWidths output" />
  </outputs>

  <tests>
    <test>
      <repeat name="bam_input">
        <param name="bam_file" value="rep1.bam" ftype="bam" />
      </repeat>
      <repeat name="bam_input">
        <param name="bam_file" value="rep2.bam" ftype="bam" />
      </repeat>
      <param name="GRanges" value="chrA, chrA, chrB, chrC" />
      <param name="IRanges" value="range1.tabular" />
      
      <output name="output" value="" />
    </test>
  </tests>

  <help><![CDATA[
    Obtain strand-specific counts for each genomic window or region.
    ]]></help>
  <expand macro="citations" />
</tool>