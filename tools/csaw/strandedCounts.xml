<tool id="csaw_strandedCounts" name="strandedCounts" version="@VERSION@.0">
  <description>gets strand-specific counts</description>
  <macros>
    <import>csaw_macros.xml</import>
  </macros>
  <expand macro="requirements" />
  <command detect_errors="exit_code"><![CDATA[
    Rscript '$script']]>
  </command>
  <configfiles>
    <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

bamFiles <- c()
#for $i in $bam_input
  bamFiles <- c(bamFiles, '${i.bam_file}')
#end for
indexBam(bamFiles)

#if str($readParam_select.readParam_selector) == 'yes'
  pe <- "$readParam_select.pe"
  max_frag <- as.numeric("$readParam_select.max_frag")

  #if str($readParam_select.dedup) == ''
    ded_up <- F
  #else
    ded_up <- T
  #end if

  #if str($readParam_select.minq) != ''
    min_q <- as.numeric("${readParam_select.minq}")
  #else
    min_q <- NA
  #end if

  restrict <- as.character(unlist(strsplit(gsub(" ", "", "${readParam_select.restrict}", ","), ",")))

#if str($readParam_select.discard_select.discard) == 'yes'
  #if str($readParam_select.discard_select.named) == "true"
    data <- read.table("$readParam_select.discard_select.GRanges", header=T)
  #else
    data <- read.table("$readParam_select.discard_select.GRanges", header=F)
  #end if
    gRange <- data[[1]]
    start <- data[[2]]
    end <- data[[3]]
    discard <- GRanges(gRange, IRanges(start, end))
  #else
    discard <- GRanges()
  #end if
  p <- readParam(pe=pe, max.frag=max_frag, dedup=ded_up, minq=min_q, forward=NULL, discard=discard, BPPARAM=SerialParam())
#else
  p <- readParam(forward=NULL)
#end if  

#if str($regions_select.regions_selector) == "yes"
  #if str($regions_select.named) == "true"
    data <- read.table("$regions_select.GRanges", header=T)
  #else
    data <- read.table("$regions_select.GRanges", header=F)
  #end if
  gRange <- data[[1]]
  start <- data[[2]]
  end <- data[[3]]
  regions <- GRanges(gRange, IRanges(start, end))

  #if str($regions_select.ext_selector.ext_select) == 'integer'
    ext <- as.numeric("$regions_select.ext_selector.ext")
  #else
    #if "$regions_select.ext_selector.ext1" != ""
      ext1 <- as.numeric(unlist(strsplit("$regions_select.ext_selector.ext1", ",")))
    #else
      ext1 <- NA
    #end if
    #if "$regions_select.ext_selector.ext2" != ""
      ext2 <- as.numeric(unlist(strsplit("$regions_select.ext_selector.ext2", ",")))
    #else
      ext2 <- NA
    #end if
      ext <- list(ext1, ext2)
  #end if

  result <- strandedCounts(bamFiles, param=p, regions=regions, ext=ext)
#else
  regions <- NULL

  spacing <- as.numeric("$regions_select.spacing")
    #if str($regions_select.width) != ''
        width <- as.numeric("$regions_select.width")
    #else
        width <- spacing
    #end if
    #if str($regions_select.ext_selector.ext_select) == 'integer'
        ext <- as.numeric("$regions_select.ext_selector.ext")
    #else
        #if "$regions_select.ext_selector.ext_list1" != ""
            ext1 <- as.numeric(unlist(strsplit("$regions_select.ext_selector.ext_list1", ",")))
        #else
            ext1 <- NA
        #end if
        #if "$regions_select.ext_selector.ext_list2" != ""
            ext2 <- as.numeric(unlist(strsplit("$regions_select.ext_selector.ext_list2", ",")))
        #else
            ext2 <- NA
        #end if
        ext <- list(ext1, ext2)
    #end if
    shift <- as.numeric("$regions_select.shift")
    filter <- as.numeric("$regions_select.filter")
    #if str($regions_select.bin) == "true"
        bin <- TRUE
    #else
        bin <- FALSE
    #end if

  result <- strandedCounts(bamFiles, param=p, regions=regions, spacing=spacing, width=width, ext=ext, shift=shift, filter=filter, bin=bin)
#end if

result <- strand(result)
write.table(result, "$output", quote = FALSE, col.names = FALSE, row.names = FALSE)
]]>
    </configfile>
  </configfiles>
  <inputs>
    <repeat name="bam_input" title="Upload indexed BAM files in sorted order" >
      <param name="bam_file" type="data" format="bam" label="BAM file" />
    </repeat>
    <!--Not sure if forward from readParam is always NULL-->
    <expand macro="readParam_select" />
    <conditional name="regions_select">
      <param name="regions_selector" type="select" label="Specify the regions over which reads are to be counted?">
        <option value="yes">Yes</option>
        <option value="no" selected="true">No</option>
      </param>
      <when value="yes">
        <expand macro="gRanges" />
        <conditional name="ext_selector">
          <param name="ext_select" type="select" label="Average length(s) of the sequenced fragments in each library" >
            <option value="integer" selected="true">Enter an integer</option>
            <option value="list">Enter two integers or lists</option>
          </param>
          <when value="integer">
            <param name="ext" type="integer" value="100" label="Enter an integer as the average length" />
          </when>
          <when value="list">
            <param name="ext_list1" type="text" optional="true" label="Enter an integer or vector" />
            <param name="ext_list2" type="text" optional="true" label="Enter an integer or vector" />
          </when>
        </conditional>
      </when>
      <when value="no">
        <param name="spacing" type="integer" value="50" label="Distance between consecutive windows" help="New windows are defined by sliding the current window to the right by the specified spacing." />
        <param name="width" type="integer" value="" optional="true" label="Width of the window" help="The value of width can be interpreted as the width of the contact area between the DNA and protein. In practical terms, it determines the spatial resolution of the analysis. Larger windows count reads over a larger region which results in larger counts. This results in greater detection power at the cost of resolution." />
        <conditional name="ext_selector">
          <param name="ext_select" type="select" label="Average length(s) of the sequenced fragments in each library" >
            <option value="integer" selected="true">Single fragment length</option>
            <option value="list">Multiple fragment lengths</option>
          </param>
          <when value="integer">
            <param name="ext" type="integer" value="100" label="Enter an integer as the average length" />
          </when>
          <when value="list">
            <param name="ext_list1" type="text" optional="true" label="Enter an integer or list" help="When multiple fragment lengths are specified, enter a list of integers followed by a comma. e.g. 100, 150, 200, 250" />
            <param name="ext_list2" type="text" optional="true" label="Enter an integer or list" help="When multiple fragment lengths are specified, enter a list of integers followed by a comma. e.g. 100, 150, 200, 250" />
          </when>
        </conditional>
          <param name="shift" type="integer" value="0" label="Specifying how much the start of each window should be shifted to the left" help="The first window on a chromosome starts at base position 1. Specifying an appropriate value to shift to the left." />
          <param name="filter" type="integer" value="10" label="Minimum count sum across libraries for each window" />
          <param name="bin" type="boolean" truevalue="true" falsevalue="" checked="false" label="Perform binning?" help="If yes is selected, settings are internally adjusted so that all reads are counted into non-overlapping adjacent bins of size width." />
      </when>
    </conditional>    
  </inputs>
  <outputs>
    <data name="output" format="txt" label="${tool.name} on ${on_string}: output" />
  </outputs>

  <tests>
    <test>
      <repeat name="bam_input">
        <param name="bam_file" value="rep1.bam" ftype="bam" />
      </repeat>
      <repeat name="bam_input">
        <param name="bam_file" value="rep2.bam" ftype="bam" />
      </repeat>
      <conditional name="readParam_select">
        <param name="readParam_selector" value="no" />
      </conditional>
      <conditional name="regions_select">
        <param name="regions_selector" value="no" />
         <param name="spacing" value="50" />
         <param name="width" value="" />
         <conditional name="ext_selector">
            <param name="ext_select" value="integer" />
            <param name="ext" value="100" />
        </conditional>
        <param name="shift" value="0" />
        <param name="filter" value="1" />
        <param name="bin" value="false" />
      </conditional>
      <output name="output" value="strandedCounts_output1.txt" />
    </test>
    <test>
      <repeat name="bam_input">
        <param name="bam_file" value="rep1.bam" ftype="bam" />
      </repeat>
      <repeat name="bam_input">
        <param name="bam_file" value="rep2.bam" ftype="bam" />
      </repeat>
      <conditional name="readParam_select">
        <param name="readParam_selector" value="yes" />
        <param name="pe" value="none" />
        <param name="max_frag" value="500" />
        <param name="dedup" value="false" />
        <param name="minq" value="20" />
        <param name="restrict" value="chrA" />
        <conditional name="discard_select">
          <param name="discard" value="yes" />
          <param name="GRanges" value="gRange_discard.tabular" />
          <param name="named" value="false" />
        </conditional>
      </conditional>
      <conditional name="regions_select">
        <param name="regions_selector" value="no" />
         <param name="spacing" value="50" />
         <param name="width" value="" />
         <conditional name="ext_selector">
            <param name="ext_select" value="integer" />
            <param name="ext" value="100" />
        </conditional>
        <param name="shift" value="0" />
        <param name="filter" value="1" />
        <param name="bin" value="false" />
      </conditional>
      <output name="output" value="strandedCounts_output2.txt" />
    </test>
    <test>
      <repeat name="bam_input">
        <param name="bam_file" value="rep1.bam" ftype="bam" />
      </repeat>
      <repeat name="bam_input">
        <param name="bam_file" value="rep2.bam" ftype="bam" />
      </repeat>
      <conditional name="readParam_select">
        <param name="readParam_selector" value="yes" />
        <param name="pe" value="none" />
        <param name="max_frag" value="500" />
        <param name="dedup" value="false" />
        <param name="minq" value="20" />
        <param name="restrict" value="" />
        <conditional name="discard_select">
          <param name="discard" value="no" />
        </conditional>
      </conditional>
      <conditional name="regions_select">
        <param name="regions_selector" value="yes" />
        <param name="GRanges" value="strandedCounts_regions.tabular" />
        <param name="named" value="yes" />
        <conditional name="ext_selector">
          <param name="ext_select" value="integer" />
          <param name="ext" value="100" />
        </conditional>
      </conditional>
      <output name="output" value="strandedCounts_output3.txt" />
    </test>
  </tests>

  <help><![CDATA[
    Obtain strand-specific counts for each genomic window or region.
    ]]></help>
  <expand macro="citations" />
</tool>