<tool id="csaw_consolidateWindows" name="consolidateWindows" version="@VERSION@.0">
    <description>consolidates window sizes</description>
     <macros>
       <import>csaw_macros.xml</import>
    </macros>
     <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

## parameters for windowCounts repeat
bamFiles <- c()
r <- c()
count <- c()
spacing <- list()
shift <- list()
filter <- list()
binList <- list()
widthList <- list()
extList <- list()
readP <- list()
window_counts <- c()

#for $i, $j in enumerate($data)
    #for $x, $y in enumerate($j.bam_input)
        r <- c(r, $x)
        bamFiles <- c(bamFiles, "$y.bam_file")
    #end for

    spacing <- append(spacing, list(as.numeric("$j.spacing")))

    #if str($j.width) != ''
        width <- as.numeric("$j.width")
    #else
        width <- as.numeric("$j.spacing")
    #end if

    widthList <- append(widthList, list(width))

    #if str($j.ext_selector.ext_select) == 'integer'
        ext <- as.numeric("$j.ext_selector.ext")
    #else
        #if "$j.ext_selector.ext_list1" != ""
            ext1 <- as.numeric(unlist(strsplit("$j.ext_selector.ext_list1", ",")))
        #else
            ext1 <- NA
        #end if
        #if "$j.ext_selector.ext_list2" != ""
            ext2 <- as.numeric(unlist(strsplit("$j.ext_selector.ext_list2", ",")))
        #else
            ext2 <- NA
        #end if
        ext <- list(ext1, ext2)
    #end if

    extList <- append(extList, list(ext))
    shift <- append(shift, list(as.numeric($j.shift)))
    filter <- append(filter, list(as.numeric($j.filter)))

    #if str($j.bin) == "true"
        bin <- TRUE
    #else
        bin <- FALSE
    #end if
    binList <- append(binList, list(bin))

    #if str($j.readParam_select.readParam_selector) == 'yes'
        pe <- "$j.readParam_select.pe"
        max_frag <- as.numeric("$j.readParam_select.max_frag")

        #if str($j.readParam_select.dedup) == ''
            ded_up <- F
        #else
            ded_up <- T
        #end if

        #if str($j.readParam_select.minq) != ''
          min_q <- as.numeric("${j.readParam_select.minq}")
        #else
          min_q <- NA
        #end if

        #if str($j.readParam_select.forward) == 'NA'
          forward <- NA
        #else if str($j.readParam_select.forward) == 'forward'
          forward <- TRUE
        #else if str($j.readParam_select.forward) == 'reverse'
            forward <- FALSE
        #end if

        restrict <- as.character(unlist(strsplit(gsub(" ", "", "${j.readParam_select.restrict}", ","), ",")))
        #if str($j.readParam_select.discard_select) == 'yes'
          dis_gRange <- as.character(unlist(strsplit(gsub(" ", "", "${j.discard_select.GRanges}", ","), ",")))
          dis_b <- unlist(strsplit(gsub(" ", "", "${j.discard_select.IRanges}", ","), ";"))
          dis_c <- gsub("\\[|\\]", "", dis_b)
          dis_d <- lapply(dis_c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
          dis_e <- c()
          dis_f <- c()
          for (i in seq(dis_d)){ 
            dis_e <- c(dis_e, dis_d[[i]][1])
            dis_f <- c(dis_f, dis_d[[i]][2])
          }
          discard <- GRanges(dis_gRange, IRanges(dis_e, dis_f))
        #else
          discard <- GRanges()
        #end if
        p <- readParam(pe=pe, max.frag=max_frag, dedup=ded_up, minq=min_q, forward=forward, discard=discard, BPPARAM=SerialParam())
    #else
        p <- readParam()
    #end if

    readP <- append(readP, list(p))
#end for

len <- length(r)-1

for(i in seq(1, len)) {
    if(r[i] == 0){
        count <- c(count, c(r[i+1]+1)) 
    }
}

if(tail(r, n=1) == 0) {
  count <- c(count, 1)
}

bamList <- list()

if(tail(count, n=1) == 1) {
    len <- length(count) - 1
    for (i in seq(1,len)){
        bam <- bamFiles[1: count[i]]
        bamList <- append(bamList, list(bam))
        bamLen <- length(bamFiles)
        bamFiles <- bamFiles[(count[i]+1):bamLen]
    }
    bamList <- append(bamList, list(bamFiles))
} else {
    len <- length(count)
    for (i in seq(1,len)){
        bam <- bamFiles[1: count[i]]
        bamList <- append(bamList, list(bam))
        bamLen <- length(bamFiles)
        bamFiles <- bamFiles[(count[i]+1):bamLen]
    }
}

for (i in bamList) {

    indexBam(i)
}

for (i in seq(spacing)) {

    window <- windowCounts(bamList[[i]], spacing=spacing[[i]], width=widthList[[i]], ext=extList[[i]], shift=shift[[i]], filter=filter[[i]], bin=binList[[i]], param=readP[[i]])

    window_counts <- c(window_counts, window)
}

dataList <- window_counts

## parameters for consolidateWindows

#if str($consolidateWindows.equiweight) == 'true'
    equiweight <- TRUE
#else
    equiweight <- FALSE
#end if

#if str($consolidateWindows.mergeWindows_select.mergeWindows_selector) == 'yes'
    tol <- "$consolidateWindows.mergeWindows_select.tol"

    ############# Sign parameter not working #######################
        #if str($consolidateWindows.mergeWindows_select.sign_select.sign_selector) == "yes"
            sign <- scan("$consolidateWindows.mergeWindows_select.sign_select.sign", what=logical())
        #else 
            sign <- NULL
        #end if
    ################################################################

    #if str($consolidateWindows.mergeWindows_select.max_width) != ''
        maxWidth <- as.numeric("$consolidateWindows.mergeWindows_select.max_width")
    #else
        maxWidth <- NULL
    #end if
    #if str($consolidateWindows.mergeWindows_select.ignore_strand) == 'true'
        ignore_strand <- T
    #else
        ignore_strand <- F
    #end if

    merge_args = list(tol=tol, sign=NULL, max.width=maxWidth, ignore.strand=ignore_strand)
#else
    merge_args=list()
#end if

#if str($consolidateWindows.region_select.region_selector) == 'yes'
    gRange <- as.character(unlist(strsplit(gsub(" ", "", "${consolidateWindows.region_select.GRanges}", ","), ",")))
    iRange <- read.table("$consolidateWindows.region_select.IRanges", header=F)
    start <- c(iRange[[1]])
    end <- c(iRange[[2]])
    regions <- GRanges(gRange, IRanges(start,end))
#else
    regions <-NULL
#end if

#if str($consolidateWindows.findOverlaps_select.findOverlaps_selector) == "yes"
    ##queryData <- read.table("$consolidateWindows.findOverlaps_select.query", header=F)
    ##start <- c(queryData[[1]])
    ##end <- c(queryData[[2]])
    ##query <- IRanges(start, end)

    ##subjectData <- read.table("$consolidateWindows.findOverlaps_select.subject", header=F)
    ##start <- c(subjectData[[1]])
    ##end <- c(subjectData[[2]])
    ##subject <- IRanges(start, end)

    maxgap <- as.numeric("$consolidateWindows.findOverlaps_select.maxgap")
    minoverlap <- as.numeric("$consolidateWindows.findOverlaps_select.minoverlap")
    type <- as.character("$consolidateWindows.findOverlaps_select.type")
    select <- as.character("$consolidateWindows.findOverlaps_select.select")

    overlap <- list(maxgap=maxgap, minoverlap=minoverlap, type=type, select=select)
#else
    overlap <- list()
#end if

#if str($consolidateWindows.sign_list_select.sign_list_selector) == "yes"
    allLines <- readLines(con = "$consolidateWindows.sign_list_select.sign_list")
    tokenize <- strsplit(allLines, split = ' ')
    sign_list <- lapply(tokenize, FUN = function(x) {as.integer(unlist(x))} )
#else
    sign_list <- NULL
#end if

result <- consolidateWindows(dataList, equiweight=equiweight, merge.args=merge_args, regions, overlap.args=overlap, sign.list=sign_list)

#if str($consolidateWindows.region_select.region_selector) == 'no'
    unlisted_ids <- unlist(lapply(result[[1]], function(x) { paste(x, collapse = " ") }), use.names = TRUE)
    write.table(unlisted_ids, file = "$id_output", quote = FALSE, sep = "\n", col.names = FALSE, row.names=FALSE)

    unlisted_weights <- unlist(lapply(result[[2]], function(x) { paste(x, collapse = " ") }), use.names = TRUE)
    write.table(unlisted_weights, file = "$weight_output", quote = FALSE, sep = "\n", col.names = FALSE, row.names=FALSE)

    write.table(result[[3]], "$region_output", row.names=FALSE, quote = FALSE)
#else
    for (i in result[[1]]) {
        write.table(i, "$id_output", append = TRUE, sep = " ", row.names = FALSE, col.names = TRUE)
    }
    unlisted_weights <- unlist(lapply(result[[2]], function(x) { paste(x, collapse = " ") }), use.names = TRUE)
    write.table(unlisted_weights, file = "$weight_output", quote = FALSE, sep = "\n", col.names = FALSE, row.names=FALSE)
#end if

]]>
        </configfile>
    </configfiles>
    <inputs>
        <repeat name="data" title="RangedSummarizedExperiment">
            <expand macro="windowCounts" />
        </repeat>
        <section name="consolidateWindows" title="Consolidate window sizes" expanded="true">
            <param name="equiweight" type="boolean" truevalue="true" falsevalue="" checked="true" label="Enforce equal weighting from each analysis?" help="Some effort is required to equalize the contribution of the results from each analysis. This is done by setting selecting yes, where the weight of each window is inversely proportional to the number of windows from that analysis." />
            <conditional name="mergeWindows_select" >
                <param name="mergeWindows_selector" type="select" label="Additional parameters to pass to mergeWindows?" >
                    <option value="yes">Yes</option>
                    <option value="no" selected="true">No</option>
                </param>
                <when value="yes">
                    <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
                <!--Sign doesn't work, no test data
                Error in mergeWindows(regions[sig], tol = tol, sign = sign[sig], ...) : formal argument "sign" matched by multiple actual arguments-->
                    <conditional name="sign_select">
                        <param name="sign_selector" type="select" label="Specify a positive log-FC for each window?" >
                            <option value="yes">Yes</option>
                            <option value="no" selected="true">No</option>
                        </param>
                        <when value="yes">
                            <param name="sign" type="data" format="tabular" label="Positive log-FC for each window" help="Upload as datafame with a column of logical values" />
                        </when>
                        <when value="no"> </when>
                    </conditional>
                    <param name="max_width" type="float" value="" optional="true" label="Maximum size of merged intervals" help="Specification prevents the formation of excessively large clusters when many adjacent regions are present. Any cluster that is wider than the max width is split into multiple subclusters of (roughly) equal size. Specifically, the cluster interval is partitioned into the smallest number of equally-sized subintervals where each subinterval is smaller than max width. Windows are then assigned to each subinterval based on the location of the window midpoints. Suggested values range from 2000 to 10000 bp, but no limits are placed on the maximum size if no value entered." />
                    <param name="ignore_strand" type="boolean" truevalue="true" falsevalue="" checked="true" label="Ignore the strandedness of regions?" help="If no is selected, the entries in regions are split into their separate strands." />
                </when>
                <when value="no"> </when>
            </conditional>
            <conditional name="region_select">
                <param name="region_selector" type="select" label="Specify regions of interest for overlapping with windows?">
                    <option value="yes">Yes</option>
                    <option value="no" selected="true">No</option>
                </param>
                <when value="yes">
                    <expand macro="gRanges" />
                </when>
                <when value="no"> 
                    <conditional name="findOverlaps_select">
                        <param name="findOverlaps_selector" type="select" label="Pass additional parameters to findOverlaps?" >
                            <option value="yes">Yes</option>
                            <option value="no" selected="true">No</option>
                        </param>
                        <when value="yes">
                            <expand macro="findOverlaps" />
                        </when>
                        <when value="no"> </when>
                    </conditional>
                </when>
            </conditional>
            <conditional name="sign_list_select">
                <param name="sign_list_selector" type="select" label="Specify whether the log-fold change is positive for the corresponding windows?">
                    <option value="yes">Yes</option>
                    <option value="no" selected="true">No</option>
                </param>
                <when value="yes">
                    <param name="sign_list" type="data" format="tabular" label="A dataframe with rows of logical values specifying whether the log-fold change is positive for the corresponding window" help="The values in the rowscorresponds to and is of the same length as the GRanges objects." />
                </when>
                <when value="no"> </when>
            </conditional>
        </section>
    </inputs>

    <outputs>
        <data name="id_output" format="txt" label="${tool.name} on ${on_string}: consolidateWindows ids output" />
        <data name="weight_output" format="txt" label="${tool.name} on ${on_string}: consolidateWindows weights output" />
        <!--filter doesn't work: there shouldn't be output when region_selector = yes-->
        <data name="region_output" format="txt" label="${tool.name} on ${on_string}: consolidateWindows regions output" >
            <filter>region_select['region_selector'] == 'no'</filter>
        </data>
    </outputs>

    <tests>
        <test>
            <repeat name="data">
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <param name="spacing" value="50" />
                <param name="width" value="1" />
                <conditional name="ext_selector">
                    <param name="ext_select" value="integer" />
                    <param name="ext" value="100" />
                </conditional>
                <param name="shift" value="0" />
                <param name="filter" value="10" />
                <param name="bin" value="false" />
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="yes" />
                    <param name="pe" value="none" />
                    <param name="max_frag" value="500" />
                    <param name="dedup" value="false" />
                    <param name="minq" value="1" />
                    <param name="forward" value="NA" />
                    <param name="restrict" value="chrA" />
                    <conditional name="discard_select">
                        <param name="discard" value="no" />
                    </conditional>
                </conditional>
            </repeat>
           <repeat name="data">
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <param name="spacing" value="50" />
                <param name="width" value="100" />
                <conditional name="ext_selector">
                    <param name="ext_select" value="integer" />
                    <param name="ext" value="100" />
                </conditional>
                <param name="shift" value="0" />
                <param name="filter" value="10" />
                <param name="bin" value="false" />
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="yes" />
                    <param name="pe" value="none" />
                    <param name="max_frag" value="500" />
                    <param name="dedup" value="false" />
                    <param name="minq" value="1" />
                    <param name="forward" value="NA" />
                    <param name="restrict" value="chrA" />
                    <conditional name="discard_select">
                        <param name="discard" value="yes" />
                        <param name="GRanges" value="chrA" />
                        <param name="IRanges" value="range1.tabular" />
                    </conditional>
                </conditional>
            </repeat>
            <repeat name="data">
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <param name="spacing" value="50" />
                <param name="width" value="100" />
                <conditional name="ext_selector">
                    <param name="ext_select" value="list" />
                    <param name="ext_list1" value="50, 100" />
                    <param name="ext_list2" value="80" />
                </conditional>
                <param name="shift" value="0" />
                <param name="filter" value="10" />
                <param name="bin" value="false" />
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="no" />
                </conditional>
            </repeat>
            <section name="consolidateWindows">
                <param name="equiweight" value="true" />
                <conditional name="mergeWindows_select">
                    <param name="mergeWindows_selector" value="no" />
                </conditional>
                <conditional name="region_select">
                    <param name="region_selector" value="no" />
                    <conditional name="findOverlaps_select">
                        <param name="findOverlaps_selector" value="no" />
                    </conditional>
                <conditional name="sign_list_select">
                    <param name="sign_list_selector" value="no" />
                </conditional>
            </section>
            <output name="id_output" value="consolidateWindows_id_output1.txt" />
            <output name="weight_output" value="consolidateWindows_weight_output1.txt" />
            <output name="region_output" value="consolidateWindows_regions_output1.txt" />
        </test>

        <test>
            <repeat name="data">
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <param name="spacing" value="50" />
                <param name="width" value="1" />
                <conditional name="ext_selector">
                    <param name="ext_select" value="integer" />
                    <param name="ext" value="100" />
                </conditional>
                <param name="shift" value="0" />
                <param name="filter" value="1" />
                <param name="bin" value="false" />
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="no" />
                    <conditional name="discard_select">
                        <param name="discard" value="no" />
                    </conditional>
                </conditional>
            </repeat>
            <repeat name="data">
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <param name="spacing" value="50" />
                <param name="width" value="100" />
                <conditional name="ext_selector">
                    <param name="ext_select" value="integer" />
                    <param name="ext" value="100" />
                </conditional>
                <param name="shift" value="0" />
                <param name="filter" value="1" />
                <param name="bin" value="false" />
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="no" />
                    <conditional name="discard_select">
                        <param name="discard" value="no" />
                    </conditional>
                </conditional>
            </repeat>
            <repeat name="data">
                <repeat name="bam_input">
                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                </repeat>
                <repeat name="bam_input">
                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                </repeat>
                <param name="spacing" value="50" />
                <param name="width" value="100" />
                <conditional name="ext_selector">
                    <param name="ext_select" value="integer" />
                    <param name="ext" value="100" />
                </conditional>
                <param name="shift" value="0" />
                <param name="filter" value="1" />
                <param name="bin" value="false" />
                <conditional name="readParam_select">
                    <param name="readParam_selector" value="no" />
                </conditional>
            </repeat>
            <section name="consolidateWindows">
                <param name="equiweight" value="true" />
                <conditional name="mergeWindows_select">
                    <param name="mergeWindows_selector" value="yes" />
                    <param name="tol" value="100" />
                        <conditional name="sign_select">
                            <param name="sign_selector" value="no" />
                        </conditional>
                        <param name="max_width" value="1000" />
                        <param name="ignore_strand" value="true" />
                </conditional>
                <conditional name="region_select">
                    <param name="region_selector" value="yes" />
                    <param name="GRanges" value="chrA, chrA, chrB, chrC" />
                    <param name="IRanges" value="conW_range.tabular" />
                </conditional>
                <conditional name="sign_list_select">
                    <param name="sign_list_selector" value="no" />
                </conditional>
            </section>
            <output name="id_output" value="consolidateWindows_id_output2.txt" />
            <output name="weight_output" value="consolidateWindows_weight_output2.txt" />
        </test>

        

    </tests>

    <help><![CDATA[
        First count the number of extended reads overlapping a sliding window at spaced positions across the genome generated by windowCounts using different width values. 

        Then consolidate windows of different sizes into a common set of clusters. This will merge windows of differing sizes. If no regions of interest for overlapping with windows is specified, windows of all sizes are clustered together, using a tolerance of 100 bp. Otherwise, clusters are defined by overlapping windows of all sizes to region, where each entry of region defines a cluster.

        The aim is to consolidate statistics across window sizes using consolidateTests or consolidateOverlaps. This will provide comprehensive detection of DB at a range of spatial resolutions. However, this requires some care to balance the contribution of analyses with different window sizes to the combined p-value. This is achieved by weighting each window and using the weights in downstream functions.
    ]]></help>
    <expand macro="citations" />
</tool>