<tool id="csaw_mixedClusters" name="mixedClusters" version="@VERSION@.0">
  <description>tests for mixed DB clusters</description>
  <macros>
    <import>csaw_macros.xml</import>
  </macros>
  <expand macro="requirements" />
  <command detect_errors="exit_code"><![CDATA[
    Rscript '$script']]>
  </command>
  <configfiles>
    <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

ids <-scan("$ids", what = integer())
tab <- read.table("$tab", sep="", header=T)
#if str($weight_select.weight_selector) == "yes"
    w <- scan("$weight_select.weight", what=numeric())
#else
    w <- NULL
#end if

#if str($pval_col) != ''
  pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$pval_col"))
  if (is.na(pval_col)){
    pval_col <- "$pval_col"
  }
#else
  pval_col <- NULL
#end if
#if str($fc_col) != ''
  fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$fc_col"))
  if (is.na(fc_col)){
    fc_col <- "$fc_col"
  }
#else
  fc_col <- NULL
#end if

result <- mixedClusters(ids, tab, weight=w, pval.col=pval_col, fc.col=fc_col)
write.table(result, file="$output", quote = FALSE, row.names=FALSE)
]]>
    </configfile>
  </configfiles>
  <inputs>
    <param name="ids" type="data" format="tabular" label="Cluster ID for each test" help="Upload as a dataframe where each row is an integer." />
    <param name="tab" type="data" format="tabular" label="Dataframe of results with PValue and at least one logFC field for each test" />
    <conditional name="weight_select">
      <param name="weight_selector" type="select" label="Specify weights for each window?" help="If none specified, the weight defaults to 1 for each test. Supplying different relative weight values may be useful for downweighting low-confidence tests, e.g., those in repeat regions. In Simes’ procedure, weights are interpreted as relative frequencies of the tests in each cluster.">
        <option value="yes">Yes</option>
        <option value="no" selected="true">No</option>
      </param>
      <when value="yes">
        <param name="weight" type="data" format="tabular" label="Weights for each window" help="Upload as a dataframe where each row is a numeric value." />
      </when>
      <when value="no"> </when>
    </conditional>
    <expand macro="col_names" />
  </inputs>
  <outputs>
    <data name="output" format="txt" label="${tool.name} on ${on_string}: output" />
  </outputs>
  <tests>
    <test>
      <param name="ids" value="mixedClusters_ids.tabular" />
      <param name="tab" value="mixedClusters_tab.tabular" />
      <conditional name="weight_select">
        <param name="weight_selector" value="no" />
      </conditional>
      <param name="pval_col" value="" />
      <param name="fc_col" value="" />
      <output name="output" value="mixedClusters_output.txt" />
    </test>
    <test>
      <param name="ids" value="mixedClusters_ids.tabular" />
      <param name="tab" value="mixedClusters_tab.tabular" />
      <conditional name="weight_select">
        <param name="weight_selector" value="yes" />
        <param name="weight" value="comTest_w.tabular" />
      </conditional>
      <param name="pval_col" value="" />
      <param name="fc_col" value="" />
      <output name="output" value="mixedClusters_output2.txt" />
    </test>
  </tests>
  <help><![CDATA[
Intersects two one-sided tests to determine if a cluster contains DB events in both directions.

This function converts two-sided p-values to one-sided counterparts for each direction of log-fold change. For each direction, the corresponding one-sided p-values are combined to yield a combined p-value for each cluster. Each cluster is associated with two combined p-values (one in each direction), which are intersected using the Berger’s intersection-union test (IUT). The IUT p-value provides evidence against the null hypothesis that either direction is not significant. In short, a low p-value is only possible if there is DB in both directions. This formally identifies mixed clusters corresponding to complex DB events. The two-sided p-values in should be independent of the sign of the log-fold change under the null hypothesis. This may not be true for all hypothesis tests, so caution is required when supplying values in tab.

It returns:

A DataFrame containing one row per cluster, with various fields:

- `nWindows`: specifying the total number of windows in each cluster
- `logFC.up and logFC.down`: for each log-FC column in tab, containing the number of windows with log-FCs above 0.5 or below -0.5, respectively
- `PValue`: a numeric field containing the IUT p-value for each cluster
- `FDR`: a number containing the adjusted p-value for each cluster
    ]]></help>
  <expand macro="citations" />
</tool>