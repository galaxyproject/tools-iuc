<tool id="csaw_clusterFDR" name="clusterFDR" version="@VERSION@.0">
    <description>compute the cluster-level FDR</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

##clusterFDR
    ids <- scan("$id", what = integer())
    threshold <- as.numeric("$threshold")
    target <- as.numeric("$target")
    adjp <- scan("$adjp", what = numeric())

    ##if str($weight) != ''
        ##weight <- as.numeric("$weight")
    ##else
        ##weight <- NULL
    ##end if

    set.seed(100)
    windows <- GRanges("chrA", IRanges(1:1000, 1:1000))
    test.p <- runif(1000)
    test.p[c(1:10, 100:110, 220:240)] <- 0
    is.sig <- p.adjust(test.p, method="BH") <= threshold

    clusterFUN <- function(x) { mergeWindows(windows[x], tol=0)[[1]] }
    grid_length <- as.numeric("$grid_length")
    iterations <- as.numeric("$iterations")

    ## Write to table
    result1 <- clusterFDR(ids, threshold, weight=NULL)
    result2 <- controlClusterFDR(target, adjp, clusterFUN,  weight=NULL, grid.length=grid_length, iterations=iterations)

    result <- list(c(result1[1]))
    result <- append(result, result2[[1]])
    result <- append(result, result2[[2]])

    write.table(do.call(rbind, result), file="$output", quote = FALSE, row.names = c("clusterFDR ", "threshold ", "FDR "), col.names = FALSE)
    
]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="id" type="data" format="tabular" label="Cluster IDs for each significant test below threshold" />
        <param name="threshold" type="float" value="" label="The FDR threshold used to define the significant tests" />
        <param name="target" type="float" value="" optional="true" label="The desired cluster-level FDR threshold" />
        <param name="adjp" type="data" format="tabular" label="Window-level adjusted p-values" />
        <!--<expand macro="weight" />-->
       <!-- <expand macro="grid_param" />-->
        <expand macro="grid" />
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: clusterFDR output" />
    </outputs>

    <tests>
        <test>
            <param name="id" value="id.tabular" />
            <param name="threshold" value="0.05" />
            <param name="target" value="0.05" />
            <param name="adjp" value="adjp.tabular" />
            <!--<conditional name="grid_param_select">
                <param name="grid_param" value="no" />
            </conditional>-->
            <param name="grid_length" value="21" />
            <param name="iterations" value="4" />
            <output name="output" file="clusterFDR_output1.txt"/>
        </test>
        <test>
            <param name="id" value="id.tabular" />
            <param name="threshold" value="0.05" />
            <param name="target" value="0.05" />
            <param name="adjp" value="adjp.tabular" />
            <!--<conditional name="grid_param_select">
                <param name="grid_param" value="yes" />
                <param name="length" value="21" />
                <param name="range" value="20" />
                <param name="iter" value="3" />
                <param name="scale" value="2" />
            </conditional>-->
            <param name="grid_length" value="21" />
            <param name="iterations" value="4" />
            <output name="output" file="clusterFDR_output2.txt"/>
        </test>
    </tests>

    <help><![CDATA[

        The cluster-level FDR, the windowlevel FDR threshold to control the cluster-level FDR near target, and the estimate of the cluster-level FDR corresponding to threshold are returned.

        The clusterFDR function computes an informal estimate of the cluster-level FDR, where each cluster is formed by aggregating only significant tests. In the context of ChIP-seq, each significant test refers to a DB window that is detected at a FDR below threshold. The idea is to obtain an error rate while reporting the precise coordinates of a DB subinterval in a complex region. 

        The cluster-level FDR is defined as the proportion of reported clusters that have no true positives. Simply using threshold is not appropriate, as the cluster- and window-level FDRs are not equivalent. This function also differs from the standard pipeline that is based on combineTests. Specifically, region definition in combineTests must be independent of DB so that precise coordinates of the DB subinterval cannot be reported. This is overcome here, by clustering directly on DB windows and applying post-hoc control of the cluster-level FDR. Note that the calculation of the cluster-level FDR here is not statistically rigorous. In particular, the observed number of false positive tests is estimated based on threshold and the total number of significant tests. This is not guaranteed to be an upper bound, especially with few or correlated tests. Thus, users should use the standard combineTests-based pipeline wherever possible. Clustering on significant windows should only be performed where the precise coordinates of the DB subinterval are important for interpretation.
    ]]></help>
    <expand macro="citations" />
</tool>