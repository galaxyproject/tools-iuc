<tool id="csaw_getPESizes" name="getPESizes" version="@VERSION@.0">
    <description>computes fragment lengths for paired-end tags</description>
     <macros>
       <import>csaw_macros.xml</import>
    </macros>
     <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

bamFile <- "$bam_file"
indexBam(bamFile)

#if str($readParam_select.readParam_selector) == 'yes'
        pe <- "$readParam_select.pe"
        max_frag <- as.numeric("$readParam_select.max_frag")

        #if str($readParam_select.dedup) == ''
            ded_up <- F
        #else
            ded_up <- T
        #end if

        #if str($readParam_select.minq) != ''
            min_q <- as.numeric("${readParam_select.minq}")
        #else
          min_q <- NA
        #end if

        #if str($readParam_select.forward) == 'NA'
          forward <- NA
        #else if str($readParam_select.forward) == 'forward'
          forward <- TRUE
        #else if str($readParam_select.forward) == 'reverse'
            forward <- FALSE
        #end if

        restrict <- as.character(unlist(strsplit(gsub(" ", "", "${readParam_select.restrict}", ","), ",")))
        #if str($readParam_select.discard_select) == 'yes'
          dis_gRange <- as.character(unlist(strsplit(gsub(" ", "", "${discard_select.GRanges}", ","), ",")))
          dis_b <- unlist(strsplit(gsub(" ", "", "${discard_select.IRanges}", ","), ";"))
          dis_c <- gsub("\\[|\\]", "", dis_b)
          dis_d <- lapply(dis_c, function(x){x <- as.numeric(unlist(strsplit(x, ",")))})
          dis_e <- c()
          dis_f <- c()
          for (i in seq(dis_d)){ 
            dis_e <- c(dis_e, dis_d[[i]][1])
            dis_f <- c(dis_f, dis_d[[i]][2])
          }
          discard <- GRanges(dis_gRange, IRanges(dis_e, dis_f))
        #else
          discard <- GRanges()
        #end if
        p <- readParam(pe=pe, max.frag=max_frag, dedup=ded_up, minq=min_q, forward=forward, discard=discard, BPPARAM=SerialParam())
    #else
        p <- readParam(pe="both")
    #end if  

getPESizes(bam.file, param=p)

]]>
        </configfile>
    </configfiles>
    <inputs>
      <param name="bam_file" type="data" format="bam" label="BAM file" />
      <conditional name="readParam_select">
      <param name="readParam_selector" type="select" label="Specify read loading parameters?" >
        <option value="yes">Yes</option>
        <option value="no" selected="true">No</option>
      </param>
      <when value="yes">
         <param name="pe" type="select" label="Is paired-end data present in the BAM file(s)?" help="Reads are assumed to be single-end when None is selected">
          <option value="none">None</option>
          <option value="both" selected="true">Both Files</option>
          <option value="first">First File</option>
          <option value="second">Second File</option>
        </param>
        <param name="max_frag" type="integer" value="500" label="Maximum fragment length corresponding to a read pair" />
        <param name="dedup" type="boolean" truevalue="true" falsevalue="" checked="false" label="Ignore marked duplicate reads?" help="Marked duplicate reads will be removed with if yes is selected. This may be necessary when many rounds of PCR have been performed. However, it is not recommended for routine counting as it will interfere with the downstream statistical methods. Note that the duplicate field must be set beforehand in the BAM file for this argument to have any effect" />
        <param name="minq" type="integer" value="" optional="true" label="Minimum mapping quality score for an aligned read" help="Reads will be filtered by their mapping quality scores. This is generally recommended to remove low-confidence alignments. The exact threshold for minq will depend on the range of scores provided by the aligner. No filtering on the score will be performed if no value specified." />
        <param name="forward" type="select" label="How should the reads be extracted?">
          <option value="NA">Extract from all strands</option>
          <option value="forward">Extract only from forward strands</option>
          <option value="reverse">Extract only from reverse strands</option>
        </param>
        <param name="restrict" type="text" optional="true" label="Names of allowable chromosomes from which readswill be extracted" help="Reads will only be extracted for the specified chromosomes. This is useful to restrict the analysis to interesting chromosomes, e.g., no contigs/scaffolds or mitochondria."/>
        <conditional name="discard_select">
          <param name="discard" type="select" label="Discard any alignments?" help="A read will be removed if the corresponding alignment is wholly contained within the supplied ranges. This is useful for removing reads in repeat regions.">
            <option value="yes">Yes</option>
            <option value="no" selected="true">No</option>
          </param>
          <when value="yes">
            <expand macro="gRanges" />
          </when>
          <when value="no"> </when>
        </conditional>
      </when>
      <when value="no"> </when>
    </conditional>

    </inputs>
    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: getPESizes output" />
    </outputs>

    <tests>
        <test>
          <param name="bam_file" value="pet.bam" ftype="bam" />
          <conditional name="readParam_select">
            <param name="readParam_selector" value="no" />
          </conditional>
        </test>
        <test>
          <param name="bam_file" value="pet.bam" ftype="bam" />
          <conditional name="readParam_select">
            <param name="readParam_selector" value="yes" />
            <param name="pe" value="both" />
            <param name="max_frag" value="100" />
            <param name="dedup" value="false" />
            <param name="minq" value="20" />
            <param name="forward" value="NA" />
            <param name="restrict" value="chrA" />
              <param name="discard" value="no" />
          </conditional>
        </test>
    </tests>

    <help><![CDATA[
       Compute the length of the sequenced fragment for each read pair in paired-end tag (PE) data. This function computes a number of diagnostics for paired-end data in a supplied BAM file. The aims is to provide an indication of the quality of library preparation and sequencing.
       Any read pair with exactly one unmapped read is discarded, and the number of read pairs lost in this manner is recorded. Obviously, read pairs with both reads unmapped will be ignored completely, as will any unpaired reads in the BAM file. 
       Of the mapped pairs, the valid (i.e., proper) read pairs are identified. This involves several criteria:
       • Read pairs must be intrachromosomal. If the reads are on different chromosomes, the read
       pair will be recorded as being interchromosomal.
       • The two reads in the pair must lie on opposite strands. Otherwise, the read pair will be considered as being improperly orientated.
       • The 5’ end of the forward read must not map to a higher genomic coordinate than the 5’ end of the reverse read. Otherwise, the read pair will be considered as being improperly orientated. 
       Note that the 3’ end of one read is allowed to overrun the 5’ end of the other. This avoids being too stringent in the presence of sequencing errors, untrimmed adaptors, etc. at the start or ends of reads. Each valid read pair corresponds to a DNA fragment where both ends are sequenced. The size of the fragment can be determined by calculating the distance between the 5’ ends of the mapped reads. The distribution of sizes is useful for assessing the quality of the library preparation, along with all of the recorded diagnostics. Note that any max.frag specification in param will be ignored; sizes for all valid pairs will be returned.
    ]]></help>
    <expand macro="citations" />
</tool>