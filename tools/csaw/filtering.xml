<tool id="csaw_filtering" name="filtering" version="@VERSION@.0">
    <description>filters data</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles><configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

#if str($method_select.method) == "filterWindows"
    #if str($method_select.filter_method_select.filter_method_selector) == "filterWindows"
        @WINDOWCOUNTS_FILTERWINDOWS_DATA@  

        data <- windowCounts(bamFiles, spacing=spacing, width=width, ext=ext, shift=shift, filter=filter, bin=bin, param=p)
        type <- "$method_select.filter_method_select.type"

        #if str($method_select.filter_method_select.assay_data) != "counts"
            assay_data <- as.numeric(gsub("([0-9]+).*$", "\\1", "$method_select.filter_method_select.assay_data"))
            if (is.na(assay_data)){
                assay_data <- "$method_select.filter_method_select.assay_data"
            }
        #else
            assay_data <- "$method_select.filter_method_select.assay_data"
        #end if

        #if str($method_select.filter_method_select.assay_back) != "counts"
            assay_back <- as.numeric(gsub("([0-9]+).*$", "\\1", "$method_select.filter_method_select.assay_back"))
            if (is.na(assay_back)){
                assay_back <- "$method_select.filter_method_select.assay_back"
            }
        #else
            assay_back <- "$method_select.filter_method_select.assay_back"
        #end if

        prior_count <- as.numeric("$method_select.filter_method_select.prior_count")

        #if str($method_select.filter_method_select.scale_info_select.scale_info_selector) == "yes"

            @WINDOWCOUNTS_FILTERWINDOWS_SCALE_DATA@

            data_scale_info <- windowCounts(bamFiles_scale_info, spacing=spacing_scale_info, width=width_scale_info, ext=ext_scale_info, shift=shift_scale_info, filter=filter_scale_info, bin=bin_scale_info, param=p_scale_info)

            @WINDOWCOUNTS_FILTERWINDOWS_SCALE_BG@

            scale_info <- scaleControlFilter(data_scale_info, background_scale_info)
        #else
            scale_info <- NULL
        #end if

        #if str($method_select.filter_method_select.background_select.background_selector) == "yes"
            @WINDOWCOUNTS_FILTERWINDOWS_BACKGROUND@

            result <- filterWindows(data, background, type=type, assay.data=assay_data, assay.back=assay_back, prior.count=prior_count, scale.info=scale_info)

            #if str($method_select.filter_method_select.type) != "proportion"
                write.table(result[[1]], file = "$filterW_abundances_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
                write.table(result[[2]], file = "$filterW_back_abundances_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
                write.table(result[[3]], file = "$filterW_filter_output", quote = FALSE, col.names = FALSE, row.names=FALSE)

                #if str($method_select.filter_method_select.keep_select.keep_selector) == "yes" 
                    keep <- result[[3]] > as.numeric("$method_select.filter_method_select.keep_select.keep")
                    new_data <- data[keep,]

                    #if str($method_select.filter_method_select.keep_select.keep_sum) == "true"
                        keep_sum <- sum(keep)
                        write.table(keep_sum, file = "$filterW_keepsum_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
                    #end if
                #end if

            #else
                write.table(result[[1]], file = "$filterW_abundances_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
                write.table(result[[2]], file = "$filterW_filter_output", quote = FALSE, col.names = FALSE, row.names=FALSE)

                    #if str($method_select.filter_method_select.keep_select.keep_selector) == "yes" 
                        keep <- result[[2]] > as.numeric("$method_select.filter_method_select.keep_select.keep")
                        new_data <- data[keep,]

                        #if str($method_select.filter_method_select.keep_select.keep_sum) == "true"
                            keep_sum <- sum(keep)
                            write.table(keep_sum, file = "$filterW_keepsum_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
                        #end if
                    #end if
            #end if
        #else
            result <- filterWindows(data, type=type, assay.data=assay_data, assay.back=assay_back, prior.count=prior_count, scale.info=scale_info)
            write.table(result[[1]], file = "$filterW_abundances_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
            write.table(result[[2]], file = "$filterW_filter_output", quote = FALSE, col.names = FALSE, row.names=FALSE)

            #if str($method_select.filter_method_select.keep_select.keep_selector) == "yes" 
                keep <- result[[2]] > as.numeric("$method_select.filter_method_select.keep_select.keep")
                new_data <- data[keep,]

                #if str($method_select.filter_method_select.keep_select.keep_sum) == "true"
                    keep_sum <- sum(keep)
                    write.table(keep_sum, file = "$filterW_keepsum_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
                #end if
            #end if
        #end if
    #end if
#else if str($method_select.method) == "findMaxima"
    @GRANGES_METHOD@
    range <- as.numeric("$method_select.range")
    metric <- scan("$method_select.metric", what=numeric())
    #if str($method_select.ignore_strand) == 'true'
        ignore_strand <- TRUE
    #else
        ignore_strand <- FALSE
    #end if
    result <- findMaxima(regions, range, metric, ignore.strand=ignore_strand)
    write.table(result, file = "$findMaxima_output", quote = FALSE, col.names = FALSE, row.names=FALSE)
#else if str($method_select.method) == "getWidths"
    #if str($method_select.data_select.data_selector) == "windowCounts"
      @WINDOWCOUNTS_SELECT_METHOD@
      data <- window_counts
    #else
      @REGIONCOUNTS_SELECT_METHOD@
      data <- region_counts
    #end if

    result <- getWidths(data)
    write.table(result, "$getWidths_output", quote = FALSE, col.names = FALSE, row.names = FALSE)
#else if str($method_select.method) == "scaledAverage"
    #if str($method_select.data_select.data_selector) == "windowCounts"
      @WINDOWCOUNTS_SELECT_METHOD@
      data <- window_counts
    #else
      @REGIONCOUNTS_SELECT_METHOD@
      data <- region_counts
    #end if

    scale <- as.numeric("$method_select.scale")

    #if str($method_select.prior_count) != ""
      prior_count <- as.numeric($method_select.prior_count)
    #else
      prior_count <- NULL
    #end if

    #if str($method_select.dispersion) != ""
      dispersion <- as.numeric($method_select.dispersion)
    #else
      dispersion <- NULL
    #end if

    assay_id <- as.numeric(gsub("([0-9]+).*$", "\\1", "$method_select.assay_id"))
    if (is.na(assay_id)){
      assay_id <- "$method_select.assay_id"
    }

    result <- scaledAverage(data, scale=scale, prior.count=prior_count, dispersion=dispersion, assay.id=assay_id)
    write.table(result, "$scaledAverage_output", quote = FALSE, col.names = FALSE, row.names = FALSE)
#end if
]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="method_select">
            <param name="method" type="select" label="Method" >
                <option value="filterWindows">Compute filter statistics for windows, based on proportions or using enrichment over background</option>
                <option value="findMaxima">Find the local maxima for a given set of genomic regions</option>
                <option value="getWidths">Get the widths of the read counting interval for each region</option>
                <option value="scaledAverage">Compute the scaled average abundance for each feature</option>
            </param>
            <when value="filterWindows">
                <conditional name="filter_method_select">
                    <param name="filter_method_selector" type="select" label="Filtering method" >
                        <option value="filterWindows">filterWindows</option>
                        <option value="scaleControlFilter">scaleControlFilter</option>
                    </param>
                    <when value="filterWindows">
                        <section name="data" title="Data: A RangedSummarizedExperiment object containing window-level counts" expanded="true">
                            <expand macro="windowCounts" />
                        </section>
                        <conditional name="background_select">
                            <param name="background_selector" type="select" label="Specify background defined by a RangedSummarizedExperiment for filtering?">
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">                    
                                <section name="background" title="Background: A RangedSummarizedExperiment object" expanded="true">
                                    <conditional name="data_select">
                                        <param name="data_selector" type="select" label="Create a RangedSummarizedExperiment object by windowCounts or regionCounts?">
                                            <option value="windowCounts">windowCounts</option>
                                            <option value="regionCounts">regionCounts</option>
                                        </param>
                                        <when value="windowCounts">
                                            <expand macro="windowCounts" />
                                        </when>
                                        <when value="regionCounts">
                                            <expand macro="regionCounts" />
                                        </when>
                                    </conditional>
                                </section>
                            </when>
                            <when value="no"> </when>
                        </conditional>
                        <param name="type" type="select" label="Type of filtering to perfrom" help="When proportion is not selected the background RangedSummarizedExperiment object should contain counts for background regions" >
                            <option value="global" selected="true">global</option>
                            <option value="local">local</option>
                            <option value="control">control</option>
                            <option value="proportion">proportion</option>
                        </param>
                        <param name="assay_data" type="text" value="counts" label="Specify the assay containing window/bin counts in data" />
                        <param name="assay_back" type="text" value="counts" label="Specify the assay containing window/bin counts in background." />
                        <param name="prior_count" type="float" value="2" label="Specify the prior count to use in aveLogCPM" /> 
                        <conditional name="scale_info_select">
                            <param name="scale_info_selector" type="select" label="Include scaleControlFilter information?" help="i.e., a normalization factor and library sizes for ChIP and control samples.">
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">
                                <section name="data" title="Data: A RangedSummarizedExperiment object containing bin-level counts" expanded="true">
                                    <expand macro="windowCounts" />
                                </section>
                                <section name="background" title="Background: A RangedSummarizedExperiment object containg bin-level counts for negative control samples" expanded="true">
                                    <conditional name="data_select">
                                        <param name="data_selector" type="select" label="Create a RangedSummarizedExperiment object by windowCounts or regionCounts?">
                                            <option value="windowCounts">windowCounts</option>
                                            <option value="regionCounts">regionCounts</option>
                                        </param>
                                        <when value="windowCounts">
                                            <expand macro="windowCounts" />
                                        </when>
                                        <when value="regionCounts">
                                            <expand macro="regionCounts" />
                                        </when>
                                    </conditional>
                                </section>
                            </when>
                            <when value="no"> </when>
                        </conditional>
                        <conditional name="keep_select">
                            <param name="keep_selector" type="select" label="Specify the percentage in decimals to filter out in count data?" >
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">
                                <param name="keep" type="float" value="" label="Specify the percentage in decimals to filter out in count data" />
                                <param name="keep_sum" type="boolean" truevalue="true" falsevalue="" checked="false" label="Output the sum of the filtered count data?" />
                            </when>
                            <when value="no"> </when>
                        </conditional>      
                    </when>
                    <when value="scaleControlFilter">
                        <section name="data" title="Data: A RangedSummarizedExperiment object containing bin-level counts" expanded="true">
                            <expand macro="windowCounts" />
                        </section>
                        <section name="background" title="Background: A RangedSummarizedExperiment object containg bin-level counts for negative control samples" expanded="true">
                            <expand macro="windowCounts" />
                        </section>
                    </when>
                </conditional>
            </when>
            <when value="findMaxima">
                <expand macro="gRanges" />
                <param name="range" type="integer" value="" label="Specify the range of surrounding regions to consider as local" />
                <param name="metric" type="data" format="tabular" label="Values for which the local maxima is found" help="A dataframe with a column of values" />
                <param name="ignore_strand" type="boolean" truevalue="true" falsevalue="" checked="true" label="Consider the strandedness of regions?" help="If no is selected, then the entries in regions are split into their separate strands." />
            </when>
            <when value="getWidths">
                <conditional name="data_select">
                  <param name="data_selector" type="select" label="Create a RangedSummarizedExperiment object by windowCounts or regionCounts?">
                    <option value="windowCounts">windowCounts</option>
                    <option value="regionCounts">regionCounts</option>
                  </param>
                  <when value="windowCounts">
                    <expand macro="windowCounts" />
                  </when>
                  <when value="regionCounts">
                    <expand macro="regionCounts" />
                  </when>
                </conditional>
            </when>
            <when value="scaledAverage">
                <conditional name="data_select">
                  <param name="data_selector" type="select" label="Create a RangedSummarizedExperiment object by windowCounts or regionCounts?">
                    <option value="windowCounts">windowCounts</option>
                    <option value="regionCounts">regionCounts</option>
                  </param>
                  <when value="windowCounts">
                    <expand macro="windowCounts" />
                  </when>
                  <when value="regionCounts">
                    <expand macro="regionCounts" />
                  </when>
                </conditional>
                <param name="scale" type="float" value="1" label="Indicate the magnitude with which each abundance is to be downscaled" help="For example, if scale=2, the average count is halved, i.e., the returned abundances are decreased by 1 (as they are log2-transformed values)." />
                <param name="prior_count" type="float" value="" optional="true" label="Specify the prior count to add" />
                <param name="dispersion" type="float" value="" optional="true" label="Specify the dispersion for GLM fitting" />
                <param name="assay_id" type="text" value="counts" label="Indicate which assay of y contains the counts" />
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="filterW_abundances_output" format="txt" label="filterWindows on ${on_string}: abundances output" >
            <filter>method_select['method'] == 'filterWindows' and method_select['filter_method_select']['filter_method_selector'] == 'filterWindows'</filter>
        </data>
        <data name="filterW_back_abundances_output" format="txt" label="filterWindows on ${on_string}: back abundances output" >
            <filter>method_select['method'] == 'filterWindows' and method_select['filter_method_select']['background_select']['background_selector'] == 'yes'</filter>
        </data>
        <data name="filterW_filter_output" format="txt" label="filterWindows on ${on_string}: filter output" >
            <filter>method_select['method'] == 'filterWindows' and method_select['filter_method_select']['filter_method_selector'] == 'filterWindows'</filter>
        </data>
        <!--filter not working-->
        <data name="filterW_keepsum_output" format="txt" label="filterWindows on ${on_string}: filtered count sum output" >
            <filter>method_select['method'] == 'filterWindows' and  method_select['filter_method_select']['keep_select']['keep_selector'] == 'yes' and method_select['filter_method_select']['keep_select']['keep_sum'] == 'true' </filter>
        </data>
        <data name="findMaxima_output" format="txt" label="findMaxima on ${on_string}: output">
             <filter>method_select['method'] == 'findMaxima'</filter>
        </data>
        <data name="getWidths_output" format="txt" label="getWidths on ${on_string}: output">
             <filter>method_select['method'] == 'getWidths'</filter>
        </data>
        <data name="scaledAverage_output" format="txt" label="scaledAverage on ${on_string}: output">
             <filter>method_select['method'] == 'scaledAverage'</filter>
        </data>
    </outputs>

    <tests>        
        <!--This test is not working due to filter not working
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="filterWindows" />
                <conditional name="filter_method_select">
                    <param name="filter_method_selector" value="filterWindows" />
                    <section name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </section>
                    <conditional name="background_select">
                        <param name="background_selector" value="no" />
                    </conditional>
                    <param name="type" value="proportion" />
                    <param name="assay_data" value="counts" />
                    <param name="assay_back" value="counts" />
                    <param name="prior_count" value="2" />
                    <conditional name="scale_info_select">
                        <param name="scale_info_selector" value="no" />
                    </conditional>
                    <conditional name="keep_select">
                        <param name="keep_selector" value="yes" />
                        <param name="keep" value="0.99" />
                        <param name="keep_sum" value="true" />
                    </conditional>
                </conditional>
            </conditional>
            <output name="filterW_abundances_output" value="filterWindows_abundances_output1.txt" />
            <output name="filterW_filter_output" value="filterWindows_filter_output1.txt" />
            <output name="filterW_keepsum_output" value="filterWindows_filtered_count_sum_output.txt" />
        </test>-->
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="filterWindows" />
                <conditional name="filter_method_select">
                    <param name="filter_method_selector" value="filterWindows" />
                    <section name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </section>
                    <conditional name="background_select">
                        <param name="background_selector" value="yes" />
                        <section name="background">
                            <conditional name="data_select">
                                <param name="data_selector" value="windowCounts" />
                                <repeat name="bam_input">
                                <param name="bam_file" value="rep1.bam" ftype="bam" />
                                </repeat>
                                <repeat name="bam_input">
                                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                                </repeat>
                                <param name="spacing" value="50" />
                                <param name="width" value="300" />
                                <conditional name="ext_selector">
                                    <param name="ext_select" value="integer" />
                                    <param name="ext" value="100" />
                                </conditional>
                                <param name="shift" value="0" />
                                <param name="filter" value="1" />
                                <param name="bin" value="true" />
                                <conditional name="readParam_select">
                                    <param name="readParam_selector" value="no" />
                                </conditional>
                            </conditional>
                        </section>
                    </conditional>
                    <param name="type" value="global" />
                    <param name="assay_data" value="counts" />
                    <param name="assay_back" value="counts" />
                    <param name="prior_count" value="2" />
                    <conditional name="keep_select">
                        <param name="keep_selector" value="no" />
                    </conditional>
                    <conditional name="scale_info_select">
                        <param name="scale_info_selector" value="no" />
                    </conditional>
                </conditional>
            </conditional>
            <output name="filterW_abundances_output" value="filterWindows_abundances_output2.txt" />
            <output name="filterW_back_abundances_output" value="filterWindows_back_abundances_output.txt" />
            <output name="filterW_filter_output" value="filterWindows_filter_output2.txt" />
        </test>
        <test expect_num_outputs="2">
            <conditional name="method_select">
                <param name="method" value="filterWindows" />
                <conditional name="filter_method_select">
                    <param name="filter_method_selector" value="filterWindows" />
                    <section name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </section>
                    <conditional name="background_select">
                        <param name="background_selector" value="no" />
                    </conditional>
                    <param name="type" value="global" />
                    <param name="assay_data" value="counts" />
                    <param name="assay_back" value="counts" />
                    <param name="prior_count" value="2" />
                    <conditional name="scale_info_select">
                        <param name="scale_info_selector" value="yes" />
                        <section name="data">
                            <repeat name="bam_input">
                                <param name="bam_file" value="rep1.bam" ftype="bam" />
                            </repeat>
                            <repeat name="bam_input">
                                <param name="bam_file" value="rep2.bam" ftype="bam" />
                            </repeat>
                            <param name="spacing" value="50" />
                            <param name="width" value="" />
                            <conditional name="ext_selector">
                                <param name="ext_select" value="integer" />
                                <param name="ext" value="100" />
                            </conditional>
                            <param name="shift" value="0" />
                            <param name="filter" value="1" />
                            <param name="bin" value="false" />
                            <conditional name="readParam_select">
                                <param name="readParam_selector" value="no" />
                            </conditional>
                        </section>
                        <section name="background">
                            <conditional name="data_select">
                                <param name="data_selector" value="windowCounts" />
                                <repeat name="bam_input">
                                    <param name="bam_file" value="rep1.bam" ftype="bam" />
                                </repeat>
                                <repeat name="bam_input">
                                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                                </repeat>
                                <param name="spacing" value="50" />
                                <param name="width" value="" />
                                <conditional name="ext_selector">
                                    <param name="ext_select" value="integer" />
                                    <param name="ext" value="100" />
                                </conditional>
                                <param name="shift" value="0" />
                                <param name="filter" value="1" />
                                <param name="bin" value="false" />
                                <conditional name="readParam_select">
                                    <param name="readParam_selector" value="no" />
                                </conditional>
                            </conditional>
                        </section>
                    </conditional>
                    <conditional name="keep_select">
                        <param name="keep_selector" value="no" />
                    </conditional>
                </conditional>
            </conditional>
            <output name="filterW_abundances_output" value="filterWindows_abundances_output3.txt" />
            <output name="filterW_filter_output" value="filterWindows_filter_output3.txt" />
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="filterWindows" />
                <conditional name="filter_method_select">
                    <param name="filter_method_selector" value="filterWindows" />
                    <section name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </section>
                    <conditional name="background_select">
                        <param name="background_selector" value="yes" />
                        <section name="background">
                            <conditional name="data_select">
                                <param name="data_selector" value="regionCounts" />
                                <repeat name="bam_input">
                                <param name="bam_file" value="rep1.bam" ftype="bam" />
                                </repeat>
                                <repeat name="bam_input">
                                    <param name="bam_file" value="rep2.bam" ftype="bam" />
                                </repeat>
                                <param name="GRanges" value="filterWindows_regions.tabular" />
                                <param name="named" value="true" />
                                <conditional name="ext_selector">
                                    <param name="ext_select" value="integer" />
                                    <param name="ext" value="100" />
                                </conditional>
                                <conditional name="readParam_select">
                                    <param name="readParam_selector" value="no" />
                                </conditional>
                            </conditional>
                        </section>
                    </conditional>
                    <param name="type" value="local" />
                    <param name="assay_data" value="counts" />
                    <param name="assay_back" value="counts" />
                    <param name="prior_count" value="2" />
                    <conditional name="keep_select">
                        <param name="keep_selector" value="no" />
                    </conditional>
                    <conditional name="scale_info_select">
                        <param name="scale_info_selector" value="no" />
                    </conditional>
                </conditional>
            </conditional>
            <output name="filterW_abundances_output" value="filterWindows_abundances_output4.txt" />
            <output name="filterW_back_abundances_output" value="filterWindows_back_abundances_output2.txt" />
            <output name="filterW_filter_output" value="filterWindows_filter_output4.txt" />
        </test>

        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="findMaxima" />
                <param name="GRanges" value="findMax_regions.tabular" />
                <param name="range" value="10" />
                <param name="named" value="true" />
                <param name="metric" value="findMax_metric.tabular" />
                <param name="ignore_strand" value="true" />
            </conditional>
            <output name="findMaxima_output" value="findMaxima_output.txt" />
        </test>

        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="getWidths" />
                <conditional name="data_select">
                    <param name="data_selector" value="windowCounts" />
                    <repeat name="bam_input">
                      <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="" />
                    <conditional name="ext_selector">
                      <param name="ext_select" value="list" />
                      <param name="ext_list1" value="50, 100" />
                      <param name="ext_list2" value="80" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                      <param name="readParam_selector" value="no" />
                    </conditional>
                </conditional>
            </conditional>
            <output name="getWidths_output" value="getWidths_output1.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="getWidths" />
                <conditional name="data_select">
                    <param name="data_selector" value="windowCounts" />
                    <repeat name="bam_input">
                      <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                      <param name="readParam_selector" value="yes" />
                      <param name="pe" value="none" />
                      <param name="max_frag" value="500" />
                      <param name="dedup" value="false" />
                      <param name="minq" value="" />
                      <param name="forward" value="NA" />
                      <param name="restrict" value="chrA" />
                      <conditional name="discard_select">
                        <param name="discard" value="no" />
                      </conditional>
                    </conditional>
                </conditional>
            </conditional>
            <output name="getWidths_output" value="getWidths_output2.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="getWidths" />
                <conditional name="data_select">
                    <param name="data_selector" value="windowCounts" />
                    <repeat name="bam_input">
                      <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="spacing" value="50" />
                    <param name="width" value="" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <param name="shift" value="0" />
                    <param name="filter" value="1" />
                    <param name="bin" value="false" />
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="yes" />
                        <param name="pe" value="none" />
                        <param name="max_frag" value="500" />
                        <param name="dedup" value="false" />
                        <param name="minq" value="" />
                        <param name="forward" value="NA" />
                        <param name="restrict" value="chrA" />
                        <conditional name="discard_select">
                            <param name="discard" value="yes" />
                            <param name="GRanges" value="gRange_discard.tabular" />
                        </conditional>
                    </conditional>
                </conditional>
            </conditional>
            <output name="getWidths_output" value="getWidths_output3.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="getWidths" />
                <conditional name="data_select">
                    <param name="data_selector" value="regionCounts" />
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="GRanges" value="gRange_regionsCount.tabular" />
                    <param name="named" value="true" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="no" />
                    </conditional>
                </conditional>
            </conditional>
            <output name="getWidths_output" value="getWidths_output4.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="getWidths" />
                <conditional name="data_select">
                    <param name="data_selector" value="regionCounts" />
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="GRanges" value="gRange_regionsCount.tabular" />
                    <param name="named" value="true" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="list" />
                        <param name="ext_list1" value="50, 100" />
                        <param name="ext_list2" value="80" />
                    </conditional>
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="yes" />
                        <param name="pe" value="none" />
                        <param name="max_frag" value="500" />
                        <param name="dedup" value="false" />
                        <param name="minq" value="" />
                        <param name="forward" value="NA" />
                        <param name="restrict" value="chrB" />
                        <conditional name="discard_select">
                            <param name="discard" value="no" />
                        </conditional>
                    </conditional>
                </conditional>
            </conditional>
            <output name="getWidths_output" value="getWidths_output5.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="getWidths" />
                <conditional name="data_select">
                    <param name="data_selector" value="regionCounts" />
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="GRanges" value="gRange_regionsCount.tabular" />
                    <param name="named" value="true" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="list" />
                        <param name="ext_list1" value="50, 100" />
                        <param name="ext_list2" value="80" />
                    </conditional>
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="yes" />
                        <param name="pe" value="none" />
                        <param name="max_frag" value="500" />
                        <param name="dedup" value="false" />
                        <param name="minq" value="" />
                        <param name="forward" value="NA" />
                        <param name="restrict" value="chrB" />
                        <conditional name="discard_select">
                            <param name="discard" value="no" />
                            <param name="GRanges" value="gRange_discard.tabular" />
                            <param name="named" value="false" />
                        </conditional>
                    </conditional>
                </conditional>
            </conditional>
            <output name="getWidths_output" value="getWidths_output6.txt" />
        </test>

        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="scaledAverage" />
                <conditional name="data_select">
                    <param name="data_selector" value="windowCounts"/>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="width" value="50" />
                    <param name="filter" value="1" />
                </conditional>
                <param name="scale" value="4" />
                <param name="prior_count" value="5" />
                <param name="dispersion" value="1" />
                <param name="assay_id" value="counts" />
            </conditional>
            <output name="scaledAverage_output" value="scaledAverage_output1.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="scaledAverage" />
                <conditional name="data_select">
                    <param name="data_selector" value="regionCounts"/>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="GRanges" value="scaledAvg_regions.tabular" />
                    <param name="named" value="true" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="no" />
                    </conditional>
                </conditional>
                <param name="scale" value="4" />
                <param name="prior_count" value="5" />
                <param name="dispersion" value="1" />
                <param name="assay_id" value="counts" />
            </conditional>
            <output name="scaledAverage_output" value="scaledAverage_output2.txt" />
        </test>
        <test expect_num_outputs="1">
            <conditional name="method_select">
                <param name="method" value="scaledAverage" />
                <conditional name="data_select">
                    <param name="data_selector" value="regionCounts"/>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep1.bam" ftype="bam" />
                    </repeat>
                    <repeat name="bam_input">
                        <param name="bam_file" value="rep2.bam" ftype="bam" />
                    </repeat>
                    <param name="GRanges" value="scaledAvg_regions.tabular" />
                    <param name="named" value="true" />
                    <conditional name="ext_selector">
                        <param name="ext_select" value="integer" />
                        <param name="ext" value="100" />
                    </conditional>
                    <conditional name="readParam_select">
                        <param name="readParam_selector" value="yes" />
                        <param name="pe" value="none" />
                        <param name="max_frag" value="500" />
                        <param name="dedup" value="false" />
                        <param name="minq" value="" />
                        <param name="forward" value="NA" />
                        <param name="restrict" value="chrB" />
                        <conditional name="discard_select">
                            <param name="discard" value="no" />
                        </conditional>
                    </conditional>
                </conditional>
                <param name="scale" value="4" />
                <param name="prior_count" value="5" />
                <param name="dispersion" value="1" />
                <param name="assay_id" value="counts" />
            </conditional>
            <output name="scaledAverage_output" value="scaledAverage_output3.txt" />
        </test>
    </tests>
    <help><![CDATA[
Compute filter statistics for windows, based on proportions or using enrichment over background
===============================================================================================

Convenient function to compute filter statistics for windows, based on proportions or using enrichment over background.

Proportion-based filtering supposes that a certain percentage of the genome is genuinely bound. If type="proportion", the filter statistic is defined as the ratio of the rank to the total number of windows. Rank is in ascending order, i.e., higher abundance windows have higher ratios. Windows are retained that have rank ratios above a threshold, e.g., 0.99 if 1% of the genome is assumed to be bound.

All other values of type will perform background-based filtering, where abundances of the windows are compared to those of putative background regions. The filter statistic are generally defined as the difference between window and background abundances, i.e., the log-fold increase in the counts. Windows can be filtered to retain those with large filter statistics, to select those that are more likely to contain genuine binding sites. The differences between the methods center around how the background abundances are obtained for each window.

If type="global", the median average abundance across the genome is used as a global estimate of the background abundance. This should be used when background contains unfiltered counts for large (2 - 10 kbp) genomic bins, from which the background abundance can be computed. The filter statistic for each window is defined as the difference between the window abundance and the global background. If background is not supplied, the background abundance is directly computed from entries in data.

If type="local", the counts of each row in data are subtracted from those of the corresponding row in background. The average abundance of the remaining counts is computed and used as the background abundance. The filter statistic is defined by subtracting the background abundance from the corresponding window abundance for each row. This is designed to be used when background contains counts for expanded windows, to determine the local background estimate.

If type="control", the background abundance is defined as the average abundance of each row in background. The filter statistic is defined as the difference between the average abundance of each row in data and that of the corresponding row in background. This is designed to be used when background contains read counts for each window in the control sample(s). Unlike type="local", there is no subtraction of the counts in background prior to computing the average abundance.

If filterWindows is selected as the filtering method, it returns:

- `abundances`: a column containing the average abundance of each row in data
- `filter`: a column containing the filter statistic for the given type for each row
- `back.abundances`: a column containing the average abundance of each entry in background

If scaleControlFilter is selected, it returns:

- `scale`: a column containing the scaling factor for multiplying the control counts
- `data.totals`: a column containing the library sizes for data
- `back.totals`: a column containing the library sizes for background

In addition if the percentage to filter out in count data is specified, it returns:

- 'keepsum': the sum of the filtered data


Find the local maxima for a given set of genomic regions
========================================================

For each region, this method will examine all regions within range on either side. It will then determine if the current region has the maximum value of metric across this range. A typical metric to maximize might be the sum of counts or the average abundance across all libraries. 

Preferably, regions should contain regularly sized and spaced windows or bins, e.g., from windowCounts. In particular, the algorithm will not support nested regions and will fail correspondingly if any are detected. 

The method is run separately on the entries for each strand, and the results are collated into a single output. This may be useful for strand-specific applications.

It returns:

- `local maxima`: a column indicating whether each region (row) in regions is a local maxima


Compute the scaled average abundance for each feature
=====================================================

This method computes the average abundance of each feature in the SummarizedExperiment object containing a count matrix, and downscales it according to scale. The aim is to set scale based on the relative width of regions, to allow abundances to be compared between regions of different size.

This function mimics the behaviour of aveLogCPM but handles the prior.count with some subtlety. Specifically, it scales up the prior count by scale before adding it to the counts. This ensures that the “effective” prior is the same after the abundance is scaled down. Otherwise, the use of the same prior would incorrectly result in a smaller abundance for larger regions, regardless of the read density.

An additional difference from aveLogCPM is that the prior count is not scaled up before being added to the library sizes/offsets. (See addPriorCount for more details.) This ensures that the modified offsets do not depend on scale, which allows abundances to be compared between regions of differing size. Otherwise, larger regions with greater scale would always have (slightly) larger modified offsets and lower abundances than appropriate.

Note that the adjustment for width assumes that reads are uniformly distributed throughout each region. This is reasonable for most background regions, but may not be for enriched regions. When the distribution is highly heterogeneous, the downscaled abundance of a large region will not be an accurate representation of the abundance of the smaller regions nested within.

It returns:

- `scaled abundances`: a column of scaled abundances, with one entry for each row of y
    ]]></help>
    <expand macro="citations" />
</tool>