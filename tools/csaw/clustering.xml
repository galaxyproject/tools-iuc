<tool id="csaw_clustering" name="clustering" version="@VERSION@.0">
    <description>clusters data</description>
    <macros>
       <import>csaw_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

#if str($method_select.method) == "clusterWindows"
    @GRANGES_METHOD@

    tab <- read.table("$method_select.tab")
    clust_target <- as.numeric("$method_select.target")

    @COLNAMES_METHOD@
    tol <- as.numeric("$method_select.tol")
    grid_length <- as.numeric("$method_select.grid_length")
    iterations <- as.numeric("$method_select.iterations")

    #if str($method_select.weight_select.weight_selector) == "yes"
        weight <- scan("$method_select.weight_select.weight", what=numeric())
    #else
        weight <- NULL
    #end if

    #if str($method_select.mergeWindows_select.mergeWindows_selector) == "yes"
        #if str($method_select.mergeWindows_select.sign_select.sign_selector) == "yes"
            sign <- scan("$method_select.mergeWindows_select.sign_select.sign", what=logical())
        #else 
            sign <- NULL
        #end if

        #if str($method_select.mergeWindows_select.max_width) != ""
            max_width <- as.numeric("$method_select.mergeWindows_select.max_width")
        #else
            max_width <- NULL
        #end if

        #if str($method_select.mergeWindows_select.ignore_strand) == "yes"
            ignore_strand <- TRUE
        #else
            ignore_strand <- FALSE
        #end if

        result <- clusterWindows(regions, tab, clust_target, pval.col=pval_col, fc.col=fc_col, tol, max.width=max_width, ignore.strand=ignore_strand, weight=weight, grid.length=grid_length, iterations=iterations)
    #else
        result <- clusterWindows(regions, tab, clust_target, pval.col=pval_col, fc.col=fc_col, tol, weight=weight, grid.length=grid_length, iterations=iterations)
    #end if
        
    write.table(result[[1]], file="$clusterW_id_output", quote=FALSE, row.names=FALSE, col.names=FALSE)
    write.table(result[[2]], file="$clusterW_region_output", quote=FALSE, row.names=FALSE, col.names=FALSE)
    write.table(result[[3]], file="$clusterW_fdr_output", quote=FALSE, row.names=FALSE, col.names=FALSE)
#else if str($method_select.method) == "consolidateClusters"
    ## DATALIST
    gRangeList <- list()
    #for $i in $method_select.gRange_obj
        gRangeList <- append(gRangeList, list(read.table("${i.GRanges}")))
    #end for
    dataList <- c()
    for (i in seq(gRangeList)){
        dataList <- c(dataList, GRanges(gRangeList[[i]][[1]], IRanges(gRangeList[[i]][[2]], gRangeList[[i]][[3]])))
    }

    ## RESULTLIST
    resultList <- list()
    #for $i in $method_select.db
        resultList <- append(resultList, list(read.table("${i.result_list}", header=T)))
    #end for

    #if str($method_select.equiweight) == 'true'
        equiweight <- TRUE
    #else
        equiweight <- FALSE
    #end if

    #if str($method_select.clusterWindows_select.clusterWindows_selector) == "yes"
        target <- as.numeric("$method_select.clusterWindows_select.target")

        #if str($method_select.clusterWindows_select.pval_col) != ''
            pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$method_select.clusterWindows_select.pval_col"))
            if (is.na(pval_col)){
                pval_col <- "$method_select.clusterWindows_select.pval_col"
            }
        #else
            pval_col <- NULL
        #end if
        #if str($method_select.clusterWindows_select.fc_col) != ''
            fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "$method_select.clusterWindows_select.fc_col"))
            if (is.na(fc_col)){
                fc_col <- "$method_select.clusterWindows_select.fc_col"
            }
        #else
            fc_col <- NA
        #end if

        tol <- as.numeric("$method_select.clusterWindows_select.tol")
        grid_length <- as.numeric("$method_select.clusterWindows_select.grid_length")
        iterations <- as.numeric("$method_select.clusterWindows_select.iterations")

        #if str($method_select.clusterWindows_select.weight_select.weight_selector) == "yes"
            weight <- scan("$method_select.clusterWindows_select.weight_select.weight", what=numeric())
        #else
            weight <- NULL
        #end if

        #if str($method_select.clusterWindows_select.mergeWindows_select.mergeWindows_selector) == "yes"

            #if str($method_select.clusterWindows_select.mergeWindows_select.sign_select.sign_selector) == "yes"
                sign <- scan("$method_select.clusterWindows_select.mergeWindows_select.sign_select.sign", what=logical())
            #else 
                sign <- NULL
            #end if
            
            #if str($method_select.clusterWindows_select.mergeWindows_select.max_width) != ""
                max_width <- as.numeric("$method_select.clusterWindows_select.mergeWindows_select.max_width")
            #else
                max_width <- NULL
            #end if

            #if str($method_select.clusterWindows_select.mergeWindows_select.ignore_strand) == "yes"
                ignore_strand <- TRUE
            #else
                ignore_strand <- FALSE
            #end if

            result <- consolidateClusters(dataList, resultList, equiweight=equiweight, target=target, pval.col=pval_col, fc.col=fc_col, tol=tol,  max.width=max_width, ignore.strand=ignore_strand, grid.length=grid_length, iterations=iterations)
        #else
            result <- consolidateClusters(dataList, resultList, equiweight=equiweight, target=target, pval.col=pval_col, fc.col=fc_col, tol=tol, grid.length=grid_length, iterations=iterations)
        #end if
    #else
        result <- consolidateClusters(dataList, resultList, equiweight=equiweight)
    #end if

    ids <- result[[1]]
    lapply(ids, cat, "\n", file="$consolidateC_id_output", append=TRUE)
    region <- result[[2]]
    write.table(region, file="$consolidateC_region_output", quote = FALSE, row.names = FALSE, col.names = TRUE)
    f <- list(result[[3]])
    write.table(do.call(rbind, f), file="$consolidateC_fdr_output", quote = FALSE, row.names = c("FDR "), col.names = FALSE)
#else str($method_select.method) == "consolidateWindows"
    @WINDOWSCOUNTS_REPEAT@

    ## parameters for consolidateWindows
    #if str($method_select.consolidateWindows.equiweight) == 'true'
        equiweight <- TRUE
    #else
        equiweight <- FALSE
    #end if

    #if str($method_select.consolidateWindows.mergeWindows_select.mergeWindows_selector) == 'yes'
        tol <- "$method_select.consolidateWindows.mergeWindows_select.tol"

            #if str($method_select.consolidateWindows.mergeWindows_select.sign_select.sign_selector) == "yes"
                sign <- scan("$method_select.consolidateWindows.mergeWindows_select.sign_select.sign", what=logical())
            #else 
                sign <- NULL
            #end if

        #if str($method_select.consolidateWindows.mergeWindows_select.max_width) != ''
            maxWidth <- as.numeric("$method_select.consolidateWindows.mergeWindows_select.max_width")
        #else
            maxWidth <- NULL
        #end if
        #if str($method_select.consolidateWindows.mergeWindows_select.ignore_strand) == 'true'
            ignore_strand <- T
        #else
            ignore_strand <- F
        #end if

        merge_args = list(tol=tol, sign=NULL, max.width=maxWidth, ignore.strand=ignore_strand)
    #else
        merge_args=list()
    #end if

    #if str($method_select.consolidateWindows.region_select.region_selector) == 'yes'
        data <- read.table("$method_select.consolidateWindows.region_select.GRanges", header=F)
        gRange <- data[[1]]
        start <- data[[2]]
        end <- data[[3]]
        regions <- GRanges(gRange, IRanges(start, end))
        overlap <- list()
    #else
        regions <-NULL

        #if str($method_select.consolidateWindows.region_select.findOverlaps_select.findOverlaps_selector) == "yes"
            ##queryData <- read.table("$method_select.consolidateWindows.findOverlaps_select.query", header=F)
            ##start <- c(queryData[[1]])
            ##end <- c(queryData[[2]])
            ##query <- IRanges(start, end)

            ##subjectData <- read.table("$method_select.consolidateWindows.region_select.findOverlaps_select.subject", header=F)
            ##start <- c(subjectData[[1]])
            ##end <- c(subjectData[[2]])
            ##subject <- IRanges(start, end)

            maxgap <- as.numeric("$method_select.consolidateWindows.region_select.findOverlaps_select.maxgap")
            minoverlap <- as.numeric("$method_select.consolidateWindows.region_select.findOverlaps_select.minoverlap")
            type <- as.character("$method_select.consolidateWindows.region_select.findOverlaps_select.type")
            select <- as.character("$method_select.consolidateWindows.region_select.findOverlaps_select.select")

            overlap <- list(maxgap=maxgap, minoverlap=minoverlap, type=type, select=select)
        #else
            overlap <- list()
        #end if
    #end if

    #if str($method_select.consolidateWindows.sign_list_select.sign_list_selector) == "yes"
        allLines <- readLines(con = "$method_select.consolidateWindows.sign_list_select.sign_list")
        tokenize <- strsplit(allLines, split = ' ')
        sign_list <- lapply(tokenize, FUN = function(x) {as.integer(unlist(x))} )
    #else
        sign_list <- NULL
    #end if

    result <- consolidateWindows(dataList, equiweight=equiweight, merge.args=merge_args, regions, overlap.args=overlap, sign.list=sign_list)

    #if str($method_select.consolidateWindows.region_select.region_selector) == 'no'
        unlisted_ids <- unlist(lapply(result[[1]], function(x) { paste(x, collapse = " ") }), use.names = TRUE)
        write.table(unlisted_ids, file = "$consolidateW_id_output", quote = FALSE, sep = "\n", col.names = FALSE, row.names=FALSE)

        unlisted_weights <- unlist(lapply(result[[2]], function(x) { paste(x, collapse = " ") }), use.names = TRUE)
        write.table(unlisted_weights, file = "$consolidateW_weight_output", quote = FALSE, sep = "\n", col.names = FALSE, row.names=FALSE)

        write.table(result[[3]], "$consolidateW_region_output", row.names=FALSE, quote = FALSE)
    #else
        for (i in result[[1]]) {
            write.table(i, "$consolidateW_olap_output", quote = FALSE, append = TRUE, sep = " ", row.names = FALSE, col.names = TRUE)
        }
        unlisted_weights <- unlist(lapply(result[[2]], function(x) { paste(x, collapse = " ") }), use.names = TRUE)
        write.table(unlisted_weights, file = "$consolidateW_weight_output", quote = FALSE, sep = "\n", col.names = FALSE, row.names=FALSE)
    #end if

    ## consolidateTests Parameters

    #if str($method_select.consolidateTests.conTest_select.conTest_selector) == "yes"
        resultList <- list()
        #for $i in $method_select.consolidateTests.conTest_select.db
            resultList <- append(resultList, list(read.table("${i.result_list}", header=T)))
        #end for

        reindex <- "$method_select.consolidateTests.conTest_select.reindex"

        #if str($method_select.consolidateWindows.region_select.region_selector) == 'no'
            idList <- result[[1]]
            weightList <- result[[2]] 

            #if str($method_select.consolidateTests.conTest_select.getBest) == "true"
                conTestResult <- consolidateTests(idList, resultList, weightList, FUN=getBestTest, reindex=reindex)
            #else
                conTestResult <- consolidateTests(idList, resultList, weightList, FUN=combineTests, reindex=reindex)
            #end if

        #else if str($method_select.consolidateWindows.region_select.region_selector) == 'yes'
            olapList <- result[[1]]
            weightList <- result[[2]]

            #if str($method_select.consolidateTests.conTest_select.getBest) == "true"
                conTestResult <- consolidateOverlaps(olapList, resultList, weightList, FUN=getBestOverlaps, reindex=reindex)
            #else
                conTestResult <- consolidateOverlaps(olapList, resultList, weightList, FUN=combineOverlaps, reindex=reindex)
            #end if
        #end if 

        write.table(conTestResult, file = "$conTest_output", quote = FALSE, col.names = TRUE, row.names=FALSE)
    #end if
#else
    @GRANGES_METHOD@
    tol <- as.numeric("$method_select.tol")

    #if str($method_select.max_width) != ''
        maxWidth <- as.numeric("$method_select.max_width")
    #else
        maxWidth <- NULL
    #end if

    #if str($method_select.ignore_strand) == 'true'
        ignore_strand <- T
    #else
        ignore_strand <- F
    #end if
        
    result <- mergeWindows(regions, tol, sign=NULL, max.width=maxWidth, ignore.strand=ignore_strand)
    ids = result[[1]]
    write.table(ids, file="$mergeWindows_id_output", row.names=FALSE, col.names=FALSE)
    region <- result[[2]]
    write.table(region, file="$mergeWindows_region_output", quote = FALSE, row.names = FALSE)
#end if
]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="method_select">
            <param name="method" type="select" label="Method" >
                <option value="clusterWindows">Clusters significant windows into clusters while controlling the cluster-level FDR</option>
                <option value="consolidateClusters">Consolidate DB results from multiple analyses with cluster-level FDR control</option>
                <option value="consolidateWindows">Combines p-values across clustered tests using Simes’ method to control the cluster FDR</option>
                <option value="mergeWindows">Uses a simple single-linkage approach to merge adjacent or overlapping windows into clusters</option>
            </param>
            <when value="clusterWindows">
                <expand macro="gRanges" />
                <param name="tab" type="data" format="tabular" label="Dataframe of results with a PValue field for each window" />
                <param name="target" type="float" value="" label="Desired cluster-level FDR" />
                <expand macro="col_names" />
                <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
                <conditional name="weight_select">
                    <param name="weight_selector" type="select" label="Specify frequency weights?" help="The specification is assumed to contain frequency weights of significant tests/windows. For example, a weight of 2 for a test would be equivalent to repeating that test (i.e., repeating the same window so it shows up twice in your analysis). These weights should be the same as those used during weighted FDR control to compute adjusted p-values. In general, you should not set this argument unless you know what you’re doing.">
                        <option value="yes">Yes</option>
                        <option value="no" selected="true">No</option>
                    </param>
                    <when value="yes">
                        <param name="weight" type="data" format="tabular" label="Frequency weights" help="A dataframe of a column of weights" />
                    </when>
                    <when value="no"> </when>
                </conditional>
                <expand macro="mergeWindows_select" />
                <param name="grid_length" type="integer" value="21" label="Specify the number of points to use in the grid search" />
                <param name="iterations" type="integer" value="4" label="Specify the number of iterations of the grid search" />
            </when>
            <when value="consolidateClusters">
                <repeat name="gRange_obj" title="Enter GRanges objects">
                  <expand macro="gRanges" />
                </repeat>
                <repeat name="db" title="Upload dataframes containing the DB test results for each entry of data">
                  <param name="result_list" type="data" format="tabular" label="DB test results" />
                </repeat>
                <param name="equiweight" type="boolean" truevalue="true" falsevalue="" checked="true" label="Enforce equal weighting from each analysis?" help="Some effort is required to equalize the contribution of the results from each analysis. This is done by setting selecting yes, where the weight of each window is inversely proportional to the number of windows from that analysis." />
                <conditional name="clusterWindows_select">
                    <param name="clusterWindows_selector" type="select" label="Specify clusterWindows parameters?" >
                        <option value="yes">Yes</option>
                        <option value="no" selected="true">No</option>
                    </param>
                    <when value="yes">
                        <param name="target" type="float" value="" label="Desired cluster-level FDR" />
                        <expand macro="col_names" />
                        <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
                        <expand macro="mergeWindows_select" />
                        <conditional name="weight_select">
                            <param name="weight_selector" type="select" label="Specify frequency weights?" help="The specification is assumed to contain frequency weights of significant tests/windows. For example, a weight of 2 for a test would be equivalent to repeating that test (i.e., repeating the same window so it shows up twice in your analysis). These weights should be the same as those used during weighted FDR control to compute adjusted p-values. In general, you should not set this argument unless you know what you’re doing.">
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">
                                <param name="weight" type="data" format="tabular" label="Frequency weights" help="A dataframe of a column of weights" />
                            </when>
                            <when value="no"> </when>
                        </conditional>
                        <param name="grid_length" type="integer" value="21" label="Specify the number of points to use in the grid search" />
                        <param name="iterations" type="integer" value="4" label="Specify the number of iterations of the grid search" />
                    </when>
                    <when value="no"> </when>
                </conditional>
            </when>
            <when value="consolidateWindows">
                <section name="windowCounts" title="Count reads overlapping each window" expanded="true">
                    <repeat name="data" title="RangedSummarizedExperiment">
                        <expand macro="windowCounts" />
                    </repeat>
                </section>
                <section name="consolidateWindows" title="Consolidate window sizes" expanded="true">
                    <param name="equiweight" type="boolean" truevalue="true" falsevalue="" checked="true" label="Enforce equal weighting from each analysis?" help="Some effort is required to equalize the contribution of the results from each analysis. This is done by setting selecting yes, where the weight of each window is inversely proportional to the number of windows from that analysis." />
                    <conditional name="mergeWindows_select" >
                        <param name="mergeWindows_selector" type="select" label="Additional parameters to pass to mergeWindows?" >
                            <option value="yes">Yes</option>
                            <option value="no" selected="true">No</option>
                        </param>
                        <when value="yes">
                            <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows"/>
                            <conditional name="sign_select">
                                <param name="sign_selector" type="select" label="Specify a positive log-FC for each window?" >
                                    <option value="yes">Yes</option>
                                    <option value="no" selected="true">No</option>
                                </param>
                                <when value="yes">
                                    <param name="sign" type="data" format="tabular" label="Positive log-FC for each window" help="Upload as datafame with a column of logical values" />
                                </when>
                                <when value="no"> </when>
                            </conditional>
                            <param name="max_width" type="float" value="" optional="true" label="Maximum size of merged intervals" help="Specification prevents the formation of excessively large clusters when many adjacent regions are present. Any cluster that is wider than the max width is split into multiple subclusters of (roughly) equal size. Specifically, the cluster interval is partitioned into the smallest number of equally-sized subintervals where each subinterval is smaller than max width. Windows are then assigned to each subinterval based on the location of the window midpoints. Suggested values range from 2000 to 10000 bp, but no limits are placed on the maximum size if no value entered." />
                            <param name="ignore_strand" type="boolean" truevalue="true" falsevalue="" checked="true" label="Ignore the strandedness of regions?" help="If no is selected, the entries in regions are split into their separate strands." />
                        </when>
                        <when value="no"> </when>
                    </conditional>
                    <conditional name="region_select">
                        <param name="region_selector" type="select" label="Specify regions of interest for overlapping with windows?">
                            <option value="yes">Yes</option>
                            <option value="no" selected="true">No</option>
                        </param>
                        <when value="yes">
                            <expand macro="gRanges" />
                        </when>
                        <when value="no"> 
                            <conditional name="findOverlaps_select">
                                <param name="findOverlaps_selector" type="select" label="Pass additional parameters to findOverlaps?" >
                                    <option value="yes">Yes</option>
                                    <option value="no" selected="true">No</option>
                                </param>
                                <when value="yes">
                                    <expand macro="findOverlaps" />
                                </when>
                                <when value="no"> </when>
                            </conditional>
                        </when>
                    </conditional>
                    <conditional name="sign_list_select">
                        <param name="sign_list_selector" type="select" label="Specify whether the log-fold change is positive for the corresponding windows?">
                            <option value="yes">Yes</option>
                            <option value="no" selected="true">No</option>
                        </param>
                        <when value="yes">
                            <param name="sign_list" type="data" format="tabular" label="A dataframe with rows of logical values specifying whether the log-fold change is positive for the corresponding window" help="The values in the rowscorresponds to and is of the same length as the GRanges objects." />
                        </when>
                        <when value="no"> </when>
                    </conditional>
                </section>
                <section name="consolidateTests" title="Consolidate window statistics" expanded="true">
                    <conditional name="conTest_select">
                        <param name="conTest_selector" type="select" label="Consolidate DB statistics from analyses using multiple window sizes?" >
                            <option value="yes">Yes</option>
                            <option value="no" selected="true">No</option>
                        </param>
                        <when value="yes">
                            <repeat name="db" title="Upload dataframes containing the DB test results for each analysis.">
                                <param name="result_list" type="data" format="tabular" label="DB test results" />
                            </repeat>
                            <param name="getBest" type="boolean" truevalue="true" falsevalue="" checked="false" label="Obtain the best windows in each cluster/region?" />
                            <param name="reindex" type="text" value="best" label="Indicate which fields of the DataFrame returned should be reindexed." />
                        </when>
                        <when value="no"> </when>
                    </conditional>
                </section>
            </when>
            <when value="mergeWindows">
                <expand macro="gRanges" />
                <param name="tol" type="float" value="" optional="true" label="Maximum distance between adjacent windows" help="A value of zero means that the windows must be contiguous whereas negative values specify minimum overlaps" />
                <conditional name="sign_select">
                    <param name="sign_selector" type="select" label="Specify a positive log-FC for each window?" >
                      <option value="yes">Yes</option>
                      <option value="no" selected="true">No</option>
                    </param>
                    <when value="yes">
                      <param name="sign" type="data" format="tabular" label="Positive log-FC for each window" help="Upload as datafame with a column of logical values" />
                    </when>
                    <when value="no"> </when>
                </conditional>
                <param name="max_width" type="float" value="" optional="true" label="Maximum size of merged intervals" help="Specification prevents the formation of excessively large clusters when many adjacent regions are present. Any cluster that is wider than the max width is split into multiple subclusters of (roughly) equal size. Specifically, the cluster interval is partitioned into the smallest number of equally-sized subintervals where each subinterval is smaller than max width. Windows are then assigned to each subinterval based on the location of the window midpoints. Suggested values range from 2000 to 10000 bp, but no limits are placed on the maximum size if no value entered." />
                <param name="ignore_strand" type="boolean" truevalue="true" falsevalue="" checked="true" label="Ignore the strandedness of regions?" help="If no is selected, the entries in regions are split into their separate strands." />
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="clusterW_id_output" format="txt" label="clusterWindows on ${on_string}: id output" >
            <filter>method_select['method'] == 'clusterWindows'</filter>
        </data>
        <data name="clusterW_region_output" format="txt" label="clusterWindows on ${on_string}: region output" >
            <filter>method_select['method'] == 'clusterWindows'</filter>
        </data>
        <data name="clusterW_fdr_output" format="txt" label="clusterWindows on ${on_string}: FDR output" >
            <filter>method_select['method'] == 'clusterWindows'</filter>
        </data>
        <data name="consolidateC_id_output" format="txt" label="consolidateClusters on ${on_string}: id output">
             <filter>method_select['method'] == 'consolidateClusters'</filter>
        </data>
        <data name="consolidateC_region_output" format="txt" label="consolidateClusters on ${on_string}: region output">
             <filter>method_select['method'] == 'consolidateClusters'</filter>
        </data>
        <data name="consolidateC_fdr_output" format="txt" label="consolidateClusters on ${on_string}: FDR output">
             <filter>method_select['method'] == 'consolidateClusters'</filter>
        </data>
        <data name="consolidateW_id_output" format="txt" label="consolidateWindows on ${on_string}: ids output">
            <filter>method_select['method'] == 'consolidateWindows' and method_select['consolidateWindows']['region_select']['region_selector'] == 'no'</filter>
        </data>
        <data name="consolidateW_weight_output" format="txt" label="consolidateWindows on ${on_string}: weights output" >
            <filter>method_select['method'] == 'consolidateWindows'</filter>
        </data>
        <data name="consolidateW_region_output" format="txt" label="consolidateWindows on ${on_string}: regions output">
            <filter>method_select['method'] == 'consolidateWindows' and method_select['consolidateWindows']['region_select']['region_selector'] == 'no'</filter>
        </data>
        <data name="consolidateW_olap_output" format="txt" label="consolidateWindows on ${on_string}: overlaps output">
            <filter>method_select['method'] == 'consolidateWindows' and method_select['consolidateWindows']['region_select']['region_selector'] == 'yes'</filter>
        </data>
        <data name="conTest_output" format="txt" label="consolidateTests on ${on_string}: output">
            <filter>method_select['method'] == 'consolidateWindows' and method_select['consolidateTests']['conTest_select']['conTest_selector'] == 'yes'</filter>
        </data>
        <data name="mergeWindows_id_output" format="txt" label="mergeWindows on ${on_string}: id output" >
            <filter>method_select['method'] == 'mergeWindows'</filter>
        </data>
        <data name="mergeWindows_region_output" format="txt" label="mergeWindows on ${on_string}: region output" >
            <filter>method_select['method'] == 'mergeWindows'</filter>
        </data>
    </outputs>

    <tests>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="clusterWindows" />
                <param name="GRanges" value="gRange_region3.tabular" />
                <param name="named" value="false" />
                <param name="tab" value="tab.tabular" />
                <param name="target" value="0.05" />
                <param name="pval_col" value="PValue" />
                <param name="fc_col" value="logFC" />
                <param name="tol" value="10" />
                <conditional name="weight_select">
                    <param name="weight_selector" value="yes" />
                    <param name="weight" value="emFDR_w.tabular" />
                </conditional>
                <conditional name="mergeWindows_select" >
                    <param name="mergeWindows_selector" value="no" />
                </conditional>
                <param name="grid_length" value="21" />
                <param name="iterations" value="4" />
            </conditional>
            <output name="clusterW_id_output" file="clusterWindows_id_output0.txt"/>
            <output name="clusterW_region_output" file="clusterWindows_region_output0.txt"/>
            <output name="clusterW_fdr_output" file="clusterWindows_FDR_output0.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="clusterWindows" />
                <param name="GRanges" value="gRange_region3.tabular" />
                <param name="named" value="false" />
                <param name="tab" value="tab.tabular" />
                <param name="target" value="0.05" />
                <param name="pval_col" value="PValue" />
                <param name="fc_col" value="logFC" />
                <param name="tol" value="10" />
                <conditional name="weight_select">
                    <param name="weight_selector" value="no" />
                </conditional>
                <conditional name="mergeWindows_select" >
                    <param name="mergeWindows_selector" value="no" />
                </conditional>
                <param name="grid_length" value="21" />
                <param name="iterations" value="4" />
            </conditional>
            <output name="clusterW_id_output" file="clusterWindows_id_output1.txt"/>
            <output name="clusterW_region_output" file="clusterWindows_region_output1.txt"/>
            <output name="clusterW_fdr_output" file="clusterWindows_FDR_output1.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="clusterWindows" />
                <param name="GRanges" value="gRange_region3.tabular" />
                <param name="tab" value="tab.tabular" />
                <param name="target" value="0.05" />
                <param name="pval_col" value="PValue" />
                <param name="fc_col" value="logFC" />
                <param name="tol" value="10" />
                <conditional name="weight_select">
                    <param name="weight_selector" value="no" />
                </conditional>
                <conditional name="mergeWindows_select" >
                    <param name="mergeWindows_selector" value="yes" />
                    <conditional name="sign_select">
                        <param name="sign_selector" value="no" />
                    </conditional>
                    <param name="max_width" value="10" />
                    <param name="ignore_strand" value="true" />
                </conditional>
                <param name="grid_length" value="21" />
                <param name="iterations" value="4" />
            </conditional>
            <output name="clusterW_id_output" file="clusterWindows_id_output2.txt"/>
            <output name="clusterW_region_output" file="clusterWindows_region_output2.txt"/>
            <output name="clusterW_fdr_output" file="clusterWindows_FDR_output2.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="clusterWindows" />
                <param name="GRanges" value="gRange_region3.tabular" />
                <param name="tab" value="tab.tabular" />
                <param name="target" value="0.05" />
                <param name="pval_col" value="PValue" />
                <param name="fc_col" value="logFC" />
                <param name="tol" value="10" />
                <conditional name="weight_select">
                    <param name="weight_selector" value="no" />
                </conditional>
                <conditional name="mergeWindows_select" >
                    <param name="mergeWindows_selector" value="yes" />
                    <conditional name="sign_select">
                        <param name="sign_selector" value="yes" />
                        <param name="sign" value="mergeW_sign.tabular" />
                    </conditional>
                    <param name="max_width" value="10" />
                    <param name="ignore_strand" value="true" />
                </conditional>
                <param name="grid_length" value="21" />
                <param name="iterations" value="4" />
            </conditional>
            <output name="clusterW_id_output" file="clusterWindows_id_output3.txt"/>
            <output name="clusterW_region_output" file="clusterWindows_region_output3.txt"/>
            <output name="clusterW_fdr_output" file="clusterWindows_FDR_output3.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateClusters" />
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus1.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus2.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus3.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db1.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db2.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db3.tabular" />
                </repeat>
                <param name="equiweight" value="true" />
                <conditional name="clusterWindows_select">
                    <param name="clusterWindows_selector" value="no" />
                </conditional>
            </conditional>
            <output name="consolidateC_id_output" file="consolidateClusters_id_output1.txt"/>
            <output name="consolidateC_region_output" file="consolidateClusters_region_output1.txt"/>
            <output name="consolidateC_fdr_output" file="consolidateClusters_FDR_output1.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateClusters" />
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus1.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus2.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus3.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db1.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db2.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db3.tabular" />
                </repeat>
                <param name="equiweight" value="true" />
                <conditional name="clusterWindows_select">
                    <param name="clusterWindows_selector" value="yes" />
                    <param name="target" value="0.05" />
                    <param name="pval_col" value="PValue" />
                    <param name="fc_col" value="logFC" />
                    <param name="tol" value="20" />
                    <conditional name="mergeWindows_select" >
                        <param name="mergeWindows_selector" value="no" />
                    </conditional>
                    <param name="grid_length" value="21" />
                    <param name="iterations" value="4" />
                </conditional>
            </conditional>
            <output name="consolidateC_id_output" file="consolidateClusters_id_output2.txt"/>
            <output name="consolidateC_region_output" file="consolidateClusters_region_output2.txt"/>
            <output name="consolidateC_fdr_output" file="consolidateClusters_FDR_output2.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateClusters" />
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus1.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus2.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus3.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db1.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db2.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db3.tabular" />
                </repeat>
                <param name="equiweight" value="true" />
                <conditional name="clusterWindows_select">
                    <param name="clusterWindows_selector" value="yes" />
                    <param name="target" value="0.05" />
                    <param name="pval_col" value="PValue" />
                    <param name="fc_col" value="PValue" />
                    <param name="tol" value="20" />
                    <conditional name="mergeWindows_select" >
                        <param name="mergeWindows_selector" value="yes" />
                        <conditional name="sign_select">
                            <param name="sign_selector" value="no" />
                        </conditional>
                        <param name="max_width" value="10" />
                        <param name="ignore_strand" value="false" />
                    </conditional>
                    <conditional name="weight_select">
                        <param name="weight_selector" value="no" />
                    </conditional>
                    <param name="grid_length" value="21" />
                    <param name="iterations" value="4" />
                </conditional>
            </conditional>
            <output name="consolidateC_id_output" file="consolidateClusters_id_output3.txt"/>
            <output name="consolidateC_region_output" file="consolidateClusters_region_output3.txt"/>
            <output name="consolidateC_fdr_output" file="consolidateClusters_FDR_output3.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateClusters" />
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus1.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus2.tabular" />
                </repeat>
                <repeat name="gRange_obj">
                    <param name="GRanges" value="gRange_conclus3.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db1.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db2.tabular" />
                </repeat>
                <repeat name="db">
                    <param name="result_list" value="db3.tabular" />
                </repeat>
                <param name="equiweight" value="true" />
                <conditional name="clusterWindows_select">
                    <param name="clusterWindows_selector" value="yes" />
                    <param name="target" value="0.05" />
                    <param name="pval_col" value="" />
                    <param name="fc_col" value="" />
                    <param name="tol" value="20" />
                    <conditional name="mergeWindows_select" >
                        <param name="mergeWindows_selector" value="yes" />
                        <conditional name="sign_select">
                            <param name="sign_selector" value="yes" />
                            <param name="sign" value="mergeW_sign.tabular" />
                        </conditional>
                        <param name="max_width" value="10" />
                        <param name="ignore_strand" value="false" />
                    </conditional>
                    <conditional name="weight_select">
                        <param name="weight_selector" value="yes" />
                        <param name="weight" value="emFDR_w.tabular" />
                    </conditional>
                    <param name="grid_length" value="21" />
                    <param name="iterations" value="4" />
                </conditional>
            </conditional>
            <output name="consolidateC_id_output" file="consolidateClusters_id_output4.txt"/>
            <output name="consolidateC_region_output" file="consolidateClusters_region_output4.txt"/>
            <output name="consolidateC_fdr_output" file="consolidateClusters_FDR_output4.txt"/>
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateWindows" />
                <section name="windowCounts">
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="1" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="10" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="yes" />
                            <param name="pe" value="none" />
                            <param name="max_frag" value="500" />
                            <param name="dedup" value="false" />
                            <param name="minq" value="1" />
                            <param name="forward" value="NA" />
                            <param name="restrict" value="chrA" />
                            <conditional name="discard_select">
                                <param name="discard" value="no" />
                            </conditional>
                        </conditional>
                    </repeat>
                   <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="100" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="10" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="yes" />
                            <param name="pe" value="none" />
                            <param name="max_frag" value="500" />
                            <param name="dedup" value="false" />
                            <param name="minq" value="1" />
                            <param name="forward" value="NA" />
                            <param name="restrict" value="chrA" />
                            <conditional name="discard_select">
                                <param name="discard" value="yes" />
                                <param name="GRanges" value="gRange_discard.tabular" />
                            </conditional>
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="100" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="list" />
                            <param name="ext_list1" value="50, 100" />
                            <param name="ext_list2" value="80" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="10" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                </section>
                <section name="consolidateWindows">
                    <param name="equiweight" value="true" />
                    <conditional name="mergeWindows_select">
                        <param name="mergeWindows_selector" value="no" />
                    </conditional>
                    <conditional name="region_select">
                        <param name="region_selector" value="no" />
                        <conditional name="findOverlaps_select">
                            <param name="findOverlaps_selector" value="no" />
                        </conditional>
                    </conditional>
                    <conditional name="sign_list_select">
                        <param name="sign_list_selector" value="no" />
                    </conditional>
                </section>
                <section name="consolidateTests">
                    <conditional name="conTest_select">
                        <param name="conTest_selector" value="no" />
                    </conditional>
                </section>
            </conditional>
            <output name="consolidateW_id_output" value="consolidateWindows_id_output1.txt" />
            <output name="consolidateW_weight_output" value="consolidateWindows_weight_output1.txt" />
            <output name="consolidateW_region_output" value="consolidateWindows_regions_output1.txt" />
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateWindows" />
                <section name="windowCounts">
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="1" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="100" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="500" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                </section>
                <section name="consolidateWindows">
                    <param name="equiweight" value="true" />
                    <conditional name="mergeWindows_select">
                        <param name="mergeWindows_selector" value="yes" />
                        <param name="tol" value="100" />
                            <conditional name="sign_select">
                                <param name="sign_selector" value="no" />
                            </conditional>
                            <param name="max_width" value="300" />
                            <param name="ignore_strand" value="true" />
                    </conditional>
                    <conditional name="region_select">
                        <param name="region_selector" value="yes" />
                        <param name="GRanges" value="gRange_conW.tabular" />
                    </conditional>
                    <conditional name="sign_list_select">
                        <param name="sign_list_selector" value="no" />
                    </conditional>
                </section>
                <section name="consolidateTests">
                    <conditional name="conTest_select">
                        <param name="conTest_selector" value="yes" />
                        <repeat name="db">
                            <param name="result_list" value="conTest_db1.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db2.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db3.tabular" />
                        </repeat>
                        <param name="reindex" value="best" />
                    </conditional>
                </section>
            </conditional>
            <output name="consolidateW_olap_output" value="consolidateWindows_olap_output1.txt" />
            <output name="consolidateW_weight_output" value="consolidateWindows_weight_output2.txt" />
            <output name="conTest_output" value="consolidateTests_output2.txt" />
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateWindows" />
                <section name="windowCounts">
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="1" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="100" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="500" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                </section>
                <section name="consolidateWindows">
                    <param name="equiweight" value="true" />
                    <conditional name="mergeWindows_select">
                        <param name="mergeWindows_selector" value="yes" />
                        <param name="tol" value="100" />
                            <conditional name="sign_select">
                                <param name="sign_selector" value="no" />
                            </conditional>
                            <param name="max_width" value="1000" />
                            <param name="ignore_strand" value="true" />
                    </conditional>
                    <conditional name="region_select">
                        <param name="region_selector" value="no" />
                        <conditional name="findOverlaps_select">
                            <param name="findOverlaps_selector" value="yes" />
                            <param name="maxgap" value="-1" />
                            <param name="minoverlap" value="0" />
                            <param name="type" value="any" />
                            <param name="select" value="all" />
                        </conditional>
                    </conditional>
                    <conditional name="sign_list_select">
                        <param name="sign_list_selector" value="no" />
                    </conditional>
                </section>
            </conditional>
            <output name="consolidateW_id_output" value="consolidateWindows_id_output2.txt" />
            <output name="consolidateW_weight_output" value="consolidateWindows_weight_output3.txt" />
            <output name="consolidateW_region_output" value="consolidateWindows_regions_output2.txt" />
        </test>
        <test expect_num_outputs="4">
            <conditional name="method_select">
                <param name="method" value="consolidateWindows" />
                <section name="windowCounts">
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="1" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="100" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="500" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                </section>
                <section name="consolidateWindows">
                    <param name="equiweight" value="true" />
                    <conditional name="mergeWindows_select">
                        <param name="mergeWindows_selector" value="yes" />
                        <param name="tol" value="100" />
                            <conditional name="sign_select">
                                <param name="sign_selector" value="no" />
                            </conditional>
                            <param name="max_width" value="300" />
                            <param name="ignore_strand" value="true" />
                    </conditional>
                    <conditional name="region_select">
                        <param name="region_selector" value="no" />
                        <conditional name="findOverlaps_select">
                            <param name="findOverlaps_selector" value="no" />
                        </conditional>
                    </conditional>
                    <conditional name="sign_list_select">
                        <param name="sign_list_selector" value="no" />
                    </conditional>
                </section>
                <section name="consolidateTests">
                    <conditional name="conTest_select">
                        <param name="conTest_selector" value="yes" />
                        <repeat name="db">
                            <param name="result_list" value="conTest_db1.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db2.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db3.tabular" />
                        </repeat>
                        <param name="getBest" value="false" />
                        <param name="reindex" value="best" />
                    </conditional>
                </section>
            </conditional>
            <output name="conTest_output" value="consolidateTests_output1.txt" />
        </test>
        <test expect_num_outputs="4">
            <conditional name="method_select">
                <param name="method" value="consolidateWindows" />
                <section name="windowCounts">
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="1" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="100" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="500" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                </section>
                <section name="consolidateWindows">
                    <param name="equiweight" value="true" />
                    <conditional name="mergeWindows_select">
                        <param name="mergeWindows_selector" value="yes" />
                        <param name="tol" value="100" />
                            <conditional name="sign_select">
                                <param name="sign_selector" value="no" />
                            </conditional>
                            <param name="max_width" value="300" />
                            <param name="ignore_strand" value="true" />
                    </conditional>
                    <conditional name="region_select">
                        <param name="region_selector" value="no" />
                        <conditional name="findOverlaps_select">
                            <param name="findOverlaps_selector" value="no" />
                        </conditional>
                    </conditional>
                    <conditional name="sign_list_select">
                        <param name="sign_list_selector" value="no" />
                    </conditional>
                </section>
                <section name="consolidateTests">
                    <conditional name="conTest_select">
                        <param name="conTest_selector" value="yes" />
                        <repeat name="db">
                            <param name="result_list" value="conTest_db1.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db2.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db3.tabular" />
                        </repeat>
                        <param name="getBest" value="true" />
                        <param name="reindex" value="best" />
                    </conditional>
                </section>
            </conditional>
            <output name="conTest_output" value="consolidateTests_output3.txt" />
        </test>
        <test expect_num_outputs="3">
            <conditional name="method_select">
                <param name="method" value="consolidateWindows" />
                <section name="windowCounts">
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="1" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="100" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                    <repeat name="data">
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep1.bam" ftype="bam" />
                        </repeat>
                        <repeat name="bam_input">
                            <param name="bam_file" value="rep2.bam" ftype="bam" />
                        </repeat>
                        <param name="spacing" value="50" />
                        <param name="width" value="500" />
                        <conditional name="ext_selector">
                            <param name="ext_select" value="integer" />
                            <param name="ext" value="100" />
                        </conditional>
                        <param name="shift" value="0" />
                        <param name="filter" value="1" />
                        <param name="bin" value="false" />
                        <conditional name="readParam_select">
                            <param name="readParam_selector" value="no" />
                        </conditional>
                    </repeat>
                </section>
                <section name="consolidateWindows">
                    <param name="equiweight" value="true" />
                    <conditional name="mergeWindows_select">
                        <param name="mergeWindows_selector" value="yes" />
                        <param name="tol" value="100" />
                            <conditional name="sign_select">
                                <param name="sign_selector" value="no" />
                            </conditional>
                            <param name="max_width" value="300" />
                            <param name="ignore_strand" value="true" />
                    </conditional>
                    <conditional name="region_select">
                        <param name="region_selector" value="yes" />
                        <param name="GRanges" value="gRange_conW.tabular" />
                    </conditional>
                    <conditional name="sign_list_select">
                        <param name="sign_list_selector" value="no" />
                    </conditional>
                </section>
                <section name="consolidateTests">
                    <conditional name="conTest_select">
                        <param name="conTest_selector" value="yes" />
                        <repeat name="db">
                            <param name="result_list" value="conTest_db1.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db2.tabular" />
                        </repeat>
                        <repeat name="db">
                            <param name="result_list" value="conTest_db3.tabular" />
                        </repeat>
                        <param name="getBest" value="true" />
                        <param name="reindex" value="best" />
                    </conditional>
                </section>
            </conditional>
            <output name="conTest_output" value="consolidateTests_output4.txt" />
        </test>

        <test expect_num_outputs="2">
            <conditional name="method_select">
                <param name="method" value="mergeWindows" />
                <param name="GRanges" value="gRange_mergeWindows.tabular" />
                <param name="named" value="true" />
                <param name="tol" value="100.0" />
                <conditional name="sign_select">
                    <param name="sign_selector" value="no" />
                </conditional>
                <param name="max_width" value="" />
                <param name="ignore_strand" value="true" />
            </conditional>
            <output name="mergeWindows_id_output" value="mergeWindows_id_output.txt" />
            <output name="mergeWindows_region_output" value="mergeWindows_region_output.txt" />
        </test>
        <test expect_num_outputs="2">
            <conditional name="method_select">
                <param name="method" value="mergeWindows" />
                <param name="GRanges" value="gRange_mergeWindows.tabular" />
                <param name="named" value="true" />
                <param name="tol" value="100.0" />
                <conditional name="sign_select">
                    <param name="sign_selector" value="yes" />
                    <param name="sign" value="sign.tabular" />
                </conditional>
                <param name="max_width" value="" />
                <param name="ignore_strand" value="true" />
            </conditional>
            <output name="mergeWindows_id_output" value="mergeWindows_id_output2.txt" />
            <output name="mergeWindows_region_output" value="mergeWindows_region_output2.txt" />
        </test>
    </tests>

    <help><![CDATA[
Clusters significant windows into clusters while controlling the cluster-level FDR
===================================================================================

Windows are identified as DB based on the adjusted p-values in tab. Only these DB windows are then used directly for clustering via mergeWindows. This identifies DB regions consisting solely of DB windows. 

DB-based clustering is obviously not blind to the DB status, so standard methods for FDR control are not valid. Instead, post-hoc control of the cluster-level FDR is applied by using controlClusterFDR. This aims to control the cluster-level FDR at target. The aim is to provide some interpretable results when DB-blind clustering is not appropriate, e.g., for diffuse marks involving long stretches of the genome. Reporting each marked stretch in its entirety would be cumbersome, so this method allows the DB subintervals to be identified directly.

It returns:

- `ids`: A list of ids. Non-significant windows are marked with NA.
- `regions`: Region coordinates of each cluster
- `FDR`: the estimate of the cluster-level FDR for the returned regions


Consolidate DB results from multiple analyses with cluster-level FDR control
============================================================================

Consolidate DB results from multiple analyses with cluster-level FDR control typically involving different window sizes. The aim is to provide comprehensive detection of DB at a range of spatial resolutions. Significant windows from each analysis are identified and used for clustering with cluster windows. This represents the post-hoc counterpart to consolidateSizes.

It returns:

- `id`: a column of integers indicating the cluster ID for each window
- `region`: a GRanges object containing the coordinates for each cluster
- `FDR`: a number containing the cluster-level FDR estimate


Combines p-values across clustered tests using Simes’ method to control the cluster FDR
=======================================================================================

First count the number of extended reads overlapping a sliding window at spaced positions across the genome generated by windowCounts using different width values. 

Then consolidate windows of different sizes into a common set of clusters. This will merge windows of differing sizes. If no regions of interest for overlapping with windows is specified, windows of all sizes are clustered together, using a tolerance of 100 bp. Otherwise, clusters are defined by overlapping windows of all sizes to region, where each entry of region defines a cluster. The aim is to consolidate statistics across window sizes using consolidateTests or consolidateOverlaps. This will provide comprehensive detection of DB at a range of spatial resolutions. However, this requires some care to balance the contribution of analyses with different window sizes to the combined p-value. This is achieved by weighting each window and using the weights in downstream functions.

Consolidate window statistics will yield a single combined p-value for each cluster or region. Users can also obtain the best windows in each cluster/region.

If region is not specified, it returns:

- `id`: rows of integers, where each rows corresponds to a GRanges objects. The entries of the rows specify the cluster to which each window of that object is assigned
- `weight`: rows of numbers, where each row corresponds to a vector in id. The entries of the rows specify the weight of the corresponding windows
- `region`: a GRanges object containing the genomic coordinates of the clusters of merged windows

If region is specified, it returns:

- `olap`: matrices of Hits object, where each matrix corresponds to a GRanges objects. Each Hits object contains the overlaps between the input regions (query) and the windows in the corresponding object in the GRanges objects (subject)
- `weight`: rows of numbers, where each row corresponds to a Hits object in olap. The entries of the row specify the per-overlap weight of the corresponding windows.

Consolidate DB statistics from analyses using multiple window sizes
===================================================================

This will yield a single combined p-value for each cluster or region. Users can obtain the best windows in each cluster/region by selecting obtain the best windows in each cluster/region. If this is not selected the method will compute the best overlaps. 


It returns:

- A DataFrame of results computed by FUN, see combineTests and getBestTest for examples. Each row corresponds to a cluster for consolidateTests or to a pre-defined region for consolidateOverlaps

Uses a simple single-linkage approach to merge adjacent or overlapping windows into clusters
============================================================================================

Windows in regions are merged if the gap between the end of one window and the start of the next is no greater than tol. Adjacent windows can then be chained together to build a cluster of windows across the linear genome.

It returns:

- `id`: an integer column containing the cluster ID for each window
- `region`: a GRanges object containing the start/stop coordinates for each cluster of windows
    ]]></help>
    <expand macro="citations" />
</tool>