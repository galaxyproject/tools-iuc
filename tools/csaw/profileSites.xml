<tool id="csaw_profileSites" name="profileSites" version="@VERSION@.0">
  <description>profiles binding sites</description>
  <macros>
    <import>csaw_macros.xml</import>
  </macros>
  <expand macro="requirements" />
  <command detect_errors="exit_code"><![CDATA[
    Rscript '$script']]>
  </command>
  <configfiles>
    <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)
library(Rsamtools)

bamFiles <- c()
#for $i in $bam_input
  bamFiles <- c(bamFiles, '${i.bam_file}')
#end for
indexBam(bamFiles)

@GRANGES@
@READPARAM@

range = as.numeric("$range")

#if str($ext_select.ext_selector) == "integer"
  ext <- as.numeric("$ext_select.ext")
#else
  ext <- scan("$ext_select.ext", what=integer())
  ext <- list(ext)
#end if

#if str($average) == 'true'
  avg <- TRUE
#else
  avg <- FALSE
#end if

normalize <- as.character("$normalize")
strand <- as.character("$strand")

result <- profileSites(bamFiles, regions, param=p, range=range, ext=ext, average=avg, normalize=normalize, strand=strand)

write.table(result, "$output", quote = FALSE, col.names = FALSE, row.names = FALSE)
]]>
    </configfile>
  </configfiles>
  <inputs>
    <repeat name="bam_input" title="Upload indexed BAM files in sorted order" >
      <param name="bam_file" type="data" format="bam" label="BAM file" />
    </repeat>
    <param name="GRanges" type="data" format="tabular" label="Specify which profiles are to be aggregated" help="Upload as a dataframe where the first column is the sequence names, the second column is the start position of the range, and the third column is the end position of the range." />
    <param name="named" type="boolean" truevalue="true" falsevalue="" checked="false" label="Are the columns of the dataframe named?" />
    <expand macro="readParam_select" />
    <param name="range" type="integer" value="5000" label="Specify the range over which the profile will be collected" />
    <conditional name="ext_select">
      <param name="ext_selector" type="select" label="Enter an integer or upload a dataframe specifying the average fragment length for single-end data" >
        <option value="integer" selected="true">Integer</option>
        <option value="dataframe">Dataframe</option>
      </param>
      <when value="integer">
        <param name="ext" type="integer" value="100" label="Specify the average fragment length for single-end data" />
      </when> 
      <when value="dataframe">
        <param name="ext" type="data" format="tabular" label="Upload a dataframe with one column specifying the average fragment length for single-end data" />
      </when> 
    </conditional>
    <param name="average" type="boolean" truevalue="true" falsevalue="" checked="true" label="Average the profiles across regions?" help="If no is selected, a separate profile will be returned for each region instead. This may be useful, e.g., for constructing heatmaps of enrichment across many regions." /> 
    <param name="normalize" type="select" label="Specify how normalization of each regionâ€™s profile should be performed prior to averaging" help="none means that no normalization is performed, i.e., counts per base are directly averaged across all regions. total means the profile for each region is divided by the sum of coverages across all bases in the interval. This effectively normalizes for the total number of reads in each region. max means the profile for each region is divided by its maximum value. This ensures that the maximum height of each region is the same." >
      <option value="none" selected="true">none</option>
      <option value="total">total</option>
      <option value="max">max</option>
    </param>
    <param name="strand" type="select" label="Indicate how stranded regions should be handled" >
      <option value="ignore">ignore</option>
      <option value="use">use</option>
      <option value="match">match</option>
    </param>
  </inputs>
  <outputs>
    <data name="output" format="txt" label="${tool.name} on ${on_string}: output" />
  </outputs>

  <tests>
    <test>
      <repeat name="bam_input">
        <param name="bam_file" value="rep1.bam" ftype="bam" />
      </repeat>
      <param name="GRanges" value="profileSites_gRange.tabular" />
      <param name="named" value="true" />
      <conditional name="readParam_select">
        <param name="readParam_selector" value="no"/>
      </conditional>
      <param name="range" value="200" />
      <conditional name="ext_select">
        <param name="ext_selector" value="integer" />
        <param name="ext" value="100" />
      </conditional>
      <param name="average" value="true" />
      <param name="normalize" value="none" />
      <param name="strand" value="ignore" />
      <output name="output" value="profileSites_output1.txt" />
    </test>
    <test>
      <repeat name="bam_input">
        <param name="bam_file" value="rep1.bam" ftype="bam" />
      </repeat>
      <param name="GRanges" value="profileSites_gRange.tabular" />
      <param name="named" value="true" />
      <conditional name="readParam_select">
        <param name="readParam_selector" value="yes" />
        <param name="pe" value="both" />
        <param name="max_frag" value="100" />
        <param name="dedup" value="false" />
        <param name="minq" value="20" />
        <param name="forward" value="NA" />
        <param name="restrict" value="chrA" />
        <conditional name="discard_select">
          <param name="discard" value="no" />
        </conditional>
      </conditional>
      <param name="range" value="200" />
      <conditional name="ext_select">
        <param name="ext_selector" value="integer" />
        <param name="ext" value="100" />
      </conditional>
      <param name="average" value="true" />
      <param name="normalize" value="none" />
      <param name="strand" value="ignore" />
      <output name="output" value="profileSites_output2.txt" />
    </test>
  </tests>

  <help><![CDATA[
    Get the coverage profile around potential binding sites.

    This tool computes the average coverage profile around the specified regions. Specifically, the profile is constructed by counting the number of fragments overlapping each base in the interval flanking each entry of regions. The interval for each entry is centred at its start location (base zero) and spans the flanking range on either side.

    Single-end reads are directionally extended to ext to impute the fragment. For paired-end reads, the interval between each pair is used as the fragment. If multiple bam.files are specified, reads are pooled across files for counting into each profile. By default, an average of the coverage profiles across all regions is returned. Thus, the shape of the average profile is largely determined by high-abundance regions.

    The profile can be used to examine average coverage around known features of interest, like genes or transcription start sites. Its shape can guide the choice of the window size in windowCounts, or to determine if larger regions should be used in regionCounts. For the former, restricting the regions to locally maximal windows with findMaxima is recommended to capture the profile of binding events.
    ]]></help>
  <expand macro="citations" />
</tool>