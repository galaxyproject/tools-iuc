<tool id="csaw_combineTests" name="Combine Tests" version="@VERSION@.0">
    <description></description>

     <macros>
       <import>csaw_macros.xml</import>
    </macros>

     <expand macro="requirements" />

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(csaw)

##combineTests
#if str($combineTests_select.combineTests) == 'yes'
    comTest_ids <-scan("${combineTests_select.ids}", what = integer())
    comTest_tab <- read.table("${combineTests_select.tab}", sep="", header=T)
    #if str($combineTests_select.weight) != ''
        comTest_w <- scan("${combineTests_select.weight}", what=numeric())
    #else
        comTest_w <- NULL
    #end if
    #if str($combineTests_select.pval_col) != ''
        comTest_pval_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${combineTests_select.pval_col}"))
        if (is.na(comTest_pval_col)){
            comTest_pval_col <- "${combineTests_select.pval_col}"
        }
    #else
        comTest_pval_col <- NULL
    #end if
    #if str($combineTests_select.fc_col) != ''
        comTest_fc_col <- as.numeric(gsub("([0-9]+).*$", "\\1", "${combineTests_select.fc_col}"))
        if (is.na(comTest_fc_col)){
            comTest_fc_col <- "${combineTests_select.fc_col}"
        }
    #else
        comTest_fc_col <- NULL
    #end if
    sink("$combineTests_output")
       combineTests(comTest_ids, comTest_tab, weight=comTest_w, pval.col=comTest_pval_col, fc.col=comTest_fc_col)
    sink()
#end if

]]>
        </configfile>
    </configfiles>
    <inputs>
    	<conditional name="combineTests_select">
            <param name="combineTests" type="select" label="Combines p-values across clustered tests using Simes’ method to control the cluster FDR?" help="Use Simes’ procedure to compute the combined p-value for each cluster of tests with the same value of ids. Each combined p-value represents evidence against the global null hypothesis, i.e., all individual nulls are true in each cluster. This may be more relevant than examining each test individually when multiple tests in a cluster represent parts of the same underlying event, e.g., genomic regions consisting of clusters of windows. The BH method is also applied to control the FDR across all clusters." >
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <expand macro="combineTest_param" />
            </when>
            <when value="no"> </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="output" format="txt" label="${tool.name} on ${on_string}: checkBiomodality output" />
    </outputs>

    <tests>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="no" />
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="false" />
            <output name="output" file="checkBiomodality_output1.txt" />
        </test>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="yes" />
                <param name="pe" value="both" />
                <param name="max_frag" value="100" />
                <param name="dedup" value="false" />
                <param name="minq" value="20" />
                <param name="forward" value="NA" />
                <param name="restrict" value="" />
                <param name="discard" value="no" />
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="False" />
            <output name="output" file="checkBiomodality_output2.txt" />
        </test>
        <test>
            <repeat name="bam_input">
                <param name="bam_file" value="rep1.bam" ftype="bam" />
            </repeat>
            <repeat name="bam_input">
                <param name="bam_file" value="rep2.bam" ftype="bam" />
            </repeat>
            <param name="GRanges" value="chrA, chrA, chrB, chrC" />
            <param name="IRanges" value="range1.tabular" />
            <param name="width" value="200" />
            <conditional name="readParam_select">
                <param name="readParam_selector" value="yes" />
                <param name="pe" value="both" />
                <param name="max_frag" value="100" />
                <param name="dedup" value="false" />
                <param name="minq" value="20" />
                <param name="forward" value="NA" />
                <param name="restrict" value="mitochondria" />
                <conditional name="discard_select">
                    <param name="discard" value="yes" />
                    <param name="GRanges" value="chrA" />
                    <param name="IRanges" value="range_readParam.tabular" />
                </conditional>
            </conditional>
            <param name="prior_count" value="5" />
            <param name="invert" value="False" />
            <output name="output" file="checkBiomodality_output3.txt" />
        </test>
    </tests>

    <help><![CDATA[
        Consider a base position x. This function counts the number of forward- and reverse-strand reads within the interval [x-width+1, x]. It then calculates the forward:reverse ratio after adding prior.count to both counts. This is repeated for the interval [x, x+width-1], and the reverse:forward ratio is then computed. The smaller of these two ratios is used as the bimodality score. Sites with high bimodality scores will be enriched for forward- and reverse-strand enrichment on the left and right of the site, respectively. Given a genomic region, this function will treat each base position as a site. The largest bimodality score across all positions will be reported for each region. The idea is to assist with the identification of transcription factor binding sites, which exhibit strong strand bimodality. The function will be less useful for broad targets like histone marks. If multiple bam.files are specified, they are effectively pooled so that counting uses all reads in all files. A separate value of width can be specified for each library, to account for differences in fragmentation – see the ext argument for windowCounts for more details. In practice, this is usually unnecessary. Setting width to the average fragment length yields satisfactory results in most cases. If invert is set, the bimodality score will be flipped around, i.e., it will be maximized when reversestrand coverage dominates on the left, and forward-strand coverage dominates on the right. This is designed for use in CAGE analyses where this inverted bimodality is symptomatic of enhancer RNAs
    ]]></help>


</tool>