<tool name="QoRTs" id="qorts_qc" version="1.0.0">
    <macros>
        <import>qorts_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <description>quality control RNA-Seq reads</description>
    <command><![CDATA[
        @QORTS_INVOCATION@ QC --noGzipOutput --generatePlots
        #if 'makeWiggles' in str( $functions ).split( ',' ):
            --chromSizes "${chromInfo}"
        #end if
        --minMAPQ $min_mapq
        --runFunctions $functions
        "${input_dataset}" "${gff_file}" .
        > "${stdio}" 2>&1
        ]]>
    </command>
    <stdio>
        <exit_code range="1:" level="fatal" description="SNAFU" />
    </stdio>
    <inputs>
        <param format="sam,bam" label="SAM or BAM file to QC" name="input_dataset" type="data" />
        <param format="gff" label="GFF file" name="gff_file" type="data" />
        <param name="min_mapq" label="Filter out reads with less than the given MAPQ" type="integer" value="255" />
        <param name="functions" type="select" multiple="True" display="checkboxes" label="Functions to execute" help="--runFunctions">
            <option selected="True" value="NVC">Nucleotide-vs-Cycle counts</option>
            <option selected="True" value="GCDistribution">Calculate GC content distribution</option>
            <option selected="True" value="GeneCalcs">Find gene assignment and gene body calculations</option>
            <option selected="True" value="QualityScoreDistribution">Calculate quality scores by cycle</option>
            <option selected="True" value="writeJunctionSeqCounts">Write counts file designed for use with JunctionSeq</option>
            <option selected="True" value="writeKnownSplices">Write known splice junction counts</option>
            <option selected="True" value="writeNovelSplices">Write novel splice junction counts</option>
            <option selected="True" value="writeClippedNVC">Write NVC file containing clipped sequences</option>
            <option selected="True" value="CigarOpDistribution">Cigar operation rates by cycle and cigar operation length rates</option>
            <option selected="True" value="InsertSize">Insert size distribution</option>
            <option selected="True" value="chromCounts">Calculate chromosome counts</option>
            <option selected="True" value="writeGenewiseGeneBody">Write file containing gene-body distributions for each gene</option>
            <option selected="True" value="JunctionCalcs">Find splice junctions</option>
            <option selected="True" value="writeGeneCounts">Write extended gene-level read/read-pair counts file</option>
            <option selected="True" value="writeDESeq">Write gene-level read/read-pair counts for use with DESeq, EdgeR, etc</option>
            <option selected="True" value="writeDEXSeq">Write exon-level read/read-pair counts file, designed for use with DEXSeq</option>
            <option selected="True" value="writeGeneBody">Write gene-body distribution file</option>
            <option selected="True" value="StrandCheck">Check the strandedness of the data</option>
            <option value="annotatedSpliceExonCounts">Write counts for exons, known-splice-junctions, and genes</option>
            <option value="FPKM">Write FPKM values</option>
            <option value="makeJunctionBed,writeJunctionSeqCounts,writeSpliceExon,JunctionCalcs">Write splice-junction count "bed" files</option>
            <option value="makeWiggles">Write "wiggle" coverage files with 100-bp window size</option>
            <option value="makeAllBrowserTracks">Write both the "wiggle" and the splice-junction bed files</option>
        </param>
    </inputs>
    <outputs>
        <data name="stdio" format="txt" label="${tool.name} on ${on_string}: Tool execution output" />
        <data name="tool_log" format="txt" from_work_dir="QC.log" label="${tool.name} on ${on_string}: Log file" />
        <data name="summary" format="tabular" from_work_dir="QC.summary.txt" label="${tool.name} on ${on_string}: Summary data" />
        <data name="multiplot" format="png" from_work_dir="QC.multiPlot.png" label="${tool.name} on ${on_string}: Summary plots" />
        <data name="nvc_mc_r1" format="tabular" from_work_dir="QC.NVC.minus.clipping.R1.txt" label="${tool.name} on ${on_string}: NVC minus clipping R1">
            <filter>('NVC' in functions)</filter>
        </data>
        <data name="nvc_mc_r2" format="tabular" from_work_dir="QC.NVC.minus.clipping.R1.txt" label="${tool.name} on ${on_string}: NVC minus clipping R2">
            <filter>('NVC' in functions)</filter>
        </data>
        <data name="nvc_raw_r1" format="tabular" from_work_dir="QC.NVC.minus.clipping.R1.txt" label="${tool.name} on ${on_string}: NVC raw R 1">
            <filter>('NVC' in functions or 'writeClippedNVC' in functions)</filter>
        </data>
        <data name="nvc_raw_r2" format="tabular" from_work_dir="QC.NVC.minus.clipping.R1.txt" label="${tool.name} on ${on_string}: NVC raw R 2">
            <filter>('NVC' in functions or 'writeClippedNVC' in functions)</filter>
        </data>
        <data name="gc_bypair" format="tabular" from_work_dir="QC.gc.byPair.txt" label="${tool.name} on ${on_string}: GC distribution by pair">
            <filter>('GCDistribution' in functions)</filter>
        </data>
        <data name="gc_byread" format="tabular" from_work_dir="QC.gc.byRead.txt" label="${tool.name} on ${on_string}: GC distribution by read">
            <filter>('GCDistribution' in functions)</filter>
        </data>
        <data name="gc_vsbasect" format="tabular" from_work_dir="QC.gc.byRead.vsBaseCt.txt" label="${tool.name} on ${on_string}: GC vs. base ct">
            <filter>('GCDistribution' in functions)</filter>
        </data>
        <data name="gc_r1" format="tabular" from_work_dir="QC.gc.R1.txt" label="${tool.name} on ${on_string}: R1 GC distribution">
            <filter>('GCDistribution' in functions)</filter>
        </data>
        <data name="gc_r2" format="tabular" from_work_dir="QC.gc.R2.txt" label="${tool.name} on ${on_string}: R2 GC distribution">
            <filter>('GCDistribution' in functions)</filter>
        </data>
        <data name="quals_r1" format="tabular" from_work_dir="QC.quals.r1.txt" label="${tool.name} on ${on_string}: R1 quality score distribution">
            <filter>('QualityScoreDistribution' in functions)</filter>
        </data>
        <data name="quals_r2" format="tabular" from_work_dir="QC.quals.r2.txt" label="${tool.name} on ${on_string}: R2 quality score distribution">
            <filter>('QualityScoreDistribution' in functions)</filter>
        </data>
        <data name="splice_exon_junctionseq" format="tabular" from_work_dir="QC.quals.r2.txt" label="${tool.name} on ${on_string}: Splice junctions, exon counts (for JunctionSeq)">
            <filter>('writeJunctionSeqCounts' in functions or 'makeJunctionBed,writeJunctionSeqCounts,writeSpliceExon,JunctionCalcs' in functions)</filter>
        </data>
        <data name="known_splice_count" format="tabular" from_work_dir="QC.spliceJunctionCounts.knownSplices.txt" label="${tool.name} on ${on_string}: Known splice junction counts">
            <filter>('writeKnownSplices' in functions)</filter>
        </data>
        <data name="novel_splice_count" format="tabular" from_work_dir="QC.spliceJunctionCounts.novelSplices.txt" label="${tool.name} on ${on_string}: Novel splice junction counts">
            <filter>('writeNovelSplices' in functions)</filter>
        </data>
        <data name="exons_splice_junctions" format="txt" from_work_dir="QC.annoSpliceJunctionAndExonCounts.txt" label="${tool.name} on ${on_string}: Exons, known splice junctions, genes">
            <filter>('annotatedSpliceExonCounts' in functions)</filter>
        </data>
        <data name="nvc_tail_clip_r1" format="tabular" from_work_dir="QC.NVC.tail.clip.R1.txt" label="${tool.name} on ${on_string}: QC.NVC.tail.clip.R1.txt">
            <filter>('writeClippedNVC' in functions)</filter>
        </data>
        <data name="nvc_tail_clip_r2" format="tabular" from_work_dir="QC.NVC.tail.clip.R2.txt" label="${tool.name} on ${on_string}: QC.NVC.tail.clip.R2.txt">
            <filter>('writeClippedNVC' in functions)</filter>
        </data>
        <data name="nvc_lead_clip_r1" format="tabular" from_work_dir="QC.NVC.lead.clip.R1.txt" label="${tool.name} on ${on_string}: QC.NVC.lead.clip.R1.txt">
            <filter>('writeClippedNVC' in functions)</filter>
        </data>
        <data name="nvc_lead_clip_r2" format="tabular" from_work_dir="QC.NVC.lead.clip.R2.txt" label="${tool.name} on ${on_string}: QC.NVC.lead.clip.R2.txt">
            <filter>('writeClippedNVC' in functions)</filter>
        </data>
        <data name="nvc_raw_r1" format="tabular" from_work_dir="QC.NVC.raw.R1.txt" label="${tool.name} on ${on_string}: QC.NVC.raw.R1.txt">
            <filter>('writeClippedNVC' in functions)</filter>
        </data>
        <data name="nvc_raw_r2" format="tabular" from_work_dir="QC.NVC.raw.R2.txt " label="${tool.name} on ${on_string}: QC.NVC.raw.R2.txt ">
            <filter>('writeClippedNVC' in functions)</filter>
        </data>
        <data name="cigar_rc_r1" format="tabular" from_work_dir="QC.cigarOpDistribution.byReadCycle.R1.txt" label="${tool.name} on ${on_string}: QC.cigarOpDistribution.byReadCycle.R1.txt">
            <filter>('CigarOpDistribution' in functions)</filter>
        </data>
        <data name="cigar_rc_r2" format="tabular" from_work_dir="QC.cigarOpDistribution.byReadCycle.R2.txt" label="${tool.name} on ${on_string}: QC.cigarOpDistribution.byReadCycle.R2.txt">
            <filter>('CigarOpDistribution' in functions)</filter>
        </data>
        <data name="cigar_op_r1" format="tabular" from_work_dir="QC.cigarOpLengths.byOp.R2.txt" label="${tool.name} on ${on_string}: QC.cigarOpLengths.byOp.R2.txt">
            <filter>('CigarOpDistribution' in functions)</filter>
        </data>
        <data name="cigar_op_r2" format="tabular" from_work_dir="QC.cigarOpLengths.byOp.R1.txt" label="${tool.name} on ${on_string}: QC.cigarOpLengths.byOp.R1.txt">
            <filter>('CigarOpDistribution' in functions)</filter>
        </data>
        <data name="is_debug_dropped" format="tabular" from_work_dir="QC.insert.size.debug.dropped.txt" label="${tool.name} on ${on_string}: QC.insert.size.debug.dropped.txt">
            <filter>('InsertSize' in functions)</filter>
        </data>
        <data name="is_debug" format="tabular" from_work_dir="QC.insert.size.debug.txt" label="${tool.name} on ${on_string}: QC.insert.size.debug.txt">
            <filter>('InsertSize' in functions)</filter>
        </data>
        <data name="insert_size" format="tabular" from_work_dir="QC.insert.size.txt" label="${tool.name} on ${on_string}: QC.insert.size.txt">
            <filter>('InsertSize' in functions)</filter>
        </data>
        <data name="chrom_count" format="tabular" from_work_dir="QC.chromCount.txt" label="${tool.name} on ${on_string}: QC.chromCount.txt">
            <filter>('chromCounts' in functions)</filter>
        </data>
        <data name="gene_count" format="tabular" from_work_dir="QC.geneCounts.txt" label="${tool.name} on ${on_string}: Gene counts">
            <filter>('writeGeneCounts' in functions)</filter>
        </data>
        <data name="gene_count_deseq" format="tabular" from_work_dir="QC.geneCounts.formatted.for.DESeq.txt" label="${tool.name} on ${on_string}: Gene Counts (DESeq formatted)">
            <filter>('writeDESeq' in functions)</filter>
        </data>
        <data name="exon_count_desseq" format="tabular" from_work_dir="QC.exonCounts.formatted.for.DEXSeq.txt" label="${tool.name} on ${on_string}: Exon Counts (DEXSeq formatted)">
            <filter>('writeDEXSeq' in functions)</filter>
        </data>
        <data name="gbc_expression" format="tabular" from_work_dir="QC.geneBodyCoverage.by.expression.level.txt" label="${tool.name} on ${on_string}: QC.geneBodyCoverage.by.expression.level.txt">
            <filter>('writeGeneBody' in functions)</filter>
        </data>
        <data name="gbc_debug" format="tabular" from_work_dir="QC.geneBodyCoverage.DEBUG.intervals.txt.gz" label="${tool.name} on ${on_string}: QC.geneBodyCoverage.DEBUG.intervals.txt.gz">
            <filter>('writeGeneBody' in functions)</filter>
        </data>
        <data name="known_splice_bed" format="bed" from_work_dir="QC.junctionBed.known.bed.gz" label="${tool.name} on ${on_string}: Known splice junctions">
            <filter>('makeJunctionBed,writeJunctionSeqCounts,writeSpliceExon,JunctionCalcs' in functions or 'makeAllBrowserTracks' in functions)</filter>
        </data>
        <data name="wiggle_unstranded" format="wig" from_work_dir="QC.wiggle.unstranded.wig" label="${tool.name} on ${on_string}: QC.wiggle.unstranded.wig">
            <filter>('makeWiggles' in functions or 'makeAllBrowserTracks' in functions)</filter>
        </data>
    </outputs>
</tool>