<tool id="samtools_fastx" name="Samtools fastx" version="@TOOL_VERSION@">
    <description>extract FASTA or FASTQ from a SAM file</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio"/>
    <expand macro="version_command" />
    <command><![CDATA[
        samtools $output_fmt_cond.output_fmt_select
            #if $output_fmt_cond.output_fmt_select == 'fastq':
                #if str($output_fmt_cond.default_quality) != '':
                    -v $output_fmt_cond.default_quality
                #end if
                $output_fmt_cond.output_quality
                $output_fmt_cond.ilumina_casava
            #end if
            $copy_tags
            #if str($copy_arb_tags) != '':
                -T '$copy_arb_tags'
            #end if
	    $read_numbering
            #if str($write_r0) == 'yes':
                -0 '$nonspecific'
            #end if
            #if str($write_r1) == 'yes':
                -1 '$forward'
            #end if
            #if str($write_r2) == 'yes':
                -2 '$reverse'
            #end if
            #if str($inclusive_filter) != 'None':
                #set $filter = $inclusive_filter
                @FLAGS@
                -f $flags
            #end if
            #if str($exclusive_filter) != 'None':
                #set $filter = $exclusive_filter
                @FLAGS@
                -F $flags
            #end if
            #if str($exclusive_filter) != 'None':
                #set $filter = $exclusive_filter_all
                @FLAGS@
                -G $flags
            #end if
            #if str($write_singletons) == 'yes':
                -s '$singletons'
            #end if
            #if str($idxout_cond.idxout_select) == 'yes':
                #if str($idxout_cond.write1st) == 'yes':
                    --i1 '$i1'
                #end if
                #if str($idxout_cond.write2nd) == 'yes':
                    --i2 '$i2'
                #end if

                #if str($idxout_cond.index_format) != '':
                    --index-format $idxout_cond.index_format
                #end if
                #if str($idxout_cond.barcode_tag) != '':
                    --barcode-tag $idxout_cond.barcode_tag
                #end if
                #if str($idxout_cond.quality_tag) != '':
                    --quality-tag $idxout_cond.quality_tag
                #end if
            #end if
            '$input' 
## TODO becaviour changed. previously output only via -0, -1, -2. Now the remaining output goes to output. Seems more powerful. OK?
            #if  str($write_r0) != 'yes' or str($write_r1) != 'yes' or str($write_r2) != 'yes' or str($write_singletons) == 'yes':
                > '$output'
	    #end if
    ]]>
    </command>
    <inputs>
        <param name="input" type="data" format="sam,bam,cram" label="BAM or SAM file to convert" />
        <conditional name="output_fmt_cond">
            <param name="output_fmt_select" type="select" label="Output format">
                <option value="fasta" selected="True">FASTA</option>
                <option value="fastq">FASTQ</option>
            </param>
            <when value="fastq">
                <param name="default_quality" argument="-v" type="integer" optional="True" label="Default quality if none is given" />
                <param name="output_quality" argument="-O" type="boolean" truevalue="-O" falsevalue="" label="Output quality in the OQ tag if available" />
                <param name="ilumina_casava" argument="-i" type="boolean" truevalue="-i" falsevalue="" label="add Illumina Casava 1.8 format entry to header (eg 1:N:0:ATCACG)" />
            </when>
            <when value="fasta" />
        </conditional>
        <param name="write_r0" argument="-0" type="boolean" truevalue="yes" falsevalue="no" value="no" label="write paired reads flagged both or neither READ1 and READ2 to extra data set" />
        <param name="write_r1" argument="-1" type="boolean" truevalue="yes" falsevalue="no" value="no" label="write paired reads flagged READ1 to extra data set" />
        <param name="write_r2" argument="-2" type="boolean" truevalue="yes" falsevalue="no" value="no" label="write paired reads flagged READ2 to extra data set" />
        <param name="write_singletons" argument="-s" type="boolean" truevalue="yes" falsevalue="no" value="no" label="write singleton reads to extra data set" />
        <param name="copy_tags" argument="-t" type="boolean" truevalue="-t" falsevalue="" label="Copy RG/BC/QT tags to output header" />
        <param name="copy_arb_tags" argument="-T" type="text" optional="True" label="copy arbitrary tags to the FASTA header line" />
        <param name="read_numbering" type="select" label="Omit or append read numbers">
            <option value="" selected="True">no</option>
            <option value="-n">Do not append /1 and /2 to read names</option>
            <option value="-N">always append /1 and /2 to read name</option>
        </param>
        <param name="inclusive_filter" argument="-f" type="select" multiple="True" label="Require that these flags are set">
            <expand macro="flag_options" />
        </param>
        <param name="exclusive_filter" argument="-F" type="select" multiple="True" label="Exclude reads with any of the following flags set">
            <expand macro="flag_options" />
        </param>
        <param name="exclusive_filter_all" argument="-G" type="select" multiple="True" label="Exclude reads with all of the following flags set">
            <expand macro="flag_options" />
        </param>

        <!-- TODO I more or less guessed the semantics of these parameters from the tests .. would be good to check -->
        <conditional name="idxout_cond">
            <param name="idxout_select" type="select" label="Write index read files">
                <option value="no" selected="True">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="no" />
	    <when value="yes">
                <param name="write1st" argument="--i1" type="boolean" truevalue="yes" falsevalue="no" label="write first index reads to extra data set" />
                <param name="write2nd" argument="--i2" type="boolean" truevalue="yes" falsevalue="no" label="write second index reads to extra data set" />
                <param name="barcode_tag" argument="--barcode-tag" type="text" optional="True" label="Barcode tag [default: BC]"/>
                <param name="quality_tag" argument="--quality-tag" type="text" optional="True" label="Quality tag [default: QT]"/>
                <param name="index_format" argument="--index-format" type="text" optional="True" label="Index format: How to parse barcode and quality tags">
                    <help>
The index-format string describes how to parse the barcode and quality tags, for example:
   i14i8       the first 14 characters are index 1, the next 8 characters are index 2
   n8i14       ignore the first 8 characters, and use the next 14 characters for index 1
   If the tag contains a separator, then the numeric part can be replaced with '*' to mean
   'read until the separator or end of tag', for example:
   n*i*        ignore the left part of the tag until the separator, then use the second part
               of the tag as index 1
                    </help>
                </param>
            </when>
        </conditional>
	
    </inputs>
    <outputs>
        <data name="nonspecific" format="fasta" label="${on_string} converted to ${output_fmt_cond.output_fmt_select} (Pairs)">
            <filter>write_r0</filter>
            <change_format>
                <when input="output_fmt_cond.output_fmt_select" value="fastq" format="fastq" />
            </change_format>
        </data>
        <data name="forward" format="fasta" label="${on_string} converted to ${output_fmt_cond.output_fmt_select} (R1)">
            <filter>write_r1</filter>
            <change_format>
                <when input="output_fmt_cond.output_fmt_select" value="fastq" format="fastq" />
            </change_format>
        </data>
        <data name="reverse" format="fasta" label="${on_string} converted to ${output_fmt_cond.output_fmt_select} (R2)">
            <filter>write_r2</filter>
            <change_format>
                <when input="output_fmt_cond.output_fmt_select" value="fastq" format="fastq" />
            </change_format>
        </data>
        <data name="singletons" format="fasta" label="${on_string} converted to ${output_fmt_cond.output_fmt_select} (singletons)">
            <filter>write_singletons</filter>
            <change_format>
                <when input="output_fmt_cond.output_fmt_select" value="fastq" format="fastq" />
            </change_format>
        </data>
        <data name="output" format="fasta" label="${on_string} converted to ${output_fmt_cond.output_fmt_select}">
            <filter>not write_singletons or not write_r0 or not write_r1 or not write_r2</filter>
            <change_format>
                <when input="output_fmt_cond.output_fmt_select" value="fastq" format="fastq" />
            </change_format>
        </data>
        <data name="i1" format="fasta" label="${on_string} converted to ${output_fmt_cond.output_fmt_select} (1st index)">
            <filter>idxout_cond['idxout_select'] and idxout['write1st']</filter>
            <change_format>
                <when input="output_fmt_cond.output_fmt_select" value="fastq" format="fastq" />
            </change_format>
        </data>
        <data name="i2" format="fasta" label="${on_string} converted to ${output_fmt_cond.output_fmt_select} (2nd index)">
            <filter>idxout_cond['idxout_select'] and idxout['write2nd']</filter>
            <change_format>
                <when input="output_fmt_cond.output_fmt_select" value="fastq" format="fastq" />
            </change_format>
        </data>
    </outputs>
    <tests>
        <!-- tests from original Galaxy tool -->
        <test>
            <param name="input" value="samtools_fastx-in1.bam" ftype="bam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fasta" />
            </conditional>
            <param name="write_r0" value="yes" />
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <output name="nonspecific" file="samtools_fastx-out1-1.fasta" ftype="fasta" />
            <output name="forward" file="samtools_fastx-out1-2.fasta" ftype="fasta" />
            <output name="reverse" file="samtools_fastx-out1-3.fasta" ftype="fasta" />
        </test>
        <test>
            <param name="input" value="samtools_fastx-in2.bam" ftype="bam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r0" value="yes" />
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <output name="nonspecific" file="samtools_fastx-out2-1.fastq" ftype="fastq" />
            <output name="forward" file="samtools_fastx-out2-2.fastq" ftype="fastq" />
            <output name="reverse" file="samtools_fastx-out2-3.fastq" ftype="fastq" />
        </test>
        <test>
            <param name="input" value="samtools_fastx-in3.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fasta" />
            </conditional>
            <param name="write_r0" value="yes" />
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <output name="nonspecific" file="samtools_fastx-out3-1.fasta" ftype="fasta" />
            <output name="forward" file="samtools_fastx-out3-2.fasta" ftype="fasta" />
            <output name="reverse" file="samtools_fastx-out3-3.fasta" ftype="fasta" />
        </test>
        <!-- tests from: https://github.com/samtools/samtools/blob/6d79411685d8f0fbb34e123f52d72b63271f4dcb/test/test.pl#L2313-->
        <test>
            <!--# basic 2 output test without singleton tracking-->
            <!--test_cmd($opts, out=>'bam2fq/1.stdout.expected', out_map=>{'1.fq' => 'bam2fq/1.1.fq.expected', '2.fq' => 'bam2fq/1.2.fq.expected'},cmd=>"$$opts{bin}/samtools fastq @$threads -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.001.sam");-->
            <param name="input" value="bam2fq.001.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <output name="forward" file="1.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="1.2.fq.expected" ftype="fastq" />
            <output name="output"  file="1.stdout.expected" ftype="fastq" />
        </test>
        <test>
            <!--# basic 2 output test with singleton tracking but no singleton-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/2.1.fq.expected', '2.fq' => 'bam2fq/2.2.fq.expected', 's.fq' => 'bam2fq/2.s.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.001.sam");-->
            <param name="input" value="bam2fq.001.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <output name="forward" file="2.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="2.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="2.s.fq.expected" ftype="fastq" />
            <output name="output" file="2.stdout.expected" ftype="fastq" />
        </test>
        <test>
            <!--# basic 2 output test with singleton tracking with a singleton in the middle-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/3.1.fq.expected', '2.fq' => 'bam2fq/3.2.fq.expected', 's.fq' => 'bam2fq/3.s.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.002.sam");-->
            <param name="input" value="bam2fq.002.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <output name="forward" file="3.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="3.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="3.s.fq.expected" ftype="fastq" />
            <output name="output"  file="3.stdout.expected" ftype="fastq" />
        </test>
        <test>
            <!--# basic 2 output test with singleton tracking with a singleton as last read-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/4.1.fq.expected', '2.fq' => 'bam2fq/4.2.fq.expected', 's.fq' => 'bam2fq/4.s.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.003.sam");-->
            <param name="input" value="bam2fq.003.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <output name="forward" file="4.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="4.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="4.s.fq.expected" ftype="fastq" />
            <output name="output"  file="4.stdout.expected" ftype="fastq" />
        </test>
        <test>
            <!--# tag output test with singleton tracking with a singleton as last read-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/4.1.fq.expected', '2.fq' => 'bam2fq/4.2.fq.expected', 's.fq' => 'bam2fq/4.s.fq.expected', 'bc.fq' => 'bam2fq/bc.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads \-\-barcode-tag BC \-\-index-format 'n2i2' \-\-i1 $$opts{path}/bc.fq -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.004.sam");-->
            <param name="input" value="bam2fq.004.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <conditional name="idxout_cond">
                <param name="idxout_select" value="yes"/>
                <param name="write1st" value="yes"/>
                <param name="barcode_tag" value="BC"/>
                <param name="index_format" value="n2i2"/>
            </conditional>
            <output name="forward" file="4.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="4.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="4.s.fq.expected" ftype="fastq" />
            <output name="output"  file="4.stdout.expected" ftype="fastq" />
            <output name="i1"  file="bc.fq.expected" ftype="fastq" />
        </test>
        <test>
            <!--# test -O flag with no OQ tags-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/4.1.fq.expected', '2.fq' => 'bam2fq/4.2.fq.expected', 's.fq' => 'bam2fq/4.s.fq.expected', 'bc.fq' => 'bam2fq/bc.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads \-\-barcode-tag BC -O \-\-index-format 'n2i2' \-\-i1 $$opts{path}/bc.fq -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.004.sam");-->
            <param name="input" value="bam2fq.010.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
                <param name="output_quality" value="-O" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <conditional name="idxout_cond">
                <param name="idxout_select" value="yes"/>
                <param name="write1st" value="yes"/>
                <param name="barcode_tag" value="BC"/>
                <param name="index_format" value="n2i2"/>
            </conditional>
            <output name="forward" file="10.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="10.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="10.s.fq.expected" ftype="fastq" />
            <output name="output"  file="2.stdout.expected" ftype="fastq" />
            <output name="i1"  file="bc10.fq.expected" ftype="fastq" />
        </test>
        <test>
            <!--# test -O flag with OQ tags-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/10.1.fq.expected', '2.fq' => 'bam2fq/10.2.fq.expected', 's.fq' => 'bam2fq/10.s.fq.expected', 'bc.fq' => 'bam2fq/bc10.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads \-\-barcode-tag BC -O \-\-index-format 'n2i2' \-\-i1 $$opts{path}/bc.fq -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.010.sam");-->
            <param name="input" value="bam2fq.010.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
                <param name="output_quality" value="-O" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <conditional name="idxout_cond">
                <param name="idxout_select" value="yes"/>
                <param name="write1st" value="yes"/>
                <param name="barcode_tag" value="BC"/>
                <param name="index_format" value="n2i2"/>
            </conditional>
            <output name="forward" file="10.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="10.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="10.s.fq.expected" ftype="fastq" />
            <output name="output"  file="2.stdout.expected" ftype="fastq" />
            <output name="i1"  file="bc10.fq.expected" ftype="fastq" />
        </test>
        <test>
            <!--# tag output test with separators and -N flag-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/5.1.fq.expected', '2.fq' => 'bam2fq/5.2.fq.expected', 's.fq' => 'bam2fq/5.s.fq.expected', 'bc_split.fq' => 'bam2fq/bc_split.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads \-\-barcode-tag BC -N \-\-index-format 'n*i*' \-\-i1 $$opts{path}/bc_split.fq -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.005.sam");-->
            <param name="input" value="bam2fq.005.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <param name="read_numbering" value="-N"/>
            <conditional name="idxout_cond">
                <param name="idxout_select" value="yes"/>
                <param name="write1st" value="yes"/>
                <param name="barcode_tag" value="BC"/>
                <param name="index_format" value="n*i*"/>
            </conditional>
            <output name="forward" file="5.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="5.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="5.s.fq.expected" ftype="fastq" />
            <output name="output"  file="2.stdout.expected" ftype="fastq" />
            <output name="i1"  file="bc_split.fq.expected" ftype="fastq" />
        </test>
        <test>
            <!--# -t flag-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/6.1.fq.expected', '2.fq' => 'bam2fq/6.2.fq.expected', 's.fq' => 'bam2fq/6.s.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads -N -t -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.005.sam");-->
            <param name="input" value="bam2fq.005.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <param name="copy_tags" value="-t" />
            <param name="read_numbering" value="-N"/>
            <output name="forward" file="6.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="6.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="6.s.fq.expected" ftype="fastq" />
            <output name="output"  file="2.stdout.expected" ftype="fastq" />
        </test>
        <test>
            <!--# -T flag-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/7.1.fq.expected', '2.fq' => 'bam2fq/7.2.fq.expected', 's.fq' => 'bam2fq/7.s.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads -N -t -T MD,ia -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.005.sam");-->
            <param name="input" value="bam2fq.005.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <param name="copy_tags" value="-t" />
            <param name="copy_arb_tags" value="MD,ia" />
            <param name="read_numbering" value="-N"/>
            <output name="forward" file="7.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="7.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="7.s.fq.expected" ftype="fastq" />
            <output name="output"  file="2.stdout.expected" ftype="fastq" />
        </test>
        <test>
            <!--# -i flag with no index-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/7.1.fq.expected', '2.fq' => 'bam2fq/7.2.fq.expected', 's.fq' => 'bam2fq/7.s.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads -N -t -i -T MD,ia -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.005.sam");-->
            <param name="input" value="bam2fq.005.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
                <param name="ilumina_casava" value="-i" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <param name="copy_tags" value="-t" />
            <param name="copy_arb_tags" value="MD,ia" />
            <param name="read_numbering" value="-N"/>
            <output name="forward" file="7.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="7.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="7.s.fq.expected" ftype="fastq" />
            <output name="output"  file="2.stdout.expected" ftype="fastq" />
        </test>
        <test>
            <!--# -i flag with index-->
            <!--test_cmd($opts, out=>'bam2fq/2.stdout.expected', out_map=>{'1.fq' => 'bam2fq/8.1.fq.expected', '2.fq' => 'bam2fq/8.2.fq.expected', 's.fq' => 'bam2fq/8.s.fq.expected', 'i.fq' => 'bam2fq/8.i.fq.expected'}, cmd=>"$$opts{bin}/samtools fastq @$threads \-\-barcode-tag BC -i \-\-index-format 'n2i2' \-\-i1 $$opts{path}/i.fq -s $$opts{path}/s.fq -1 $$opts{path}/1.fq -2 $$opts{path}/2.fq $$opts{path}/dat/bam2fq.004.sam");-->
            <param name="input" value="bam2fq.004.sam" ftype="sam" />
            <conditional name="output_fmt_cond">
                <param name="output_fmt_select" value="fastq" />
                <param name="ilumina_casava" value="-i" />
            </conditional>
            <param name="write_r1" value="yes" />
            <param name="write_r2" value="yes" />
            <param name="write_singletons" value="yes" />
            <conditional name="idxout_cond">
                <param name="idxout_select" value="yes"/>
                <param name="write1st" value="yes"/>
                <param name="barcode_tag" value="BC"/>
                <param name="index_format" value="n2i2"/>
            </conditional>
            <output name="forward" file="8.1.fq.expected" ftype="fastq" />
            <output name="reverse" file="8.2.fq.expected" ftype="fastq" />
            <output name="singletons" file="8.s.fq.expected" ftype="fastq" />
            <output name="output"  file="2.stdout.expected" ftype="fastq" />
            <output name="i1"  file="8.i.fq.expected" ftype="fastq" />
        </test>
    </tests>
    <help>
        <![CDATA[
        This tool uses `Samtools <http://www.htslib.org/>`_ to extract sequences from a SAM or BAM file in FASTA or FASTQ format.
        ]]>
    </help>
    <expand macro="citations" />
</tool>
