<!-- TODO version?-->
<tool id="samtools_view" name="View" version="2.0.1">
    <description>Reformat, filter, or subsample alignments in SAM/BAM/CRAM format</description>
    <macros>
    <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <expand macro="version_command"/>
    <command><![CDATA[
    ## prepare reference data (fasta/fai): according to the manual one of these two options is
    ## required when SAM input does not contain @SQ headers (since we probably can't check
    ## this in Galaxy TODO? we check this branch for every SAM input), and the fai is required
    ## whenever writing CRAM output.
    ## Note: if only fasta is specified samtools rund faidx automatically (see doc for -T)
    #set reffas = False
    #set reffai = False
    #if $cond_addref.select_addref == "history":
        #if $cond_addref.ref.is_of_type('fasta', 'fasta.gz'):
            ln -s '${cond_addref.ref}' reference.fa &&
            #set reffas = True
        #else:
            ln -s '${cond_addref.ref}' reference.fa.fai &&
            #set reffai = True
        #end if
    #elif $cond_addref.select_addref == "cached":
        ln -s '${cond_addref.ref.fields.path}.fai' reference.fa.fai &&
        ln -s '${cond_addref.ref.fields.path}' reference.fa &&
        #set reffai = True
    #end if

    ##prepare input and indices
    ln -s $samfile infile &&
    #if $samfile.is_of_type('bam'):
        ln -s '${samfile.metadata.bam_index}' infile.bai &&
    #elif $samfile.is_of_type('cram'):
        ln -s '${samfile.metadata.cram_index}' infile.crai &&
    #end if

	## fix outtype in case of same
	#if ($outtype == 'same'):
		#if $samfile.is_of_type('sam')):
			#set outtype = 'sam'
		#if $samfile.is_of_type('bam')):
			#set outtype = 'bam'
		#elif $samfile.is_of_type('cram')):
			#set outtype = 'cram'
		#end if
	#end if


	samtools view
	-@ \${GALAXY_SLOTS:-1}

#if $outtype == 'count':
	-c
#else if $outtype == 'bam':
	-b
#else if $outtype == 'cram':
	-C
#end if

	## filter options (regions filter is the last parameter)
	#if $cond_filter.select_filter == 'yes'
	
		#if $cond_filter.cond_region.select_region == 'bed' and str( $cond_filter.cond_region.bedfile ) != 'None'
			-L '$cond_filter.bedfile'
		#end if
		#if $cond_filter.cond_rg.select_rg == 'text':
			-r '$cond_filter.cond_rg.readgr'
		#else if $cond_filter.cond_rg.select_rg == 'file':
			-R '$cond_filter.cond_rg.rgfile'
		#end if
		#if str($cond_filter.quality) != '' and int( $cond_filter.quality ) > 0
			-q $cond_filter.quality
		#end if
		#if str( $cond_filter.library ) != ''
			-l '$cond_filter.library'
		#end if
		#if str( $cond_filter.cigarcons ) != ''
			-m $cond_filter.cigarcons
		#end if
		#if str($cond_filter.inclusive_filter) != 'None':
			#set $filter = $cond_filter.inclusive_filter
			@FLAGS@
			-f $flags
		#end if
		#if str($cond_filter.exclusive_filter) != 'None':
			#set $filter = $cond_filter.exclusive_filter
			@FLAGS@
			-F $flags
		#end if
		#if str($cond_filter.exclusive_filter_all) != 'None':
			#set $filter = $cond_filter.exclusive_filter_all
			@FLAGS@
			-G $flags
		#end if
		#for $i, $s in enumerate($cond_filter.readtags)
    -x '${s.readtag}'
#end for
	#end if
	#if $cond_subsample.select_subsample == 'yes'
		#set fraction=str($cond_subsample.subsample).split('.')[1]
		#if str($cond_subsample.seed) == '':
		-s "\${RANDOM}".$fraction
		#else
			-s $cond_subsample.seed.$fraction
		#end if
	#end if

	## output options
	$adv_output.header
	$adv_output.collapsecigar
	#if $adv_output.outputpassing == 'yes'
		-U inv_outfile
	#end if
	-o outfile

	## additional reference data
	#if $reffai == True:
		-t reference.fa.fai
	#elif reffas == True:
		-T reference.fa
	#end if

	infile
	
	## region filter need to be at the end
	#if $cond_filter.select_filter == 'yes' and $cond_filter.cond_region.select_region == 'text'
		'$cond_filter.cond_region.regions'
#end if

## if data is converted from sam (for which Galaxy seems to make no assumtions on sorting) then sort the output
## TODO this isn't done in the change_format conversion -- isn't it?
## TODO should we deal with other sort orders?
#if $samfile.is_of_type('sam') and $outtype != 'sam' and $outtype != 'count':
	&& samtools sort
		-@ \${GALAXY_SLOTS:-1} -m \${GALAXY_MEMORY_MB:-768}M -T sorttemp
		-O $outtype
		-o 'tmpsam'
		outfile
		&& mv tmpsam outfile
	#if $adv_output.outputpassing == 'yes'
		&& samtools sort
			-@ \${GALAXY_SLOTS:-1} -m \${GALAXY_MEMORY_MB:-768}M -T sorttemp
			-O $outtype
			-o 'tmpsam'
			inv_outfile
			&& mv tmpsam inv_outfile
	#end if
#end if
    ]]></command>
    <inputs>
        <!--TODO do we need to add sorted bam formats also as input? Or are they covered -->
        <param name="samfile" format="sam,bam,cram" type="data" label="SAM/BAM/CRAM data set" />
            <param name="outtype" type="select" argument="-b/-C/-c" label="Output type">
            <help>Select output type. In case of counts only the total number of alignments is returned. All filters are taken into account</help>
            <option value="same" selected="True">Same as input</option>
            <option value="sam">SAM</option>
            <option value="bam">BAM (-b)</option>
            <option value="cram">CRAM (-C)</option>
            <option value="count">Count of alignments (-c)</option>
        </param>
        <conditional name="cond_filter">
            <param name="select_filter" type="select" label="Filter alignment">
                <option value="yes">Yes</option>
                <option value="no" selected="True">No</option>
            </param>
            <when value="yes">
                <conditional name="cond_region">
                    <param name="select_region" type="select" label="Filter by regions">
                        <option value="no" selected="True">No</option>
                        <option value="text">Manualy specify regions</option>
                        <option value="bed">Regions from BED file</option>
                    </param>
                    <when value="no"/>
                    <when value="text">
                        <param name="regions" type="text" optional="false" label="Filter by regions" help="One or more space-separated region specifications to restrict output to only those alignments which overlap the specified region(s)."/>
                    </when>
                    <when value="bed">
                        <param name="bedfile" format="bed" argument="-L" optional="false" type="data" label="Filter by intervals in a bed file" help="Only output alignments overlapping the intervals in the input bed file." />
                    </when>
                </conditional>
                <conditional name="cond_rg">
                    <param name="select_rg" type="select" label="Filter by readgroup">
                        <option value="no" selected="True">No</option>
                        <option value="text">Single read group </option>
                        <option value="file">Read groups from file</option>
                    </param>
                    <when value="no"/>
                    <when value="text">
                        <param name="readgr" type="text" argument="-r" label="Filter by read group" help="Only output alignments in read group." />
                    </when>
                    <when value="file">
                        <param name="rgfile" type="data" format="tabular" argument="-R" label="Filter by read groups in file" help="Output alignments in read groups listed in FILE." />
                    </when>
                </conditional>
                <param name="quality" type="integer" argument="-q" optional="true" min="0" label="Filter by quality" help="Skip alignments with MAPQ smaller than INT." />
                <param name="library" type="text" argument="-l" optional="true" label="Filter by library" help="Only output alignments in library STR" />
                <param name="cigarcons" type="integer" argument="-m" optional="true" min="0" label="Filter by number of CIGAR bases consuming query sequence" help="Only output alignments with number of CIGAR bases consuming query sequence greater than or equal INT." />
                <param name="inclusive_filter" argument="-f" type="select" multiple="True" label="Require that these flags are set">
                    <expand macro="filter_options" />
                </param>
                <param name="exclusive_filter" argument="-F" type="select" multiple="True" label="Exclude reads with any of the following flags set">
                    <expand macro="filter_options" />
                </param>
                <param name="exclusive_filter_all" argument="-G" type="select" multiple="True" label="Exclude reads with all of the following flags set">
                    <expand macro="filter_options" />
                </param>
                <!-- TODO could also make this a text field (comma/space separated) -->
                <repeat name="readtags" title="Filter by read tags">
                    <param name="readtag" type="text" argument="-x" label="Filter by read tag" help="Read tag to exclude from output."/>
                </repeat>
            </when>
            <when value="no"/>
        </conditional>
        <conditional name="cond_subsample">
            <param name="select_subsample" type="select" argument="-s" label="Subsample alignment">
                <option value="yes">Yes</option>
                <option value="no" selected="True">No</option>
            </param>
            <when value="yes">
                <param name="subsample" type="float" optional="False" value="0.5" min="0" max="1" label="Subsampling fraction" help="sets the fraction of templates/pairs to subsample." />
                <param name="seed" type="integer" optional="True" label="Seed for random number generator" help="If empty a random seed is used." />
            </when>
            <when value="no"/>
        </conditional>
        <conditional name="cond_addref">
            <param name="select_addref" type="select" argument="-t/-T"  label="Reference data">
                <help>Reference data as fasta(.gz) or SPACE/TAB delimited tabular with the first two fields contain the reference name and the corresponding sequence length. One of these two options is required for SAM input without @SQ headers. Fasta(.gz) is required whenever writing CRAM output.</help>
                <option value="no" selected="True"></option>
                <option value="history">Use a genome/index from the history</option>
                <option value="cached">Use a built-in genome</option>
            </param>
            <when value="no"/>
            <when value="history">
                <!-- TODO I don't like that users might also upload SAM here (which is also tabular .. but tabular should be allowed) -->
                <!-- TODO planemo complains about fasta.gz -->
                <param name="ref" format="fasta,fasta.gz,fai,tabular" optional="true" type="data" label="Reference FILE">
                </param>
            </when>
            <when value="cached">
                <param name="ref" type="select" label="Using reference genome">
                    <options from_data_table="fasta_indexes">
                        <filter column="1" key="dbkey" ref="samfile" type="data_meta" />
                        <validator message="No reference genome is available for the build associated with the selected input dataset" type="no_options" />
                    </options>
                </param>
            </when>
        </conditional>

        <section name="adv_output" title="Output Options" expanded="false">
            <param name="header" type="select" argument="-h/-H" label="Header options">
                <option value="-h">Include header in SAM output (-h)</option>
                <option value="-H">Return header only (-H)</option>
                <option value="" selected="True">Exclude header</option>
            </param>
            <param name="outputpassing" type="boolean" argument="-U" truevalue="yes" falsevalue="no" checked="false" label="Output alignments not passing the filter" help="Write alignments that are not selected by the various filter options to an extra data set. When this option is used, all alignments (or all alignments intersecting the regions specified) are written to either the output data set or this extra output data set, but never both." />
            <param name="collapsecigar" type="boolean" argument="-B" truevalue="-B" falsevalue="" checked="false" label="Collapse backward CIGAR operation" help="Collapse the backward CIGAR operation." />
        </section>
    </inputs>
    <outputs>
        <!-- TODO do I need an action for dbkey? -->
        <data name="outputsam" format_source="samfile" from_work_dir="outfile" label="${tool.name} on ${on_string}: filtered alignments">
            <filter>outtype != 'count'</filter>
            <change_format>
                <when input="outtype" value="sam" format="sam" />
                <when input="outtype" value="bam" format="bam" />
                <when input="outtype" value="cram" format="cram" />
            </change_format>
        </data>
        <data name="invoutputsam" format_source="samfile" from_work_dir="inv_outfile"  label="${tool.name} on ${on_string}: unfiltered alignments">
            <filter>adv_output['outputpassing'] == 'yes' and outtype != 'count'</filter>
            <change_format>
                <when input="outtype" value="sam" format="sam" />
                <when input="outtype" value="bam" format="bam" />
                <when input="outtype" value="cram" format="cram" />
            </change_format>
        </data>
        <data name="outputcnt" format="txt" from_work_dir="sam" label="${tool.name} on ${on_string}: Counts">
            <filter>outtype == 'count'</filter>
        </data>
    </outputs>
    <!-- TODO -->
    <tests>
        <!-- sam to bam (copied from the sam_to_bam tool) -->
        <test>
            <param name="samfile" ftype="sam" value="sam_to_bam_in1.sam" />
            <param name="outtype" value="bam" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" ftype="fasta" dbkey="equCab2" value="chr_m.fasta" />
            </conditional>
            <output name="outputsam" ftype="bam" file="sam_to_bam_out1.bam" />
        </test>
        <test>
            <param name="samfile" ftype="sam" dbkey="equCab2" value="sam_to_bam_in1.sam" />
            <param name="outtype" value="bam" />
            <conditional name="cond_addref">
                <param name="select_addref" value="cached" />
                <param name="ref" value="equCab2chrM" />
            </conditional>
            <output name="outputsam" ftype="bam" file="sam_to_bam_out2.bam" />
        </test>
        <test>
            <param name="samfile" ftype="sam" value="sam_to_bam_noheader_in2.sam" />
            <param name="outtype" value="bam" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" ftype="fasta" dbkey="equCab2" value="chr_m.fasta" />
            </conditional>
            <output name="outputsam" ftype="bam" file="sam_to_bam_out3.bam" />
        </test>
        <!-- bam to cram + region filter (adapted from bam_to_cram tool)-->
        <!-- TODO these tests fails because of size diff .. maybe due to new version (BUT new file larger) -->
        <test>
            <param name="samfile" value="test.bam" ftype="bam" />
            <param name="outtype" value="cram" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" value="test.fa" />
            </conditional>
            <conditional name="cond_filter">
                <param name="select_filter" value="yes" />
                <conditional name="cond_region">
                    <param name="select_region" value="no"/>
                </conditional>
            </conditional>
            <output name="outputsam" file="test.cram" compare="sim_size" delta="250" />
        </test>
        <test>
            <param name="samfile" value="test.sam" ftype="sam" />
            <param name="outtype" value="cram" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" value="test.fa" />
            </conditional>
            <conditional name="cond_filter">
                <param name="select_filter" value="yes" />
                <conditional name="cond_region">
                    <param name="select_region" value="no"/>
                </conditional>
            </conditional>
            <output name="outputsam" file="test.cram" compare="sim_size" delta="250" />
        </test>
        <test>
            <param name="samfile" value="test.bam" ftype="bam" />
            <param name="outtype" value="cram" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" value="test.fa" />
            </conditional>
            <conditional name="cond_filter">
                <param name="select_filter" value="yes" />
                <conditional name="cond_region">
                    <param name="select_region" value="text"/>
                    <param name="regions" value="CHROMOSOME_I" />
                </conditional>
            </conditional>
            <output name="outputsam" file="test.cram" compare="sim_size" delta="250" />
        </test>
        <!-- bam to sam + header options (adapted from bam_to_sam tool)-->
        <test>
            <param ftype="bam" name="samfile" value="bam_to_sam_in1.bam" />
            <param name="outtype" value="sam" />
            <param name="header" value="-h" />
            <output file="bam_to_sam_out1.sam" name="outputsam" />
        </test>
        <test>
            <param ftype="bam" name="samfile" value="bam_to_sam_in1.bam" />
            <param name="outtype" value="sam" />
            <param name="header" value="-H" />
            <output file="bam_to_sam_out2.sam" name="outputsam" />
        </test>
        <test>
            <param ftype="bam" name="samfile" value="bam_to_sam_in1.bam" />
            <param name="outtype" value="sam" />
            <param name="header" value="" />
            <output file="bam_to_sam_out3.sam" name="outputsam" />
        </test>
        <!-- cram to bam + region (adapted from cram_to_bam tool)-->
        <!-- TODO the test with cached reference does not work -->
        <test>
            <param name="samfile" value="test.cram" ftype="cram" />
            <param name="outtype" value="bam" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" value="test.fa" />
            </conditional>
            <output name="outputsam" file="test.bam" compare="sim_size" delta="250" />
        </test>
        <test>
            <param name="samfile" value="test.cram" ftype="cram" />
            <param name="outtype" value="bam" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" value="test.fa" />
            </conditional>
            <param name="target_region" value="region" />
            <param name="region_string" value="CHROMOSOME_I" />
            <output name="outputsam" file="test.bam" compare="sim_size" delta="250" />
        </test>
        <test>
            <param name="samfile" value="test.cram" ftype="cram" />
            <param name="outtype" value="bam" />
            <conditional name="cond_addref">
                <param name="select_addref" value="history" />
                <param name="ref" value="test.fa" />
            </conditional>
            <param name="target_region" value="regions_bed_file" />
            <param name="regions_bed_file" value="test.bed" ftype="bed" />

            <output name="outputsam" file="test.bam" compare="sim_size" delta="250" />
        </test>
        <test>
            <param name="samfile" value="test2.cram" dbkey="equCab2" ftype="cram" />
            <param name="outtype" value="bam" />
            <conditional name="cond_addref">
                <param name="select_addref" value="cached" />
                <param name="ref" value="equCab2chrM" />
            </conditional>
            <conditional name="cond_region">
                <param name="select_region" value="no"/>
            </conditional>
            <output name="outputsam" file="sam_to_bam_out2.bam" compare="sim_size" delta="250" />
        </test>
    </tests>
    <help>
**What it does**

With no options or regions specified, prints all alignments in the specified input alignment file (in SAM, BAM, or CRAM format) to standard output in SAM format (with no header).

You may specify one or more space-separated region specifications after the input filename to restrict output to only those alignments which overlap the specified region(s). Use of region specifications requires a coordinate-sorted and indexed input file (in BAM or CRAM format).

Regions can be specified as: RNAME[:STARTPOS[-ENDPOS]] and all position coordinates are 1-based.

Important note: when multiple regions are given, some alignments may be output multiple times if they overlap more than one of the specified regions.

Examples of region specifications:

- chr1 Output all alignments mapped to the reference sequence named 'chr1' (i.e. @SQ SN:chr1).
- chr2:1000000 The region on chr2 beginning at base position 1,000,000 and ending at the end of the chromosome.
- chr3:1000-2000 The 1001bp region on chr3 beginning at base position 1,000 and ending at base position 2,000 (including both end positions).
- '*' Output the unmapped reads at the end of the file. (This does not include any unmapped reads placed on a reference sequence alongside their mapped mates.)
- . Output all alignments. (Mostly unnecessary as not specifying a region at all has the same effect.)


The -b, -C, -1, -u, -h, -H, and -c options change the output format from the default of headerless SAM, and the -o and -U options set the output file name(s).

The -t and -T options provide additional reference data. One of these two options is required when SAM input does not contain @SQ headers, and the -T option is required whenever writing CRAM output.

The -L, -r, -R, -q, -l, -m, -f, and -F options filter the alignments that will be included in the output to only those alignments that match certain criteria.

The -x, -B, and -s options modify the data which is contained in each alignment.

Finally, the -@ option can be used to allocate additional threads to be used for compression, and the -? option requests a long help message.
    </help>
    <expand macro="citations"/>
</tool>
