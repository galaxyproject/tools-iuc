<!-- TODO version?-->
<tool id="samtools_view" name="View" version="2.0.1">
    <description>View Reformat, filter, or subsample alignments in SAM/BAM/CRAM format</description>
    <macros>
    <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <expand macro="version_command"/>
    <command><![CDATA[
	samtools view
	-@ \${GALAXY_SLOTS:-1}

	## output type options
	#if $cond_outtype.outtype == 'bam'
		-b
		$cond_outtype.bamtype
	else if $cond_outtype.outtype == 'cram'
		-C
	#end if

	## filter options (regions filter is the last parameter)
	#if $cond_filter.select_filter == 'yes'
		#if str( $cond_filter.bedfile ) != 'None'
			-L '$cond_filter.bedfile'
		#end if
		#if str( $cond_filter.readgr ) != ''
			-r '$cond_filter.readgr'
		#end if
		#if str ( $cond_filter.rgfile ) != 'None'
			-R '$cond_filter.rgfile'
		#end if
		#if int( $cond_filter.quality ) > 0
			-q $cond_filter.quality
		#end if
		#if str( $cond_filter.library ) != ''
			-l '$cond_filter.library'
		#end if
		#if str( $cond_filter.cigarcons ) != ''
			-m $cond_filter.cigarcons
		#end if
		#if str($inclusive_filter) != 'None':
			#set $filter = $inclusive_filter
			@FLAGS@
			-f $flags
		#end if
		#if str($exclusive_filter) != 'None':
			#set $filter = $exclusive_filter
			@FLAGS@
			-F $flags
		#end if
		#if str($exclusive_filter) != 'None':
			#set $filter = $exclusive_filter_all
			@FLAGS@
			-G $flags
		#end if

		#for $i, $s in enumerate($cond_filter.readtags)
    -x '${s.readtag}'
#end for
	#end if
	#if $cond_subsample.select_subsample == 'yes'
		-s $cond_subsample.seed\.$cond_subsample.subsample
	#end if

	## output options 
	$adv_output.header
	$adv_output.headeronly
	$adv_output.count
	$adv_output.collapsecigar
	#if $adv_output.outputpassing == 'yes'
		-U inv_sam 
	#end if
	-o sam

	## additional reference data
	#if $cond_addrefs.select_addrefs == 'yes'
		#if str( $cond_addrefs.fastaref ) != 'None'
			-T $cond_addrefs.fastaref
		#end if
		#if str( $cond_addrefs.refsize ) != 'None'
			-t $cond_addrefs.refsize
		#end if
	#end if

	$samfile
	
	## region filter need to be at the end
	#if $cond_filter.select_filter == 'yes' and str( $cond_filter.regions ) != ''
		'$cond_filter.regions'
#end if

## if subsampling is activated then sort again OR mark as unsorted
    ]]></command>
    <inputs>
        <!--TODO do we need to add sorted bam formats also as input? -->
        <param name="samfile" format="sam,bam,cram" type="data" label="SAM/BAM/CRAM data set" />
        <conditional name="cond_outtype">
            <param name="outtype" type="select" argument="-b/-C" label="Output type">
                <option value="" selected="True">SAM</option>
                <option value="bam">BAM (-b)</option>
                <!-- TODO -T seems to take faidx .. can we have this from bam/cram metadata -->
                <option value="cram">CRAM (-C) - requires to provide reference size data set</option>
            </param>
            <when value=""/>
            <when value="bam">
		    <param name="bamtype" type="select" argument="-l/-u" label="BAM compression type">
                    <option value="" selected="True">default</option>
                    <option value="-l">fast BAM compression (-l)</option>
                    <option value="-U">uncompressed BAM (-u)</option>
                </param>
            </when>
            <when value="cram">
            </when>
        </conditional>
        <conditional name="cond_filter">
            <param name="select_filter" type="select" label="Filter alignment">
                <option value="yes">Yes</option>
                <option value="no" selected="True">No</option>
            </param>
            <when value="yes">
                <!-- TODO either regions or bedfile -->
                <param name="regions" optional="true" type="text" label="Filter by regions" help="Specify one or more space-separated region specifications to restrict output to only those alignments which overlap the specified region(s)."/>
                <param name="bedfile" format="bed" argument="-L" optional="true" type="data" label="Filter by intervals in a bed file" help="Only output alignments overlapping the intervals in the input bed file." />
                <!-- TODO either readgr or rgfile -->
                <param name="readgr" type="text" optional="true" argument="-r" label="Filter by read group" help="Only output alignments in read group." />
                <param name="rgfile" type="data" format="tabular" optional="true" argument="-R" label="Filter by read groups in file" help="Output alignments in read groups listed in FILE." />
                <param name="quality" type="integer" argument="-q" optional="true" min="0" label="Filter by quality" help="Skip alignments with MAPQ smaller than INT." />
                <param name="library" type="text" argument="-l" optional="true" label="Filter by library" help="Only output alignments in library STR" />
                <param name="cigarcons" type="integer" argument="-m" optional="true" min="0" label="Filter by number of CIGAR bases consuming query sequence" help="Only output alignments with number of CIGAR bases consuming query sequence greater than or equal INT." />
                <param name="inclusive_filter" argument="-f" type="select" multiple="True" label="Require that these flags are set">
                    <expand macro="filter_options" />
                </param>
                <param name="exclusive_filter" argument="-F" type="select" multiple="True" label="Exclude reads with any of the following flags set">
                    <expand macro="filter_options" />
                </param>
                <param name="exclusive_filter_all" argument="-G" type="select" multiple="True" label="Exclude reads with all of the following flags set">
                    <expand macro="filter_options" />
                </param>
                <!-- TODO could also make this a text field (comma/space separated) -->
                <repeat name="readtags" title="Filter by read tags">
                    <param name="readtag" type="text" argument="-x" label="Filter by read tag" help="Read tag to exclude from output."/>
                </repeat>
            </when>
            <when value="no"/>
        </conditional>
        <conditional name="cond_subsample">
            <param name="select_subsample" type="select" argument="-s" label="Subsample alignment">
                <option value="yes">Yes</option>
                <option value="no" selected="True">No</option>
            </param>
            <when value="yes">
                <param name="subsample" optional="true" type="float" min="0" max="1" label="Subsampling fraction" help="sets the fraction of templates/pairs to subsample. (-s)" />
                <param name="seed" type="integer" value="0" label="Seed for random number generator" help="(-s)" />
            </when>
            <when value="no"/>
        </conditional>

        <conditional name="cond_addrefs">
            <param name="select_addrefs" type="select"  label="Provide additional reference data" help="One of these two options is required when SAM input does not contain @SQ headers, and the -T option is required whenever writing CRAM output.">
                <option value="yes">Yes</option>
                <option value="no" selected="True">No</option>
            </param>
            <when value="yes">
                <param name="fastaref" format="fasta,fai" argument="(-T)" optional="true" type="data" label="FASTA format reference FILE" help="FASTA format reference FILE, optionally compressed by bgzip and ideally indexed by samtools faidx. If an index is not present, one will be generated for you." />
                <param name="refsize" format="tabular" argument="(-t)" optional="true" type="data" label="Reference sizes">
                    <help>The file supplied with `-t' is SPACE/TAB delimited with the first two fields of each line consisting of the reference name and the corresponding sequence length. The `.fai' file generated by `samtools faidx' is suitable for use as this file. This may be an empty file if reads are unaligned.
                    </help>
                </param>
            </when>
            <when value="no"/>
        </conditional>

        <section name="adv_output" title="Output Options" expanded="false">
            <param name="header" type="boolean" argument="(-h)" truevalue="-h" falsevalue="" checked="false" label="Include the header in the output" />
            <param name="headeronly" type="boolean" argument="(-H)" truevalue="-H" falsevalue="" checked="false" label="Output the header only." />
            <param name="count" type="boolean" argument="-c" truevalue="-c" falsevalue="" checked="false" label="Return count of alignments only." help="Instead of printing the alignments, only count them and print the total number. All filters, ie. for flags and map quality are taken into account" />
            <param name="outputpassing" type="boolean" argument="-U" truevalue="yes" falsevalue="no" checked="false" label="Output alignments not passing the filter" help="Write alignments that are not selected by the various filter options to an extra data set. When this option is used, all alignments (or all alignments intersecting the regions specified) are written to either the output data set or this extra output data set, but never both." />
            <param name="collapsecigar" type="boolean" argument="-B" truevalue="-B" falsevalue="" checked="false" label="Collapse backward CIGAR operation" help="Collapse the backward CIGAR operation." />
        </section>
    </inputs>
    <outputs>
        <!-- TODO change_format OK? -->
        <!-- TODO when subsampling -> becomes unsortedchange_format OK? -->
        <!-- TODO do I need an action for dbkey? -->
        <data name="outputsam" format="sam" from_work_dir="sam" label="${tool.name} on ${on_string}: SAM">
            <filter>adv_output['count']</filter>
            <change_format>
                <when input="cond_outtype.outtype" value="cram" format="cram" />
                <when input="cond_outtype.outtype" value="bam" format="bam" />
            </change_format>
        </data>
        <data name="invoutputsam" format="sam" from_work_dir="inv_sam"  label="${tool.name} on ${on_string}: SAM not filtered">
            <filter>adv_output['outputpassing'] == 'yes' and adv_output['count']</filter>
            <change_format>
                <when input="cond_outtype.outtype" value="cram" format="cram" />
                <when input="cond_outtype.outtype" value="bam" format="bam" />
            </change_format>
        </data>
        <data name="outputcnt" format="txt" from_work_dir="sam" label="${tool.name} on ${on_string}: Count">
            <filter>adv_output['count'] == '-c'</filter>
        </data>
    </outputs>
    <!-- TODO -->
    <tests>
        <test>
            <param name="input1" value="1.bam" ftype="bam" />
            <output name="outputsam" file="1_sort.bam" ftype="bam" sort="True"/>
        </test>
        <test>
            <param name="input1" value="1.bam" ftype="bam" />
            <param name="sort_mode" value="-n"/>
            <output name="outputsam" file="1_sort_read_names.bam" ftype="bam" sort="True"/>
        </test>
    </tests>
    <help>
**What it does**

With no options or regions specified, prints all alignments in the specified input alignment file (in SAM, BAM, or CRAM format) to standard output in SAM format (with no header).

You may specify one or more space-separated region specifications after the input filename to restrict output to only those alignments which overlap the specified region(s). Use of region specifications requires a coordinate-sorted and indexed input file (in BAM or CRAM format).

Regions can be specified as: RNAME[:STARTPOS[-ENDPOS]] and all position coordinates are 1-based.

Important note: when multiple regions are given, some alignments may be output multiple times if they overlap more than one of the specified regions.

Examples of region specifications:

- chr1 Output all alignments mapped to the reference sequence named 'chr1' (i.e. @SQ SN:chr1). 
- chr2:1000000 The region on chr2 beginning at base position 1,000,000 and ending at the end of the chromosome. 
- chr3:1000-2000 The 1001bp region on chr3 beginning at base position 1,000 and ending at base position 2,000 (including both end positions). 
- '*' Output the unmapped reads at the end of the file. (This does not include any unmapped reads placed on a reference sequence alongside their mapped mates.) 
- . Output all alignments. (Mostly unnecessary as not specifying a region at all has the same effect.) 


The -b, -C, -1, -u, -h, -H, and -c options change the output format from the default of headerless SAM, and the -o and -U options set the output file name(s).

The -t and -T options provide additional reference data. One of these two options is required when SAM input does not contain @SQ headers, and the -T option is required whenever writing CRAM output.

The -L, -r, -R, -q, -l, -m, -f, and -F options filter the alignments that will be included in the output to only those alignments that match certain criteria.

The -x, -B, and -s options modify the data which is contained in each alignment.

Finally, the -@ option can be used to allocate additional threads to be used for compression, and the -? option requests a long help message. 
    </help>
    <expand macro="citations"/>
</tool>
