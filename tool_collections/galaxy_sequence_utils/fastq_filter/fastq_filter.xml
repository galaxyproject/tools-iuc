<tool id="fastq_filter" name="Filter FASTQ" version="@TOOL_VERSION@">
    <description>reads by quality score and length</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <edam_topics>
        <edam_topic>topic_0622</edam_topic>
    </edam_topics>
    <edam_operations>
        <edam_operation>operation_3695</edam_operation>
    </edam_operations>
    <command><![CDATA[
gx-fastq-filter '$input_file' '$fastq_filter_file' '$output_file' '$output_file.files_path' '${input_file.extension[len( 'fastq' ):]}'
    ]]></command>
    <configfiles>
        <configfile name="fastq_filter_file"><![CDATA[
def fastq_read_pass_filter(fastq_read):

    def mean(score_list):
        return float(sum(score_list)) / float(len(score_list))

    if len(fastq_read) < $min_size:
        return False
    if $max_size > 0 and len(fastq_read) > $max_size:
        return False
    num_deviates = $max_num_deviants
    qual_scores = fastq_read.get_decimal_quality_scores()
    for qual_score in qual_scores:
        if qual_score < $min_quality or ($max_quality > 0 and qual_score > $max_quality):
            if num_deviates == 0:
                return False
            else:
                num_deviates -= 1
#if not $paired_end:
    qual_scores_split = [qual_scores]
#else:
    qual_scores_split = [qual_scores[0:int(len(qual_scores) / 2)], qual_scores[int(len(qual_scores) / 2): ]]
#end if
#for $fastq_filter in $fastq_filters:
    for split_scores in qual_scores_split:
        left_column_offset = $fastq_filter['offset_type']['left_column_offset']
        right_column_offset = $fastq_filter['offset_type']['right_column_offset']
#if $fastq_filter['offset_type']['base_offset_type'] == 'offsets_percent':
        left_column_offset = int(round(float(left_column_offset) / 100.0 * float(len(split_scores))))
        right_column_offset = int(round(float(right_column_offset) / 100.0 * float(len(split_scores))))
#end if
        if right_column_offset > 0:
            split_scores = split_scores[left_column_offset:-right_column_offset]
        else:
            split_scores = split_scores[left_column_offset:]
        if split_scores:  ##if a read doesn't have enough columns, it passes by default
            if not (${fastq_filter['score_operation']}(split_scores) $fastq_filter['score_comparison'] $fastq_filter['score']):
                return False
#end for
    return True
        ]]></configfile>
    </configfiles>
    <inputs>
        <param name="input_file" type="data" format="fastqsanger,fastqcssanger,fastqsanger.gz,fastqcssanger.gz,fastqsanger.bz2,fastqcssanger.bz2" label="FASTQ File" help="Requires groomed data: if your data does not appear here try using the FASTQ groomer"/>
        <param name="min_size" type="integer" min="0" value="0" label="Minimum size" />
        <param name="max_size" type="integer" value="0" label="Maximum size" help="A maximum size less than 1 indicates no limit"/>
        <param name="min_quality" type="float" value="0" label="Minimum quality"/>
        <param name="max_quality" type="float" value="0" label="Maximum quality" help="A maximum quality less than 1 indicates no limit"/>
        <param name="max_num_deviants" type="integer" min="0" value="0" label="Maximum number of bases allowed outside of quality range" />
        <param name="paired_end" type="boolean" truevalue="paired_end" falsevalue="single_end" checked="false" label="This is paired end data" />
        <repeat name="fastq_filters" title="Quality Filter on a Range of Bases" help="The above settings do not apply to these filters">
            <conditional name="offset_type">
                <param name="base_offset_type" type="select" label="Define Base Offsets as" help="Use Absolute for fixed length reads (Illumina, SOLiD)&lt;br&gt;Use Percentage for variable length reads (Roche/454)">
                    <option value="offsets_absolute" selected="true">Absolute Values</option>
                    <option value="offsets_percent">Percentage of Read Length</option>
                </param>
                <when value="offsets_absolute">
                    <param name="left_column_offset" type="integer" min="0" value="0" label="Offset from 5' end" help="Values start at 0, increasing from the left" />
                    <param name="right_column_offset" type="integer" min="0" value="0" label="Offset from 3' end" help="Values start at 0, increasing from the right" />
                </when>
                <when value="offsets_percent">
                    <param name="left_column_offset" type="float" min="0" max="100" value="0" label="Offset from 5' end" />
                    <param name="right_column_offset" type="float" min="0" max="100" value="0" label="Offset from 3' end" />
                </when>
            </conditional>
            <param name="score_operation" type="select" label="Aggregate read score for specified range">
                <option value="min" selected="true">min score</option>
                <option value="max">max score</option>
                <option value="sum">sum of scores</option>
                <option value="mean">mean of scores</option>
            </param>
            <param name="score_comparison" type="select" label="Keep read when aggregate score is">
                <option value="&gt;">&gt;</option>
                <option value="&gt;=" selected="true">&gt;=</option>
                <option value="==">==</option>
                <option value="&lt;">&lt;</option>
                <option value="&lt;=">&lt;=</option>
                <sanitizer sanitize="false"/>
            </param>
            <param name="score" type="float" value="0" label="Quality score" />
        </repeat>
    </inputs>
    <outputs>
        <data name="output_file" format_source="input_file" />
    </outputs>
    <tests>
        <!-- Do nothing filter -->
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="0"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="0"/>
            <output name="output_file" file="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger" />
        </test>
        <!-- Do nothing filter compressed -->
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger.gz" ftype="fastqsanger.gz"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="0"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="0"/>
            <output name="output_file" file="sanger_full_range_original_sanger.fastqsanger.gz" ftype="fastqsanger.gz" decompress="true"/>
        </test>
        <!-- crippled input types prevent this test <test>
            <param name="input_file" value="solexa_full_range_original_solexa.fastqsolexa" ftype="fastqsolexa"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="-5"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="-5"/>
            <output name="output_file" file="solexa_full_range_original_solexa.fastqsolexa" ftype="fastqsolexa"/>
        </test> -->
        <!-- No trim, so does not remove Adapter from cssanger -->
        <test>
            <param name="input_file" value="sanger_full_range_as_cssanger.fastqcssanger" ftype="fastqcssanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="0"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="0"/>
            <output name="output_file" file="sanger_full_range_as_cssanger.fastqcssanger" ftype="fastqcssanger" />
        </test>
        <!-- Remove all Filter -->
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="1"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="0"/>
            <output name="output_file" file="empty_file.dat" ftype="fastqsanger" />
        </test>
        <!-- crippled input types prevent this test <test>
            <param name="input_file" value="solexa_full_range_original_solexa.fastqsolexa" ftype="fastqsolexa"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="-4"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="-5"/>
            <output name="output_file" file="empty_file.dat" ftype="fastqsolexa" />
        </test> -->
        <!-- Keep all by allowing 1 deviant -->
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="1"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="1"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="0"/>
            <output name="output_file" file="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger" />
        </test>
        <!-- crippled input types prevent this test<test>
            <param name="input_file" value="solexa_full_range_original_solexa.fastqsolexa" ftype="fastqsolexa"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="-5"/>
            <param name="max_quality" value="61"/>
            <param name="max_num_deviants" value="1"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="0"/>
            <param name="right_column_offset" value="0"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="-5"/>
            <output name="output_file" file="solexa_full_range_original_solexa.fastqsolexa" ftype="fastqsolexa" />
        </test> -->
        <!-- Filter inner range -->
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="0"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="1"/>
            <param name="right_column_offset" value="1"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="1"/>
            <output name="output_file" file="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger" />
        </test>
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="0"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_absolute"/>
            <param name="left_column_offset" value="1"/>
            <param name="right_column_offset" value="1"/>
            <param name="score_operation" value="max"/>
            <param name="score_comparison" value="&lt;="/>
            <param name="score" value="92"/>
            <output name="output_file" file="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger" />
        </test>
        <!-- percent based offsets -->
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="0"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="false"/>
            <param name="base_offset_type" value="offsets_percent"/>
            <param name="left_column_offset" value="1.075"/>
            <param name="right_column_offset" value="1.075"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="1"/>
            <output name="output_file" file="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger" />
        </test>
        <test>
            <param name="input_file" value="sanger_full_range_original_sanger.fastqsanger" ftype="fastqsanger"/>
            <param name="min_size" value="0"/>
            <param name="max_size" value="0"/>
            <param name="min_quality" value="0"/>
            <param name="max_quality" value="0"/>
            <param name="max_num_deviants" value="0"/>
            <param name="paired_end" value="true"/>
            <param name="base_offset_type" value="offsets_percent"/>
            <param name="left_column_offset" value="1"/>
            <param name="right_column_offset" value="1"/>
            <param name="score_operation" value="min"/>
            <param name="score_comparison" value="&gt;="/>
            <param name="score" value="1"/>
            <output name="output_file" file="empty_file.dat" ftype="fastqsanger" />
        </test>
    </tests>
    <help><![CDATA[
This tool allows you to build complex filters to be applied to each read in a FASTQ file.

**Basic Options:**
    * You can specify a minimum and maximum read lengths.
    * You can specify minimum and maximum per base quality scores, with optionally specifying the number of bases that are allowed to deviate from this range (default of 0 deviant bases).
    * If your data is paired-end, select the proper checkbox; this will cause each read to be internally split down the middle and filters applied to each half using the offsets specified.

**Advance Options:**
    * You can specify any number of advanced filters.
    * 5' and 3' offsets are defined, starting at zero, increasing from the respective end of the reads. For example, a quality string of "ABCDEFG", with 5' and 3' offsets of 1 and 1, respectively, specified will yield "BCDEF".
    * You can specify either absolute offset values, or percentage offset values. *Absolute Values* based offsets are useful for fixed length reads (e.g. Illumina or SOLiD data). *Percentage of Read Length* based offsets are useful for variable length reads (e.g. 454 data). When using the percent-based method, offsets are rounded to the nearest integer.
    * The user specifies the aggregating action (min, max, sum, mean) to perform on the quality score values found between the specified offsets to be used with the user defined comparison operation and comparison value.
    * If a set of offsets is specified that causes the remaining quality score list to be of length zero, then the read will **pass** the quality filter unless the size range filter is used to remove these reads.

-----

.. class:: warningmark

Adapter bases in color space reads are excluded from filtering.
    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btq281</citation>
    </citations>
</tool>
