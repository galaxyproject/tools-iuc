<?xml version="1.0"?>
<tool_dependency>
    <package name="golang" version="1.5.1">
        <repository name="package_golang_1_5_1" owner="iuc" prior_installation_required="True" />
    </package>
    <package name="golang_test" version="1.0">
        <install version="1.0">
            <actions>
                <action type="download_by_url">https://github.com/erasche/bin-fasta/archive/415756dcd3573f330a39b073c9a314b840c189e0/master.zip</action>

              <action type="set_environment_for_install">
                  <repository name="package_golang_1_5_1" owner="iuc">
                    <package name="golang" version="1.5.1" />
                  </repository>
              </action>

              <action type="shell_command">
                  <!--
                       For each command, you'll need to set your GOPATH to some (local/temporary) directory to avoid
                       interfering with other packages.

                       GOROOT is the root of the golang installation. That variable is managed for you by the golang
                       package provided for Galaxy. GOPATH is the local source tree that all the go commands use to
                       locate source code and packages and figure out what to build.

                       We set GOPATH to ../ because the Galaxy package build process is done in a temporary directory.
                       When the very first action is a "download_by_url" type action, Galaxy automatically downloads that
                       file and IF there is only one directory in the archive, automatically `cd`s into it. Thus we're
                       one level into the tmp directory that Galaxy provides us, and we want to use the parent directory
                       for the GOPATH src/pkg/other folders.

                       Once we've set the gopath, we need to fetch dependencies. Since GO hasn't quite got vendoring
                       worked out yet... this portion will change with time. Currently I'm in the downloaded archive
                       from GitHub's folder, and we run the `go list ` magic command which prints out every imported
                       dependencies. We can then `go get` these in preparation for building our package.

                       Finally we build the output binary we want. The example repository has a single .go file so `go
                       build -o` is fine for me. Others might use other build systems (e.g. make). The important point
                       is a single binary is produced which we can later move to $INSTALL_DIR

                    -->
                  <![CDATA[
                export GOPATH=`pwd`/.. && \
                go get $(go list -f '{{ join .Imports " "  }}' .) && \
                go build -o bin_fasta bin_fasta.go
                  ]]>
              </action>

                <action type="move_file">
                    <source>bin_fasta</source>
                    <destination>$INSTALL_DIR/bin</destination>
                </action>
            </actions>
        </install>
        <readme>Testing go compilation</readme>
    </package>
</tool_dependency>
