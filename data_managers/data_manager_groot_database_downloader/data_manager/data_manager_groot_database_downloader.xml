<tool id="groot_database_downloader" name="Groot get" tool_type="manage_data" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description> Download pre-clustered ARG database that are ready to be indexed</description>
    <macros>
        <token name="@TOOL_VERSION@">1.1.2</token>
        <token name="@VERSION_SUFFIX@">1</token>
        <token name="@PROFILE@">22.05</token>
    </macros>
    <requirements>
        <requirement type="package" version="3.12">python</requirement>
        <requirement type="package" version="2024.6.2">ca-certificates</requirement>
        <requirement type="package" version="@TOOL_VERSION@">groot</requirement>
    </requirements>
    <command><![CDATA[
        if [ -f '/usr/local/ssl/cacert.pem' ] ; then export SSL_CERT_FILE='/usr/local/ssl/cacert.pem' ; fi &&
        mkdir -p '$out_file.extra_files_path' &&
        groot get -d '$database' --identity '$identity' &&
        mv ${database}.${identity} '$out_file.extra_files_path' &&
        cp '$dmjson' '$out_file'
    ]]></command>
    <configfiles>
        <configfile name="dmjson"><![CDATA[
#from datetime import date
{
  "data_tables":{
    "groot_database":[
      {
        "value": "$database.$identity-@TOOL_VERSION@-#echo date.today().strftime('%d%m%Y')#",
        "name": "$database ($identity percent identity)",
        "path": "$database.$identity",
        "version": "@TOOL_VERSION@"
      }
    ]
  }
}]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="database" type="select" label="Database name">
            <option value="arg-annot" selected="true">ARG-annot</option>
            <option value="resfinder">Resfinder</option>
            <option value="card">CARD</option>
            <option value="groot-db">Groot-db (combine sequences in ARG-annot, Resfinder and CARD)</option>
            <option value="groot-core-db">Groot-core-db (same as groot-db but one copy of each sequence is kept and then this collection is clustered at given percentage identity)</option>
         </param>
         <param name="identity" type="select" label="Percent Identity">
            <option value="90" selected="true">90% identity</option>
         </param>
    </inputs>
    <outputs>
        <data name="out_file" format="data_manager_json" label="${tool.name}"/>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="database" value="arg-annot"/>
            <param name="identity" value="90"/>
            <output name="out_file">
                <assert_contents>
                    <has_text text='"groot_database":'/>
                    <has_text text='"version": "1.1.2"'/>
                    <has_text_matching expression='"value": "arg-annot.90-1.1.2-[0-9]{8}"'/>
                    <has_text text='"name": "arg-annot (90 percent identity)"'/>
                    <has_text text='"path": "arg-annot.90"'/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
The groot get subcommand is used to download a pre-clustered ARG database that is ready to be indexed.
]]></help>
    <citations>
        <citation type="doi">10.5281/zenodo.1217889</citation>
    </citations>
</tool>